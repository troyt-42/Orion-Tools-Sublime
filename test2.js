{ parent:
   { cx: [Circular],
     options:
      { getFile: [Function],
        async: true,
        defs: [Object],
        plugins: [Object],
        debug: true,
        projectDir: 'C:\\Users\\IBM_ADMIN\\AppData\\Roaming\\Sublime Text 3\\Packages\\orion_tools_sublime\\node_modules\\tern',
        dependencyBudget: 20000,
        stripCRs: false,
        fetchTimeout: 1000,
        reuseInstances: true },
     handlers: {},
     files:
      [ [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object] ],
     fileMap:
      { 'C:\Users\IBM_ADMIN\git\org.eclipse.orion.client\bundles\org.eclipse.orion.client.core\web\orion\Deferred.js': [Object],
        'C:\Users\IBM_ADMIN\git\org.eclipse.orion.client\bundles\org.eclipse.orion.client.core\web\orion\i18nUtil.js': [Object],
        'C:\Users\IBM_ADMIN\git\org.eclipse.orion.client\bundles\org.eclipse.orion.client.core\web\orion\objects.js': [Object],
        'C:\Users\IBM_ADMIN\git\org.eclipse.orion.client\bundles\org.eclipse.orion.client.javascript\web\estraverse\estraverse.js': [Object],
        'C:\Users\IBM_ADMIN\git\org.eclipse.orion.client\bundles\org.eclipse.orion.client.javascript\web\javascript\finder.js': [Object],
        'C:\Users\IBM_ADMIN\git\org.eclipse.orion.client\bundles\org.eclipse.orion.client.javascript\web\eslint\conf\environments.js': [Object],
        'C:\Users\IBM_ADMIN\git\org.eclipse.orion.client\bundles\org.eclipse.orion.client.javascript\web\javascript\commands\refsCommand.js': [Object],
        'C:\Users\IBM_ADMIN\git\org.eclipse.orion.client\bundles\org.eclipse.orion.client.javascript\web\javascript\nls\messages.js': [Object] },
     needsPurge: [],
     budgets: {},
     uses: 1,
     pending: 0,
     asyncError: null,
     passes:
      { preCondenseReach: [Object],
        postLoadDef: [Object],
        completion: [Object],
        typeAt: [Object],
        postParse: [Object],
        postInfer: [Object] },
     defs: [ [Object], [Object] ],
     _node:
      { modules: {},
        options: {},
        currentFile: null,
        currentRequires: [],
        currentOrigin: null,
        server: [Circular] },
     _handlers: { beforeLoad: [Object], afterLoad: [Object], reset: [Object] },
     _completeStrings: { maxLen: 15, seen: [Object] },
     jsdocTypedefs: {},
     _docComment: { weight: undefined, fullDocs: undefined } },
  props:
   { getPrototypeOf: [ [Object] ],
     create: [ [Object], [Object] ],
     defineProperty: [ [Object] ],
     defineProperties: [ [Object] ],
     getOwnPropertyDescriptor: [ [Object] ],
     keys: [ [Object] ],
     getOwnPropertyNames: [ [Object] ],
     seal: [ [Object] ],
     isSealed: [ [Object] ],
     freeze: [ [Object] ],
     isFrozen: [ [Object] ],
     preventExtensions: [ [Object] ],
     isExtensible: [ [Object] ],
     prototype:
      [ [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object] ],
     toString: [ [Object], [Object], [Object] ],
     toLocaleString: [ [Object] ],
     valueOf: [ [Object] ],
     hasOwnProperty: [ [Object] ],
     propertyIsEnumerable: [ [Object] ],
     isPrototypeOf: [ [Object] ],
     apply: [ [Object] ],
     call: [ [Object] ],
     bind: [ [Object], [Object], [Object] ],
     isArray: [ [Object], [Object] ],
     concat: [ [Object], [Object], [Object] ],
     join: [ [Object], [Object] ],
     splice: [ [Object] ],
     pop: [ [Object] ],
     push: [ [Object], [Object] ],
     shift: [ [Object] ],
     unshift: [ [Object], [Object] ],
     slice: [ [Object], [Object], [Object] ],
     reverse: [ [Object], [Object] ],
     sort: [ [Object] ],
     indexOf: [ [Object], [Object] ],
     lastIndexOf: [ [Object], [Object] ],
     every: [ [Object] ],
     some: [ [Object] ],
     filter: [ [Object] ],
     forEach: [ [Object] ],
     map: [ [Object] ],
     reduce: [ [Object] ],
     reduceRight: [ [Object] ],
     fromCharCode: [ [Object] ],
     charAt: [ [Object] ],
     charCodeAt: [ [Object] ],
     substring: [ [Object] ],
     substr: [ [Object] ],
     trim: [ [Object] ],
     toUpperCase: [ [Object] ],
     toLowerCase: [ [Object] ],
     toLocaleUpperCase: [ [Object] ],
     toLocaleLowerCase: [ [Object] ],
     split: [ [Object] ],
     localeCompare: [ [Object] ],
     match: [ [Object] ],
     replace: [ [Object] ],
     search: [ [Object], [Object] ],
     toFixed: [ [Object] ],
     toExponential: [ [Object] ],
     toPrecision: [ [Object] ],
     exec: [ [Object], [Object], [Object] ],
     test: [ [Object] ],
     parse: [ [Object], [Object], [Object], [Object] ],
     UTC: [ [Object] ],
     now: [ [Object] ],
     toUTCString: [ [Object] ],
     toISOString: [ [Object] ],
     toDateString: [ [Object] ],
     toTimeString: [ [Object] ],
     toLocaleDateString: [ [Object] ],
     toLocaleTimeString: [ [Object] ],
     getTime: [ [Object] ],
     getFullYear: [ [Object] ],
     getYear: [ [Object] ],
     getMonth: [ [Object] ],
     getUTCMonth: [ [Object] ],
     getDate: [ [Object] ],
     getUTCDate: [ [Object] ],
     getDay: [ [Object] ],
     getUTCDay: [ [Object] ],
     getHours: [ [Object] ],
     getUTCHours: [ [Object] ],
     getMinutes: [ [Object] ],
     getUTCMinutes: [ [Object] ],
     getSeconds: [ [Object] ],
     getUTCSeconds: [ [Object] ],
     getMilliseconds: [ [Object] ],
     getUTCMilliseconds: [ [Object] ],
     getTimezoneOffset: [ [Object] ],
     setTime: [ [Object] ],
     setFullYear: [ [Object] ],
     setUTCFullYear: [ [Object] ],
     setMonth: [ [Object] ],
     setUTCMonth: [ [Object] ],
     setDate: [ [Object] ],
     setUTCDate: [ [Object] ],
     setHours: [ [Object] ],
     setUTCHours: [ [Object] ],
     setMinutes: [ [Object] ],
     setUTCMinutes: [ [Object] ],
     setSeconds: [ [Object] ],
     setUTCSeconds: [ [Object] ],
     setMilliseconds: [ [Object] ],
     setUTCMilliseconds: [ [Object] ],
     abs: [ [Object] ],
     cos: [ [Object] ],
     sin: [ [Object] ],
     tan: [ [Object] ],
     acos: [ [Object] ],
     asin: [ [Object] ],
     atan: [ [Object] ],
     atan2: [ [Object] ],
     ceil: [ [Object] ],
     floor: [ [Object] ],
     round: [ [Object] ],
     exp: [ [Object] ],
     log: [ [Object], [Object], [Object] ],
     sqrt: [ [Object] ],
     pow: [ [Object] ],
     max: [ [Object] ],
     min: [ [Object] ],
     random: [ [Object] ],
     stringify: [ [Object], [Object] ],
     '<i>':
      [ [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object] ],
     length: [ [Object], [Object], [Object] ],
     MAX_VALUE: [ [Object] ],
     MIN_VALUE: [ [Object] ],
     POSITIVE_INFINITY: [ [Object] ],
     NEGATIVE_INFINITY: [ [Object] ],
     global: [ [Object] ],
     ignoreCase: [ [Object] ],
     multiline: [ [Object] ],
     source: [ [Object] ],
     lastIndex: [ [Object] ],
     name: [ [Object], [Object] ],
     message: [ [Object] ],
     E: [ [Object] ],
     LN2: [ [Object] ],
     LN10: [ [Object] ],
     LOG2E: [ [Object] ],
     LOG10E: [ [Object] ],
     SQRT1_2: [ [Object] ],
     SQRT2: [ [Object] ],
     PI: [ [Object] ],
     argv: [ [Object] ],
     abort: [ [Object], [Object] ],
     chdir: [ [Object] ],
     cwd: [ [Object] ],
     env: [ [Object] ],
     exit: [ [Object] ],
     getgid: [ [Object] ],
     setgid: [ [Object] ],
     getuid: [ [Object] ],
     setuid: [ [Object] ],
     versions: [ [Object] ],
     config: [ [Object] ],
     target_defaults: [ [Object] ],
     variables: [ [Object] ],
     kill: [ [Object], [Object], [Object] ],
     memoryUsage: [ [Object] ],
     nextTick: [ [Object] ],
     umask: [ [Object] ],
     uptime: [ [Object], [Object] ],
     hrtime: [ [Object] ],
     info: [ [Object] ],
     error: [ [Object], [Object] ],
     warn: [ [Object] ],
     dir: [ [Object] ],
     time: [ [Object] ],
     timeEnd: [ [Object] ],
     trace: [ [Object] ],
     assert: [ [Object] ],
     resolve: [ [Object], [Object], [Object], [Object] ],
     cache: [ [Object] ],
     extensions: [ [Object] ],
     children: [ [Object] ],
     EventEmitter: [ [Object] ],
     addListener: [ [Object] ],
     on: [ [Object] ],
     once: [ [Object] ],
     removeListener: [ [Object] ],
     removeAllListeners: [ [Object] ],
     setMaxListeners: [ [Object] ],
     listeners: [ [Object] ],
     emit: [ [Object] ],
     pipe: [ [Object] ],
     Writable: [ [Object] ],
     write:
      [ [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object] ],
     end: [ [Object], [Object], [Object], [Object] ],
     Readable: [ [Object] ],
     setEncoding: [ [Object], [Object], [Object] ],
     pause: [ [Object], [Object], [Object], [Object] ],
     resume: [ [Object], [Object], [Object], [Object] ],
     unpipe: [ [Object] ],
     wrap: [ [Object] ],
     read: [ [Object], [Object] ],
     Duplex: [ [Object] ],
     Transform: [ [Object] ],
     escape: [ [Object] ],
     unescape: [ [Object] ],
     STATUS_CODES: [ [Object] ],
     createServer: [ [Object], [Object], [Object], [Object] ],
     Server: [ [Object], [Object], [Object], [Object] ],
     listen: [ [Object], [Object], [Object] ],
     close:
      [ [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object] ],
     setTimeout: [ [Object], [Object], [Object], [Object], [Object], [Object] ],
     ServerResponse: [ [Object] ],
     writeContinue: [ [Object] ],
     writeHead: [ [Object] ],
     setHeader: [ [Object] ],
     getHeader: [ [Object] ],
     removeHeader: [ [Object] ],
     addTrailers: [ [Object] ],
     request: [ [Object], [Object] ],
     get: [ [Object], [Object] ],
     Agent: [ [Object], [Object] ],
     sockets: [ [Object] ],
     requests: [ [Object] ],
     ClientRequest: [ [Object] ],
     setNoDelay: [ [Object], [Object] ],
     setSocketKeepAlive: [ [Object] ],
     IncomingMessage: [ [Object] ],
     settings: [ [Object] ],
     Worker: [ [Object] ],
     send: [ [Object], [Object], [Object] ],
     disconnect: [ [Object], [Object], [Object] ],
     setupMaster: [ [Object] ],
     fork: [ [Object], [Object] ],
     workers: [ [Object] ],
     Zlib: [ [Object] ],
     flush: [ [Object] ],
     reset: [ [Object] ],
     deflate: [ [Object] ],
     deflateRaw: [ [Object] ],
     gzip: [ [Object] ],
     gunzip: [ [Object] ],
     inflate: [ [Object] ],
     inflateRaw: [ [Object] ],
     unzip: [ [Object] ],
     Gzip: [ [Object] ],
     createGzip: [ [Object] ],
     Gunzip: [ [Object] ],
     createGunzip: [ [Object] ],
     Deflate: [ [Object] ],
     createDeflate: [ [Object] ],
     Inflate: [ [Object] ],
     createInflate: [ [Object] ],
     InflateRaw: [ [Object] ],
     createInflateRaw: [ [Object] ],
     DeflateRaw: [ [Object] ],
     createDeflateRaw: [ [Object] ],
     Unzip: [ [Object] ],
     createUnzip: [ [Object] ],
     tmpdir: [ [Object] ],
     endianness: [ [Object] ],
     hostname: [ [Object], [Object] ],
     type: [ [Object] ],
     platform: [ [Object], [Object] ],
     arch: [ [Object], [Object] ],
     release: [ [Object] ],
     loadavg: [ [Object] ],
     totalmem: [ [Object] ],
     freemem: [ [Object] ],
     cpus: [ [Object] ],
     networkInterfaces: [ [Object] ],
     decode: [ [Object], [Object] ],
     encode: [ [Object], [Object] ],
     toUnicode: [ [Object] ],
     toASCII: [ [Object] ],
     ucs2: [ [Object] ],
     start: [ [Object] ],
     createInterface: [ [Object] ],
     Interface: [ [Object] ],
     setPrompt: [ [Object] ],
     prompt: [ [Object] ],
     question: [ [Object] ],
     createContext: [ [Object] ],
     Script: [ [Object] ],
     runInThisContext: [ [Object], [Object] ],
     runInNewContext: [ [Object], [Object] ],
     runInContext: [ [Object] ],
     createScript: [ [Object] ],
     ChildProcess: [ [Object] ],
     spawn: [ [Object] ],
     execFile: [ [Object] ],
     format: [ [Object], [Object] ],
     lookup: [ [Object] ],
     resolve4: [ [Object] ],
     resolve6: [ [Object] ],
     resolveMx: [ [Object] ],
     resolveTxt: [ [Object] ],
     resolveSrv: [ [Object] ],
     resolveNs: [ [Object] ],
     resolveCname: [ [Object] ],
     getConnections: [ [Object] ],
     Socket: [ [Object], [Object] ],
     connect: [ [Object], [Object], [Object] ],
     destroy: [ [Object], [Object], [Object] ],
     setKeepAlive: [ [Object] ],
     address: [ [Object], [Object], [Object], [Object], [Object] ],
     unref: [ [Object], [Object] ],
     ref: [ [Object], [Object] ],
     createConnection: [ [Object] ],
     isIP: [ [Object] ],
     isIPv4: [ [Object] ],
     isIPv6: [ [Object] ],
     createSocket: [ [Object] ],
     setBroadcast: [ [Object] ],
     setTTL: [ [Object] ],
     setMulticastTTL: [ [Object] ],
     setMulticastLoopback: [ [Object] ],
     addMembership: [ [Object] ],
     dropMembership: [ [Object] ],
     rename: [ [Object] ],
     renameSync: [ [Object] ],
     ftruncate: [ [Object] ],
     ftruncateSync: [ [Object] ],
     truncate: [ [Object] ],
     truncateSync: [ [Object] ],
     chown: [ [Object] ],
     chownSync: [ [Object] ],
     fchown: [ [Object] ],
     fchownSync: [ [Object] ],
     lchown: [ [Object] ],
     lchownSync: [ [Object] ],
     chmod: [ [Object] ],
     chmodSync: [ [Object] ],
     fchmod: [ [Object] ],
     fchmodSync: [ [Object] ],
     lchmod: [ [Object] ],
     lchmodSync: [ [Object] ],
     stat: [ [Object] ],
     lstat: [ [Object] ],
     fstat: [ [Object] ],
     statSync: [ [Object] ],
     lstatSync: [ [Object] ],
     fstatSync: [ [Object] ],
     link: [ [Object] ],
     linkSync: [ [Object] ],
     symlink: [ [Object] ],
     symlinkSync: [ [Object] ],
     readlink: [ [Object] ],
     readlinkSync: [ [Object] ],
     realpath: [ [Object] ],
     realpathSync: [ [Object] ],
     unlink: [ [Object] ],
     unlinkSync: [ [Object] ],
     rmdir: [ [Object] ],
     rmdirSync: [ [Object] ],
     mkdir: [ [Object] ],
     mkdirSync: [ [Object] ],
     readdir: [ [Object] ],
     readdirSync: [ [Object] ],
     closeSync: [ [Object] ],
     open: [ [Object] ],
     openSync: [ [Object] ],
     utimes: [ [Object] ],
     utimesSync: [ [Object] ],
     futimes: [ [Object] ],
     futimesSync: [ [Object] ],
     fsync: [ [Object] ],
     fsyncSync: [ [Object] ],
     writeSync: [ [Object] ],
     readSync: [ [Object] ],
     readFile: [ [Object] ],
     readFileSync: [ [Object] ],
     writeFile: [ [Object] ],
     writeFileSync: [ [Object] ],
     appendFile: [ [Object] ],
     appendFileSync: [ [Object] ],
     watchFile: [ [Object] ],
     unwatchFile: [ [Object] ],
     watch: [ [Object] ],
     exists: [ [Object] ],
     existsSync: [ [Object] ],
     Stats: [ [Object] ],
     createReadStream: [ [Object] ],
     createWriteStream: [ [Object] ],
     FSWatcher: [ [Object] ],
     normalize: [ [Object] ],
     relative: [ [Object] ],
     dirname: [ [Object] ],
     basename: [ [Object] ],
     extname: [ [Object] ],
     StringDecoder: [ [Object] ],
     getCiphers: [ [Object], [Object] ],
     addContext: [ [Object] ],
     CleartextStream: [ [Object] ],
     getPeerCertificate: [ [Object] ],
     getCipher: [ [Object] ],
     createSecurePair: [ [Object] ],
     SecurePair: [ [Object] ],
     getHashes: [ [Object] ],
     createCredentials: [ [Object] ],
     createHash: [ [Object] ],
     Hash: [ [Object] ],
     update: [ [Object], [Object], [Object], [Object], [Object], [Object] ],
     digest: [ [Object], [Object] ],
     createHmac: [ [Object] ],
     Hmac: [ [Object] ],
     createCipher: [ [Object] ],
     createCipheriv: [ [Object] ],
     Cipher: [ [Object] ],
     final: [ [Object], [Object] ],
     setAutoPadding: [ [Object], [Object] ],
     createDecipher: [ [Object] ],
     createDecipheriv: [ [Object] ],
     Decipher: [ [Object] ],
     createSign: [ [Object] ],
     Sign: [ [Object] ],
     sign: [ [Object] ],
     createVerify: [ [Object] ],
     Verify: [ [Object] ],
     verify: [ [Object] ],
     createDiffieHellman: [ [Object] ],
     DiffieHellman: [ [Object] ],
     generateKeys: [ [Object] ],
     computeSecret: [ [Object] ],
     getPrime: [ [Object] ],
     getGenerator: [ [Object] ],
     getPublicKey: [ [Object] ],
     getPrivateKey: [ [Object] ],
     setPublicKey: [ [Object] ],
     setPrivateKey: [ [Object] ],
     getDiffieHellman: [ [Object] ],
     pbkdf2: [ [Object] ],
     pbkdf2Sync: [ [Object] ],
     randomBytes: [ [Object] ],
     pseudoRandomBytes: [ [Object] ],
     debug: [ [Object] ],
     puts: [ [Object] ],
     print: [ [Object] ],
     inspect: [ [Object] ],
     isRegExp: [ [Object] ],
     isDate: [ [Object] ],
     isError: [ [Object] ],
     inherits: [ [Object] ],
     fail: [ [Object] ],
     ok: [ [Object] ],
     equal: [ [Object] ],
     notEqual: [ [Object] ],
     deepEqual: [ [Object] ],
     notDeepEqual: [ [Object] ],
     strictEqual: [ [Object] ],
     notStrictEqual: [ [Object] ],
     throws: [ [Object] ],
     doesNotThrow: [ [Object] ],
     ifError: [ [Object] ],
     isatty: [ [Object] ],
     Domain: [ [Object] ],
     run: [ [Object] ],
     members: [ [Object] ],
     add: [ [Object] ],
     remove: [ [Object] ],
     intercept: [ [Object] ],
     dispose: [ [Object] ],
     times: [ [Object] ],
     clearTimeout: [ [Object] ],
     setInterval: [ [Object] ],
     clearInterval: [ [Object] ],
     setImmediate: [ [Object] ],
     clearImmediate: [ [Object] ],
     Timer: [ [Object] ],
     exports: [ [Object] ],
     require: [ [Object] ],
     id: [ [Object], [Object] ],
     filename: [ [Object] ],
     loaded: [ [Object] ],
     parent: [ [Object] ],
     PassThrough: [ [Object] ],
     maxHeadersCount: [ [Object] ],
     timeout: [ [Object] ],
     statusCode: [ [Object], [Object] ],
     headersSent: [ [Object] ],
     sendDate: [ [Object] ],
     globalAgent: [ [Object], [Object] ],
     maxSockets: [ [Object] ],
     httpVersion: [ [Object] ],
     headers: [ [Object] ],
     trailers: [ [Object] ],
     method: [ [Object] ],
     url: [ [Object] ],
     socket: [ [Object] ],
     args: [ [Object] ],
     silent: [ [Object] ],
     process: [ [Object] ],
     suicide: [ [Object] ],
     isMaster: [ [Object] ],
     isWorker: [ [Object] ],
     worker: [ [Object] ],
     Z_NO_FLUSH: [ [Object] ],
     Z_PARTIAL_FLUSH: [ [Object] ],
     Z_SYNC_FLUSH: [ [Object] ],
     Z_FULL_FLUSH: [ [Object] ],
     Z_FINISH: [ [Object] ],
     Z_BLOCK: [ [Object] ],
     Z_TREES: [ [Object] ],
     Z_OK: [ [Object] ],
     Z_STREAM_END: [ [Object] ],
     Z_NEED_DICT: [ [Object] ],
     Z_ERRNO: [ [Object] ],
     Z_STREAM_ERROR: [ [Object] ],
     Z_DATA_ERROR: [ [Object] ],
     Z_MEM_ERROR: [ [Object] ],
     Z_BUF_ERROR: [ [Object] ],
     Z_VERSION_ERROR: [ [Object] ],
     Z_NO_COMPRESSION: [ [Object] ],
     Z_BEST_SPEED: [ [Object] ],
     Z_BEST_COMPRESSION: [ [Object] ],
     Z_DEFAULT_COMPRESSION: [ [Object] ],
     Z_FILTERED: [ [Object] ],
     Z_HUFFMAN_ONLY: [ [Object] ],
     Z_RLE: [ [Object] ],
     Z_FIXED: [ [Object] ],
     Z_DEFAULT_STRATEGY: [ [Object] ],
     Z_BINARY: [ [Object] ],
     Z_TEXT: [ [Object] ],
     Z_ASCII: [ [Object] ],
     Z_UNKNOWN: [ [Object] ],
     Z_DEFLATED: [ [Object] ],
     Z_NULL: [ [Object] ],
     EOL: [ [Object] ],
     version: [ [Object], [Object], [Object] ],
     stdin: [ [Object], [Object] ],
     stdout: [ [Object], [Object] ],
     stderr: [ [Object], [Object] ],
     pid: [ [Object], [Object] ],
     maxConnections: [ [Object] ],
     bufferSize: [ [Object] ],
     remoteAddress: [ [Object], [Object] ],
     remotePort: [ [Object], [Object] ],
     localPort: [ [Object] ],
     bytesRead: [ [Object] ],
     bytesWritten: [ [Object] ],
     localAddress: [ [Object] ],
     family: [ [Object], [Object] ],
     port: [ [Object], [Object], [Object] ],
     isFile: [ [Object] ],
     isDirectory: [ [Object] ],
     isBlockDevice: [ [Object] ],
     isCharacterDevice: [ [Object] ],
     isSymbolicLink: [ [Object] ],
     isFIFO: [ [Object] ],
     isSocket: [ [Object] ],
     dev: [ [Object] ],
     ino: [ [Object] ],
     mode: [ [Object] ],
     nlink: [ [Object] ],
     uid: [ [Object] ],
     gid: [ [Object] ],
     rdev: [ [Object] ],
     size: [ [Object] ],
     blksize: [ [Object] ],
     blocks: [ [Object] ],
     atime: [ [Object] ],
     mtime: [ [Object] ],
     ctime: [ [Object] ],
     sep: [ [Object] ],
     delimiter: [ [Object] ],
     CLIENT_RENEG_LIMIT: [ [Object] ],
     CLIENT_RENEG_WINDOW: [ [Object] ],
     SLAB_BUFFER_SIZE: [ [Object] ],
     authorized: [ [Object] ],
     authorizationError: [ [Object] ],
     cleartext: [ [Object] ],
     encrypted: [ [Object] ],
     DEFAULT_ENCODING: [ [Object] ],
     model: [ [Object] ],
     speed: [ [Object] ],
     user: [ [Object] ],
     nice: [ [Object] ],
     sys: [ [Object] ],
     idle: [ [Object] ],
     irq: [ [Object] ],
     rss: [ [Object] ],
     heapTotal: [ [Object] ],
     number: [ [Object] ],
     heapUsed: [ [Object] ],
     href: [ [Object] ],
     protocol: [ [Object] ],
     auth: [ [Object] ],
     host: [ [Object] ],
     pathname: [ [Object] ],
     query: [ [Object] ],
     slashes: [ [Object] ],
     hash: [ [Object] ],
     key: [ [Object], [Object] ],
     cert: [ [Object], [Object] ],
     ca: [ [Object], [Object] ],
     pfx: [ [Object] ],
     passphrase: [ [Object] ],
     crl: [ [Object] ],
     ciphers: [ [Object] ],
     Buffer: [ [Object] ],
     INSPECT_MAX_BYTES: [ [Object] ],
     SlowBuffer: [ [Object] ],
     execPath: [ [Object] ],
     http_parser: [ [Object] ],
     node: [ [Object] ],
     v8: [ [Object] ],
     ares: [ [Object] ],
     uv: [ [Object] ],
     zlib: [ [Object] ],
     openssl: [ [Object] ],
     cflags: [ [Object] ],
     default_configuration: [ [Object] ],
     defines: [ [Object] ],
     include_dirs: [ [Object] ],
     libraries: [ [Object] ],
     clang: [ [Object] ],
     host_arch: [ [Object] ],
     node_install_npm: [ [Object] ],
     node_install_waf: [ [Object] ],
     node_prefix: [ [Object] ],
     node_shared_openssl: [ [Object] ],
     node_shared_v8: [ [Object] ],
     node_shared_zlib: [ [Object] ],
     node_use_dtrace: [ [Object] ],
     node_use_etw: [ [Object] ],
     node_use_openssl: [ [Object] ],
     target_arch: [ [Object] ],
     v8_no_strict_aliasing: [ [Object] ],
     v8_use_snapshot: [ [Object] ],
     visibility: [ [Object] ],
     title: [ [Object] ],
     maxTickDepth: [ [Object] ],
     copy: [ [Object] ],
     readUInt8: [ [Object] ],
     readUInt16LE: [ [Object] ],
     readUInt16BE: [ [Object] ],
     readUInt32LE: [ [Object] ],
     readUInt32BE: [ [Object] ],
     readInt8: [ [Object] ],
     readInt16LE: [ [Object] ],
     readInt16BE: [ [Object] ],
     readInt32LE: [ [Object] ],
     readInt32BE: [ [Object] ],
     readFloatLE: [ [Object] ],
     readFloatBE: [ [Object] ],
     readDoubleLE: [ [Object] ],
     readDoubleBE: [ [Object] ],
     writeUInt8: [ [Object] ],
     writeUInt16LE: [ [Object] ],
     writeUInt16BE: [ [Object] ],
     writeUInt32LE: [ [Object] ],
     writeUInt32BE: [ [Object] ],
     writeInt8: [ [Object] ],
     writeInt16LE: [ [Object] ],
     writeInt16BE: [ [Object] ],
     writeInt32LE: [ [Object] ],
     writeInt32BE: [ [Object] ],
     writeFloatLE: [ [Object] ],
     writeFloatBE: [ [Object] ],
     writeDoubleLE: [ [Object] ],
     writeDoubleBE: [ [Object] ],
     fill: [ [Object] ],
     isBuffer: [ [Object] ],
     byteLength: [ [Object] ] },
  protos:
   { Object:
      { props: [Object],
        proto: null,
        name: 'Object.prototype',
        maybeProps: null,
        origin: 'ecma5',
        hasCtor: [Object],
        onNewProp: [Object] },
     Array:
      { props: [Object],
        proto: [Object],
        name: 'Array.prototype',
        maybeProps: null,
        origin: 'ecma5',
        hasCtor: [Object],
        onNewProp: [Object] },
     Function:
      { props: [Object],
        proto: [Object],
        name: 'Function.prototype',
        maybeProps: null,
        origin: 'ecma5',
        self: [Object],
        args: [],
        argNames: [],
        retval: [Object],
        hasCtor: [Object],
        onNewProp: [Object] },
     RegExp:
      { props: [Object],
        proto: [Object],
        name: 'RegExp.prototype',
        maybeProps: null,
        origin: 'ecma5',
        hasCtor: [Object],
        onNewProp: [Object],
        instances: [Object] },
     String:
      { props: [Object],
        proto: [Object],
        name: 'String.prototype',
        maybeProps: null,
        origin: 'ecma5',
        hasCtor: [Object],
        onNewProp: [Object] },
     Number:
      { props: [Object],
        proto: [Object],
        name: 'Number.prototype',
        maybeProps: null,
        origin: 'ecma5',
        hasCtor: [Object],
        onNewProp: [Object] },
     Boolean:
      { props: {},
        proto: [Object],
        name: 'Boolean.prototype',
        maybeProps: null,
        origin: 'ecma5',
        hasCtor: [Object],
        onNewProp: [Object] } },
  origins: [ 'ecma5', 'node' ],
  curOrigin: null,
  paths:
   { 'Error.prototype':
      { props: [Object],
        name: 'Error.prototype',
        hasCtor: [Object],
        onNewProp: [Object],
        proto: [Object],
        maybeProps: null,
        origin: 'ecma5',
        instances: [Object] },
     'RegExp.prototype':
      { props: [Object],
        proto: [Object],
        name: 'RegExp.prototype',
        maybeProps: null,
        origin: 'ecma5',
        hasCtor: [Object],
        onNewProp: [Object],
        instances: [Object] },
     'Date.prototype':
      { props: [Object],
        name: 'Date.prototype',
        hasCtor: [Object],
        onNewProp: [Object],
        instances: [Object],
        proto: [Object],
        maybeProps: null,
        origin: 'ecma5' },
     'Module.prototype':
      { props: [Object],
        name: 'Module.prototype',
        hasCtor: [Object],
        onNewProp: [Object],
        proto: [Object],
        maybeProps: null,
        origin: 'node',
        instances: [Object] },
     'events.EventEmitter.prototype':
      { props: [Object],
        name: 'events.EventEmitter.prototype',
        proto: [Object],
        maybeProps: null,
        origin: 'node',
        instances: [Object] },
     'stream.Writable.prototype':
      { props: [Object],
        name: 'stream.Writable.prototype',
        hasCtor: [Object],
        onNewProp: [Object],
        instances: [Object],
        proto: [Object],
        maybeProps: null,
        origin: 'node' },
     'stream.prototype':
      { props: [Object],
        name: 'stream.prototype',
        hasCtor: [Object],
        onNewProp: [Object],
        proto: [Object],
        maybeProps: null,
        origin: 'node' },
     'Buffer.prototype':
      { props: [Object],
        name: 'Buffer.prototype',
        hasCtor: [Object],
        onNewProp: [Object],
        instances: [Object],
        proto: [Object],
        maybeProps: null,
        origin: 'node' },
     'stream.Readable.prototype':
      { props: [Object],
        name: 'stream.Readable.prototype',
        hasCtor: [Object],
        onNewProp: [Object],
        proto: [Object],
        maybeProps: null,
        origin: 'node',
        instances: [Object] },
     'stream.Duplex.prototype':
      { props: [Object],
        name: 'stream.Duplex.prototype',
        hasCtor: [Object],
        onNewProp: [Object],
        proto: [Object],
        maybeProps: null,
        origin: 'node',
        instances: [Object] },
     'stream.Transform':
      { props: [Object],
        name: 'stream.Transform',
        proto: [Object],
        maybeProps: null,
        origin: 'node',
        self: [Object],
        args: [Object],
        argNames: [Object],
        retval: [Object],
        doc: 'A "transform" stream is a duplex stream where the output is causally connected in some way to the input, such as a zlib stream or a cr
ypto stream.',
        url: 'http://nodejs.org/api/stream.html#stream_class_stream_transform' },
     'http.IncomingMessage.prototype':
      { props: [Object],
        name: 'http.IncomingMessage.prototype',
        hasCtor: [Object],
        onNewProp: [Object],
        instances: [Object],
        proto: [Object],
        maybeProps: null,
        origin: 'node' },
     'http.ServerResponse.prototype':
      { props: [Object],
        name: 'http.ServerResponse.prototype',
        hasCtor: [Object],
        onNewProp: [Object],
        instances: [Object],
        proto: [Object],
        maybeProps: null,
        origin: 'node' },
     'http.Server.prototype':
      { props: [Object],
        name: 'http.Server.prototype',
        hasCtor: [Object],
        onNewProp: [Object],
        instances: [Object],
        proto: [Object],
        maybeProps: null,
        origin: 'node' },
     'http.ClientRequest.prototype':
      { props: [Object],
        name: 'http.ClientRequest.prototype',
        hasCtor: [Object],
        onNewProp: [Object],
        instances: [Object],
        proto: [Object],
        maybeProps: null,
        origin: 'node' },
     'http.Agent.prototype':
      { props: [Object],
        name: 'http.Agent.prototype',
        hasCtor: [Object],
        onNewProp: [Object],
        proto: [Object],
        maybeProps: null,
        origin: 'node' },
     'net.Socket.prototype':
      { props: [Object],
        name: 'net.Socket.prototype',
        hasCtor: [Object],
        onNewProp: [Object],
        instances: [Object],
        proto: [Object],
        maybeProps: null,
        origin: 'node' },
     'http.Server':
      { props: [Object],
        name: 'http.Server',
        proto: [Object],
        maybeProps: null,
        origin: 'node',
        self: [Object],
        args: [],
        argNames: [],
        retval: [Object],
        doc: 'Class for HTTP server objects.',
        url: 'http://nodejs.org/api/http.html#http_class_http_server' },
     'https.Server.prototype':
      { props: [Object],
        name: 'http.Server.prototype',
        hasCtor: [Object],
        onNewProp: [Object],
        instances: [Object],
        proto: [Object],
        maybeProps: null,
        origin: 'node' },
     'http.Agent':
      { props: [Object],
        name: 'http.Agent',
        proto: [Object],
        maybeProps: null,
        origin: 'node',
        self: [Object],
        args: [],
        argNames: [],
        retval: [Object],
        doc: 'In node 0.5.3+ there is a new implementation of the HTTP Agent which is used for pooling sockets used in HTTP client requests.',
        url: 'http://nodejs.org/api/http.html#http_class_http_agent' },
     'http.globalAgent':
      { props: {},
        proto: [Object],
        name: 'http.Agent',
        maybeProps: null,
        origin: 'node' },
     'child_process.ChildProcess.prototype':
      { props: [Object],
        name: 'child_process.ChildProcess.prototype',
        hasCtor: [Object],
        onNewProp: [Object],
        proto: [Object],
        maybeProps: null,
        origin: 'node',
        instances: [Object] },
     'cluster.settings':
      { props: [Object],
        name: 'cluster.settings',
        proto: [Object],
        maybeProps: null,
        origin: 'node',
        doc: 'All settings set by the .setupMaster is stored in this settings object. This object is not supposed to be changed or set manually, by
you.',
        url: 'http://nodejs.org/api/cluster.html#cluster_cluster_settings' },
     'cluster.Worker.prototype':
      { props: [Object],
        name: 'cluster.Worker.prototype',
        hasCtor: [Object],
        onNewProp: [Object],
        proto: [Object],
        maybeProps: null,
        origin: 'node',
        instances: [Object] },
     'zlib.Zlib.prototype':
      { props: [Object],
        name: 'zlib.Zlib.prototype',
        hasCtor: [Object],
        onNewProp: [Object],
        proto: [Object],
        maybeProps: null,
        origin: 'node',
        instances: [Object] },
     'zlib.Gunzip.prototype':
      { props: {},
        name: 'zlib.Gunzip.prototype',
        hasCtor: [Object],
        onNewProp: [Object],
        proto: [Object],
        maybeProps: null,
        origin: 'node',
        instances: [Object] },
     'zlib.Deflate.prototype':
      { props: {},
        name: 'zlib.Deflate.prototype',
        hasCtor: [Object],
        onNewProp: [Object],
        proto: [Object],
        maybeProps: null,
        origin: 'node',
        instances: [Object] },
     'zlib.Inflate.prototype':
      { props: {},
        name: 'zlib.Inflate.prototype',
        hasCtor: [Object],
        onNewProp: [Object],
        proto: [Object],
        maybeProps: null,
        origin: 'node',
        instances: [Object] },
     'zlib.InflateRaw.prototype':
      { props: {},
        name: 'zlib.InflateRaw.prototype',
        hasCtor: [Object],
        onNewProp: [Object],
        proto: [Object],
        maybeProps: null,
        origin: 'node',
        instances: [Object] },
     'zlib.DeflateRaw.prototype':
      { props: {},
        name: 'zlib.DeflateRaw.prototype',
        hasCtor: [Object],
        onNewProp: [Object],
        proto: [Object],
        maybeProps: null,
        origin: 'node',
        instances: [Object] },
     'zlib.Unzip.prototype':
      { props: {},
        name: 'zlib.Unzip.prototype',
        hasCtor: [Object],
        onNewProp: [Object],
        proto: [Object],
        maybeProps: null,
        origin: 'node',
        instances: [Object] },
     'readline.Interface.prototype':
      { props: [Object],
        name: 'readline.Interface.prototype',
        hasCtor: [Object],
        onNewProp: [Object],
        instances: [Object],
        proto: [Object],
        maybeProps: null,
        origin: 'node' },
     'vm.Script.prototype':
      { props: [Object],
        name: 'vm.Script.prototype',
        hasCtor: [Object],
        onNewProp: [Object],
        proto: [Object],
        maybeProps: null,
        origin: 'node',
        instances: [Object] },
     'net.Server.prototype':
      { props: [Object],
        name: 'net.Server.prototype',
        hasCtor: [Object],
        onNewProp: [Object],
        instances: [Object],
        proto: [Object],
        maybeProps: null,
        origin: 'node' },
     'dgram.Socket.prototype':
      { props: [Object],
        name: 'dgram.Socket.prototype',
        hasCtor: [Object],
        onNewProp: [Object],
        instances: [Object],
        proto: [Object],
        maybeProps: null,
        origin: 'node' },
     'fs.Stats.prototype':
      { props: [Object],
        name: 'fs.Stats.prototype',
        hasCtor: [Object],
        onNewProp: [Object],
        instances: [Object],
        proto: [Object],
        maybeProps: null,
        origin: 'node' },
     'fs.FSWatcher.prototype':
      { props: [Object],
        name: 'fs.FSWatcher.prototype',
        hasCtor: [Object],
        onNewProp: [Object],
        instances: [Object],
        proto: [Object],
        maybeProps: null,
        origin: 'node' },
     'tls.CleartextStream.prototype':
      { props: [Object],
        name: 'tls.CleartextStream.prototype',
        hasCtor: [Object],
        onNewProp: [Object],
        instances: [Object],
        proto: [Object],
        maybeProps: null,
        origin: 'node' },
     'tls.Server.prototype':
      { props: [Object],
        name: 'tls.Server.prototype',
        hasCtor: [Object],
        onNewProp: [Object],
        proto: [Object],
        maybeProps: null,
        origin: 'node',
        instances: [Object] },
     'tls.SecurePair.prototype':
      { props: [Object],
        name: 'tls.SecurePair.prototype',
        hasCtor: [Object],
        onNewProp: [Object],
        instances: [Object],
        proto: [Object],
        maybeProps: null,
        origin: 'node' },
     'crypto.Hash.prototype':
      { props: [Object],
        name: 'crypto.Hash.prototype',
        hasCtor: [Object],
        onNewProp: [Object],
        instances: [Object],
        proto: [Object],
        maybeProps: null,
        origin: 'node' },
     'crypto.Hmac.prototype':
      { props: [Object],
        name: 'crypto.Hmac.prototype',
        hasCtor: [Object],
        onNewProp: [Object],
        instances: [Object],
        proto: [Object],
        maybeProps: null,
        origin: 'node' },
     'crypto.Cipher.prototype':
      { props: [Object],
        name: 'crypto.Cipher.prototype',
        hasCtor: [Object],
        onNewProp: [Object],
        instances: [Object],
        proto: [Object],
        maybeProps: null,
        origin: 'node' },
     'crypto.Decipher.prototype':
      { props: [Object],
        name: 'crypto.Decipher.prototype',
        hasCtor: [Object],
        onNewProp: [Object],
        instances: [Object],
        proto: [Object],
        maybeProps: null,
        origin: 'node' },
     'crypto.Sign.prototype':
      { props: [Object],
        name: 'crypto.Sign.prototype',
        hasCtor: [Object],
        onNewProp: [Object],
        instances: [Object],
        proto: [Object],
        maybeProps: null,
        origin: 'node' },
     'crypto.Verify.prototype':
      { props: [Object],
        name: 'crypto.Verify.prototype',
        hasCtor: [Object],
        onNewProp: [Object],
        instances: [Object],
        proto: [Object],
        maybeProps: null,
        origin: 'node' },
     'crypto.DiffieHellman.prototype':
      { props: [Object],
        name: 'crypto.DiffieHellman.prototype',
        hasCtor: [Object],
        onNewProp: [Object],
        instances: [Object],
        proto: [Object],
        maybeProps: null,
        origin: 'node' },
     Buffer:
      { props: [Object],
        name: 'Buffer',
        proto: [Object],
        maybeProps: null,
        origin: 'node',
        self: [Object],
        args: [Object],
        argNames: [Object],
        retval: [Object],
        doc: 'Used to handle binary data.',
        url: 'http://nodejs.org/api/globals.html#globals_class_buffer' },
     'timers.Timer':
      { props: [Object],
        name: 'timers.Timer',
        proto: [Object],
        maybeProps: null,
        origin: 'node' },
     'timers.setTimeout':
      { props: {},
        name: 'timers.setTimeout',
        proto: [Object],
        maybeProps: null,
        origin: 'node',
        self: [Object],
        args: [Object],
        argNames: [Object],
        retval: [Object],
        doc: 'Run callback cb after at least ms milliseconds. The actual delay depends on external factors like OS timer granularity and system load
.',
        url: 'http://nodejs.org/api/globals.html#globals_settimeout_cb_ms' },
     'timers.clearTimeout':
      { props: {},
        name: 'timers.clearTimeout',
        proto: [Object],
        maybeProps: null,
        origin: 'node',
        self: [Object],
        args: [Object],
        argNames: [Object],
        retval: [Object],
        doc: 'Stop a timer that was previously created with setTimeout(). The callback will not execute.',
        url: 'http://nodejs.org/api/globals.html#globals_cleartimeout_t' },
     'timers.setInterval':
      { props: {},
        name: 'timers.setInterval',
        proto: [Object],
        maybeProps: null,
        origin: 'node',
        self: [Object],
        args: [Object],
        argNames: [Object],
        retval: [Object],
        doc: 'Run callback cb repeatedly every ms milliseconds. Note that the actual interval may vary, depending on external factors like OS timer
granularity and system load. It\'s never less than ms but it may be longer.',
        url: 'http://nodejs.org/api/globals.html#globals_setinterval_cb_ms' },
     'timers.clearInterval':
      { props: {},
        name: 'timers.clearInterval',
        proto: [Object],
        maybeProps: null,
        origin: 'node',
        self: [Object],
        args: [Object],
        argNames: [Object],
        retval: [Object],
        doc: 'Stop a timer that was previously created with setInterval(). The callback will not execute.',
        url: 'http://nodejs.org/api/globals.html#globals_clearinterval_t' },
     'String.prototype':
      { props: [Object],
        proto: [Object],
        name: 'String.prototype',
        maybeProps: null,
        origin: 'ecma5',
        hasCtor: [Object],
        onNewProp: [Object] } },
  definitions:
   { ecma5: { 'Error.prototype': [Object] },
     node:
      { require: [Object],
        Module: [Object],
        events: [Object],
        stream: [Object],
        querystring: [Object],
        http: [Object],
        https: [Object],
        cluster: [Object],
        zlib: [Object],
        os: [Object],
        punycode: [Object],
        repl: [Object],
        readline: [Object],
        vm: [Object],
        child_process: [Object],
        url: [Object],
        dns: [Object],
        net: [Object],
        dgram: [Object],
        fs: [Object],
        path: [Object],
        string_decoder: [Object],
        tls: [Object],
        crypto: [Object],
        util: [Object],
        assert: [Object],
        tty: [Object],
        domain: [Object],
        'os.cpuSpec': [Object],
        'process.memoryUsage.type': [Object],
        'net.address': [Object],
        'url.type': [Object],
        'tls.Server.credentials': [Object],
        'tls.cipher': [Object],
        'crypto.credentials': [Object],
        buffer: [Object],
        module: [Object],
        timers: [Object] } },
  purgeGen: 0,
  workList: null,
  disabledComputing: null,
  topScope:
   { 
    props:{ 
        Object: [Object],
        Function: [Object],
        Array: [Object],
        String: [Object],
        Number: [Object],
        Boolean: [Object],
        RegExp: [Object],
        Date: [Object],
        Error: [Object],
        SyntaxError: [Object],
        ReferenceError: [Object],
        URIError: [Object],
        EvalError: [Object],
        RangeError: [Object],
        TypeError: [Object],
        parseInt: [Object],
        parseFloat: [Object],
        isNaN: [Object],
        isFinite: [Object],
        eval: [Object],
        encodeURI: [Object],
        encodeURIComponent: [Object],
        decodeURI: [Object],
        decodeURIComponent: [Object],
        Math: [Object],
        JSON: [Object],
        Infinity: [Object],
        undefined: [Object],
        NaN: [Object],
        process: [Object],
        console: [Object],
        Buffer: [Object],
        global: [Object],
        __filename: [Object],
        __dirname: [Object],
        setTimeout: [Object],
        clearTimeout: [Object],
        setInterval: [Object],
        clearInterval: [Object],
        module: [Object] 
    },
    
    proto:{ props: [Object],
        proto: null,
        name: 'Object.prototype',
        maybeProps: null,
        origin: 'ecma5',
        hasCtor: [Object],
        onNewProp: [Object] 
    },
     name: '<top>',
     maybeProps: null,
     origin: 'ecma5',
     prev: undefined },
  str:
   { name: 'string',
     proto:
      { props: [Object],
        proto: [Object],
        name: 'String.prototype',
        maybeProps: null,
        origin: 'ecma5',
        hasCtor: [Object],
        onNewProp: [Object] } },
  bool:
   { name: 'bool',
     proto:
      { props: {},
        proto: [Object],
        name: 'Boolean.prototype',
        maybeProps: null,
        origin: 'ecma5',
        hasCtor: [Object],
        onNewProp: [Object] } },
  num:
   { name: 'number',
     proto:
      { props: [Object],
        proto: [Object],
        name: 'Number.prototype',
        maybeProps: null,
        origin: 'ecma5',
        hasCtor: [Object],
        onNewProp: [Object] } },
  localDefs: null }
