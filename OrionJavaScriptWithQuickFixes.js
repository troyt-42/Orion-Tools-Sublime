(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else {
		var a = factory();
		for(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];
	}
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*******************************************************************************
	 * @license
	 * Copyright (c) 2015 IBM Corporation and others.
	 * All rights reserved. This program and the accompanying materials are made 
	 * available under the terms of the Eclipse Public License v1.0 
	 * (http://www.eclipse.org/legal/epl-v10.html), and the Eclipse Distribution 
	 * License v1.0 (http://www.eclipse.org/org/documents/edl-v10.html). 
	 * 
	 * Contributors: IBM Corporation - initial API and implementation
	 ******************************************************************************/
	/*eslint-env amd */
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
		__webpack_require__(1),
		__webpack_require__(88),
		__webpack_require__(4),
		__webpack_require__(72),
		__webpack_require__(89),
	    __webpack_require__(90)
	], __WEBPACK_AMD_DEFINE_RESULT__ = function(TernServer, Occurrences, Esprima, ASTManager, CUProvider, quickFixes) {
		
		var useworker = false,
			scriptresolver,
			ternserver,
			occurrences;
		
		/**
		 * @name JavaScript
		 * @description Creates a new TernServer
		 * @param {ScriptResolver} scriptResolver The resolver used to find scripts for getFile
		 * @param {Boolean} useWorker If the backing TernServer instance should be run in a worker
		 * @returns {TernServer} A new TernServer instance
		 * @since 11.0
		 */
		function JavaScript(scriptResolver, useWorker) {
			scriptresolver = scriptResolver;
			useworker = useWorker;
			if(!useworker) {
				ternserver = new TernServer(scriptresolver);
				ternserver.startServer(null, function() {
					//just fire it up for now
				});
			}
			occurrences = new Occurrences.JavaScriptOccurrences(new ASTManager.ASTManager(Esprima), CUProvider);
		}
		
		/**
		 * @name JavaScript.prototype.getOccurrences
		 * @description Finds all the occurrences for the given offset
		 * @function
		 * @param {Object} editorContext The editor context object
		 * @param {Object} args The arguments to pass in
		 * @returns {Promise} A Promise to compute the occurrences
		 * @see https://wiki.eclipse.org/Orion/Documentation/Developer_Guide/Plugging_into_the_editor#The_Occurrence_object
		 */
		JavaScript.prototype.getOccurrences = function getOccurrences(editorContext, args) {
			return occurrences.computeOccurrences(editorContext, args);
		};
		
		JavaScript.prototype.Tern = Object.create(null);
		/**
	     * @description Add a file to the Tern server
	     * @param {String} file The fully qualified name of the file
	     * @param {String} text The optional text of the file 
	     */
	    JavaScript.prototype.Tern.addFile = function addFile(file, text) {
	    	ternserver.addFile(file, text);
	    };
	    /**
	     * @description Checks if the type reference at the given offset matches the given origin type
	     * @param {String} file The fully qualified name of the file context
	     * @param {Number} offset The offset of the identifier to check
	     * @param {Object} origin The original type information
	     * @param {Array.<Object>} files The optional array of file objects
	     * @param {Function} callback The callback which is called to return the results
	     */
	    JavaScript.prototype.Tern.checkRef = function checkRef(file, offset, origin, files, callback) {
	    	ternserver.checkRef(file, offset, origin, files, callback);
	    };
	    /**
	     * @description Computes content assist for the given options
	     * @param {String} file The fully qualified name of the file context
	     * @param {Number} offset The offset of the completion
	     * @param {Boolean} keywords If keywords should be returned as well
	     * @param {Array.<Object>} files The optional array of file objects
	     * @param {Function} callback The callback which is called to return the results
	     */
	    JavaScript.prototype.Tern.completions = function completions(file, offset, keywords, files, callback) {
	    	ternserver.completions(file, offset, keywords, files, callback);
	    };
	    /**
	     * @description Computes the definition of the identifier at the given offset
	     * @param {String} file The fully qualified name of the file context
	     * @param {Number} offset The offset of the completion
	     * @param {Boolean} guess If we should take a guess at the definition if one cannot be computed
	     * @param {Array.<Object>} files The optional array of file objects
	     * @param {Function} callback The callback which is called to return the results
	     */
	    JavaScript.prototype.Tern.definition = function definition(file, offset, guess, files, callback) {
	    	ternserver.definition(file, offset, guess, files, callback);
	    };
	    /**
	     * @description Deletes the given file from the server. Does nothing if the file does not exist
	     * @param {String] file The fully qualified name of the file to delete
	     */
	    JavaScript.prototype.Tern.delFile = function delFile(file) {
	    	ternserver.delFile(file);
	    };
	    /**
	     * @description Computes the documentation associated with the given offset in the file
	     * @param {String} file The fully qualified name of the file context
	     * @param {Number} offset The offset of the completion
	     * @param {String} docFormat The format of the doc. If not given 'full' is assumed
	     * @param {Array.<Object>} files The optional array of file objects
	     * @param {Function} callback The callback which is called to return the results
	     */
	    JavaScript.prototype.Tern.documentation = function documentation(file, offset, docFormat, files, callback) {
	    	ternserver.documentation(file, offset, docFormat, files, callback);
	    };
	    /**
	     * @description Returns the list of environments from plugins in Tern, if any
	     * @param {Function} callback The callback which is called to return the results
	     */
	    JavaScript.prototype.Tern.environments = function environments(callback) {
	    	ternserver.environments(callback);
	    };
	    /**
	     * @description Computes the implementation of the identifier at the given offset
	     * @param {String} file The fully qualified name of the file context
	     * @param {Number} offset The offset of the completion
	     * @param {Boolean} guess If we should take a guess at the definition if one cannot be computed
	     * @param {Array.<Object>} files The optional array of file objects
	     * @param {Function} callback The callback which is called to return the results
	     */
	    JavaScript.prototype.Tern.implementation = function implementation(file, offset, guess, files, callback) {
	    	ternserver.implementation(file, offset, guess, files, callback);
	    };
	    /**
	     * @description Returns the list of plugins installed in Tern, if any
	     * @param {Function} callback The callback which is called to return the results
	     */
	    JavaScript.prototype.Tern.installedPlugins = function installedPlugins(callback) {
	    	ternserver.installedPlugins(callback);
	    };
	    /**
	     * @description Runs ESLint on the given file context
	     * @param {String} file The fully qualified name of the file context
	     * @param {Object} rules The map of ESLint rules
	     * @param {Object} env The map of existing environment names
	     * @param {Array.<Object>} files The optional array of file objects
	     * @param {Function} callback The callback which is called to return the results
	     */
	    JavaScript.prototype.Tern.lint = function lint(file, rules, env, files, callback) {
	    	ternserver.lint(file, rules, env, files, callback);
	    };
	    /**
	     * @description Computes an outline of the given file
	     * @param {String} file The fully qualified name of the file context
	     * @param {Array.<Object>} files The optional array of file objects
	     * @param {Function} callback The callback which is called to return the results
	     */
	    JavaScript.prototype.Tern.outline = function outline(file, files, callback) {
	    	ternserver.outline(file, files, callback);
	    };
	    /**
	     * @description Computes a rename array for the identifier at the given offset
	     * @param {String} file The fully qualified name of the file context
	     * @param {Number} offset The offset of the completion
	     * @param {String} newname The new name to change to
	     * @param {Array.<Object>} files The optional array of file objects
	     * @param {Function} callback The callback which is called to return the results
	     */
	    JavaScript.prototype.Tern.rename = function rename(file, offset, newname, files, callback) {
	    	ternserver.rename(file, offset, newname, files, callback);
	    };
		/**
		 * @description Start up the Tern server, send a message after trying
	     * @param {Object} jsonOptions The optional map of JSON options to start the server with
	     * @param {Function} callback The callback which is called to return the results
	     */
	    JavaScript.prototype.Tern.startServer = function startServer(jsonOptions, callback) {
			ternserver.startServer(jsonOptions, callback);
	    };
	    /**
	     * @description Computes the type information at the given offset
	     * @param {String} file The fully qualified name of the file context
	     * @param {Number} offset The offset of the completion
	     * @param {Function} callback The callback which is called to return the results
	     */
	    JavaScript.prototype.Tern.type = function type(file, offset, callback) {
	    	ternserver.type(file, offset, callback);
	    };
	    /**
		 * @name JavaScript.prototype.quickFixes
		 */
		JavaScript.prototype.quickFixes = new quickFixes.JavaScriptQuickfixes(new ASTManager.ASTManager(Esprima), CUProvider);
	    
	    return JavaScript;
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*******************************************************************************
	 * @license
	 * Copyright (c) 2015 IBM Corporation and others.
	 * All rights reserved. This program and the accompanying materials are made 
	 * available under the terms of the Eclipse Public License v1.0 
	 * (http://www.eclipse.org/legal/epl-v10.html), and the Eclipse Distribution 
	 * License v1.0 (http://www.eclipse.org/org/documents/edl-v10.html). 
	 * 
	 * Contributors: IBM Corporation - initial API and implementation
	 ******************************************************************************/
	/*eslint-env amd */
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
		__webpack_require__(12),
		__webpack_require__(9),
		__webpack_require__(13),
		__webpack_require__(15),
		__webpack_require__(16),
		__webpack_require__(17),
		
		__webpack_require__(18),
		__webpack_require__(19),
		__webpack_require__(20),
		__webpack_require__(21),
		
		//tern defaults
		__webpack_require__(22),
		__webpack_require__(24),
		__webpack_require__(25),
		__webpack_require__(29),
		
		//orion defaults
		__webpack_require__(2),
		__webpack_require__(30),
		__webpack_require__(74),
		__webpack_require__(75),
		__webpack_require__(77),
		__webpack_require__(80),
		__webpack_require__(81),
		__webpack_require__(82),
		__webpack_require__(83),
		__webpack_require__(84),
		__webpack_require__(85),
		__webpack_require__(86),
		__webpack_require__(87),
	], __WEBPACK_AMD_DEFINE_RESULT__ = function(requirejs, Tern, Deferred, Objects, Messages, i18nUtil, ecma5, ecma6, browser, chai) {
		
		var ternserver, 
			scriptresolver, 
			fileclient,
			defs = [ecma5, ecma6, browser, chai],
			//these are in the same order as the array above to avoid a walk of the array
			defNames = ["ecma5", "ecma6", "browser", "chai"]; //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$
		
		var plugins = {
			required: {
				"doc_comment": {
					"name": Messages["ternDocPluginName"],
					"description": Messages["ternDocPluginDescription"],
					"fullDocs": true,
					"version": "0.12.0" //$NON-NLS-1$
				},
				"plugins": {
					"name": Messages["ternPluginsPluginName"],
					"description": Messages["ternPluginsPluginDescription"],
					"version": "1.0" //$NON-NLS-1$
				},
				"open_impl": {
					"name": Messages["openImplPluginName"],
					"description": Messages["openImplPluginDescription"],
					"version": "1.0" //$NON-NLS-1$
				},
				"html": {
					"name": Messages["htmlDepPluginName"],
					"description": Messages["htmlDepPluginDescription"],
					"version": "1.0" //$NON-NLS-1$
				},
				"refs": {
					"name": Messages["findTypesName"],
					"description": Messages["findTypesDescription"],
					"version": "1.0" //$NON-NLS-1$
				},
				"jsdoc": {
					"name": Messages["jsdocPluginName"],
					"description": Messages["jsdocPluginDescription"],
					"version": "1.0" //$NON-NLS-1$
				},
				"eslint": {
					"name": Messages["eslintPluginName"],
					"description": Messages["eslintPluginDescription"],
					"version": "1.0" //$NON-NLS-1$
				},
				"outliner": {
					"name": Messages["outlinerPluginName"],
					"description": Messages["outlinerPluginDescription"],
					"version": "1.0" //$NON-NLS-1$
				}
			},
			optional: {
				"amqp": {
					"name": Messages["orionAMQPPluginName"],
					"description": Messages["orionAMQPPluginDescription"],
					"version": "0.9.1", //$NON-NLS-1$
					"env": "amqp" //$NON-NLS-1$
				},
				"angular": {
					"name": Messages["orionAngularPluginName"],
					"description": Messages["orionAngularPluginDescription"],
					"version": "0.12.0" //$NON-NLS-1$
				},
				"express": {
					"name": Messages["orionExpressPluginName"],
					"description": Messages["orionExpressPluginDescription"],
					"version": "4.12.4", //$NON-NLS-1$
					"env": "express" //$NON-NLS-1$
				},
				"mongodb": {
					"name": Messages["orionMongoDBPluginName"],
					"description": Messages["orionMongoDBPluginDescription"],
					"version": "1.1.21", //$NON-NLS-1$
					"env": "mongodb" //$NON-NLS-1$
				},
				"mysql": {
					"name": Messages["orionMySQLPluginName"],
					"description": Messages["orionMySQLPluginDescription"],
					"version": "2.7.0", //$NON-NLS-1$
					"env": "mysql" //$NON-NLS-1$
				},
				"node": {
					"name": Messages["orionNodePluginName"],
					"description": Messages["orionNodePluginDescription"],
					"version": "0.12.0" //$NON-NLS-1$
				},
				"postgres": {
					"name": Messages["orionPostgresPluginName"],
					"description": Messages["orionPostgresPluginDescription"],
					"version": "4.4.0", //$NON-NLS-1$
					"env": "pg" //$NON-NLS-1$
				},
				"redis": {
					"name": Messages["orionRedisPluginName"],
					"description": Messages["orionRedisPluginDescription"],
					"version": "0.12.1", //$NON-NLS-1$
					"env": "redis" //$NON-NLS-1$
				},
				"requirejs": {
					"name": Messages["orionRequirePluginName"],
					"description": Messages["orionRequirePluginDescription"],
					"version": "0.12.0" //$NON-NLS-1$
				}
			}
		};
		/**
		 * @name TernServer
		 * @description Creates a new TernServer
		 * @param {ScriptResolver} scriptResolver The resolver used to find scripts for getFile
		 * @returns {TernServer} A new TernServer instance
		 */
		function TernServer(scriptResolver) {
			scriptresolver = scriptResolver;
			fileclient = scriptresolver.getFileClient();
		}
		
		Objects.mixin(TernServer.prototype, {
			/**
		     * @description Add a file to the Tern server
		     * @param {String} file The fully qualified name of the file
		     * @param {String} text The optional text of the file 
		     */
		    addFile: function addFile(file, text) {
		    	if(ternserver) {
			    	ternserver.addFile(file, text);
				}
		    },
		    /**
		     * @description Checks if the type reference at the given offset matches the given origin type
		     * @param {String} file The fully qualified name of the file context
		     * @param {Number} offset The offset of the identifier to check
		     * @param {Object} origin The original type information
		     * @param {Array.<Object>} files The optional array of file objects
		     * @param {Function} callback The callback which is called to return the results
		     */
		    checkRef: function checkRef(file, offset, origin, files, callback) {
		    	if(ternserver) {
		    		ternserver.request({
			           query: {
				           type: "checkRef",  //$NON-NLS-1$
				           file: file,
				           end: offset,
				           origin: origin
			           },
			           files: Array.isArray(files) ? files : []},
			           function(error, type) {
							if(error) {
								callback(null, {error: typeof error === 'string' ? error : error.message, message: Messages['failedType']});
							} else {
								callback(type);
							}
			           });
				} else {
			       callback(null, {message: Messages['failedTypeNoServer']});
			   	}
		
		    },
		    /**
		     * @description Computes content assist for the given options
		     * @param {String} file The fully qualified name of the file context
		     * @param {Number} offset The offset of the completion
		     * @param {Boolean} keywords If keywords should be returned as well
		     * @param {Array.<Object>} files The optional array of file objects
		     * @param {Function} callback The callback which is called to return the results
		     */
		    completions: function completions(file, offset, keywords, files, callback) {
		    	if(ternserver) {
			       ternserver.request({
			           query: {
			           type: "completions",  //$NON-NLS-1$
			           file: file,
			           types: true,
			           origins: true,
			           urls: true,
			           docs: true,
			           end: offset,
			           sort:true,
			           includeKeywords: keywords,
			           caseInsensitive: true
			           },
			           files: Array.isArray(files) ? files : []},
			           function(error, completions) {
			               if(error) {
								callback(null, {error: error.message, message: Messages['failedToComputeProposals']});
			               } else if(completions && completions.completions) {
								callback(completions.completions);
			               } else {
								callback([]);
			               }
			           });
		
			   } else {
			       callback(null, {message: Messages['failedToComputeProposalsNoServer']});
			   }
		    },
		    /**
		     * @description Computes the definition of the identifier at the given offset
		     * @param {String} file The fully qualified name of the file context
		     * @param {Number} offset The offset of the completion
		     * @param {Boolean} guess If we should take a guess at the definition if one cannot be computed
		     * @param {Array.<Object>} files The optional array of file objects
		     * @param {Function} callback The callback which is called to return the results
		     */
		    definition: function definition(file, offset, guess, files, callback) {
		    	if(ternserver) {
			       ternserver.request({
			           query: {
				           type: "definition",  //$NON-NLS-1$
				           file: file,
				           end: offset,
				           guess: guess
			           },
			           files: Array.isArray(files) ? files : []},
			           function(error, decl) {
			               if(error) {
			                  callback(null, {error: error.message, message: Messages['failedToComputeDecl']});
			               }
			               if(decl && typeof decl.start === 'number' && typeof decl.end === "number") {
								callback(decl);
							} else {
								callback(null);
							}
			           });
			   } else {
			       callback(null, {message: Messages['failedToComputeDeclNoServer']});
			   }
		    },
		    /**
		     * @description Deletes the given file from the server. Does nothing if the file does not exist
		     * @param {String] file The fully qualified name of the file to delete
		     */
		    delFile: function delFile(file) {
		    	if(ternserver) {
		            ternserver.delFile(file);
		        }
		    },
		    /**
		     * @description Computes the documentation associated with the given offset in the file
		     * @param {String} file The fully qualified name of the file context
		     * @param {Number} offset The offset of the completion
		     * @param {String} docFormat The format of the doc. If not given 'full' is assumed
		     * @param {Array.<Object>} files The optional array of file objects
		     * @param {Function} callback The callback which is called to return the results
		     */
		    documentation: function documentation(file, offset, docFormat, files, callback) {
		    	if(ternserver) {
			       ternserver.request({
			           query: {
				           type: "documentation",  //$NON-NLS-1$
				           file: file,
				           end: offset,
				           docFormat: typeof docFormat === 'string' ? docFormat : 'full' //$NON-NLS-1$
			           },
			           files: Array.isArray(files) ? files : []},
			           function(error, doc) {
			               if(error) {
			                   callback(null, {error: error.message, message: Messages['failedToComputeDoc']});
			               } else if(doc && doc.doc) {
								callback(doc.doc);
			               } else {
								callback(null);
			               }
			           });
			   } else {
			       callback(null, {request: 'documentation', message: Messages['failedToComputeDocNoServer']}); //$NON-NLS-1$
			   }
		    },
		    /**
		     * @description Returns the list of environments from plugins in Tern, if any
		     * @param {Function} callback The callback which is called to return the results
		     */
		    environments: function environments(callback) {
		    	if(ternserver) {
			       ternserver.request({
			           query: {
				           type: 'environments' //$NON-NLS-1$
			           }}, 
			           function(error, envs) {
			               if(error) {
			                   callback(null, {error: error.message, message: Messages['failedGetEnvs']});
			               }
			               if(typeof envs === 'object') {
								callback(envs);
							} else {
								callback(null);
							}
			           });
			   } else {
			       callback(null, {message: Messages['failedGetEnvsNoServer']});
			   }
		    },
		    /**
		     * @description Computes the implementation of the identifier at the given offset
		     * @param {String} file The fully qualified name of the file context
		     * @param {Number} offset The offset of the completion
		     * @param {Boolean} guess If we should take a guess at the definition if one cannot be computed
		     * @param {Array.<Object>} files The optional array of file objects
		     * @param {Function} callback The callback which is called to return the results
		     */
		    implementation: function implementation(file, offset, guess, files, callback) {
		    	if(ternserver) {
			       ternserver.request({
			           query: {
				           type: "implementation",  //$NON-NLS-1$
				           file: file,
				           end: offset,
				           guess: guess
			           },
			           files: Array.isArray(files) ? files : []},
			           function(error, impl) {
			               if(error) {
			                   callback(null, {error: error.message, message: Messages['failedToComputeImpl']});
			               } else  if(impl && impl.implementation && typeof impl.implementation.start === 'number' && typeof impl.implementation.end === "number") {
								callback(impl.implementation);
							} else {
								callback(null);
							}
			           });
			   } else {
			       callback(null, {message: Messages['failedToComputeImplNoServer']});
			   }
		    },
		    /**
		     * @description Returns the list of plugins installed in Tern, if any
		     * @param {Function} callback The callback which is called to return the results
		     */
		    installedPlugins: function installedPlugins(callback) {
		    	if(ternserver) {
			       ternserver.request({
			           query: {
				           type: 'installed_plugins' //$NON-NLS-1$
			           }}, 
			           function(error, plugins) {
			               if(error) {
								callback(null, {error: error.message, message: Messages['failedGetInstalledPlugins']});
			               }
			               if(plugins !== null && typeof plugins === 'object') {
								callback(plugins);
							} else {
								callback([]);
							}
			           });
			   } else {
			       callback(null, {message: Messages['failedGetInstalledPluginsNoServer']});
			   }
		    },
		    /**
		     * @description Runs ESLint on the given file context
		     * @param {String} file The fully qualified name of the file context
		     * @param {Object} rules The map of ESLint rules
		     * @param {Object} env The map of existing environment names
		     * @param {Array.<Object>} files The optional array of file objects
		     * @param {Function} callback The callback which is called to return the results
		     */
		    lint: function lint(file, rules, env, files, callback) {
		    	if(ternserver) {
					ternserver.request({
						query: {
							type: "lint",  //$NON-NLS-1$
							file: file,
							config: {
								rules: rules
							},
							env: env ? env : Object.create(null)
						},
						files: Array.isArray(files) ? files : []},
						function(error, problems) {
							if(error) {
								callback(null, {error: error.message, message: Messages['failedToComputeProblems']});
							} else if(problems && Array.isArray(problems)) {
								for (var i = 0; i < problems.length; i++) {
									if (typeof problems[i].lineNumber === 'number'){
										problems[i].line = problems[i].lineNumber;
									}
									if (typeof problems[i].description === 'string'){
										problems[i].message = problems[i].description;
									} else if (typeof problems[i].message === 'string' && problems[i].args){
										var message = i18nUtil.formatMessage(problems[i].message, problems[i].args);
										problems[i].message = message;
									}
								}
								callback(problems);
							} else {
								callback([]);
							}
						});
				} else {
			       callback(null, {message: Messages['failedToComputeProblemsNoServer']});
			   }
		    },
		    /**
		     * @description Computes an outline of the given file
		     * @param {String} file The fully qualified name of the file context
		     * @param {Array.<Object>} files The optional array of file objects
		     * @param {Function} callback The callback which is called to return the results
		     */
		    outline: function outline(file, files, callback) {
		    	if(ternserver) {
		    		ternserver.request({
						query: {
							type: "outline", //$NON-NLS-1$
							file: file
						},
						files: Array.isArray(files) ? files : []},
						function(error, outline) {
							if(error) {
								callback(null, {error: error.message, message: Messages['failedToComputeOutline']});
							} else if(outline && Array.isArray(outline)) {
								callback(outline);
							} else {
								callback([]);
							}
						}
					);
				} else {
			       callback(null, {message: Messages['failedToComputeOutlineNoServer']});
			   }
		    },
		    /**
		     * @description Computes a rename array for the identifier at the given offset
		     * @param {String} file The fully qualified name of the file context
		     * @param {Number} offset The offset of the completion
		     * @param {String} newname The new name to change to
		     * @param {Array.<Object>} files The optional array of file objects
		     * @param {Function} callback The callback which is called to return the results
		     */
		    rename: function rename(file, offset, newname, files, callback) {
		    	if(ternserver) {
			       ternserver.request({
			           query: {
				           type: "rename",  //$NON-NLS-1$
				           file: file,
				           end: offset,
				           newName: newname
			           },
			           files: Array.isArray(files) ? files : []},
			           function(error, changes) {
			               if(error) {
								callback(null, {error: error.message, message: Messages['failedRename']});
			               } else if(changes && Array.isArray(changes.changes)) {
								callback(changes.changes);
			               } else {
								callback([]);
			               }
			           });
			   } else {
			       callback(null, {message: Messages['failedRenameNoServer']});
			   }
		    },
			/**
			 * @description Start up the Tern server, send a message after trying
		     * @param {Object} jsonOptions The optional map of JSON options to start the server with
		     * @param {Function} callback The callback which is called to return the results
		     */
		    startServer: function startServer(jsonOptions, callback) {
				if (ternserver){
					ternserver.reset();
					ternserver = null;
				}
		        var options = {
		                async: true,
		                debug: false,
		                projectDir: '/',
		                getFile: doRead
				};
		        var pdir = 'tern/plugin/'; //$NON-NLS-1$
		        var ddir = '';
		        var defNames = [];
		        if (jsonOptions) {
					if (jsonOptions.plugins){
						options.plugins = jsonOptions.plugins;
					}
					if(jsonOptions.pluginDir) {
						pdir = jsonOptions.pluginsDir;
					}
					if (Array.isArray(jsonOptions.libs)){
						defNames = jsonOptions.libs;
						ddir = jsonOptions.defsDir;
					}
					if (Array.isArray(jsonOptions.defs)){
						defNames = jsonOptions.defs;
						ddir = jsonOptions.defsDir;
					}
					if (typeof jsonOptions.ecmaVersion === 'number'){
						options.ecmaVersion = jsonOptions.ecmaVersion;
					}
					if (typeof jsonOptions.dependencyBudget === 'number'){
						options.dependencyBudget = jsonOptions.dependencyBudget;
					}
		        }
		        function defaultStartUp(err) {
					options.plugins = plugins;
					options.defs = defs;
					ternserver = new Tern.Server(options);
					callback(err);
		        }
		        if(!options.plugins && (!defNames || defNames.length < 1)) {
					defaultStartUp();
		        } else {
					Deferred.all(loadPlugins(options.plugins, pdir)).then(/* @callback */ function(plugins) {
						Deferred.all(loadDefs(defNames, ddir)).then(function(json) {
								options.defs = json;
								ternserver = new Tern.Server(options);
								callback();
							}, defaultStartUp);
			        }, defaultStartUp);
		        }
		    },
		    /**
		     * @description Computes the type information at the given offset
		     * @param {String} file The fully qualified name of the file context
		     * @param {Number} offset The offset of the completion
		     * @param {Function} callback The callback which is called to return the results
		     */
		    type: function type(file, offset, callback) {
		    	if(ternserver) {
		    		ternserver.request({
			           query: {
				           type: "type",  //$NON-NLS-1$
				           file: file,
				           end: offset
			           }},
			           function(error, type) {
			               if(error) {
			                   callback(null, {error: typeof error === 'string' ? error : error.message, message: Messages['failedType']});
			               } else {
								callback(type);
			               }
			           });
			 	} else {
			       callback(null, {message: Messages['failedTypeNoServer']});
			   }
		    }
		
		});
		
	    /**
	     * @description Loads the plugins listed in the given plugins object
	     * @param {Object} plugins The object of plugins
	     * @param {String} pluginsDir The base directory to load plugins from, if not defined, the default of 'tern/plugin/' is assumed
	     * @returns {Promise} The promise to resolve all of the plugin loads
	     * @since 11.0
	     */
	    function loadPlugins(plugins, pluginsDir) {
			var promises = [];
			if(plugins) {
				Object.keys(plugins).forEach(function(key) {
					if(plugins.required[key] || plugins.optional[key]) {
						//default plugins are statically loaded
						return;
					}
					var plugin = plugins[key];
					if(!plugin || typeof plugin !== 'object') {
						return;
					}
					var loc = plugin.location;
					if(typeof loc !== 'string') {
						if(typeof pluginsDir === 'string') {
							loc = pluginsDir + key;
						} else {
							//assume it is in /tern/plugin/
							loc = 'tern/plugin/' + key; //$NON-NLS-1$
						}
					}
					var deferred = new Deferred();
					try {
						promises.push(deferred);    		
						requirejs([loc], function(_) {
							deferred.resolve(_);
						},
						function(err) {
							deferred.reject(err);
						});
					}
					catch(err) {
						deferred.reject(err);
					}
				});
			}
			return promises;
	    }
	    
	    /**
	     * @description Load any defs from the .tern-project file
	     * @param {Array.<String>|Object} defs The definitions, either from an array of names or an object of names with additional metadata
	     * @param {String} projectLoc The location of the project we are reading configs from
	     * @returns {Promise} Returns a promise to resolve all def loads
	     * @since 11.0
	     */
	    function loadDefs(defs, projectLoc) {
			var _defs = [];
			if(Array.isArray(defs)) {
				defs.forEach(function(_def) {
					if(/^\.definitions/.test(_def)) {
						if(typeof _def === 'string') {
							var deferred = _loadDef(_def, projectLoc);
							if(deferred) {
								_defs.push(deferred);
							}
						}
					} else {
						var idx = defNames.indexOf(_def);
						if(idx > -1) {
							//a default def, get it
							_defs.push(new Deferred().resolve(defs[idx]));
						} else {
							//TODO do we want to support loading defs from arbitrary locations?
						}
					}
				});
			}
			return _defs;
	    }
	    
	    /**
	     * @description Delegate to actually load a definition
	     * @private
	     * @param {String} def The name of the definition load try and load
	     * @param {String} projectLoc The location of the project we are reading configs from
	     * @since 11.0
	     */
	    function _loadDef(def, projectLoc) {
			var loc = def;
			if(projectLoc) {
				loc = projectLoc + loc;
			}
			if(!/$.json/i.test(def)) {
				loc = loc + '.json'; //$NON-NLS-1$
			}
			var deferred = new Deferred();
			doRead(loc, function(err, contents) {
				if(typeof contents === 'string') {
					deferred.resolve(JSON.parse(contents));
				} else {
					deferred.reject(err);
				}
			});
			return deferred;
	    }
	    
	    /**
		 * @description Handler for Tern read requests
		 * @param {Object|String}} file The file to read
		 * @param {Function} callback The finction to call back to
		 */
		function doRead(file, callback) {
			if(typeof file === 'object') {
				var _l = file.logical;
				var val = Object.create(null);
				val.logical = _l;
				scriptresolver.getWorkspaceFile(_l).then(function(files) {
					if(files && files.length > 0) {
						var rel = scriptresolver.resolveRelativeFiles(_l, files, {location: file.file, contentType: {name: 'JavaScript'}}); //$NON-NLS-1$
						if(rel && rel.length > 0) {
							return fileclient.read(rel[0].location).then(function(contents) {
								val.contents = contents;
								val.file = rel[0].location;
								val.path = rel[0].path;
								callback(null, val);
							},
							function(reject) {
								callback(reject);
							});
						} 
						callback(i18nUtil.formatMessage(Messages['failedToReadFile'], _l));
					} else {
						callback(i18nUtil.formatMessage(Messages['failedToReadFile'], _l));
					}
				},
				/* @callback */ function(err) {
					callback(i18nUtil.formatMessage(Messages['failedToReadFile'], _l));
				});
			} else {
				if(!/\.js|\.htm|\.htm$/ig.test(file)) {
					//no extension given, guess at js
					file += '.js'; //$NON-NLS-1$
				}
				try {
					return fileclient.read(file).then(function(contents) {
								callback(null, contents);
							},
							/* @callback */ function(err) {
								callback(err);
							});
				}
				catch(err) {
					callback(i18nUtil.formatMessage(Messages['failedToReadFile'], file));
				}
			}
		}
	    
	    return TernServer;
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*******************************************************************************
	 * @license
	 * Copyright (c) 2015 IBM Corporation and others.
	 * All rights reserved. This program and the accompanying materials are made 
	 * available under the terms of the Eclipse Public License v1.0 
	 * (http://www.eclipse.org/legal/epl-v10.html), and the Eclipse Distribution 
	 * License v1.0 (http://www.eclipse.org/org/documents/edl-v10.html). 
	 *
	 * Contributors:
	 *     IBM Corporation - initial API and implementation
	 *******************************************************************************/
	/*eslint-env amd */
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
		__webpack_require__(3), 
		__webpack_require__(9), 
		__webpack_require__(10)
	], __WEBPACK_AMD_DEFINE_RESULT__ = function(infer, tern, resolver) {
	
		var templates = [
		/* eslint-disable missing-nls */
			{
				prefix: "amqp",
				name: "amqp",
				nodes: {top:true, member:false, prop:false},
				description: " - Node.js require statement for AMQP framework",
				template: "var amqp = require('amqp');\n"
			},
			{
				prefix: "amqp",
				name: "amqp connection",
				nodes: {top:true, member:false, prop:false},
				description: " - create a new AMQP connection ",
				template: "var amqp = require('amqp');\n" +
						  "var ${connection} = amqp.createConnection({\n" +  
						  "\thost: ${host},\n" + 
						  "\tport: ${port},\n" + 
						  "\tlogin: ${login},\n" + 
						  "\tpassword: ${password}\n" + 
						  "});\n"
			},
			{
				prefix: "amqp",
				name: "amqp on",
				nodes: {top:true, member:false, prop:false},
				description: " - create a new AMQP connection on statement",
				template: "${connection}.on(${event}, function() {\n" +  
						  "\t${cursor}\n" + 
						  "});\n"
			},
			{
				prefix: "amqp",
				name: "amqp queue",
				nodes: {top:true, member:false, prop:false},
				description: " - create a new AMQP connection queue statement",
				template: "${connection}.queue(${id}, function(queue) {\n" + 
						  "\tqueue.bind(\'#\'); //catch all messages\n" +
						  "\tqueue.subscribe(function (message, headers, deliveryInfo) {\n" +
						  "\t\t// Receive messages\n" +
						  "\t});\n" +
						  "\t${cursor}\n" + 
						  "});\n"
			},
			{
				prefix: "amqp",
				name: "amqp exchange",
				nodes: {top:true, member:false, prop:false},
				description: " - create a new AMQP connection exchange",
				template: "var exchange = ${connection}.exchange(${id}, {type: \'topic\'}, function(exchange) {\n" +  
						  "\t${cursor}\n" + 
						  "});\n"
			}
			/* eslint-enable missing-nls */
		];
		
		/**
		 * @description Gets the templates that apply to given context
		 * @param {tern.File} file The backing file object from Tern
		 * @param {Number} wordStart The start of the word to complete
		 * @param {Number} wordEnd The end of the word to complete
		 * @param {Function} gather The collector function to call when wanting to add a proposal
		 * @since 9.0
		 * @callback
		 */
		function getTemplates(file, wordStart, wordEnd, gather) {  //file, start, end, completions) {
			var expr = infer.findExpressionAround(file.ast, wordStart, wordEnd, file.scope);
			var tmps = resolver.getTemplatesForNode(templates, expr, wordStart);
			if(tmps) {
				tmps.forEach(function(template) {
					gather(template.name, null, 0, function(c) {
						c.prefix = template.prefix;
						c.description = template.description;
						c.template = template.template;
						c.segments = template.segments;
						c.origin = 'amqp'; //$NON-NLS-1$
						c.type = 'template'; //$NON-NLS-1$
					});
				});
		    }
		} 
		
		/* eslint-enable missing-nls */
		tern.registerPlugin("amqp", /* @callback */ function(server, options) { //$NON-NLS-1$
		    return {
		      defs : defs,
		      passes: {
		      	variableCompletion: getTemplates
		      }
		    };
		});
		
		/* eslint-disable missing-nls */
		var defs = {
			  "!name": "amqp",
			  "!define": {
			  	"!node": {
			  		"amqp": {
				  		"Connection": "Connection",
				  		"createConnection": "fn(options: Object, implOptions: Object, readyCallback: fn()) -> +Connection"
			  		}
			  	},
			    "Exchange.!3": {
			      "type": "string"
			    },
			    "createExchangeErrorHandlerFor.!ret": "fn(err: ?)",
			    "Connection.prototype._bodyToBuffer.!ret": "[Connection.prototype._bodyToBuffer.!ret.<i>]",
			    "Connection.prototype._bodyToBuffer.!ret.<i>": {
			      "contentType": "string"
			    },
			    "Connection.prototype._parseURLOptions.!ret": {
			      "ssl": {
			        "enabled": "bool"
			      }
			    },
			    "Connection.prototype._sendHeader.!2": {
			      "reserved1": "number",
			      "routingKey": "string",
			      "noWait": "bool"
			    },
			    "serializer.serializeFields.!2": {
			      "reserved1": "number",
			      "routingKey": "string",
			      "noWait": "bool"
			    },
			    "Queue.prototype.subscribeRaw.!0": {
			      "state": "string"
			    },
			    "Message.!1": {
			      "parseError": "+Error",
			      "rawData": "string"
			    },
			    "parseTable.!ret": {
			      "!doc": "XXX check if bitIndex greater than 7?"
			    },
			    "parseFields.!1": "[?]",
			    "parseFields.!ret": {}
			  },
			  "methods": {
			    "<i>": {
			      "!doc": "debug(name);"
			    },
			    "!doc": "methods keyed on their name"
			  },
			  "Channel": {
			    "prototype": {
			      "closeOK": "fn()",
			      "reconnect": "fn()",
			      "_taskPush": "fn(reply: ?, cb: ?)",
			      "_tasksFlush": "fn()",
			      "_handleTaskReply": "fn(channel: ?, method: ?, args: ?) -> bool",
			      "_onChannelMethod": "fn(channel: ?, method: ?, args: ?)",
			      "close": "fn(reason: ?)"
			    },
			    "!type": "fn(connection: +Connection, channel: number)",
			    "!doc": "This class is not exposed to the user."
			  },
			  "Exchange": {
			    "prototype": {
			      "_onMethod": "fn(channel: ?, method: ?, args: ?) -> bool",
			      "publish": {
			        "!type": "fn(routingKey: ?, data: ?, options: ?, callback: ?)",
			        "!doc": "exchange.publish('routing.key', 'body'); the third argument can specify additional options - mandatory (boolean, default false) - immediate (boolean, default false) - contentType (default 'application/octet-stream') - contentEncoding - headers - deliveryMode - priority (0-9) - correlationId - replyTo - expiration - messageId - timestamp - userId - appId - clusterId the callback is optional and is only used when confirm is turned on for the exchange"
			      },
			      "_awaitConfirm": {
			        "!type": "fn(task: ?, callback: ?)",
			        "!doc": "registers tasks for confirms"
			      },
			      "cleanup": {
			        "!type": "fn()",
			        "!doc": "do any necessary cleanups eg."
			      },
			      "destroy": "fn(ifUnused: ?)",
			      "unbind": "fn()",
			      "bind": "fn()",
			      "bind_headers": "fn()"
			    },
			    "!type": "fn(connection: +Connection, channel: number, name: ?, options: Exchange.!3, openCallback: ?)",
			    "binds": "number",
			    "exchangeBinds": "number",
			    "sourceExchanges": {
			      "<i>": "+Exchange"
			    },
			    "_sequence": "number",
			    "_unAcked": {},
			    "_addedExchangeErrorHandler": "bool",
			    "state": "string",
			    "channel": "number",
			    "connection": "+Connection",
			    "_tasks": "[?]"
			  },
			  "createExchangeErrorHandlerFor": {
			    "!type": "fn(exchange: +Exchange) -> fn(err: ?)",
			    "!doc": "creates an error handler scoped to the given `exchange`"
			  },
			  "Connection": {
			    "prototype": {
			      "setOptions": "fn(options: ?)",
			      "setImplOptions": "fn(options: ?)",
			      "connect": "fn()",
			      "reconnect": "fn()",
			      "disconnect": "fn()",
			      "addAllListeners": "fn()",
			      "heartbeat": "fn()",
			      "exchange": {
			        "!type": "fn(name: ?, options: Exchange.!3, openCallback: ?) -> +Exchange",
			        "!doc": "connection.exchange('my-exchange', { type: 'topic' }); Options - type 'fanout', 'direct', or 'topic' (default) - passive (boolean) - durable (boolean) - autoDelete (boolean, default true)"
			      },
			      "exchangeClosed": {
			        "!type": "fn(name: ?)",
			        "!doc": "remove an exchange when it's closed (called from Exchange)"
			      },
			      "queue": {
			        "!type": "fn(name: ?) -> +Queue",
			        "!doc": "Options - passive (boolean) - durable (boolean) - exclusive (boolean) - autoDelete (boolean, default true)"
			      },
			      "queueClosed": {
			        "!type": "fn(name: ?)",
			        "!doc": "remove a queue when it's closed (called from Queue)"
			      },
			      "publish": {
			        "!type": "fn(routingKey: ?, body: ?, options: ?, callback: ?)",
			        "!doc": "Publishes a message to the default exchange."
			      },
			      "_bodyToBuffer": "fn(body: ?) -> [?]",
			      "_inboundHeartbeatTimerReset": "fn()",
			      "_outboundHeartbeatTimerReset": "fn()",
			      "_saslResponse": "fn() -> ?|string",
			      "_onMethod": "fn(channel: number, method: methods.<i>, args: parseFields.!ret)",
			      "_parseURLOptions": {
			        "!type": "fn(connectionString: ?) -> Connection.prototype._parseURLOptions.!ret",
			        "!doc": "Generate connection options from URI string formatted with amqp scheme."
			      },
			      "_chooseHost": {
			        "!type": "fn() -> !this.options.host",
			        "!doc": "If you pass a array of hosts, lets choose a random host or the preferred host number, or then next one."
			      },
			      "_createSocket": "fn()",
			      "end": "fn()",
			      "_getSSLOptions": "fn() -> !this.sslConnectionOptions",
			      "_startHandshake": {
			        "!type": "fn()",
			        "!doc": "Time to start the AMQP 7-way connection initialization handshake! 1."
			      },
			      "_sendBody": {
			        "!type": "fn(channel: number, body: ?, properties: ?)",
			        "!doc": "Parse helpers "
			      },
			      "_sendHeader": {
			        "!type": "fn(channel: number, size: ?, properties: ?)",
			        "!doc": "connection: the connection channel: the channel to send this on size: size in bytes of the following message properties: an object containing any of the following: - contentType (default 'application/octet-stream') - contentEncoding - headers - deliveryMode - priority (0-9) - correlationId - replyTo - expiration - messageId - timestamp - userId - appId - clusterId"
			      },
			      "_sendMethod": "fn(channel: number, method: ?, args: ?)",
			      "generateChannelId": {
			        "!type": "fn() -> !this.channelCounter",
			        "!doc": "tries to find the next available id slot for a channel"
			      }
			    },
			    "!type": "fn(connectionArgs: ?, options: ?, readyCallback: ?)",
			    "connectionAttemptScheduled": {
			      "!type": "bool",
			      "!doc": "Set to false, so that if we fail in the reconnect attempt, we can schedule another one."
			    },
			    "_defaultExchange": "+Exchange",
			    "channelCounter": "number",
			    "_blocked": "bool",
			    "channels": {
			      "!doc": "In the case where this is a reconnection, do not trample on the existing channels.",
			      "<i>": "+Queue"
			    },
			    "exchanges": {
			      "<i>": "+Exchange"
			    },
			    "parser": {
			      "!type": "+AMQPParser",
			      "!doc": "Reset parser state"
			    },
			    "readyEmitted": {
			      "!type": "bool",
			      "!doc": "Set 'ready' flag for auth failure detection."
			    },
			    "hosti": {
			      "!type": "number",
			      "!doc": "If this is already set, it looks like we want to choose another one."
			    },
			    "<i>": "fn()",
			    "sslConnectionOptions": {}
			  },
			  "serializer": {
			    "serializeFloat": "fn(b: ?, size: number, value: ?, bigEndian: ?)",
			    "serializeInt": "fn(b: ?, size: number, int: number)",
			    "serializeShortString": "fn(b: ?, string: ?)",
			    "serializeLongString": "fn(b: ?, string: ?)",
			    "serializeDate": "fn(b: ?, date: ?)",
			    "serializeBuffer": "fn(b: ?, buffer: ?)",
			    "serializeBase64": "fn(b: ?, buffer: ?)",
			    "isBigInt": "fn(value: ?) -> bool",
			    "getCode": "fn(dec: ?) -> string",
			    "isFloat": "fn(value: ?) -> bool",
			    "serializeValue": "fn(b: ?, value: ?)",
			    "serializeTable": "fn(b: ?, object: ?)",
			    "serializeArray": "fn(b: ?, arr: ?)",
			    "serializeFields": "fn(buffer: ?, fields: ?, args: ?, strict: bool)"
			  },
			  "methodTable": {
			    "<i>": {
			      "<i>": "methods.<i>"
			    },
			    "!doc": "a look up table for methods recieved indexed on class id, method id"
			  },
			  "classes": {
			    "!doc": "classes keyed on their index"
			  },
			  "Queue": {
			    "prototype": {
			      "subscribeRaw": "fn(options: Queue.consumerTagListeners.<i>, messageListener: Queue.consumerTagListeners.<i>)",
			      "unsubscribe": "fn(consumerTag: ?)",
			      "subscribe": "fn(options: ?, messageListener: ?)",
			      "shift": {
			        "!type": "fn(reject: ?, requeue: ?)",
			        "!doc": "Acknowledges the last message"
			      },
			      "bind": "fn(exchange: string, routingKey: string, callback: string)",
			      "unbind": "fn(exchange: string, routingKey: string)",
			      "bind_headers": "fn()",
			      "unbind_headers": "fn()",
			      "destroy": "fn(options: ?)",
			      "purge": "fn()",
			      "_onMethod": "fn(channel: ?, method: ?, args: ?)",
			      "_onContentHeader": "fn(channel: number, classInfo: ?, weight: number, properties: parseFields.!ret, size: number)",
			      "_onContent": "fn(channel: number, data: ?)",
			      "flow": "fn(active: ?)",
			      "subscribeJSON": "Queue.prototype.subscribe"
			    },
			    "!type": "fn(connection: +Connection, channel: number, name: ?, options: ?, callback: ?)",
			    "name": "string",
			    "_bindings": {
			      "<i>": {
			        "<i>": "number"
			      }
			    },
			    "consumerTagListeners": {
			      "<i>": {
			        "state": "string"
			      }
			    },
			    "consumerTagOptions": {
			      "<i>": "Queue.consumerTagListeners.<i>"
			    },
			    "options": {
			      "autoDelete": "bool",
			      "closeChannelOnUnsubscribe": "bool"
			    },
			    "state": "string",
			    "_bindCallback": "string",
			    "_sequence": "number",
			    "confirm": "bool",
			    "currentMessage": "+Message"
			  },
			  "AMQPParser": {
			    "prototype": {
			      "throwError": {
			        "!type": "fn(error: string)",
			        "!doc": "If there's an error in the parser, call the onError handler or throw"
			      },
			      "execute": {
			        "!type": "fn(data: ?)",
			        "!doc": "Everytime data is recieved on the socket, pass it to this function for parsing."
			      },
			      "_parseMethodFrame": "fn(channel: number, buffer: ?)",
			      "_parseHeaderFrame": "fn(channel: number, buffer: ?)"
			    },
			    "!type": "fn(version: string, type: string)",
			    "!doc": "An interruptible AMQP parser.",
			    "isClient": "bool",
			    "state": "string",
			    "parse": "fn(data: ?) -> AMQPParser.parse",
			    "onMethod": "fn(channel: number, method: methods.<i>, args: parseFields.!ret)",
			    "onContent": "fn(channel: number, data: ?)",
			    "onContentHeader": "fn(channel: number, classInfo: ?, weight: number, properties: parseFields.!ret, size: number)",
			    "onHeartBeat": "fn()",
			    "onError": "fn(e: string)"
			  },
			  "maxFrameBuffer": {
			    "!type": "number",
			    "!doc": "parser"
			  },
			  "channelMax": {
			    "!type": "number",
			    "!doc": "copying qpid)"
			  },
			  "defaultPorts": {
			    "amqp": "number",
			    "amqps": "number"
			  },
			  "defaultOptions": {
			    "host": "string",
			    "port": "number",
			    "login": "string",
			    "password": "string",
			    "authMechanism": "string",
			    "vhost": "string",
			    "connectionTimeout": "number",
			    "ssl": {
			      "enabled": "bool"
			    }
			  },
			  "defaultSslOptions": {
			    "port": "number",
			    "ssl": {
			      "rejectUnauthorized": "bool"
			    }
			  },
			  "defaultImplOptions": {
			    "defaultExchangeName": "string",
			    "reconnect": "bool",
			    "reconnectBackoffStrategy": "string",
			    "reconnectExponentialLimit": "number",
			    "reconnectBackoffTime": "number"
			  },
			  "defaultClientProperties": {
			    "platform": "string",
			    "product": "string"
			  },
			  "Message": {
			    "prototype": {
			      "acknowledge": {
			        "!type": "fn(all: ?)",
			        "!doc": "Acknowledge receipt of message."
			      },
			      "reject": {
			        "!type": "fn(requeue: ?)",
			        "!doc": "Reject an incoming message."
			      }
			    },
			    "!type": "fn(queue: +Queue, args: ?)",
			    "!doc": "Properties: - routingKey - size - deliveryTag - contentType (default 'application/octet-stream') - contentEncoding - headers - deliveryMode - priority (0-9) - correlationId - replyTo - experation - messageId - timestamp - userId - appId - clusterId",
			    "queue": "+Queue",
			    "read": "number",
			    "size": "number"
			  },
			  "parseShortString": "fn(buffer: ?)",
			  "parseLongString": "fn(buffer: ?)",
			  "parseSignedInteger": "fn(buffer: ?) -> !0.<i>",
			  "parseValue": "fn(buffer: ?) -> !0.<i>",
			  "parseTable": "fn(buffer: ?) -> parseTable.!ret",
			  "parseFields": "fn(buffer: ?, fields: [?]) -> parseFields.!ret",
			  "Error": {
			    "name": "string"
			  },
			  "createConnection": "fn(options: Object, implOptions: Object, readyCallback: fn()) -> +Connection"
			};
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// Main type inference engine
	
	// Walks an AST, building up a graph of abstract values and constraints
	// that cause types to flow from one node to another. Also defines a
	// number of utilities for accessing ASTs and scopes.
	
	// Analysis is done in a context, which is tracked by the dynamically
	// bound cx variable. Use withContext to set the current context.
	
	// For memory-saving reasons, individual types export an interface
	// similar to abstract values (which can hold multiple types), and can
	// thus be used in place abstract values that only ever contain a
	// single type.
	/* eslint-disable  */
	(function(root, mod) {
	  if (true) // CommonJS
	    return mod(exports, __webpack_require__(4), __webpack_require__(5),
	               __webpack_require__(6), __webpack_require__(7), __webpack_require__(8));
	  if (true) // AMD
	    return !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports, __webpack_require__(4) /*ORION*/, __webpack_require__(5), __webpack_require__(6), __webpack_require__(7), __webpack_require__(8)], __WEBPACK_AMD_DEFINE_FACTORY__ = (mod), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  mod(root.tern || (root.tern = {}), acorn, acorn.walk, tern.def, tern.signal, Util); // Plain browser env
	})(this, function(exports, acorn, walk, def, signal, Util) {
	  "use strict";
	
	  var toString = exports.toString = function(type, maxDepth, parent) {
	    if (!type || type == parent || maxDepth && maxDepth < -3) return "?";
	    return type.toString(maxDepth, parent);
	  };
	
	  // A variant of AVal used for unknown, dead-end values. Also serves
	  // as prototype for AVals, Types, and Constraints because it
	  // implements 'empty' versions of all the methods that the code
	  // expects.
	  var ANull = exports.ANull = signal.mixin({
	    addType: function() {},
	    propagate: function() {},
	    getProp: function() { return ANull; },
	    forAllProps: function() {},
	    hasType: function() { return false; },
	    isEmpty: function() { return true; },
	    getFunctionType: function() {},
	    getObjType: function() {},
	    getType: function() {},
	    gatherProperties: function() {},
	    propagatesTo: function() {},
	    typeHint: function() {},
	    propHint: function() {},
	    toString: function() { return "?"; }
	  });
	
	  function extend(proto, props) {
	    var obj = Object.create(proto);
	    if (props) for (var prop in props) obj[prop] = props[prop];
	    return obj;
	  }
	
	  // ABSTRACT VALUES
	
	  var WG_DEFAULT = 100, WG_NEW_INSTANCE = 90, WG_MADEUP_PROTO = 10, WG_MULTI_MEMBER = 5,
	      WG_CATCH_ERROR = 5, WG_GLOBAL_THIS = 90, WG_SPECULATIVE_THIS = 2;
	
	  var AVal = exports.AVal = function() {
	    this.types = [];
	    this.forward = null;
	    this.maxWeight = 0;
	  };
	  AVal.prototype = extend(ANull, {
	    addType: function(type, weight) {
	      weight = weight || WG_DEFAULT;
	      if (this.maxWeight < weight) {
	        this.maxWeight = weight;
	        if (this.types.length == 1 && this.types[0] == type) return;
	        this.types.length = 0;
	      } else if (this.maxWeight > weight || this.types.indexOf(type) > -1) {
	        return;
	      }
	
	      this.signal("addType", type);
	      this.types.push(type);
	      var forward = this.forward;
	      if (forward) withWorklist(function(add) {
	        for (var i = 0; i < forward.length; ++i) add(type, forward[i], weight);
	      });
	    },
	
	    propagate: function(target, weight) {
	      if (target == ANull || (target instanceof Type && this.forward && this.forward.length > 2)) return;
	      if (weight && weight != WG_DEFAULT) target = new Muffle(target, weight);
	      (this.forward || (this.forward = [])).push(target);
	      var types = this.types;
	      if (types.length) withWorklist(function(add) {
	        for (var i = 0; i < types.length; ++i) add(types[i], target, weight);
	      });
	    },
	
	    getProp: function(prop) {
	      if (prop == "__proto__" || prop == "✖") return ANull;
	      var found = (this.props || (this.props = Object.create(null)))[prop];
	      if (!found) {
	        found = this.props[prop] = new AVal;
	        this.propagate(new PropIsSubset(prop, found));
	      }
	      return found;
	    },
	
	    forAllProps: function(c) {
	      this.propagate(new ForAllProps(c));
	    },
	
	    hasType: function(type) {
	      return this.types.indexOf(type) > -1;
	    },
	    isEmpty: function() { return this.types.length === 0; },
	    getFunctionType: function() {
	      for (var i = this.types.length - 1; i >= 0; --i)
	        if (this.types[i] instanceof Fn) return this.types[i];
	    },
	    getObjType: function() {
	      var seen = null;
	      for (var i = this.types.length - 1; i >= 0; --i) {
	        var type = this.types[i];
	        if (!(type instanceof Obj)) continue;
	        if (type.name) return type;
	        if (!seen) seen = type;
	      }
	      return seen;
	    },
	
	    getType: function(guess) {
	      if (this.types.length === 0 && guess !== false) return this.makeupType();
	      if (this.types.length === 1) return this.types[0];
	      return canonicalType(this.types);
	    },
	
	    toString: function(maxDepth, parent) {
	      if (this.types.length == 0) return toString(this.makeupType(), maxDepth, parent);
	      if (this.types.length == 1) return toString(this.types[0], maxDepth, parent);
	      var simplified = simplifyTypes(this.types);
	      if (simplified.length > 2) return "?";
	      return simplified.map(function(tp) { return toString(tp, maxDepth, parent); }).join("|");
	    },
	
	    computedPropType: function() {
	      if (!this.propertyOf) return null;
	      if (this.propertyOf.hasProp("<i>")) {
	        var computedProp = this.propertyOf.getProp("<i>");
	        if (computedProp == this) return null;
	        return computedProp.getType();
	      } else if (this.propertyOf.maybeProps && this.propertyOf.maybeProps["<i>"] == this) {
	        for (var prop in this.propertyOf.props) {
	          var val = this.propertyOf.props[prop];
	          if (!val.isEmpty()) return val;
	        }
	        return null;
	      }
	    },
	
	    makeupType: function() {
	      var computed = this.computedPropType();
	      if (computed) return computed;
	
	      if (!this.forward) return null;
	      for (var i = this.forward.length - 1; i >= 0; --i) {
	        var hint = this.forward[i].typeHint();
	        if (hint && !hint.isEmpty()) {guessing = true; return hint;}
	      }
	
	      var props = Object.create(null), foundProp = null;
	      for (var i = 0; i < this.forward.length; ++i) {
	        var prop = this.forward[i].propHint();
	        if (prop && prop != "length" && prop != "<i>" && prop != "✖" && prop != cx.completingProperty) {
	          props[prop] = true;
	          foundProp = prop;
	        }
	      }
	      if (!foundProp) return null;
	
	      var objs = objsWithProp(foundProp);
	      if (objs) {
	        var matches = [];
	        search: for (var i = 0; i < objs.length; ++i) {
	          var obj = objs[i];
	          for (var prop in props) if (!obj.hasProp(prop)) continue search;
	          if (obj.hasCtor) obj = getInstance(obj);
	          matches.push(obj);
	        }
	        var canon = canonicalType(matches);
	        if (canon) {
	        		guessing = true;
	        		if (matches.length > 0) {
	        			canon.potentialMatches = matches; //ORION
	        		}
	        		return canon;
	        	}
	      }
	    },
	
	    typeHint: function() { return this.types.length ? this.getType() : null; },
	    propagatesTo: function() { return this; },
	
	    gatherProperties: function(f, depth) {
	      for (var i = 0; i < this.types.length; ++i)
	        this.types[i].gatherProperties(f, depth);
	    },
	
	    guessProperties: function(f) {
	      if (this.forward) for (var i = 0; i < this.forward.length; ++i) {
	        var prop = this.forward[i].propHint();
	        if (prop) f(prop, null, 0);
	      }
	      var guessed = this.makeupType();
	      if (guessed) guessed.gatherProperties(f);
	    }
	  });
	
	  function similarAVal(a, b, depth) {
	    var typeA = a.getType(false), typeB = b.getType(false);
	    if (!typeA || !typeB) return true;
	    return similarType(typeA, typeB, depth);
	  }
	
	  function similarType(a, b, depth) {
	    if (!a || depth >= 5) return b;
	    if (!a || a == b) return a;
	    if (!b) return a;
	    if (a.constructor != b.constructor) return false;
	    if (a.constructor == Arr) {
	      var innerA = a.getProp("<i>").getType(false);
	      if (!innerA) return b;
	      var innerB = b.getProp("<i>").getType(false);
	      if (!innerB || similarType(innerA, innerB, depth + 1)) return b;
	    } else if (a.constructor == Obj) {
	      var propsA = 0, propsB = 0, same = 0;
	      for (var prop in a.props) {
	        propsA++;
	        if (prop in b.props && similarAVal(a.props[prop], b.props[prop], depth + 1))
	          same++;
	      }
	      for (var prop in b.props) propsB++;
	      if (propsA && propsB && same < Math.max(propsA, propsB) / 2) return false;
	      return propsA > propsB ? a : b;
	    } else if (a.constructor == Fn) {
	      if (a.args.length != b.args.length ||
	          !a.args.every(function(tp, i) { return similarAVal(tp, b.args[i], depth + 1); }) ||
	          !similarAVal(a.retval, b.retval, depth + 1) || !similarAVal(a.self, b.self, depth + 1))
	        return false;
	      return a;
	    } else {
	      return false;
	    }
	  }
	
	  var simplifyTypes = exports.simplifyTypes = function(types) {
	    var found = [];
	    outer: for (var i = 0; i < types.length; ++i) {
	      var tp = types[i];
	      for (var j = 0; j < found.length; j++) {
	        var similar = similarType(tp, found[j], 0);
	        if (similar) {
	          found[j] = similar;
	          continue outer;
	        }
	      }
	      found.push(tp);
	    }
	    return found;
	  };
	
	  function canonicalType(types) {
	    var arrays = 0, fns = 0, objs = 0, prim = null;
	    for (var i = 0; i < types.length; ++i) {
	      var tp = types[i];
	      if (tp instanceof Arr) ++arrays;
	      else if (tp instanceof Fn) ++fns;
	      else if (tp instanceof Obj) ++objs;
	      else if (tp instanceof Prim) {
	        if (prim && tp.name != prim.name) return null;
	        prim = tp;
	      }
	    }
	    var kinds = (arrays && 1) + (fns && 1) + (objs && 1) + (prim && 1);
	    if (kinds > 1) return null;
	    if (prim) return prim;
	
	    var maxScore = 0, maxTp = null;
	    for (var i = 0; i < types.length; ++i) {
	      var tp = types[i], score = 0;
	      if (arrays) {
	        score = tp.getProp("<i>").isEmpty() ? 1 : 2;
	      } else if (fns) {
	        score = 1;
	        for (var j = 0; j < tp.args.length; ++j) if (!tp.args[j].isEmpty()) ++score;
	        if (!tp.retval.isEmpty()) ++score;
	      } else if (objs) {
	        score = tp.name ? 100 : 2;
	      }
	      if (score >= maxScore) { maxScore = score; maxTp = tp; }
	    }
	    return maxTp;
	  }
	
	  // PROPAGATION STRATEGIES
	
	  var constraint = exports.constraint = function(methods) {
	    var ctor = function() {
	      this.origin = cx.curOrigin;
	      this.construct.apply(this, arguments);
	    };
	    ctor.prototype = Object.create(ANull);
	    for (var m in methods) if (methods.hasOwnProperty(m)) ctor.prototype[m] = methods[m];
	    return ctor;
	  };
	
	  var PropIsSubset = constraint({
	    construct: function(prop, target) {
	      this.prop = prop; this.target = target;
	    },
	    addType: function(type, weight) {
	      if (type.getProp)
	        type.getProp(this.prop).propagate(this.target, weight);
	    },
	    propHint: function() { return this.prop; },
	    propagatesTo: function() {
	      if (this.prop == "<i>" || !/[^\w_]/.test(this.prop))
	        return {target: this.target, pathExt: "." + this.prop};
	    }
	  });
	
	  var PropHasSubset = exports.PropHasSubset = constraint({
	    construct: function(prop, type, originNode) {
	      this.prop = prop; this.type = type; this.originNode = originNode;
	    },
	    addType: function(type, weight) {
	      if (!(type instanceof Obj)) return;
	      var prop = type.defProp(this.prop, this.originNode);
	      if (!prop.origin) prop.origin = this.origin;
	      this.type.propagate(prop, weight);
	    },
	    propHint: function() { return this.prop; }
	  });
	
	  var ForAllProps = constraint({
	    construct: function(c) { this.c = c; },
	    addType: function(type) {
	      if (!(type instanceof Obj)) return;
	      type.forAllProps(this.c);
	    }
	  });
	
	  function withDisabledComputing(fn, body) {
	    cx.disabledComputing = {fn: fn, prev: cx.disabledComputing};
	    try {
	      return body();
	    } finally {
	      cx.disabledComputing = cx.disabledComputing.prev;
	    }
	  }
	  var IsCallee = exports.IsCallee = constraint({
	    construct: function(self, args, argNodes, retval) {
	      this.self = self; this.args = args; this.argNodes = argNodes; this.retval = retval;
	      this.disabled = cx.disabledComputing;
	    },
	    addType: function(fn, weight) {
	      if (!(fn instanceof Fn)) return;
	      for (var i = 0; i < this.args.length; ++i) {
	        if (i < fn.args.length) this.args[i].propagate(fn.args[i], weight);
	        if (fn.arguments) this.args[i].propagate(fn.arguments, weight);
	      }
	      this.self.propagate(fn.self, this.self == cx.topScope ? WG_GLOBAL_THIS : weight);
	      var compute = fn.computeRet;
	      if (compute) for (var d = this.disabled; d; d = d.prev)
	        if (d.fn == fn || fn.originNode && d.fn.originNode == fn.originNode) compute = null;
	      if (compute)
	        compute(this.self, this.args, this.argNodes).propagate(this.retval, weight);
	      else
	        fn.retval.propagate(this.retval, weight);
	    },
	    typeHint: function() {
	      var names = [];
	      for (var i = 0; i < this.args.length; ++i) names.push("?");
	      return new Fn(null, this.self, this.args, names, ANull);
	    },
	    propagatesTo: function() {
	      return {target: this.retval, pathExt: ".!ret"};
	    }
	  });
	
	  var HasMethodCall = constraint({
	    construct: function(propName, args, argNodes, retval) {
	      this.propName = propName; this.args = args; this.argNodes = argNodes; this.retval = retval;
	      this.disabled = cx.disabledComputing;
	    },
	    addType: function(obj, weight) {
	      var callee = new IsCallee(obj, this.args, this.argNodes, this.retval);
	      callee.disabled = this.disabled;
	      obj.getProp(this.propName).propagate(callee, weight);
	    },
	    propHint: function() { return this.propName; }
	  });
	
	  var IsCtor = exports.IsCtor = constraint({
	    construct: function(target, noReuse) {
	      this.target = target; this.noReuse = noReuse;
	    },
	    addType: function(f, weight) {
	      if (!(f instanceof Fn)) return;
	      if (cx.parent && !cx.parent.options.reuseInstances) this.noReuse = true;
	      f.getProp("prototype").propagate(new IsProto(this.noReuse ? false : f, this.target), weight);
	    }
	  });
	
	  var getInstance = exports.getInstance = function(obj, ctor) {
	    if (ctor === false) return new Obj(obj);
	
	    if (!ctor) ctor = obj.hasCtor;
	    if (!obj.instances) obj.instances = [];
	    for (var i = 0; i < obj.instances.length; ++i) {
	      var cur = obj.instances[i];
	      if (cur.ctor == ctor) return cur.instance;
	    }
	    var instance = new Obj(obj, ctor && ctor.name);
	    instance.origin = obj.origin;
	    obj.instances.push({ctor: ctor, instance: instance});
	    return instance;
	  };
	
	  var IsProto = exports.IsProto = constraint({
	    construct: function(ctor, target) {
	      this.ctor = ctor; this.target = target;
	    },
	    addType: function(o, _weight) {
	      if (!(o instanceof Obj)) return;
	      if ((this.count = (this.count || 0) + 1) > 8) return;
	      if (o == cx.protos.Array)
	        this.target.addType(new Arr);
	      else
	        this.target.addType(getInstance(o, this.ctor));
	    }
	  });
	
	  var FnPrototype = constraint({
	    construct: function(fn) { this.fn = fn; },
	    addType: function(o, _weight) {
	      if (o instanceof Obj && !o.hasCtor) {
	        o.hasCtor = this.fn;
	        var adder = new SpeculativeThis(o, this.fn);
	        adder.addType(this.fn);
	        o.forAllProps(function(_prop, val, local) {
	          if (local) val.propagate(adder);
	        });
	      }
	    }
	  });
	
	  var IsAdded = constraint({
	    construct: function(other, target) {
	      this.other = other; this.target = target;
	    },
	    addType: function(type, weight) {
	      if (type == cx.str)
	        this.target.addType(cx.str, weight);
	      else if (type == cx.num && this.other.hasType(cx.num))
	        this.target.addType(cx.num, weight);
	    },
	    typeHint: function() { return this.other; }
	  });
	
	  var IfObj = exports.IfObj = constraint({
	    construct: function(target) { this.target = target; },
	    addType: function(t, weight) {
	      if (t instanceof Obj) this.target.addType(t, weight);
	    },
	    propagatesTo: function() { return this.target; }
	  });
	
	  var SpeculativeThis = constraint({
	    construct: function(obj, ctor) { this.obj = obj; this.ctor = ctor; },
	    addType: function(tp) {
	      if (tp instanceof Fn && tp.self && tp.self.isEmpty())
	        tp.self.addType(getInstance(this.obj, this.ctor), WG_SPECULATIVE_THIS);
	    }
	  });
	
	  var Muffle = constraint({
	    construct: function(inner, weight) {
	      this.inner = inner; this.weight = weight;
	    },
	    addType: function(tp, weight) {
	      this.inner.addType(tp, Math.min(weight, this.weight));
	    },
	    propagatesTo: function() { return this.inner.propagatesTo(); },
	    typeHint: function() { return this.inner.typeHint(); },
	    propHint: function() { return this.inner.propHint(); }
	  });
	
	  // TYPE OBJECTS
	
	  var Type = exports.Type = function() {};
	  Type.prototype = extend(ANull, {
	    constructor: Type,
	    propagate: function(c, w) { c.addType(this, w); },
	    hasType: function(other) { return other == this; },
	    isEmpty: function() { return false; },
	    typeHint: function() { return this; },
	    getType: function() { return this; }
	  });
	
	  var Prim = exports.Prim = function(proto, name) { this.name = name; this.proto = proto; };
	  Prim.prototype = extend(Type.prototype, {
	    constructor: Prim,
	    toString: function() { return this.name; },
	    getProp: function(prop) {return this.proto.hasProp(prop) || ANull;},
	    gatherProperties: function(f, depth) {
	      if (this.proto) this.proto.gatherProperties(f, depth);
	    }
	  });
	
	  var Obj = exports.Obj = function(proto, name) {
	    if (!this.props) this.props = Object.create(null);
	    this.proto = proto === true ? cx.protos.Object : proto;
	    if (proto && !name && proto.name && !(this instanceof Fn)) {
	      var match = /^(.*)\.prototype$/.exec(this.proto.name);
	      if (match) name = match[1];
	    }
	    this.name = name;
	    this.maybeProps = null;
	    this.origin = cx.curOrigin;
	  };
	  Obj.prototype = extend(Type.prototype, {
	    constructor: Obj,
	    toString: function(maxDepth) {
	      if (maxDepth == null) maxDepth = 0;
	      if (maxDepth <= 0 && this.name) return this.name;
	      var props = [], etc = false;
	      for (var prop in this.props) if (prop != "<i>") {
	        if (props.length > 5) { etc = true; break; }
	        if (maxDepth)
	          props.push(prop + ": " + toString(this.props[prop], maxDepth - 1, this));
	        else
	          props.push(prop);
	      }
	      props.sort();
	      if (etc) props.push("...");
	      return "{" + props.join(", ") + "}";
	    },
	    hasProp: function(prop, searchProto) {
	      var found = this.props[prop];
	      if (searchProto !== false)
	        for (var p = this.proto; p && !found; p = p.proto) found = p.props[prop];
	      return found;
	    },
	    defProp: function(prop, originNode) {
	      var found = this.hasProp(prop, false);
	      if (found) {
	        if (originNode && !found.originNode) found.originNode = originNode;
	        return found;
	      }
	      if (prop == "__proto__" || prop == "✖") return ANull;
	
	      var av = this.maybeProps && this.maybeProps[prop];
	      if (av) {
	        delete this.maybeProps[prop];
	        this.maybeUnregProtoPropHandler();
	      } else {
	        av = new AVal;
	        av.propertyOf = this;
	      }
	
	      this.props[prop] = av;
	      av.originNode = originNode;
	      av.origin = cx.curOrigin;
	      this.broadcastProp(prop, av, true);
	      return av;
	    },
	    getProp: function(prop) {
	      var found = this.hasProp(prop, true) || (this.maybeProps && this.maybeProps[prop]);
	      if (found) return found;
	      if (prop == "__proto__" || prop == "✖") return ANull;
	      var av = this.ensureMaybeProps()[prop] = new AVal;
	      av.propertyOf = this;
	      return av;
	    },
	    broadcastProp: function(prop, val, local) {
	      if (local) {
	        this.signal("addProp", prop, val);
	        // If this is a scope, it shouldn't be registered
	        if (!(this instanceof Scope)) registerProp(prop, this);
	      }
	
	      if (this.onNewProp) for (var i = 0; i < this.onNewProp.length; ++i) {
	        var h = this.onNewProp[i];
	        h.onProtoProp ? h.onProtoProp(prop, val, local) : h(prop, val, local);
	      }
	    },
	    onProtoProp: function(prop, val, _local) {
	      var maybe = this.maybeProps && this.maybeProps[prop];
	      if (maybe) {
	        delete this.maybeProps[prop];
	        this.maybeUnregProtoPropHandler();
	        this.proto.getProp(prop).propagate(maybe);
	      }
	      this.broadcastProp(prop, val, false);
	    },
	    ensureMaybeProps: function() {
	      if (!this.maybeProps) {
	        if (this.proto) this.proto.forAllProps(this);
	        this.maybeProps = Object.create(null);
	      }
	      return this.maybeProps;
	    },
	    removeProp: function(prop) {
	      var av = this.props[prop];
	      delete this.props[prop];
	      this.ensureMaybeProps()[prop] = av;
	      av.types.length = 0;
	    },
	    forAllProps: function(c) {
	      if (!this.onNewProp) {
	        this.onNewProp = [];
	        if (this.proto) this.proto.forAllProps(this);
	      }
	      this.onNewProp.push(c);
	      for (var o = this; o; o = o.proto) for (var prop in o.props) {
	        if (c.onProtoProp)
	          c.onProtoProp(prop, o.props[prop], o == this);
	        else
	          c(prop, o.props[prop], o == this);
	      }
	    },
	    maybeUnregProtoPropHandler: function() {
	      if (this.maybeProps) {
	        for (var _n in this.maybeProps) return;
	        this.maybeProps = null;
	      }
	      if (!this.proto || this.onNewProp && this.onNewProp.length) return;
	      this.proto.unregPropHandler(this);
	    },
	    unregPropHandler: function(handler) {
	      for (var i = 0; i < this.onNewProp.length; ++i)
	        if (this.onNewProp[i] == handler) { this.onNewProp.splice(i, 1); break; }
	      this.maybeUnregProtoPropHandler();
	    },
	    gatherProperties: function(f, depth) {
	      for (var prop in this.props) if (prop != "<i>")
	        f(prop, this, depth);
	      if (this.proto) this.proto.gatherProperties(f, depth + 1);
	    },
	    getObjType: function() { return this; }
	  });
	
	  var Fn = exports.Fn = function(name, self, args, argNames, retval) {
	    Obj.call(this, cx.protos.Function, name);
	    this.self = self;
	    this.args = args;
	    this.argNames = argNames;
	    this.retval = retval;
	  };
	  Fn.prototype = extend(Obj.prototype, {
	    constructor: Fn,
	    toString: function(maxDepth) {
	      if (maxDepth == null) maxDepth = 0;
	      var str = "fn(";
	      for (var i = 0; i < this.args.length; ++i) {
	        if (i) str += ", ";
	        var name = this.argNames[i];
	        if (name && name != "?") str += name + ": ";
	        str += maxDepth > -3 ? toString(this.args[i], maxDepth - 1, this) : "?";
	      }
	      str += ")";
	      if (!this.retval.isEmpty())
	        str += " -> " + (maxDepth > -3 ? toString(this.retval, maxDepth - 1, this) : "?");
	      return str;
	    },
	    getProp: function(prop) {
	      if (prop == "prototype") {
	        var known = this.hasProp(prop, false);
	        if (!known) {
	          known = this.defProp(prop);
	          var proto = new Obj(true, this.name && this.name + ".prototype");
	          proto.origin = this.origin;
	          known.addType(proto, WG_MADEUP_PROTO);
	        }
	        return known;
	      }
	      return Obj.prototype.getProp.call(this, prop);
	    },
	    defProp: function(prop, originNode) {
	      if (prop == "prototype") {
	        var found = this.hasProp(prop, false);
	        if (found) return found;
	        found = Obj.prototype.defProp.call(this, prop, originNode);
	        found.origin = this.origin;
	        found.propagate(new FnPrototype(this));
	        return found;
	      }
	      return Obj.prototype.defProp.call(this, prop, originNode);
	    },
	    getFunctionType: function() { return this; }
	  });
	
	  var Arr = exports.Arr = function(contentType) {
	    Obj.call(this, cx.protos.Array);
	    var content = this.defProp("<i>");
	    if (contentType) contentType.propagate(content);
	  };
	  Arr.prototype = extend(Obj.prototype, {
	    constructor: Arr,
	    toString: function(maxDepth) {
	      if (maxDepth == null) maxDepth = 0;
	      return "[" + (maxDepth > -3 ? toString(this.getProp("<i>"), maxDepth - 1, this) : "?") + "]";
	    }
	  });
	
	  // THE PROPERTY REGISTRY
	
	  function registerProp(prop, obj) {
	    var data = cx.props[prop] || (cx.props[prop] = []);
	    data.push(obj);
	  }
	
	  function objsWithProp(prop) {
	    return cx.props[prop];
	  }
	
	  // INFERENCE CONTEXT
	
	  exports.Context = function(defs, parent) {
	    this.parent = parent;
	    this.props = Object.create(null);
	    this.protos = Object.create(null);
	    this.origins = [];
	    this.curOrigin = "ecma5";
	    this.paths = Object.create(null);
	    this.definitions = Object.create(null);
	    this.purgeGen = 0;
	    this.workList = null;
	    this.disabledComputing = null;
	
	    exports.withContext(this, function() {
	      cx.protos.Object = new Obj(null, "Object.prototype");
	      cx.topScope = new Scope();
	      cx.topScope.name = "<top>";
	      cx.protos.Array = new Obj(true, "Array.prototype");
	      cx.protos.Function = new Fn("Function.prototype", ANull, [], [], ANull);
	      cx.protos.Function.proto = cx.protos.Object;
	      cx.protos.RegExp = new Obj(true, "RegExp.prototype");
	      cx.protos.String = new Obj(true, "String.prototype");
	      cx.protos.Number = new Obj(true, "Number.prototype");
	      cx.protos.Boolean = new Obj(true, "Boolean.prototype");
	      cx.str = new Prim(cx.protos.String, "string");
	      cx.bool = new Prim(cx.protos.Boolean, "bool");
	      cx.num = new Prim(cx.protos.Number, "number");
	      cx.curOrigin = null;
	
	      if (defs) for (var i = 0; i < defs.length; ++i)
	        def.load(defs[i]);
	    });
	  };
	
	  var cx = null;
	  exports.cx = function() { return cx; };
	
	  exports.withContext = function(context, f) {
	    var old = cx;
	    cx = context;
	    try { return f(); }
	    finally { cx = old; }
	  };
	
	  exports.TimedOut = function() {
	    this.message = "Timed out";
	    this.stack = (new Error()).stack;
	  };
	  exports.TimedOut.prototype = Object.create(Error.prototype);
	  exports.TimedOut.prototype.name = "infer.TimedOut";
	
	  var timeout;
	  exports.withTimeout = function(ms, f) {
	    var end = +new Date + ms;
	    var oldEnd = timeout;
	    if (oldEnd && oldEnd < end) return f();
	    timeout = end;
	    try { return f(); }
	    finally { timeout = oldEnd; }
	  };
	
	  exports.addOrigin = function(origin) {
	    if (cx.origins.indexOf(origin) < 0) cx.origins.push(origin);
	  };
	
	  var baseMaxWorkDepth = 20, reduceMaxWorkDepth = 0.0001;
	  function withWorklist(f) {
	    if (cx.workList) return f(cx.workList);
	
	    var list = [], depth = 0;
	    var add = cx.workList = function(type, target, weight) {
	      if (depth < baseMaxWorkDepth - reduceMaxWorkDepth * list.length)
	        list.push(type, target, weight, depth);
	    };
	    try {
	      var ret = f(add);
	      for (var i = 0; i < list.length; i += 4) {
	        if (timeout && +new Date >= timeout)
	          throw new exports.TimedOut();
	        depth = list[i + 3] + 1;
	        list[i + 1].addType(list[i], list[i + 2]);
	      }
	      return ret;
	    } finally {
	      cx.workList = null;
	    }
	  }
	
	  // SCOPES
	
	  var Scope = exports.Scope = function(prev) {
	    Obj.call(this, prev || true);
	    this.prev = prev;
	  };
	  Scope.prototype = extend(Obj.prototype, {
	    constructor: Scope,
	    defVar: function(name, originNode) {
	      for (var s = this; ; s = s.proto) {
	        var found = s.props[name];
	        if (found) return found;
	        if (!s.prev) return s.defProp(name, originNode);
	      }
	    }
	  });
	
	  // RETVAL COMPUTATION HEURISTICS
	
	  function maybeInstantiate(scope, score) {
	    if (scope.fnType)
	      scope.fnType.instantiateScore = (scope.fnType.instantiateScore || 0) + score;
	  }
	
	  var NotSmaller = {};
	  function nodeSmallerThan(node, n) {
	    try {
	      walk.simple(node, {Expression: function() { if (--n <= 0) throw NotSmaller; }});
	      return true;
	    } catch(e) {
	      if (e == NotSmaller) return false;
	      throw e;
	    }
	  }
	
	  function maybeTagAsInstantiated(node, scope) {
	    var score = scope.fnType.instantiateScore;
	    if (!cx.disabledComputing && score && scope.fnType.args.length && nodeSmallerThan(node, score * 5)) {
	      maybeInstantiate(scope.prev, score / 2);
	      setFunctionInstantiated(node, scope);
	      return true;
	    } else {
	      scope.fnType.instantiateScore = null;
	    }
	  }
	
	  function setFunctionInstantiated(node, scope) {
	    var fn = scope.fnType;
	    // Disconnect the arg avals, so that we can add info to them without side effects
	    for (var i = 0; i < fn.args.length; ++i) fn.args[i] = new AVal;
	    fn.self = new AVal;
	    fn.computeRet = function(self, args) {
	      // Prevent recursion
	      return withDisabledComputing(fn, function() {
	        var oldOrigin = cx.curOrigin;
	        cx.curOrigin = fn.origin;
	        var scopeCopy = new Scope(scope.prev);
	        scopeCopy.originNode = scope.originNode;
	        for (var v in scope.props) {
	          var local = scopeCopy.defProp(v, scope.props[v].originNode);
	          for (var i = 0; i < args.length; ++i) if (fn.argNames[i] == v && i < args.length)
	            args[i].propagate(local);
	        }
	        var argNames = fn.argNames.length != args.length ? fn.argNames.slice(0, args.length) : fn.argNames;
	        while (argNames.length < args.length) argNames.push("?");
	        scopeCopy.fnType = new Fn(fn.name, self, args, argNames, ANull);
	        scopeCopy.fnType.originNode = fn.originNode;
	        if (fn.arguments) {
	          var argset = scopeCopy.fnType.arguments = new AVal;
	          scopeCopy.defProp("arguments").addType(new Arr(argset));
	          for (var i = 0; i < args.length; ++i) args[i].propagate(argset);
	        }
	        node.body.scope = scopeCopy;
	        walk.recursive(node.body, scopeCopy, null, scopeGatherer);
	        walk.recursive(node.body, scopeCopy, null, inferWrapper);
	        cx.curOrigin = oldOrigin;
	        return scopeCopy.fnType.retval;
	      });
	    };
	  }
	
	  function maybeTagAsGeneric(scope) {
	    var fn = scope.fnType, target = fn.retval;
	    if (target == ANull) return;
	    var targetInner, asArray;
	    if (!target.isEmpty() && (targetInner = target.getType()) instanceof Arr)
	      target = asArray = targetInner.getProp("<i>");
	
	    function explore(aval, path, depth) {
	      if (depth > 3 || !aval.forward) return;
	      for (var i = 0; i < aval.forward.length; ++i) {
	        var prop = aval.forward[i].propagatesTo();
	        if (!prop) continue;
	        var newPath = path, dest;
	        if (prop instanceof AVal) {
	          dest = prop;
	        } else if (prop.target instanceof AVal) {
	          newPath += prop.pathExt;
	          dest = prop.target;
	        } else continue;
	        if (dest == target) return newPath;
	        var found = explore(dest, newPath, depth + 1);
	        if (found) return found;
	      }
	    }
	
	    var foundPath = explore(fn.self, "!this", 0);
	    for (var i = 0; !foundPath && i < fn.args.length; ++i)
	      foundPath = explore(fn.args[i], "!" + i, 0);
	
	    if (foundPath) {
	      if (asArray) foundPath = "[" + foundPath + "]";
	      var p = new def.TypeParser(foundPath);
	      var parsed = p.parseType(true);
	      fn.computeRet = parsed.apply ? parsed : function() { return parsed; };
	      fn.computeRetSource = foundPath;
	      return true;
	    }
	  }
	
	  // SCOPE GATHERING PASS
	
	  function addVar(scope, nameNode) {
	    return scope.defProp(nameNode.name, nameNode);
	  }
	
	  var scopeGatherer = walk.make({
	    Function: function(node, scope, c) {
	      var inner = node.body.scope = new Scope(scope);
	      inner.originNode = node;
	      var argVals = [], argNames = [];
	      for (var i = 0; i < node.params.length; ++i) {
	        var param = node.params[i];
	        argNames.push(param.name);
	        argVals.push(addVar(inner, param));
	      }
	      inner.fnType = new Fn(node.id && node.id.name, new AVal, argVals, argNames, ANull);
	      inner.fnType.originNode = node;
	      if (node.id) {
	        var decl = node.type == "FunctionDeclaration";
	        addVar(decl ? scope : inner, node.id);
	      }
	      c(node.body, inner, "ScopeBody");
	    },
	    TryStatement: function(node, scope, c) {
	      c(node.block, scope, "Statement");
	      if (node.handler) {
	        var v = addVar(scope, node.handler.param);
	        c(node.handler.body, scope, "ScopeBody");
	        var e5 = cx.definitions.ecma5;
	        if (e5 && v.isEmpty()) getInstance(e5["Error.prototype"]).propagate(v, WG_CATCH_ERROR);
	      }
	      if (node.finalizer) c(node.finalizer, scope, "Statement");
	    },
	    VariableDeclaration: function(node, scope, c) {
	      for (var i = 0; i < node.declarations.length; ++i) {
	        var decl = node.declarations[i];
	        addVar(scope, decl.id);
	        if (decl.init) c(decl.init, scope, "Expression");
	      }
	    }
	  });
	
	  // CONSTRAINT GATHERING PASS
	
	  function propName(node, scope, c) {
	    var prop = node.property;
	    if (!node.computed) return prop.name;
	    if (prop.type == "Literal" && typeof prop.value == "string") return prop.value;
	    if (c) infer(prop, scope, c, ANull);
	    return "<i>";
	  }
	
	  function unopResultType(op) {
	    switch (op) {
	    case "+": case "-": case "~": return cx.num;
	    case "!": return cx.bool;
	    case "typeof": return cx.str;
	    case "void": case "delete": return ANull;
	    }
	  }
	  function binopIsBoolean(op) {
	    switch (op) {
	    case "==": case "!=": case "===": case "!==": case "<": case ">": case ">=": case "<=":
	    case "in": case "instanceof": return true;
	    }
	  }
	  function literalType(node) {
	    if (node.regex) return getInstance(cx.protos.RegExp);
	    switch (typeof node.value) {
	    case "boolean": return cx.bool;
	    case "number": return cx.num;
	    case "string": return cx.str;
	    case "object":
	    case "function":
	      if (!node.value) return ANull;
	      return getInstance(cx.protos.RegExp);
	    }
	  }
	
	  function ret(f) {
	    return function(node, scope, c, out, name) {
	      var r = f(node, scope, c, name);
	      if (out) r.propagate(out);
	      return r;
	    };
	  }
	  function fill(f) {
	    return function(node, scope, c, out, name) {
	      if (!out) out = new AVal;
	      f(node, scope, c, out, name);
	      return out;
	    };
	  }
	
	  var inferExprVisitor = {
	    //ORION
	    RecoveredNode: ret(function(node, scope, c, out, name) {
	  		return new AVal;
	  	}),
	    ArrayExpression: ret(function(node, scope, c) {
	      var eltval = new AVal;
	      for (var i = 0; i < node.elements.length; ++i) {
	        var elt = node.elements[i];
	        if (elt) infer(elt, scope, c, eltval);
	      }
	      return new Arr(eltval);
	    }),
	    ObjectExpression: ret(function(node, scope, c, name) {
	      var obj = node.objType = new Obj(true, name);
	      obj.originNode = node;
	
	      for (var i = 0; i < node.properties.length; ++i) {
	        var prop = node.properties[i], key = prop.key, name;
	        if (prop.value.name == "✖") continue;
	
	        if (key.type == "Identifier") {
	          name = key.name;
	        } else if (typeof key.value == "string") {
	          name = key.value;
	        }
	        if (!name || prop.kind == "set") {
	          infer(prop.value, scope, c, ANull);
	          continue;
	        }
	
	        var val = obj.defProp(name, key), out = val;
	        val.initializer = true;
	        if (prop.kind == "get")
	          out = new IsCallee(obj, [], null, val);
	        infer(prop.value, scope, c, out, name);
	      }
	      return obj;
	    }),
	    FunctionExpression: ret(function(node, scope, c, name) {
	      var inner = node.body.scope, fn = inner.fnType;
	      if (name && !fn.name) fn.name = name;
	      c(node.body, scope, "ScopeBody");
	      maybeTagAsInstantiated(node, inner) || maybeTagAsGeneric(inner);
	      if (node.id) inner.getProp(node.id.name).addType(fn);
	      return fn;
	    }),
	    SequenceExpression: ret(function(node, scope, c) {
	      for (var i = 0, l = node.expressions.length - 1; i < l; ++i)
	        infer(node.expressions[i], scope, c, ANull);
	      return infer(node.expressions[l], scope, c);
	    }),
	    UnaryExpression: ret(function(node, scope, c) {
	      infer(node.argument, scope, c, ANull);
	      return unopResultType(node.operator);
	    }),
	    UpdateExpression: ret(function(node, scope, c) {
	      infer(node.argument, scope, c, ANull);
	      return cx.num;
	    }),
	    BinaryExpression: ret(function(node, scope, c) {
	      if (node.operator == "+") {
	        var lhs = infer(node.left, scope, c);
	        var rhs = infer(node.right, scope, c);
	        if (lhs.hasType(cx.str) || rhs.hasType(cx.str)) return cx.str;
	        if (lhs.hasType(cx.num) && rhs.hasType(cx.num)) return cx.num;
	        var result = new AVal;
	        lhs.propagate(new IsAdded(rhs, result));
	        rhs.propagate(new IsAdded(lhs, result));
	        return result;
	      } else {
	        infer(node.left, scope, c, ANull);
	        infer(node.right, scope, c, ANull);
	        return binopIsBoolean(node.operator) ? cx.bool : cx.num;
	      }
	    }),
	    AssignmentExpression: ret(function(node, scope, c) {
	      var rhs, name, pName;
	      if (node.left.type == "MemberExpression") {
	        pName = propName(node.left, scope, c);
	        if (node.left.object.type == "Identifier")
	          name = node.left.object.name + "." + pName;
	      } else {
	        name = node.left.name;
	      }
	
	      if (node.operator != "=" && node.operator != "+=") {
	        infer(node.right, scope, c, ANull);
	        rhs = cx.num;
	      } else {
	        rhs = infer(node.right, scope, c, null, name);
	      }
	
	      if (node.left.type == "MemberExpression") {
	        var obj = infer(node.left.object, scope, c);
	        if (pName == "prototype") maybeInstantiate(scope, 20);
	        if (pName == "<i>") {
	          // This is a hack to recognize for/in loops that copy
	          // properties, and do the copying ourselves, insofar as we
	          // manage, because such loops tend to be relevant for type
	          // information.
	          var v = node.left.property.name, local = scope.props[v], over = local && local.iteratesOver;
	          if (over) {
	            maybeInstantiate(scope, 20);
	            var fromRight = node.right.type == "MemberExpression" && node.right.computed && node.right.property.name == v;
	            over.forAllProps(function(prop, val, local) {
	              if (local && prop != "prototype" && prop != "<i>")
	                obj.propagate(new PropHasSubset(prop, fromRight ? val : ANull));
	            });
	            return rhs;
	          }
	        }
	        obj.propagate(new PropHasSubset(pName, rhs, node.left.property));
	      } else { // Identifier
	        rhs.propagate(scope.defVar(node.left.name, node.left));
	      }
	      return rhs;
	    }),
	    LogicalExpression: fill(function(node, scope, c, out) {
	      infer(node.left, scope, c, out);
	      infer(node.right, scope, c, out);
	    }),
	    ConditionalExpression: fill(function(node, scope, c, out) {
	      infer(node.test, scope, c, ANull);
	      infer(node.consequent, scope, c, out);
	      infer(node.alternate, scope, c, out);
	    }),
	    NewExpression: fill(function(node, scope, c, out, name) {
	      if (node.callee.type == "Identifier" && node.callee.name in scope.props)
	        maybeInstantiate(scope, 20);
	
	      for (var i = 0, args = []; i < node.arguments.length; ++i)
	        args.push(infer(node.arguments[i], scope, c));
	      var callee = infer(node.callee, scope, c);
	      var self = new AVal;
	      callee.propagate(new IsCtor(self, name && /\.prototype$/.test(name)));
	      self.propagate(out, WG_NEW_INSTANCE);
	      callee.propagate(new IsCallee(self, args, node.arguments, new IfObj(out)));
	    }),
	    CallExpression: fill(function(node, scope, c, out) {
	      for (var i = 0, args = []; i < node.arguments.length; ++i)
	        args.push(infer(node.arguments[i], scope, c));
	      if (node.callee.type == "MemberExpression") {
	        var self = infer(node.callee.object, scope, c);
	        var pName = propName(node.callee, scope, c);
	        if ((pName == "call" || pName == "apply") &&
	            scope.fnType && scope.fnType.args.indexOf(self) > -1)
	          maybeInstantiate(scope, 30);
	        self.propagate(new HasMethodCall(pName, args, node.arguments, out));
	      } else {
	        var callee = infer(node.callee, scope, c);
	        if (scope.fnType && scope.fnType.args.indexOf(callee) > -1)
	          maybeInstantiate(scope, 30);
	        var knownFn = callee.getFunctionType();
	        if (knownFn && knownFn.instantiateScore && scope.fnType)
	          maybeInstantiate(scope, knownFn.instantiateScore / 5);
	        callee.propagate(new IsCallee(cx.topScope, args, node.arguments, out));
	      }
	    }),
	    MemberExpression: fill(function(node, scope, c, out) {
	      var name = propName(node, scope);
	      var obj = infer(node.object, scope, c);
	      var prop = obj.getProp(name);
	      if (name == "<i>") {
	        var propType = infer(node.property, scope, c);
	        if (!propType.hasType(cx.num))
	          return prop.propagate(out, WG_MULTI_MEMBER);
	      }
	      prop.propagate(out);
	    }),
	    Identifier: ret(function(node, scope) {
	      if (node.name == "arguments" && scope.fnType && !(node.name in scope.props))
	        scope.defProp(node.name, scope.fnType.originNode)
	          .addType(new Arr(scope.fnType.arguments = new AVal));
	      return scope.getProp(node.name);
	    }),
	    ThisExpression: ret(function(_node, scope) {
	      return scope.fnType ? scope.fnType.self : cx.topScope;
	    }),
	    Literal: ret(function(node) {
	      return literalType(node);
	    })
	  };
	
	  function infer(node, scope, c, out, name) {
	      //ORION
	      var _f = inferExprVisitor[node.type];
	      if(_f) {
	          return _f(node, scope, c, out, name);
	      }
	  }
	
	  var inferWrapper = walk.make({
	    Expression: function(node, scope, c) {
	      infer(node, scope, c, ANull);
	    },
	
	    FunctionDeclaration: function(node, scope, c) {
	      var inner = node.body.scope, fn = inner.fnType;
	      c(node.body, scope, "ScopeBody");
	      maybeTagAsInstantiated(node, inner) || maybeTagAsGeneric(inner);
	      var prop = scope.getProp(node.id.name);
	      prop.addType(fn);
	    },
	
	    VariableDeclaration: function(node, scope, c) {
	      for (var i = 0; i < node.declarations.length; ++i) {
	        var decl = node.declarations[i], prop = scope.getProp(decl.id.name);
	        if (decl.init)
	          infer(decl.init, scope, c, prop, decl.id.name);
	      }
	    },
	
	    ReturnStatement: function(node, scope, c) {
	      if (!node.argument) return;
	      var output = ANull;
	      if (scope.fnType) {
	        if (scope.fnType.retval == ANull) scope.fnType.retval = new AVal;
	        output = scope.fnType.retval;
	      }
	      infer(node.argument, scope, c, output);
	    },
	
	    ForInStatement: function(node, scope, c) {
	      var source = infer(node.right, scope, c);
	      if ((node.right.type == "Identifier" && node.right.name in scope.props) ||
	          (node.right.type == "MemberExpression" && node.right.property.name == "prototype")) {
	        maybeInstantiate(scope, 5);
	        var varName;
	        if (node.left.type == "Identifier") {
	          varName = node.left.name;
	        } else if (node.left.type == "VariableDeclaration") {
	          varName = node.left.declarations[0].id.name;
	        }
	        if (varName && varName in scope.props)
	          scope.getProp(varName).iteratesOver = source;
	      }
	      c(node.body, scope, "Statement");
	    },
	
	    ScopeBody: function(node, scope, c) { c(node, node.scope || scope); }
	  });
	
	  // PARSING
	
	  function runPasses(passes, pass) {
	    var arr = passes && passes[pass];
	    var args = Array.prototype.slice.call(arguments, 2);
	    if (arr) for (var i = 0; i < arr.length; ++i) arr[i].apply(null, args);
	  }
	
	  var parse = exports.parse = function(text, passes, options) {
	    var ast;
	    if (passes.preParse) for (var i = 0; i < passes.preParse.length; i++) {
	      var result = passes.preParse[i](text, options);
	      if (typeof result == "string") text = result;
	    }
	    var ast;
	    try {
	        options.tolerant = true;
	        options.tokens = true;
	        options.comment = true;
	        options.range = true;
	        options.deps = true;
	        options.loc = true;
	        options.attachComment = true;
	        ast = acorn.parse(text, options);
	        if(typeof ast.sourceFile !== "object") {
		        ast.sourceFile  = Object.create(null);
		        ast.sourceFile.text = ast.source;
		        ast.sourceFile.name = ast.fileLocation;
	        }
	    }
	    //ORION
	    catch(e) {
	    	ast = Util.errorAST(e, options.directSourceFile.name, text); //ORION
	    }
		ast.errors = Util.serializeAstErrors(ast);
	    runPasses(passes, "postParse", ast, text);
	    return ast;
	  };
	
	  // ANALYSIS INTERFACE
	
	  exports.analyze = function(ast, name, scope, passes) {
	    if (typeof ast == "string") ast = parse(ast);
	
	    if (!name) name = "file#" + cx.origins.length;
	    exports.addOrigin(cx.curOrigin = name);
	
	    if (!scope) scope = cx.topScope;
	    walk.recursive(ast, scope, null, scopeGatherer);
	    runPasses(passes, "preInfer", ast, scope);
	    walk.recursive(ast, scope, null, inferWrapper);
	    runPasses(passes, "postInfer", ast, scope);
	
	    cx.curOrigin = null;
	  };
	
	  // PURGING
	
	  exports.purge = function(origins, start, end) {
	    var test = makePredicate(origins, start, end);
	    ++cx.purgeGen;
	    cx.topScope.purge(test);
	    for (var prop in cx.props) {
	      var list = cx.props[prop];
	      for (var i = 0; i < list.length; ++i) {
	        var obj = list[i], av = obj.props[prop];
	        if (!av || test(av, av.originNode)) list.splice(i--, 1);
	      }
	      if (!list.length) delete cx.props[prop];
	    }
	  };
	
	  function makePredicate(origins, start, end) {
	    var arr = Array.isArray(origins);
	    if (arr && origins.length == 1) { origins = origins[0]; arr = false; }
	    if (arr) {
	      if (end == null) return function(n) { return origins.indexOf(n.origin) > -1; };
	      return function(n, pos) { return pos && pos.start >= start && pos.end <= end && origins.indexOf(n.origin) > -1; };
	    } else {
	      if (end == null) return function(n) { return n.origin == origins; };
	      return function(n, pos) { return pos && pos.start >= start && pos.end <= end && n.origin == origins; };
	    }
	  }
	
	  AVal.prototype.purge = function(test) {
	    if (this.purgeGen == cx.purgeGen) return;
	    this.purgeGen = cx.purgeGen;
	    for (var i = 0; i < this.types.length; ++i) {
	      var type = this.types[i];
	      if (test(type, type.originNode))
	        this.types.splice(i--, 1);
	      else
	        type.purge(test);
	    }
	    if (this.forward) for (var i = 0; i < this.forward.length; ++i) {
	      var f = this.forward[i];
	      if (test(f)) {
	        this.forward.splice(i--, 1);
	        if (this.props) this.props = null;
	      } else if (f.purge) {
	        f.purge(test);
	      }
	    }
	  };
	  ANull.purge = function() {};
	  Obj.prototype.purge = function(test) {
	    if (this.purgeGen == cx.purgeGen) return true;
	    this.purgeGen = cx.purgeGen;
	    for (var p in this.props) {
	      var av = this.props[p];
	      if (test(av, av.originNode))
	        this.removeProp(p);
	      av.purge(test);
	    }
	  };
	  Fn.prototype.purge = function(test) {
	    if (Obj.prototype.purge.call(this, test)) return;
	    this.self.purge(test);
	    this.retval.purge(test);
	    for (var i = 0; i < this.args.length; ++i) this.args[i].purge(test);
	  };
	
	  // EXPRESSION TYPE DETERMINATION
	
	  function findByPropertyName(name) {
	    guessing = true;
	    var found = objsWithProp(name);
	    if (found) for (var i = 0; i < found.length; ++i) {
	      var val = found[i].getProp(name);
	      if (!val.isEmpty()) return val;
	    }
	    return ANull;
	  }
	
	  var typeFinder = {
	    ArrayExpression: function(node, scope) {
	      var eltval = new AVal;
	      for (var i = 0; i < node.elements.length; ++i) {
	        var elt = node.elements[i];
	        if (elt) findType(elt, scope).propagate(eltval);
	      }
	      return new Arr(eltval);
	    },
	    ObjectExpression: function(node) {
	      return node.objType;
	    },
	    FunctionExpression: function(node) {
	      return node.body.scope.fnType;
	    },
	    SequenceExpression: function(node, scope) {
	      return findType(node.expressions[node.expressions.length-1], scope);
	    },
	    UnaryExpression: function(node) {
	      return unopResultType(node.operator);
	    },
	    UpdateExpression: function() {
	      return cx.num;
	    },
	    BinaryExpression: function(node, scope) {
	      if (binopIsBoolean(node.operator)) return cx.bool;
	      if (node.operator == "+") {
	        var lhs = findType(node.left, scope);
	        var rhs = findType(node.right, scope);
	        if (lhs.hasType(cx.str) || rhs.hasType(cx.str)) return cx.str;
	      }
	      return cx.num;
	    },
	    AssignmentExpression: function(node, scope) {
	      return findType(node.right, scope);
	    },
	    LogicalExpression: function(node, scope) {
	      var lhs = findType(node.left, scope);
	      return lhs.isEmpty() ? findType(node.right, scope) : lhs;
	    },
	    ConditionalExpression: function(node, scope) {
	      var lhs = findType(node.consequent, scope);
	      return lhs.isEmpty() ? findType(node.alternate, scope) : lhs;
	    },
	    NewExpression: function(node, scope) {
	      var f = findType(node.callee, scope).getFunctionType();
	      var proto = f && f.getProp("prototype").getObjType();
	      if (!proto) return ANull;
	      return getInstance(proto, f);
	    },
	    CallExpression: function(node, scope) {
	      var f = findType(node.callee, scope).getFunctionType();
	      if (!f) return ANull;
	      if (f.computeRet) {
	        for (var i = 0, args = []; i < node.arguments.length; ++i)
	          args.push(findType(node.arguments[i], scope));
	        var self = ANull;
	        if (node.callee.type == "MemberExpression")
	          self = findType(node.callee.object, scope);
	        return f.computeRet(self, args, node.arguments);
	      } else {
	        return f.retval;
	      }
	    },
		MemberExpression: function(node, scope) {
			var propN = propName(node, scope), obj = findType(node.object, scope).getType();
			if (obj) {
				//ORION
				var currentMatch = obj.getProp(propN);
				if (guessing && Array.isArray(obj.potentialMatches)) {
					var potentialMatches = obj.potentialMatches;
					var matchesProp = [];
					for(var i = 0, len = potentialMatches.length; i < len; i++) {
						var match = potentialMatches[i];
						var propMatch = match.getProp(propN);
						if (typeof propMatch !== "undefined") {
							if (typeof propMatch.originNode !== "undefined"
									&& typeof propMatch.origin !== "undefined") {
								if (propMatch.originNode.sourceFile) {
									if (propMatch.originNode.sourceFile.name === propMatch.origin) {
										matchesProp.push(propMatch);
									}
								}
							}
						}
					}
					if (matchesProp.length > 0) {
						currentMatch.potentialMatches = matchesProp;
					}
				}
				return currentMatch;
			}
			if (propN == "<i>") return ANull;
			return findByPropertyName(propN);
		},
	    Identifier: function(node, scope) {
	      return scope.hasProp(node.name) || ANull;
	    },
	    ThisExpression: function(_node, scope) {
	      return scope.fnType ? scope.fnType.self : cx.topScope;
	    },
	    Literal: function(node) {
	      return literalType(node);
	    }
	  };
	
	  function findType(node, scope) {
	    //ORION
	    var _f = typeFinder[node.type];
	    if(_f) {
	      return _f(node, scope);
	    }
	    return null;
	  }
	
	  var searchVisitor = exports.searchVisitor = walk.make({
	    Function: function(node, _st, c) {
	      var scope = node.body.scope;
	      if (node.id) c(node.id, scope);
	      for (var i = 0; i < node.params.length; ++i)
	        c(node.params[i], scope);
	      c(node.body, scope, "ScopeBody");
	    },
	    TryStatement: function(node, st, c) {
	      if (node.handler)
	        c(node.handler.param, st);
	      walk.base.TryStatement(node, st, c);
	    },
	    VariableDeclaration: function(node, st, c) {
	      for (var i = 0; i < node.declarations.length; ++i) {
	        var decl = node.declarations[i];
	        c(decl.id, st);
	        if (decl.init) c(decl.init, st, "Expression");
	      }
	    }
	  });
	  exports.fullVisitor = walk.make({
	    MemberExpression: function(node, st, c) {
	      c(node.object, st, "Expression");
	      c(node.property, st, node.computed ? "Expression" : null);
	    },
	    ObjectExpression: function(node, st, c) {
	      for (var i = 0; i < node.properties.length; ++i) {
	        c(node.properties[i].value, st, "Expression");
	        c(node.properties[i].key, st);
	      }
	    }
	  }, searchVisitor);
	
	  exports.findExpressionAt = function(ast, start, end, defaultScope, filter) {
	    var test = filter || function(_t, node) {
	      if (node.type == "Identifier" && node.name == "✖") return false;
	      return typeFinder.hasOwnProperty(node.type);
	    };
	    return walk.findNodeAt(ast, start, end, test, searchVisitor, defaultScope || cx.topScope);
	  };
	
	  exports.findExpressionAround = function(ast, start, end, defaultScope, filter) {
	    var test = filter || function(_t, node) {
	      if (start != null && node.start > start) return false;
	      if (node.type == "Identifier" && node.name == "✖") return false;
	      return typeFinder.hasOwnProperty(node.type);
	    };
	    return walk.findNodeAround(ast, end, test, searchVisitor, defaultScope || cx.topScope);
	  };
	
	  exports.expressionType = function(found) {
	    return findType(found.node, found.state);
	  };
	
	  // Finding the expected type of something, from context
	
	  exports.parentNode = function(child, ast) {
	    var stack = [];
	    function c(node, st, override) {
	      if (node.start <= child.start && node.end >= child.end) {
	        var top = stack[stack.length - 1];
	        if (node == child) throw {found: top};
	        if (top != node) stack.push(node);
	        walk.base[override || node.type](node, st, c);
	        if (top != node) stack.pop();
	      }
	    }
	    try {
	      c(ast, null);
	    } catch (e) {
	      if (e.found) return e.found;
	      throw e;
	    }
	  };
	
	  var findTypeFromContext = {
	    ArrayExpression: function(parent, _, get) { return get(parent, true).getProp("<i>"); },
	    ObjectExpression: function(parent, node, get) {
	      for (var i = 0; i < parent.properties.length; ++i) {
	        var prop = node.properties[i];
	        if (prop.value == node)
	          return get(parent, true).getProp(prop.key.name);
	      }
	    },
	    UnaryExpression: function(parent) { return unopResultType(parent.operator); },
	    UpdateExpression: function() { return cx.num; },
	    BinaryExpression: function(parent) { return binopIsBoolean(parent.operator) ? cx.bool : cx.num; },
	    AssignmentExpression: function(parent, _, get) { return get(parent.left); },
	    LogicalExpression: function(parent, _, get) { return get(parent, true); },
	    ConditionalExpression: function(parent, node, get) {
	      if (parent.consequent == node || parent.alternate == node) return get(parent, true);
	    },
	    NewExpression: function(parent, node, get) {
	      return this.CallExpression(parent, node, get);
	    },
	    CallExpression: function(parent, node, get) {
	      for (var i = 0; i < parent.arguments.length; i++) {
	        var arg = parent.arguments[i];
	        if (arg == node) {
	          var calleeType = get(parent.callee).getFunctionType();
	          if (calleeType instanceof Fn)
	            return calleeType.args[i];
	          break;
	        }
	      }
	    },
	    ReturnStatement: function(_parent, node, get) {
	      var fnNode = walk.findNodeAround(node.sourceFile.ast, node.start, "Function");
	      if (fnNode) {
	        var fnType = fnNode.node.type == "FunctionExpression"
	          ? get(fnNode.node, true).getFunctionType()
	          : fnNode.node.body.scope.fnType;
	        if (fnType) return fnType.retval.getType();
	      }
	    },
	    VariableDeclaration: function(parent, node, get) {
	      for (var i = 0; i < parent.declarations.length; i++) {
	        var decl = parent.declarations[i];
	        if (decl.init == node) return get(decl.id);
	      }
	    }
	  };
	
	  exports.typeFromContext = function(ast, found) {
	    var parent = exports.parentNode(found.node, ast);
	    var type = null;
	    if (findTypeFromContext.hasOwnProperty(parent.type)) {
	      type = findTypeFromContext[parent.type](parent, found.node, function(node, fromContext) {
	        var obj = {node: node, state: found.state};
	        var tp = fromContext ? exports.typeFromContext(ast, obj) : exports.expressionType(obj);
	        return tp || ANull;
	      });
	    }
	    return type || exports.expressionType(found);
	  };
	
	  // Flag used to indicate that some wild guessing was used to produce
	  // a type or set of completions.
	  var guessing = false;
	
	  exports.resetGuessing = function(val) { guessing = val; };
	  exports.didGuess = function() { return guessing; };
	
	  exports.forAllPropertiesOf = function(type, f) {
	    type.gatherProperties(f, 0);
	  };
	
	  var refFindWalker = walk.make({}, searchVisitor);
	
	  exports.findRefs = function(ast, baseScope, name, refScope, f) {
	    refFindWalker.Identifier = refFindWalker.VariablePattern = function(node, scope) {
	      if (node.name != name) return;
	      for (var s = scope; s; s = s.prev) {
	        if (s == refScope) f(node, scope);
	        if (name in s.props) return;
	      }
	    };
	    walk.recursive(ast, baseScope, null, refFindWalker);
	  };
	
	  var simpleWalker = walk.make({
	    Function: function(node, _st, c) { c(node.body, node.body.scope, "ScopeBody"); }
	  });
	
	  exports.findPropRefs = function(ast, scope, objType, propName, f) {
	    walk.simple(ast, {
	      MemberExpression: function(node, scope) {
	        if (node.computed || node.property.name != propName) return;
	        if (findType(node.object, scope).getType() == objType) f(node.property);
	      },
	      ObjectExpression: function(node, scope) {
	        if (findType(node, scope).getType() != objType) return;
	        for (var i = 0; i < node.properties.length; ++i)
	          if (node.properties[i].key.name == propName) f(node.properties[i].key);
	      }
	    }, simpleWalker, scope);
	  };
	
	  // LOCAL-VARIABLE QUERIES
	
	  var scopeAt = exports.scopeAt = function(ast, pos, defaultScope) {
	    var found = walk.findNodeAround(ast, pos, function(tp, node) {
	      return tp == "ScopeBody" && node.scope;
	    });
	    if (found) return found.node.scope;
	    else return defaultScope || cx.topScope;
	  };
	
	  exports.forAllLocalsAt = function(ast, pos, defaultScope, f) {
	    var scope = scopeAt(ast, pos, defaultScope);
	    scope.gatherProperties(f, 0);
	  };
	
	  // INIT DEF MODULE
	
	  // Delayed initialization because of cyclic dependencies.
	  def = exports.def = def.init({}, exports);
	});


/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*
	  Copyright (C) 2013 Ariya Hidayat <ariya.hidayat@gmail.com>
	  Copyright (C) 2013 Thaddee Tyl <thaddee.tyl@gmail.com>
	  Copyright (C) 2013 Mathias Bynens <mathias@qiwi.be>
	  Copyright (C) 2012 Ariya Hidayat <ariya.hidayat@gmail.com>
	  Copyright (C) 2012 Mathias Bynens <mathias@qiwi.be>
	  Copyright (C) 2012 Joost-Wim Boekesteijn <joost-wim@boekesteijn.nl>
	  Copyright (C) 2012 Kris Kowal <kris.kowal@cixar.com>
	  Copyright (C) 2012 Yusuke Suzuki <utatane.tea@gmail.com>
	  Copyright (C) 2012 Arpad Borsos <arpad.borsos@googlemail.com>
	  Copyright (C) 2011 Ariya Hidayat <ariya.hidayat@gmail.com>
	
	  Redistribution and use in source and binary forms, with or without
	  modification, are permitted provided that the following conditions are met:
	
	    * Redistributions of source code must retain the above copyright
	      notice, this list of conditions and the following disclaimer.
	    * Redistributions in binary form must reproduce the above copyright
	      notice, this list of conditions and the following disclaimer in the
	      documentation and/or other materials provided with the distribution.
	
	  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
	  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
	  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
	  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
	  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
	  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
	  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
	  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
	  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
	  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*/
	
	/*jslint bitwise:true plusplus:true */
	/*global esprima:true, define:true, exports:true, window: true,
	throwError: true, generateStatement: true, peek: true,
	parseAssignmentExpression: true, parseBlock: true, parseExpression: true,
	parseFunctionDeclaration: true, parseFunctionExpression: true,
	parseFunctionSourceElements: true, parseVariableIdentifier: true,
	parseLeftHandSideExpression: true, parseParams: true, validateParam: true,
	parseUnaryExpression: true,
	parseStatement: true, parseSourceElement: true */
	/* eslint-disable missing-nls */
	(function (root, factory) {
	    'use strict';
	
	    // Universal Module Definition (UMD) to support AMD, CommonJS/Node.js,
	    // Rhino, and plain browser loading.
	
	    /* istanbul ignore next */
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    } else if (typeof exports !== 'undefined') {
	        factory(exports);
	    } else {
	        factory((root.esprima = {}));
	    }
	}(this, function (exports) {
	    'use strict';
	
	    var Token,
	        TokenName,
	        FnExprTokens,
	        Syntax,
	        PlaceHolders,
	        PropertyKind,
	        Messages,
	        Regex,
	        source,
	        strict,
	        index,
	        lineNumber,
	        lineStart,
	        hasLineTerminator,
	        lastIndex,
	        lastLineNumber,
	        lastLineStart,
	        startIndex,
	        startLineNumber,
	        startLineStart,
	        scanning,
	        length,
	        lookahead,
	        state,
	        extra;
	
	    Token = {
	        BooleanLiteral: 1,
	        EOF: 2,
	        Identifier: 3,
	        Keyword: 4,
	        NullLiteral: 5,
	        NumericLiteral: 6,
	        Punctuator: 7,
	        StringLiteral: 8,
	        RegularExpression: 9
	    };
	
	    TokenName = {};
	    TokenName[Token.BooleanLiteral] = 'Boolean';
	    TokenName[Token.EOF] = '<end>';
	    TokenName[Token.Identifier] = 'Identifier';
	    TokenName[Token.Keyword] = 'Keyword';
	    TokenName[Token.NullLiteral] = 'Null';
	    TokenName[Token.NumericLiteral] = 'Numeric';
	    TokenName[Token.Punctuator] = 'Punctuator';
	    TokenName[Token.StringLiteral] = 'String';
	    TokenName[Token.RegularExpression] = 'RegularExpression';
	
	    // A function following one of those tokens is an expression.
	    FnExprTokens = ['(', '{', '[', 'in', 'typeof', 'instanceof', 'new',
	                    'return', 'case', 'delete', 'throw', 'void',
	                    // assignment operators
	                    '=', '+=', '-=', '*=', '/=', '%=', '<<=', '>>=', '>>>=',
	                    '&=', '|=', '^=', ',',
	                    // binary/unary operators
	                    '+', '-', '*', '/', '%', '++', '--', '<<', '>>', '>>>', '&',
	                    '|', '^', '!', '~', '&&', '||', '?', ':', '===', '==', '>=',
	                    '<=', '<', '>', '!=', '!=='];
	
	    Syntax = {
	        AssignmentExpression: 'AssignmentExpression',
	        ArrayExpression: 'ArrayExpression',
	        ArrowFunctionExpression: 'ArrowFunctionExpression',
	        BlockStatement: 'BlockStatement',
	        BinaryExpression: 'BinaryExpression',
	        BreakStatement: 'BreakStatement',
	        CallExpression: 'CallExpression',
	        CatchClause: 'CatchClause',
	        ConditionalExpression: 'ConditionalExpression',
	        ContinueStatement: 'ContinueStatement',
	        DoWhileStatement: 'DoWhileStatement',
	        DebuggerStatement: 'DebuggerStatement',
	        EmptyStatement: 'EmptyStatement',
	        ExpressionStatement: 'ExpressionStatement',
	        ForStatement: 'ForStatement',
	        ForInStatement: 'ForInStatement',
	        FunctionDeclaration: 'FunctionDeclaration',
	        FunctionExpression: 'FunctionExpression',
	        Identifier: 'Identifier',
	        IfStatement: 'IfStatement',
	        Literal: 'Literal',
	        LabeledStatement: 'LabeledStatement',
	        LogicalExpression: 'LogicalExpression',
	        MemberExpression: 'MemberExpression',
	        NewExpression: 'NewExpression',
	        ObjectExpression: 'ObjectExpression',
	        Program: 'Program',
	        Property: 'Property',
	        ReturnStatement: 'ReturnStatement',
	        SequenceExpression: 'SequenceExpression',
	        SwitchStatement: 'SwitchStatement',
	        SwitchCase: 'SwitchCase',
	        ThisExpression: 'ThisExpression',
	        ThrowStatement: 'ThrowStatement',
	        TryStatement: 'TryStatement',
	        UnaryExpression: 'UnaryExpression',
	        UpdateExpression: 'UpdateExpression',
	        VariableDeclaration: 'VariableDeclaration',
	        VariableDeclarator: 'VariableDeclarator',
	        WhileStatement: 'WhileStatement',
	        WithStatement: 'WithStatement'
	    };
	
	    PlaceHolders = {
	        ArrowParameterPlaceHolder: {
	            type: 'ArrowParameterPlaceHolder'
	        }
	    };
	
	    PropertyKind = {
	        Data: 1,
	        Get: 2,
	        Set: 4
	    };
	
	    // Error messages should be identical to V8.
	    Messages = {
	        UnexpectedToken:  'Unexpected token %0',
	        UnexpectedNumber:  'Unexpected number',
	        UnexpectedString:  'Unexpected string',
	        UnexpectedIdentifier:  'Unexpected identifier',
	        UnexpectedReserved:  'Unexpected reserved word',
	        UnexpectedEOS:  'Unexpected end of input',
	        NewlineAfterThrow:  'Illegal newline after throw',
	        InvalidRegExp: 'Invalid regular expression',
	        UnterminatedRegExp:  'Invalid regular expression: missing /',
	        InvalidLHSInAssignment:  'Invalid left-hand side in assignment',
	        InvalidLHSInForIn:  'Invalid left-hand side in for-in',
	        MultipleDefaultsInSwitch: 'More than one default clause in switch statement',
	        NoCatchOrFinally:  'Missing catch or finally after try',
	        UnknownLabel: 'Undefined label \'%0\'',
	        Redeclaration: '%0 \'%1\' has already been declared',
	        IllegalContinue: 'Illegal continue statement',
	        IllegalBreak: 'Illegal break statement',
	        IllegalReturn: 'Illegal return statement',
	        StrictModeWith:  'Strict mode code may not include a with statement',
	        StrictCatchVariable:  'Catch variable may not be eval or arguments in strict mode',
	        StrictVarName:  'Variable name may not be eval or arguments in strict mode',
	        StrictParamName:  'Parameter name eval or arguments is not allowed in strict mode',
	        StrictParamDupe: 'Strict mode function may not have duplicate parameter names',
	        StrictFunctionName:  'Function name may not be eval or arguments in strict mode',
	        StrictOctalLiteral:  'Octal literals are not allowed in strict mode.',
	        StrictDelete:  'Delete of an unqualified identifier in strict mode.',
	        StrictDuplicateProperty:  'Duplicate data property in object literal not allowed in strict mode',
	        AccessorDataProperty:  'Object literal may not have data and accessor property with the same name',
	        AccessorGetSet:  'Object literal may not have multiple get/set accessors with the same name',
	        StrictLHSAssignment:  'Assignment to eval or arguments is not allowed in strict mode',
	        StrictLHSPostfix:  'Postfix increment/decrement may not have eval or arguments operand in strict mode',
	        StrictLHSPrefix:  'Prefix increment/decrement may not have eval or arguments operand in strict mode',
	        StrictReservedWord:  'Use of future reserved word in strict mode',
	        MissingToken: 'Missing expected \'%0\''
	    };
	
	    // See also tools/generate-unicode-regex.py.
	    Regex = {
	        NonAsciiIdentifierStart: new RegExp('[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B2\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58\u0C59\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D60\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19C1-\u19C7\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA7AD\uA7B0\uA7B1\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB5F\uAB64\uAB65\uABC0-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]'),
	        NonAsciiIdentifierPart: new RegExp('[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u08A0-\u08B2\u08E4-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58\u0C59\u0C60-\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D01-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D57\u0D60-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19D9\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1CD0-\u1CD2\u1CD4-\u1CF6\u1CF8\u1CF9\u1D00-\u1DF5\u1DFC-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200C\u200D\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u2E2F\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099\u309A\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA69D\uA69F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA7AD\uA7B0\uA7B1\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C4\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB5F\uAB64\uAB65\uABC0-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2D\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]')
	    };
	
	    // Ensure the condition is true, otherwise throw an error.
	    // This is only to have a better contract semantic, i.e. another safety net
	    // to catch a logic error. The condition shall be fulfilled in normal case.
	    // Do NOT use this to enforce a certain condition on any user input.
	
	    function assert(condition, message) {
	        /* istanbul ignore if */
	        if (!condition) {
	            throw new Error('ASSERT: ' + message);
	        }
	    }
	
	    function isDecimalDigit(ch) {
	        return (ch >= 0x30 && ch <= 0x39);   // 0..9
	    }
	
	    function isHexDigit(ch) {
	        return '0123456789abcdefABCDEF'.indexOf(ch) >= 0;
	    }
	
	    function isOctalDigit(ch) {
	        return '01234567'.indexOf(ch) >= 0;
	    }
	
	
	    // 7.2 White Space
	
	    function isWhiteSpace(ch) {
	        return (ch === 0x20) || (ch === 0x09) || (ch === 0x0B) || (ch === 0x0C) || (ch === 0xA0) ||
	            (ch >= 0x1680 && [0x1680, 0x180E, 0x2000, 0x2001, 0x2002, 0x2003, 0x2004, 0x2005, 0x2006, 0x2007, 0x2008, 0x2009, 0x200A, 0x202F, 0x205F, 0x3000, 0xFEFF].indexOf(ch) >= 0);
	    }
	
	    // 7.3 Line Terminators
	
	    function isLineTerminator(ch) {
	        return (ch === 0x0A) || (ch === 0x0D) || (ch === 0x2028) || (ch === 0x2029);
	    }
	
	    // 7.6 Identifier Names and Identifiers
	
	    function isIdentifierStart(ch) {
	        return (ch === 0x24) || (ch === 0x5F) ||  // $ (dollar) and _ (underscore)
	            (ch >= 0x41 && ch <= 0x5A) ||         // A..Z
	            (ch >= 0x61 && ch <= 0x7A) ||         // a..z
	            (ch === 0x5C) ||                      // \ (backslash)
	            ((ch >= 0x80) && Regex.NonAsciiIdentifierStart.test(String.fromCharCode(ch)));
	    }
	
	    function isIdentifierPart(ch) {
	        return (ch === 0x24) || (ch === 0x5F) ||  // $ (dollar) and _ (underscore)
	            (ch >= 0x41 && ch <= 0x5A) ||         // A..Z
	            (ch >= 0x61 && ch <= 0x7A) ||         // a..z
	            (ch >= 0x30 && ch <= 0x39) ||         // 0..9
	            (ch === 0x5C) ||                      // \ (backslash)
	            ((ch >= 0x80) && Regex.NonAsciiIdentifierPart.test(String.fromCharCode(ch)));
	    }
	
	    // 7.6.1.2 Future Reserved Words
	
	    function isFutureReservedWord(id) {
	        switch (id) {
	        case 'class':
	        case 'enum':
	        case 'export':
	        case 'extends':
	        case 'import':
	        case 'super':
	            return true;
	        default:
	            return false;
	        }
	    }
	
	    function isStrictModeReservedWord(id) {
	        switch (id) {
	        case 'implements':
	        case 'interface':
	        case 'package':
	        case 'private':
	        case 'protected':
	        case 'public':
	        case 'static':
	        case 'yield':
	        case 'let':
	            return true;
	        default:
	            return false;
	        }
	    }
	
	    function isRestrictedWord(id) {
	        return id === 'eval' || id === 'arguments';
	    }
	
	    // 7.6.1.1 Keywords
	
	    function isKeyword(id) {
	        if (strict && isStrictModeReservedWord(id)) {
	            return true;
	        }
	
	        // 'const' is specialized as Keyword in V8.
	        // 'yield' and 'let' are for compatibility with SpiderMonkey and ES.next.
	        // Some others are from future reserved words.
	
	        switch (id.length) {
	        case 2:
	            return (id === 'if') || (id === 'in') || (id === 'do');
	        case 3:
	            return (id === 'var') || (id === 'for') || (id === 'new') ||
	                (id === 'try') || (id === 'let');
	        case 4:
	            return (id === 'this') || (id === 'else') || (id === 'case') ||
	                (id === 'void') || (id === 'with') || (id === 'enum');
	        case 5:
	            return (id === 'while') || (id === 'break') || (id === 'catch') ||
	                (id === 'throw') || (id === 'const') || (id === 'yield') ||
	                (id === 'class') || (id === 'super');
	        case 6:
	            return (id === 'return') || (id === 'typeof') || (id === 'delete') ||
	                (id === 'switch') || (id === 'export') || (id === 'import');
	        case 7:
	            return (id === 'default') || (id === 'finally') || (id === 'extends');
	        case 8:
	            return (id === 'function') || (id === 'continue') || (id === 'debugger');
	        case 10:
	            return (id === 'instanceof');
	        default:
	            return false;
	        }
	    }
	
	    // 7.4 Comments
	
	    function addComment(type, value, start, end, loc) {
	        var comment;
	
	        assert(typeof start === 'number', 'Comment must have valid position');
	
	        state.lastCommentStart = start;
	
	        comment = {
	            type: type,
	            value: value
	        };
	        if (extra.range) {
	            comment.range = [start, end];
	        }
	        if (extra.loc) {
	            comment.loc = loc;
	        }
	        extra.comments.push(comment);
	        if (extra.attachComment) {
	            extra.leadingComments.push(comment);
	            extra.trailingComments.push(comment);
	        }
	    }
	
	    function skipSingleLineComment(offset) {
	        var start, loc, ch, comment;
	
	        start = index - offset;
	        loc = {
	            start: {
	                line: lineNumber,
	                column: index - lineStart - offset
	            }
	        };
	
	        while (index < length) {
	            ch = source.charCodeAt(index);
	            ++index;
	            if (isLineTerminator(ch)) {
	                hasLineTerminator = true;
	                if (extra.comments) {
	                    comment = source.slice(start + offset, index - 1);
	                    loc.end = {
	                        line: lineNumber,
	                        column: index - lineStart - 1
	                    };
	                    addComment('Line', comment, start, index - 1, loc);
	                }
	                if (ch === 13 && source.charCodeAt(index) === 10) {
	                    ++index;
	                }
	                ++lineNumber;
	                lineStart = index;
	                return;
	            }
	        }
	
	        if (extra.comments) {
	            comment = source.slice(start + offset, index);
	            loc.end = {
	                line: lineNumber,
	                column: index - lineStart
	            };
	            addComment('Line', comment, start, index, loc);
	        }
	    }
	
	    function skipMultiLineComment() {
	        var start, loc, ch, comment;
	
	        if (extra.comments) {
	            start = index - 2;
	            loc = {
	                start: {
	                    line: lineNumber,
	                    column: index - lineStart - 2
	                }
	            };
	        }
	
	        while (index < length) {
	            ch = source.charCodeAt(index);
	            if (isLineTerminator(ch)) {
	                if (ch === 0x0D && source.charCodeAt(index + 1) === 0x0A) {
	                    ++index;
	                }
	                hasLineTerminator = true;
	                ++lineNumber;
	                ++index;
	                lineStart = index;
	            } else if (ch === 0x2A) {
	                // Block comment ends with '*/'.
	                if (source.charCodeAt(index + 1) === 0x2F) {
	                    ++index;
	                    ++index;
	                    if (extra.comments) {
	                        comment = source.slice(start + 2, index - 2);
	                        loc.end = {
	                            line: lineNumber,
	                            column: index - lineStart
	                        };
	                        addComment('Block', comment, start, index, loc);
	                    }
	                    return;
	                }
	                ++index;
	            } else {
	                ++index;
	            }
	        }
	
	        //ORION
	        if(index >= length && extra.comments) {
	            //ran off the end of the file - the whole thing is a comment
	            loc.end = {
	                line: lineNumber,
	                column: index - lineStart
	            };
	            comment = source.slice(start+2, index);
	            addComment('Block', comment, start, index, loc);
	            tolerateUnexpectedToken();
	        } else {
	            throwUnexpectedToken();
	        }
	    }
	
	    function skipComment() {
	        var ch, start;
	        hasLineTerminator = false;
	
	        start = (index === 0);
	        while (index < length) {
	            ch = source.charCodeAt(index);
	
	            if (isWhiteSpace(ch)) {
	                ++index;
	            } else if (isLineTerminator(ch)) {
	                hasLineTerminator = true;
	                ++index;
	                if (ch === 0x0D && source.charCodeAt(index) === 0x0A) {
	                    ++index;
	                }
	                ++lineNumber;
	                lineStart = index;
	                start = true;
	            } else if (ch === 0x2F) { // U+002F is '/'
	                ch = source.charCodeAt(index + 1);
	                if (ch === 0x2F) {
	                    ++index;
	                    ++index;
	                    skipSingleLineComment(2);
	                    start = true;
	                } else if (ch === 0x2A) {  // U+002A is '*'
	                    ++index;
	                    ++index;
	                    skipMultiLineComment();
	                } else {
	                    break;
	                }
	            } else if (start && ch === 0x2D) { // U+002D is '-'
	                // U+003E is '>'
	                if ((source.charCodeAt(index + 1) === 0x2D) && (source.charCodeAt(index + 2) === 0x3E)) {
	                    // '-->' is a single-line comment
	                    index += 3;
	                    skipSingleLineComment(3);
	                } else {
	                    break;
	                }
	            } else if (ch === 0x3C) { // U+003C is '<'
	                if (source.slice(index + 1, index + 4) === '!--') {
	                    ++index; // `<`
	                    ++index; // `!`
	                    ++index; // `-`
	                    ++index; // `-`
	                    skipSingleLineComment(4);
	                } else {
	                    break;
	                }
	            } else {
	                break;
	            }
	        }
	    }
	
	    function scanHexEscape(prefix) {
	        var i, len, ch, code = 0;
	
	        len = (prefix === 'u') ? 4 : 2;
	        for (i = 0; i < len; ++i) {
	            if (index < length && isHexDigit(source[index])) {
	                ch = source[index++];
	                code = code * 16 + '0123456789abcdef'.indexOf(ch.toLowerCase());
	            } else {
	                return '';
	            }
	        }
	        return String.fromCharCode(code);
	    }
	
	    function scanUnicodeCodePointEscape() {
	        var ch, code, cu1, cu2;
	
	        ch = source[index];
	        code = 0;
	
	        // At least, one hex digit is required.
	        if (ch === '}') {
	            throwUnexpectedToken();
	        }
	
	        while (index < length) {
	            ch = source[index++];
	            if (!isHexDigit(ch)) {
	                break;
	            }
	            code = code * 16 + '0123456789abcdef'.indexOf(ch.toLowerCase());
	        }
	
	        if (code > 0x10FFFF || ch !== '}') {
	            throwUnexpectedToken();
	        }
	
	        // UTF-16 Encoding
	        if (code <= 0xFFFF) {
	            return String.fromCharCode(code);
	        }
	        cu1 = ((code - 0x10000) >> 10) + 0xD800;
	        cu2 = ((code - 0x10000) & 1023) + 0xDC00;
	        return String.fromCharCode(cu1, cu2);
	    }
	
	    function getEscapedIdentifier() {
	        var ch, id;
	
	        ch = source.charCodeAt(index++);
	        id = String.fromCharCode(ch);
	
	        // '\u' (U+005C, U+0075) denotes an escaped character.
	        if (ch === 0x5C) {
	            if (source.charCodeAt(index) !== 0x75) {
	                throwUnexpectedToken();
	            }
	            ++index;
	            ch = scanHexEscape('u');
	            if (!ch || ch === '\\' || !isIdentifierStart(ch.charCodeAt(0))) {
	                throwUnexpectedToken();
	            }
	            id = ch;
	        }
	
	        while (index < length) {
	            ch = source.charCodeAt(index);
	            if (!isIdentifierPart(ch)) {
	                break;
	            }
	            ++index;
	            id += String.fromCharCode(ch);
	
	            // '\u' (U+005C, U+0075) denotes an escaped character.
	            if (ch === 0x5C) {
	                id = id.substr(0, id.length - 1);
	                if (source.charCodeAt(index) !== 0x75) {
	                    throwUnexpectedToken();
	                }
	                ++index;
	                ch = scanHexEscape('u');
	                if (!ch || ch === '\\' || !isIdentifierPart(ch.charCodeAt(0))) {
	                    throwUnexpectedToken();
	                }
	                id += ch;
	            }
	        }
	
	        return id;
	    }
	
	    function getIdentifier() {
	        var start, ch;
	
	        start = index++;
	        while (index < length) {
	            ch = source.charCodeAt(index);
	            if (ch === 0x5C) {
	                // Blackslash (U+005C) marks Unicode escape sequence.
	                index = start;
	                return getEscapedIdentifier();
	            }
	            if (isIdentifierPart(ch)) {
	                ++index;
	            } else {
	                break;
	            }
	        }
	
	        return source.slice(start, index);
	    }
	
	    function scanIdentifier() {
	        var start, id, type;
	
	        start = index;
	
	        // Backslash (U+005C) starts an escaped character.
	        id = (source.charCodeAt(index) === 0x5C) ? getEscapedIdentifier() : getIdentifier();
	
	        // There is no keyword or literal with only one character.
	        // Thus, it must be an identifier.
	        if (id.length === 1) {
	            type = Token.Identifier;
	        } else if (isKeyword(id)) {
	            type = Token.Keyword;
	        } else if (id === 'null') {
	            type = Token.NullLiteral;
	        } else if (id === 'true' || id === 'false') {
	            type = Token.BooleanLiteral;
	        } else {
	            type = Token.Identifier;
	        }
	
	        return {
	            type: type,
	            value: id,
	            lineNumber: lineNumber,
	            lineStart: lineStart,
	            start: start,
	            end: index
	        };
	    }
	
	
	    // 7.7 Punctuators
	
	    function scanPunctuator() {
	        var start = index,
	            code = source.charCodeAt(index),
	            code2,
	            ch1 = source[index],
	            ch2,
	            ch3,
	            ch4;
	
	        switch (code) {
	
	        // Check for most common single-character punctuators.
	        case 0x2E:  // . dot
	        case 0x28:  // ( open bracket
	        case 0x29:  // ) close bracket
	        case 0x3B:  // ; semicolon
	        case 0x2C:  // , comma
	        case 0x7B:  // { open curly brace
	        case 0x7D:  // } close curly brace
	        case 0x5B:  // [
	        case 0x5D:  // ]
	        case 0x3A:  // :
	        case 0x3F:  // ?
	        case 0x7E:  // ~
	            ++index;
	            if (extra.tokenize) {
	                if (code === 0x28) {
	                    extra.openParenToken = extra.tokens.length;
	                } else if (code === 0x7B) {
	                    extra.openCurlyToken = extra.tokens.length;
	                }
	            }
	            return {
	                type: Token.Punctuator,
	                value: String.fromCharCode(code),
	                lineNumber: lineNumber,
	                lineStart: lineStart,
	                start: start,
	                end: index
	            };
	
	        default:
	            code2 = source.charCodeAt(index + 1);
	
	            // '=' (U+003D) marks an assignment or comparison operator.
	            if (code2 === 0x3D) {
	                switch (code) {
	                case 0x2B:  // +
	                case 0x2D:  // -
	                case 0x2F:  // /
	                case 0x3C:  // <
	                case 0x3E:  // >
	                case 0x5E:  // ^
	                case 0x7C:  // |
	                case 0x25:  // %
	                case 0x26:  // &
	                case 0x2A:  // *
	                    index += 2;
	                    return {
	                        type: Token.Punctuator,
	                        value: String.fromCharCode(code) + String.fromCharCode(code2),
	                        lineNumber: lineNumber,
	                        lineStart: lineStart,
	                        start: start,
	                        end: index
	                    };
	
	                case 0x21: // !
	                case 0x3D: // =
	                    index += 2;
	
	                    // !== and ===
	                    if (source.charCodeAt(index) === 0x3D) {
	                        ++index;
	                    }
	                    return {
	                        type: Token.Punctuator,
	                        value: source.slice(start, index),
	                        lineNumber: lineNumber,
	                        lineStart: lineStart,
	                        start: start,
	                        end: index
	                    };
	                }
	            }
	        }
	
	        // 4-character punctuator: >>>=
	
	        ch4 = source.substr(index, 4);
	
	        if (ch4 === '>>>=') {
	            index += 4;
	            return {
	                type: Token.Punctuator,
	                value: ch4,
	                lineNumber: lineNumber,
	                lineStart: lineStart,
	                start: start,
	                end: index
	            };
	        }
	
	        // 3-character punctuators: === !== >>> <<= >>=
	
	        ch3 = ch4.substr(0, 3);
	
	        if (ch3 === '>>>' || ch3 === '<<=' || ch3 === '>>=') {
	            index += 3;
	            return {
	                type: Token.Punctuator,
	                value: ch3,
	                lineNumber: lineNumber,
	                lineStart: lineStart,
	                start: start,
	                end: index
	            };
	        }
	
	        // Other 2-character punctuators: ++ -- << >> && ||
	        ch2 = ch3.substr(0, 2);
	
	        if ((ch1 === ch2[1] && ('+-<>&|'.indexOf(ch1) >= 0)) || ch2 === '=>') {
	            index += 2;
	            return {
	                type: Token.Punctuator,
	                value: ch2,
	                lineNumber: lineNumber,
	                lineStart: lineStart,
	                start: start,
	                end: index
	            };
	        }
	
	        // 1-character punctuators: < > = ! + - * % & | ^ /
	
	        if ('<>=!+-*%&|^/'.indexOf(ch1) >= 0) {
	            ++index;
	            return {
	                type: Token.Punctuator,
	                value: ch1,
	                lineNumber: lineNumber,
	                lineStart: lineStart,
	                start: start,
	                end: index
	            };
	        }
	        //ORION 
	        ++index;
	        var tok = {
	            type: Token.Punctuator, 
	            lineNumber: lineNumber,
	            lineStart: lineStart,
	            start: start,
	            end: index,
	            value: source.slice(start, index)
	        };
	        throwUnexpectedToken(tok);
	    }
	
	    // 7.8.3 Numeric Literals
	
	    function scanHexLiteral(start) {
	        var number = '';
	
	        while (index < length) {
	            if (!isHexDigit(source[index])) {
	                break;
	            }
	            number += source[index++];
	        }
	
	        if (number.length === 0) {
	            throwUnexpectedToken();
	        }
	
	        if (isIdentifierStart(source.charCodeAt(index))) {
	            throwUnexpectedToken();
	        }
	
	        return {
	            type: Token.NumericLiteral,
	            value: parseInt('0x' + number, 16),
	            lineNumber: lineNumber,
	            lineStart: lineStart,
	            start: start,
	            end: index
	        };
	    }
	
	    function scanBinaryLiteral(start) {
	        var ch, number;
	
	        number = '';
	
	        while (index < length) {
	            ch = source[index];
	            if (ch !== '0' && ch !== '1') {
	                break;
	            }
	            number += source[index++];
	        }
	
	        if (number.length === 0) {
	            // only 0b or 0B
	            throwUnexpectedToken();
	        }
	
	        if (index < length) {
	            ch = source.charCodeAt(index);
	            /* istanbul ignore else */
	            if (isIdentifierStart(ch) || isDecimalDigit(ch)) {
	                throwUnexpectedToken();
	            }
	        }
	
	        return {
	            type: Token.NumericLiteral,
	            value: parseInt(number, 2),
	            lineNumber: lineNumber,
	            lineStart: lineStart,
	            start: start,
	            end: index
	        };
	    }
	
	    function scanOctalLiteral(prefix, start) {
	        var number, octal;
	
	        if (isOctalDigit(prefix)) {
	            octal = true;
	            number = '0' + source[index++];
	        } else {
	            octal = false;
	            ++index;
	            number = '';
	        }
	
	        while (index < length) {
	            if (!isOctalDigit(source[index])) {
	                break;
	            }
	            number += source[index++];
	        }
	
	        if (!octal && number.length === 0) {
	            // only 0o or 0O
	            throwUnexpectedToken();
	        }
	
	        if (isIdentifierStart(source.charCodeAt(index)) || isDecimalDigit(source.charCodeAt(index))) {
	            throwUnexpectedToken();
	        }
	
	        return {
	            type: Token.NumericLiteral,
	            value: parseInt(number, 8),
	            octal: octal,
	            lineNumber: lineNumber,
	            lineStart: lineStart,
	            start: start,
	            end: index
	        };
	    }
	
	    function isImplicitOctalLiteral() {
	        var i, ch;
	
	        // Implicit octal, unless there is a non-octal digit.
	        // (Annex B.1.1 on Numeric Literals)
	        for (i = index + 1; i < length; ++i) {
	            ch = source[i];
	            if (ch === '8' || ch === '9') {
	                return false;
	            }
	            if (!isOctalDigit(ch)) {
	                return true;
	            }
	        }
	
	        return true;
	    }
	
	    function scanNumericLiteral() {
	        var number, start, ch;
	
	        ch = source[index];
	        assert(isDecimalDigit(ch.charCodeAt(0)) || (ch === '.'),
	            'Numeric literal must start with a decimal digit or a decimal point');
	
	        start = index;
	        number = '';
	        if (ch !== '.') {
	            number = source[index++];
	            ch = source[index];
	
	            // Hex number starts with '0x'.
	            // Octal number starts with '0'.
	            // Octal number in ES6 starts with '0o'.
	            // Binary number in ES6 starts with '0b'.
	            if (number === '0') {
	                if (ch === 'x' || ch === 'X') {
	                    ++index;
	                    return scanHexLiteral(start);
	                }
	                if (ch === 'b' || ch === 'B') {
	                    ++index;
	                    return scanBinaryLiteral(start);
	                }
	                if (ch === 'o' || ch === 'O') {
	                    return scanOctalLiteral(ch, start);
	                }
	
	                if (isOctalDigit(ch)) {
	                    if (isImplicitOctalLiteral()) {
	                        return scanOctalLiteral(ch, start);
	                }
	            }
	            }
	
	            while (isDecimalDigit(source.charCodeAt(index))) {
	                number += source[index++];
	            }
	            ch = source[index];
	        }
	
	        if (ch === '.') {
	            number += source[index++];
	            while (isDecimalDigit(source.charCodeAt(index))) {
	                number += source[index++];
	            }
	            ch = source[index];
	        }
	
	        if (ch === 'e' || ch === 'E') {
	            number += source[index++];
	
	            ch = source[index];
	            if (ch === '+' || ch === '-') {
	                number += source[index++];
	            }
	            if (isDecimalDigit(source.charCodeAt(index))) {
	                while (isDecimalDigit(source.charCodeAt(index))) {
	                    number += source[index++];
	                }
	            } else {
	                throwUnexpectedToken();
	            }
	        }
	
	        if (isIdentifierStart(source.charCodeAt(index))) {
	            throwUnexpectedToken();
	        }
	
	        return {
	            type: Token.NumericLiteral,
	            value: parseFloat(number),
	            lineNumber: lineNumber,
	            lineStart: lineStart,
	            start: start,
	            end: index
	        };
	    }
	
	    // 7.8.4 String Literals
	
	    function scanStringLiteral() {
	        var str = '', quote, start, ch, code, unescaped, restore, octal = false;
	
	        quote = source[index];
	        assert((quote === '\'' || quote === '"'),
	            'String literal must starts with a quote');
	
	        start = index;
	        ++index;
	
	        while (index < length) {
	            ch = source[index++];
	
	            if (ch === quote) {
	                quote = '';
	                break;
	            } else if (ch === '\\') {
	                ch = source[index++];
	                if (!ch || !isLineTerminator(ch.charCodeAt(0))) {
	                    switch (ch) {
	                    case 'u':
	                    case 'x':
	                        if (source[index] === '{') {
	                            ++index;
	                            str += scanUnicodeCodePointEscape();
	                        } else {
	                            restore = index;
	                            unescaped = scanHexEscape(ch);
	                            if (unescaped) {
	                                str += unescaped;
	                            } else {
	                                index = restore;
	                                str += ch;
	                            }
	                        }
	                        break;
	                    case 'n':
	                        str += '\n';
	                        break;
	                    case 'r':
	                        str += '\r';
	                        break;
	                    case 't':
	                        str += '\t';
	                        break;
	                    case 'b':
	                        str += '\b';
	                        break;
	                    case 'f':
	                        str += '\f';
	                        break;
	                    case 'v':
	                        str += '\x0B';
	                        break;
	
	                    default:
	                        if (isOctalDigit(ch)) {
	                            code = '01234567'.indexOf(ch);
	
	                            // \0 is not octal escape sequence
	                            if (code !== 0) {
	                                octal = true;
	                            }
	
	                            if (index < length && isOctalDigit(source[index])) {
	                                octal = true;
	                                code = code * 8 + '01234567'.indexOf(source[index++]);
	
	                                // 3 digits are only allowed when string starts
	                                // with 0, 1, 2, 3
	                                if ('0123'.indexOf(ch) >= 0 &&
	                                        index < length &&
	                                        isOctalDigit(source[index])) {
	                                    code = code * 8 + '01234567'.indexOf(source[index++]);
	                                }
	                            }
	                            str += String.fromCharCode(code);
	                        } else {
	                            str += ch;
	                        }
	                        break;
	                    }
	                } else {
	                    ++lineNumber;
	                    if (ch ===  '\r' && source[index] === '\n') {
	                        ++index;
	                    }
	                    lineStart = index;
	                }
	            } else if (isLineTerminator(ch.charCodeAt(0))) {
	                break;
	            } else {
	                str += ch;
	            }
	        }
	        
	        var tok = {
	            type: Token.StringLiteral,
	            value: str,
	            octal: octal,
	            lineNumber: startLineNumber,
	            lineStart: startLineStart,
	            start: start,
	            end: index
	        };
	        
	        //ORION
	        if (quote !== '') {
	            tolerateUnexpectedToken(tok);
	        }
	
	        return tok;
	    }
	
	    function testRegExp(pattern, flags) {
	        var tmp = pattern;
	
	        if (flags.indexOf('u') >= 0) {
	            // Replace each astral symbol and every Unicode code point
	            // escape sequence with a single ASCII symbol to avoid throwing on
	            // regular expressions that are only valid in combination with the
	            // `/u` flag.
	            // Note: replacing with the ASCII symbol `x` might cause false
	            // negatives in unlikely scenarios. For example, `[\u{61}-b]` is a
	            // perfectly valid pattern that is equivalent to `[a-b]`, but it
	            // would be replaced by `[x-b]` which throws an error.
	            tmp = tmp
	                .replace(/\\u\{([0-9a-fA-F]+)\}/g, function ($0, $1) {
	                    if (parseInt($1, 16) <= 0x10FFFF) {
	                        return 'x';
	                    }
	                    throwUnexpectedToken(null, Messages.InvalidRegExp);
	                })
	                .replace(/[\uD800-\uDBFF][\uDC00-\uDFFF]/g, 'x');
	        }
	
	        // First, detect invalid regular expressions.
	        try {
	            RegExp(tmp);
	        } catch (e) {
	            throwUnexpectedToken(null, Messages.InvalidRegExp);
	        }
	
	        // Return a regular expression object for this pattern-flag pair, or
	        // `null` in case the current environment doesn't support the flags it
	        // uses.
	        try {
	            return new RegExp(pattern, flags);
	        } catch (exception) {
	            return null;
	    }
	    }
	
	    function scanRegExpBody() {
	        var ch, str, classMarker, terminated, body;
	
	        ch = source[index];
	        assert(ch === '/', 'Regular expression literal must start with a slash');
	        str = source[index++];
	
	        classMarker = false;
	        terminated = false;
	        while (index < length) {
	            ch = source[index++];
	            str += ch;
	            if (ch === '\\') {
	                ch = source[index++];
	                // ECMA-262 7.8.5
	                if (isLineTerminator(ch.charCodeAt(0))) {
	                    throwUnexpectedToken(null, Messages.UnterminatedRegExp);
	                }
	                str += ch;
	            } else if (isLineTerminator(ch.charCodeAt(0))) {
	                throwUnexpectedToken(null, Messages.UnterminatedRegExp);
	            } else if (classMarker) {
	                if (ch === ']') {
	                    classMarker = false;
	                }
	            } else {
	                if (ch === '/') {
	                    terminated = true;
	                    break;
	                } else if (ch === '[') {
	                    classMarker = true;
	                }
	            }
	        }
	
	        if (!terminated) {
	            throwUnexpectedToken(lookahead, Messages.UnterminatedRegExp);
	        }
	
	        // Exclude leading and trailing slash.
	        body = str.substr(1, str.length - 2);
	        return {
	            value: body,
	            literal: str
	        };
	    }
	
	    function scanRegExpFlags() {
	        var ch, str, flags, restore;
	
	        str = '';
	        flags = '';
	        while (index < length) {
	            ch = source[index];
	            if (!isIdentifierPart(ch.charCodeAt(0))) {
	                break;
	            }
	
	            ++index;
	            if (ch === '\\' && index < length) {
	                ch = source[index];
	                if (ch === 'u') {
	                    ++index;
	                    restore = index;
	                    ch = scanHexEscape('u');
	                    if (ch) {
	                        flags += ch;
	                        for (str += '\\u'; restore < index; ++restore) {
	                            str += source[restore];
	                        }
	                    } else {
	                        index = restore;
	                        flags += 'u';
	                        str += '\\u';
	                    }
	                    tolerateUnexpectedToken();
	                } else {
	                    str += '\\';
	                    tolerateUnexpectedToken();
	                }
	            } else {
	                flags += ch;
	                str += ch;
	            }
	        }
	
	        return {
	            value: flags,
	            literal: str
	        };
	    }
	
	    function scanRegExp() {
	        scanning = true;
	        var start, body, flags, value;
	
	        //ORION do not null out the lookahead
	        //lookahead = null;
	        skipComment();
	        start = index;
	
	        body = scanRegExpBody();
	        flags = scanRegExpFlags();
	        value = testRegExp(body.value, flags.value);
	        scanning = false;
	        if (extra.tokenize) {
	            return {
	                type: Token.RegularExpression,
	                value: value,
	                regex: {
	                    pattern: body.value,
	                    flags: flags.value
	                },
	                lineNumber: lineNumber,
	                lineStart: lineStart,
	                start: start,
	                end: index
	            };
	        }
	
	        return {
	            literal: body.literal + flags.literal,
	            value: value,
	            regex: {
	                pattern: body.value,
	                flags: flags.value
	            },
	            start: start,
	            end: index
	        };
	    }
	
	    function collectRegex() {
	        var pos, loc, regex, token;
	
	        skipComment();
	
	        pos = index;
	        loc = {
	            start: {
	                line: lineNumber,
	                column: index - lineStart
	            }
	        };
	
	        regex = scanRegExp();
	        loc.end = {
	            line: lineNumber,
	            column: index - lineStart
	        };
	
	        /* istanbul ignore next */
	        if (!extra.tokenize) {
	            // Pop the previous token, which is likely '/' or '/='
	            if (extra.tokens.length > 0) {
	                token = extra.tokens[extra.tokens.length - 1];
	                if (token.range[0] === pos && token.type === 'Punctuator') {
	                    if (token.value === '/' || token.value === '/=') {
	                        extra.tokens.pop();
	                    }
	                }
	            }
	
	            extra.tokens.push({
	                type: 'RegularExpression',
	                value: regex.literal,
	                regex: regex.regex,
	                range: [pos, index],
	                loc: loc
	            });
	        }
	
	        return regex;
	    }
	
	    function isIdentifierName(token) {
	        return token.type === Token.Identifier ||
	            token.type === Token.Keyword ||
	            token.type === Token.BooleanLiteral ||
	            token.type === Token.NullLiteral;
	    }
	
	    function advanceSlash() {
	        var prevToken,
	            checkToken;
	        // Using the following algorithm:
	        // https://github.com/mozilla/sweet.js/wiki/design
	        prevToken = extra.tokens[extra.tokens.length - 1];
	        if (!prevToken) {
	            // Nothing before that: it cannot be a division.
	            return collectRegex();
	        }
	        if (prevToken.type === 'Punctuator') {
	            if (prevToken.value === ']') {
	                return scanPunctuator();
	            }
	            if (prevToken.value === ')') {
	                checkToken = extra.tokens[extra.openParenToken - 1];
	                if (checkToken &&
	                        checkToken.type === 'Keyword' &&
	                        (checkToken.value === 'if' ||
	                         checkToken.value === 'while' ||
	                         checkToken.value === 'for' ||
	                         checkToken.value === 'with')) {
	                    return collectRegex();
	                }
	                return scanPunctuator();
	            }
	            if (prevToken.value === '}') {
	                // Dividing a function by anything makes little sense,
	                // but we have to check for that.
	                if (extra.tokens[extra.openCurlyToken - 3] &&
	                        extra.tokens[extra.openCurlyToken - 3].type === 'Keyword') {
	                    // Anonymous function.
	                    checkToken = extra.tokens[extra.openCurlyToken - 4];
	                    if (!checkToken) {
	                        return scanPunctuator();
	                    }
	                } else if (extra.tokens[extra.openCurlyToken - 4] &&
	                        extra.tokens[extra.openCurlyToken - 4].type === 'Keyword') {
	                    // Named function.
	                    checkToken = extra.tokens[extra.openCurlyToken - 5];
	                    if (!checkToken) {
	                        return collectRegex();
	                    }
	                } else {
	                    return scanPunctuator();
	                }
	                // checkToken determines whether the function is
	                // a declaration or an expression.
	                if (FnExprTokens.indexOf(checkToken.value) >= 0) {
	                    // It is an expression.
	                    return scanPunctuator();
	                }
	                // It is a declaration.
	                return collectRegex();
	            }
	            return collectRegex();
	        }
	        if (prevToken.type === 'Keyword' && prevToken.value !== 'this') {
	            return collectRegex();
	        }
	        return scanPunctuator();
	    }
	
	    function advance() {
	        var ch;
	
	        if (index >= length) {
	            return {
	                type: Token.EOF,
	                lineNumber: lineNumber,
	                lineStart: lineStart,
	                start: index,
	                end: index,
	                range: [index, index] //ORION
	            };
	        }
	
	        ch = source.charCodeAt(index);
	
	        if (isIdentifierStart(ch)) {
	            return scanIdentifier();
	        }
	
	        // Very common: ( and ) and ;
	        if (ch === 0x28 || ch === 0x29 || ch === 0x3B) {
	            return scanPunctuator();
	        }
	
	        // String literal starts with single quote (U+0027) or double quote (U+0022).
	        if (ch === 0x27 || ch === 0x22) {
	            return scanStringLiteral();
	        }
	
	
	        // Dot (.) U+002E can also start a floating-point number, hence the need
	        // to check the next character.
	        if (ch === 0x2E) {
	            if (isDecimalDigit(source.charCodeAt(index + 1))) {
	                return scanNumericLiteral();
	            }
	            return scanPunctuator();
	        }
	
	        if (isDecimalDigit(ch)) {
	            return scanNumericLiteral();
	        }
	
	        // Slash (/) U+002F can also start a regex.
	        if (extra.tokenize && ch === 0x2F) {
	            return advanceSlash();
	        }
	
	        return scanPunctuator();
	    }
	
	    function collectToken() {
	        var loc, token, value, entry;
	
	        loc = {
	            start: {
	                line: lineNumber,
	                column: index - lineStart
	            }
	        };
	
	        token = advance();
	        loc.end = {
	            line: lineNumber,
	            column: index - lineStart
	        };
	
	        if (token.type !== Token.EOF) {
	            value = source.slice(token.start, token.end);
	            entry = {
	                type: TokenName[token.type],
	                value: value,
	                range: [token.start, token.end],
	                loc: loc
	            };
	            if (token.regex) {
	                entry.regex = {
	                    pattern: token.regex.pattern,
	                    flags: token.regex.flags
	                };
	            }
	            extra.tokens.push(entry);
	        }
	
	        return token;
	    }
	
	    function lex() {
	        var token;
	        scanning = true;
	
	        lastIndex = index;
	        lastLineNumber = lineNumber;
	        lastLineStart = lineStart;
	
	        skipComment();
	
	        token = lookahead;
	
	        startIndex = index;
	        startLineNumber = lineNumber;
	        startLineStart = lineStart;
	
	        lookahead = (typeof extra.tokens !== 'undefined') ? collectToken() : advance();
	        scanning = false;
	        return token;
	    }
	
	    function peek() {
	        scanning = true;
	
	        skipComment();
	
	        lastIndex = index;
	        lastLineNumber = lineNumber;
	        lastLineStart = lineStart;
	
	        startIndex = index;
	        startLineNumber = lineNumber;
	        startLineStart = lineStart;
	
	        lookahead = (typeof extra.tokens !== 'undefined') ? collectToken() : advance();
	        scanning = false;
	    }
	
		/**
		 * @description Adds all of the entries from the array of deps to the global state
		 * @param {Array} array The array of deps to add
		 * ORION
		 */
		function addArrayDeps(array) {
			if(extra.deps) {
				var len = array.length;
				for(var i = 0; i < len; i++) {
					addDep(array[i]);
				}
			}
		}
		
		/**
		 * @description Adds a dependency if it has not already been added
		 * @param {Object} node The AST node
		 */
		function addDep(node) {
			if(extra.deps && node.type === Syntax.Literal) {
				for(var i = 0; i < extra.deps.length; i++) {
					if(extra.deps[i].value === node.value) {
						return;
					}
				}
				extra.deps.push(node);
			}
		}
		
		/**
		 * @description Collects the dependencies from call expressions and new expressions
		 * @param {Node} callee The named callee node 
		 * @param {Array.<Node>} args The list of arguments for the expression
		 * ORION
		 */
		function collectDeps(callee, args) {
			if(extra.deps) {
	        	var len = args.length;
	    		if(callee.name === 'importScripts') {
	    			addArrayDeps(args); //importScripts('foo', 'bar'...)
	    		} else if(callee.name === 'Worker') {
	    			addDep(args[0]);
	    		} else if(callee.name === 'require') {
	    			var _a = args[0];
	    			if(_a.type === Syntax.ArrayExpression) {
	    				extra.envs.node = true;
	    				addArrayDeps(_a.elements); //require([foo])
	    			} else if(_a.type === Syntax.Literal) {
	    				extra.envs.node = true;
	    				addDep(_a); // require('foo')
	    			}
	    			if(len > 1) {
	    				_a = args[1];
	    				if(_a.type === Syntax.ArrayExpression) {
	    					extra.envs.node = true;
	    					addArrayDeps(_a.elements);
	    				}
	    			}
	    		} else if(callee.name === 'requirejs') {
	    			_a = args[0];
	    			if(_a.type === Syntax.ArrayExpression) {
	    				extra.envs.amd = true;
	    				addArrayDeps(_a.elements); //requirejs([foo])
	    			}
	    		} else if(callee.name === 'define' && len > 1) {//second arg must be array
	    			_a = args[0];
	    			if(_a.type === Syntax.Literal) {
	    				_a = args[1];
	    			}
	    			if(_a.type === Syntax.ArrayExpression) {
	    				extra.envs.amd = true;
	    				addArrayDeps(_a.elements);
	    			}
	    		}
	    	}
		}
		
	    function Position() {
	        this.line = startLineNumber;
	        this.column = startIndex - startLineStart;
	    }
	
	    function SourceLocation() {
	        this.start = new Position();
	        this.end = null;
	    }
	
	    function WrappingSourceLocation(startToken) {
	            this.start = {
	                line: startToken.lineNumber,
	                column: startToken.start - startToken.lineStart
	            };
	        this.end = null;
	    }
	
	    function Node() {
	        if (extra.loc) {
	            this.loc = new SourceLocation();
	        }
	        if (extra.range) {
	            this.range = [startIndex, 0];
	        }
	        if(extra.directSourceFile) {
	        	this.sourceFile = extra.directSourceFile; //ORION for Tern
	        }
	    }
	
	    function WrappingNode(startToken) {
	        if (extra.loc) {
	            this.loc = new WrappingSourceLocation(startToken);
	        }
	        if (extra.range) {
	            this.range = [startToken.start, 0];
	        }
	        if(extra.directSourceFile) {
	        	this.sourceFile = extra.directSourceFile; //ORION for Tern
	        }
	    }
	
	    WrappingNode.prototype = Node.prototype = {
	
	        processComment: function () {
	            var lastChild,
	                leadingComments,
	                trailingComments,
	                bottomRight = extra.bottomRightStack,
	                i,
	                comment,
	                last = bottomRight[bottomRight.length - 1];
	
	            if (this.type === Syntax.Program) {
	                if (this.body.length > 0) {
	                    return;
	                }
	            }
	
	            if (extra.trailingComments.length > 0) {
	                trailingComments = [];
	                for (i = extra.trailingComments.length - 1; i >= 0; --i) {
	                    comment = extra.trailingComments[i];
	                    if (comment.range[0] >= this.range[1]) {
	                        trailingComments.unshift(comment);
	                        extra.trailingComments.splice(i, 1);
	                }
	                }
	                extra.trailingComments = [];
	            } else {
	                if (last && last.trailingComments && last.trailingComments[0].range[0] >= this.range[1]) {
	                    trailingComments = last.trailingComments;
	                    delete last.trailingComments;
	                }
	            }
	
	            // Eating the stack.
	            if (last) {
	                while (last && last.range[0] >= this.range[0]) {
	                    lastChild = last;
	                    last = bottomRight.pop();
	                }
	            }
	
	            if (lastChild) {
	                if (lastChild.leadingComments && lastChild.leadingComments[lastChild.leadingComments.length - 1].range[1] <= this.range[0]) {
	                    this.leadingComments = lastChild.leadingComments;
	                    lastChild.leadingComments = undefined;
	                }
	            } else if (extra.leadingComments.length > 0) {
	                leadingComments = [];
	                for (i = extra.leadingComments.length - 1; i >= 0; --i) {
	                    comment = extra.leadingComments[i];
	                    if (comment.range[1] <= this.range[0]) {
	                        leadingComments.unshift(comment);
	                        extra.leadingComments.splice(i, 1);
	            }
	                }
	            }
	
	            if (leadingComments && leadingComments.length > 0) {
	                this.leadingComments = leadingComments;
	            }
	            if (trailingComments && trailingComments.length > 0) {
	                this.trailingComments = trailingComments;
	            }
	
	            bottomRight.push(this);
	        },
	
	        finish: function () {
	            if (extra.loc) {
	                this.loc.end = {
	                    line: lastLineNumber,
	                    column: lastIndex - lastLineStart
	                };
	                if (extra.source) {
	                    this.loc.source = extra.source;
	                }
	            }
	            if (extra.range) {
	                this.range[1] = lastIndex;
	                this.start = this.range[0]; //ORION for Tern
	            	this.end = lastIndex; //ORION for Tern
	            }
	            if (extra.attachComment) {
	                this.processComment();
	            }
	        },
	
	        finishArrayExpression: function (elements) {
	            this.type = Syntax.ArrayExpression;
	            this.elements = elements;
	            this.finish();
	            return this;
	        },
	
	        finishArrowFunctionExpression: function (params, defaults, body, expression) {
	            this.type = Syntax.ArrowFunctionExpression;
	            this.id = null;
	            this.params = params;
	            this.defaults = defaults;
	            this.body = body;
	            this.rest = null;
	            this.generator = false;
	            this.expression = expression;
	            this.finish();
	            return this;
	        },
	
	        finishAssignmentExpression: function (operator, left, right) {
	            this.type = Syntax.AssignmentExpression;
	            this.operator = operator;
	            this.left = left;
	            this.right = right;
	            this.finish();
	            return this;
	        },
	
	        finishBinaryExpression: function (operator, left, right) {
	            this.type = (operator === '||' || operator === '&&') ? Syntax.LogicalExpression : Syntax.BinaryExpression;
	            this.operator = operator;
	            this.left = left;
	            this.right = right;
	            this.finish();
	            return this;
	        },
	
	        finishBlockStatement: function (body) {
	            this.type = Syntax.BlockStatement;
	            this.body = body;
	            this.finish();
	            return this;
	        },
	
	        finishBreakStatement: function (label) {
	            this.type = Syntax.BreakStatement;
	            this.label = label;
	            this.finish();
	            return this;
	        },
	
	        finishCallExpression: function (callee, args) {
	            this.type = Syntax.CallExpression;
	            this.callee = callee;
	            this.arguments = args;
	            collectDeps(callee, args);
	            this.finish();
	            return this;
	        },
	
	        finishCatchClause: function (param, body) {
	            this.type = Syntax.CatchClause;
	            this.param = param;
	            this.body = body;
	            this.finish();
	            return this;
	        },
	
	        finishConditionalExpression: function (test, consequent, alternate) {
	            this.type = Syntax.ConditionalExpression;
	            this.test = test;
	            this.consequent = consequent;
	            this.alternate = alternate;
	            this.finish();
	            return this;
	        },
	
	        finishContinueStatement: function (label) {
	            this.type = Syntax.ContinueStatement;
	            this.label = label;
	            this.finish();
	            return this;
	        },
	
	        finishDebuggerStatement: function () {
	            this.type = Syntax.DebuggerStatement;
	            this.finish();
	            return this;
	        },
	
	        finishDoWhileStatement: function (body, test) {
	            this.type = Syntax.DoWhileStatement;
	            this.body = body;
	            this.test = test;
	            this.finish();
	            return this;
	        },
	
	        finishEmptyStatement: function () {
	            this.type = Syntax.EmptyStatement;
	            this.finish();
	            return this;
	        },
	
	        finishExpressionStatement: function (expression) {
	            this.type = Syntax.ExpressionStatement;
	            this.expression = expression;
	            this.finish();
	            return this;
	        },
	
	        finishForStatement: function (init, test, update, body) {
	            this.type = Syntax.ForStatement;
	            this.init = init;
	            this.test = test;
	            this.update = update;
	            this.body = body;
	            this.finish();
	            return this;
	        },
	
	        finishForInStatement: function (left, right, body) {
	            this.type = Syntax.ForInStatement;
	            this.left = left;
	            this.right = right;
	            this.body = body ? body : recoveredNode(this, 'Statement'); //ORION
	            this.each = false;
	            this.finish();
	            return this;
	        },
	
	        finishFunctionDeclaration: function (id, params, defaults, body) {
	            this.type = Syntax.FunctionDeclaration;
	            this.id = id;
	            this.params = params;
	            this.defaults = defaults;
	            this.body = body;
	            this.rest = null;
	            this.generator = false;
	            this.expression = false;
	            this.finish();
	            return this;
	        },
	
	        finishFunctionExpression: function (id, params, defaults, body) {
	            this.type = Syntax.FunctionExpression;
	            this.id = id;
	            this.params = params;
	            this.defaults = defaults;
	            this.body = body;
	            this.rest = null;
	            this.generator = false;
	            this.expression = false;
	            this.finish();
	            return this;
	        },
	
	        finishIdentifier: function (name) {
	            this.type = Syntax.Identifier;
	            this.name = name;
	            this.finish();
	            return this;
	        },
	
	        finishIfStatement: function (test, consequent, alternate) {
	            this.type = Syntax.IfStatement;
	            this.test = test;
	            this.consequent = consequent ? consequent : recoveredNode(this, 'Statement'); //ORION
	            this.alternate = alternate;
	            this.finish();
	            return this;
	        },
	
	        finishLabeledStatement: function (label, body) {
	            this.type = Syntax.LabeledStatement;
	            this.label = label;
	            this.body = body;
	            this.finish();
	            return this;
	        },
	
	        finishLiteral: function (token) {
	            this.type = Syntax.Literal;
	            this.value = token.value;
	            this.raw = source.slice(token.start, token.end);
	            if (token.regex) {
	                this.regex = token.regex;
	            }
	            this.finish();
	            return this;
	        },
	
	        finishMemberExpression: function (accessor, object, property) {
	            this.type = Syntax.MemberExpression;
	            this.computed = accessor === '[';
	            this.object = object;
	            this.property = property;
	            this.finish();
	            return this;
	        },
	
	        finishNewExpression: function (callee, args) {
	            this.type = Syntax.NewExpression;
	            this.callee = callee;
	            this.arguments = args;
	            collectDeps(callee, args);
	            this.finish();
	            return this;
	        },
	
	        finishObjectExpression: function (properties) {
	            this.type = Syntax.ObjectExpression;
	            this.properties = properties;
	            this.finish();
	            return this;
	        },
	
	        finishPostfixExpression: function (operator, argument) {
	            this.type = Syntax.UpdateExpression;
	            this.operator = operator;
	            this.argument = argument;
	            this.prefix = false;
	            this.finish();
	            return this;
	        },
	
	        finishProgram: function (body) {
	            this.type = Syntax.Program;
	            this.body = body;
	            this.finish();
	            return this;
	        },
	
	        //ORION be able to recover
	        finishProperty: function (kind, key, value, method, shorthand) {
	            this.type = Syntax.Property;
	            this.key = key;
	            this.value = value;
	            this.kind = kind;
	            this.method = method;
	            this.shorthand = shorthand;
	            this.finish();
	            return this;
	        },
	
	        finishReturnStatement: function (argument) {
	            this.type = Syntax.ReturnStatement;
	            this.argument = argument;
	            this.finish();
	            return this;
	        },
	
	        finishSequenceExpression: function (expressions) {
	            this.type = Syntax.SequenceExpression;
	            this.expressions = expressions;
	            this.finish();
	            return this;
	        },
	
	        finishSwitchCase: function (test, consequent) {
	            this.type = Syntax.SwitchCase;
	            this.test = test;
	            this.consequent = consequent;
	            this.finish();
	            return this;
	        },
	
	        finishSwitchStatement: function (discriminant, cases) {
	            this.type = Syntax.SwitchStatement;
	            this.discriminant = discriminant;
	            this.cases = cases;
	            this.finish();
	            return this;
	        },
	
	        finishThisExpression: function () {
	            this.type = Syntax.ThisExpression;
	            this.finish();
	            return this;
	        },
	
	        finishThrowStatement: function (argument) {
	            this.type = Syntax.ThrowStatement;
	            this.argument = argument;
	            this.finish();
	            return this;
	        },
	
	        finishTryStatement: function (block, guardedHandlers, handlers, finalizer) {
	            this.type = Syntax.TryStatement;
	            this.block = block;
	            this.guardedHandlers = guardedHandlers;
	            this.handlers = handlers;
	            //ORION see https://bugs.eclipse.org/bugs/show_bug.cgi?id=482317
	            if(Array.isArray(handlers) && handlers.length > 0) {
	            	this.handler = handlers[0];
	            }
	            this.finalizer = finalizer;
	            this.finish();
	            return this;
	        },
	
	        finishUnaryExpression: function (operator, argument) {
	            this.type = (operator === '++' || operator === '--') ? Syntax.UpdateExpression : Syntax.UnaryExpression;
	            this.operator = operator;
	            this.argument = argument;
	            this.prefix = true;
	            this.finish();
	            return this;
	        },
	
	        finishVariableDeclaration: function (declarations, kind) {
	            this.type = Syntax.VariableDeclaration;
	            this.declarations = declarations;
	            this.kind = kind;
	            this.finish();
	            return this;
	        },
	
	        finishVariableDeclarator: function (id, init) {
	            this.type = Syntax.VariableDeclarator;
	            this.id = id;
	            this.init = init;
	            this.finish();
	            return this;
	        },
	
	        finishWhileStatement: function (test, body) {
	            this.type = Syntax.WhileStatement;
	            this.test = test;
	            this.body = body ? body : recoveredNode(this, 'Statement'); //ORION
	            this.finish();
	            return this;
	        },
	
	        finishWithStatement: function (object, body) {
	            this.type = Syntax.WithStatement;
	            this.object = object;
	            this.body = body ? body : recoveredNode(this, 'Statement'); //ORION
	            this.finish();
	            return this;
	        }
	    };
	
	    function createError(line, pos, description, token) {
	        var error = new Error('Line ' + line + ': ' + description);
	        error.index = pos;
	        error.lineNumber = line;
	        error.column = pos - (scanning ? lineStart : lastLineStart) + 1;
	        error.description = description;
	        //ORION 
	        if(token) {
	        	var tok = token;
	        	if(token.type === 2 && extra && Array.isArray(extra.tokens) && extra.tokens.length > 0) {
	        		tok = extra.tokens[extra.tokens.length-1]; //grab the previous token
	        	}
	            error.index = typeof(tok.start) === 'number' ? tok.start : tok.range[0];
	            error.token = tok.value;
	            error.end = typeof(tok.end) === 'number' ? tok.end : tok.range[1];
	        }
	        return error;
	    }
	
	    // Throw an exception
	
	    function throwError(messageFormat) {
	        var args, msg;
	
	        args = Array.prototype.slice.call(arguments, 1);
	        msg = messageFormat.replace(/%(\d)/g,
	            function (whole, idx) {
	                assert(idx < args.length, 'Message reference must be in range');
	                return args[idx];
	                }
	            );
	
	        throw createError(lastLineNumber, lastIndex, msg);
	        }
	
	    function tolerateError(messageFormat) {
	        var args, msg, error;
	
	        args = Array.prototype.slice.call(arguments, 1);
	        /* istanbul ignore next */
	        msg = messageFormat.replace(/%(\d)/g,
	            function (whole, idx) {
	                assert(idx < args.length, 'Message reference must be in range');
	                return args[idx];
	    }
	        );
	
	        error = createError(lineNumber, lastIndex, msg);
	            if (extra.errors) {
	                extra.errors.push(error);
	            } else {
	            throw error;
	        }
	    }
	
	
	    // Throw an exception because of the token.
	
	    function unexpectedTokenError(token, message, value) {
	        var msg = message || Messages.UnexpectedToken;
	
	        if (token && !message) {
	            msg = (token.type === Token.EOF) ? Messages.UnexpectedEOS :
	                (token.type === Token.Identifier) ? Messages.UnexpectedIdentifier :
	                (token.type === Token.NumericLiteral) ? Messages.UnexpectedNumber :
	                (token.type === Token.StringLiteral) ? Messages.UnexpectedString :
	                Messages.UnexpectedToken;
	
	            if (token.type === Token.Keyword) {
	                if (isFutureReservedWord(token.value)) {
	                        msg = Messages.UnexpectedReserved;
	                } else if (strict && isStrictModeReservedWord(token.value)) {
	                        msg = Messages.StrictReservedWord;
	                }
	            }
	        }
	        //ORION
	        var val = value != null ? value : ( token ? token.value : 'ILLEGAL');
	        msg = msg.replace('%0', val);
	
	        return (token && typeof token.lineNumber === 'number') ?
	            createError(token.lineNumber, token.start, msg, token) :
	            createError(scanning ? lineNumber : lastLineNumber, scanning ? index : lastIndex, msg, token);
	    }
	
	    function throwUnexpectedToken(token, message) {
	        throw unexpectedTokenError(token, message);
	    }
	
	    function tolerateUnexpectedToken(token, message, value) {
	        var error = unexpectedTokenError(token, message, value);
	        if (extra.errors) {
	            extra.errors.push(error);
	        } else {
	            throw error;
	        }
	    }
	
	    // Expect the next token to match the specified punctuator.
	    // If not, an exception will be thrown.
	
	    function expect(value) {
	        var token = lex();
	        if (token.type !== Token.Punctuator || token.value !== value) {
	            throwUnexpectedToken(token);
	        }
	    }
	
	    /**
	     * @name expectCommaSeparator
	     * @description Quietly expect a comma when in tolerant mode, otherwise delegates
	     * to <code>expect(value)</code>
	     * @since 2.0
	     */
	    function expectCommaSeparator(closing) {
	        var token;
	
	        if(extra.errors) {
	            token = lookahead;
	            if (token.type === Token.Punctuator && token.value === ',') {
	        		lex();
	            } else if (token.type === Token.Punctuator && token.value === ';') {
	                lex();
	                if(lookahead.value === closing) {
	                	tolerateUnexpectedToken(token, Messages.UnexpectedToken, ';');
	                } else {
		                var value = (closing && closing !== token.value) ? closing : ';';
		                //ORION we want the previous token
		                if(extra.tokens && extra.tokens.length > 0) {
		        			token = extra.tokens[extra.tokens.length-2];
		        		}
		                tolerateUnexpectedToken(token, Messages.MissingToken, value);
	                }
	            } else if(token.type !== Token.EOF){
	                //ORION we want the previous token and don't report missing on EOF
	                if(extra.tokens && extra.tokens.length > 0) {
	        			token = extra.tokens[extra.tokens.length-2];
	        		}
	                tolerateUnexpectedToken(token, Messages.MissingToken, ',');
	        	}
	        } else {
	            expect(',');
			}
	    }
	
	    // Expect the next token to match the specified keyword.
	    // If not, an exception will be thrown.
	
	    function expectKeyword(keyword) {
	        var token = lex();
	        if (token.type !== Token.Keyword || token.value !== keyword) {
	            throwUnexpectedToken(token);
	        }
	    }
	
	    // Return true if the next token matches the specified punctuator.
	
	    function match(value) {
	        return lookahead.type === Token.Punctuator && lookahead.value === value;
	    }
	
	    // Return true if the next token matches the specified keyword
	
	    function matchKeyword(keyword) {
	        return lookahead.type === Token.Keyword && lookahead.value === keyword;
	    }
	
	    // Return true if the next token is an assignment operator
	
	    function matchAssign() {
	        var op;
	
	        if (lookahead.type !== Token.Punctuator) {
	            return false;
	        }
	        op = lookahead.value;
	        return op === '=' ||
	            op === '*=' ||
	            op === '/=' ||
	            op === '%=' ||
	            op === '+=' ||
	            op === '-=' ||
	            op === '<<=' ||
	            op === '>>=' ||
	            op === '>>>=' ||
	            op === '&=' ||
	            op === '^=' ||
	            op === '|=';
	    }
	    
	    //ORION
	    function consumeSemicolon() {
	        try {
	            // Catch the very common case first: immediately a semicolon (U+003B).
	            if (source.charCodeAt(startIndex) === 0x3B || match(';')) {
	                lex();
	                return;
	            }
	    
	            if (hasLineTerminator) {
	                return;
	            }
	    
	            // FIXME(ikarienator): this is seemingly an issue in the previous location info convention.
	            lastIndex = startIndex;
	            lastLineNumber = startLineNumber;
	            lastLineStart = startLineStart;
	    
	            if (lookahead.type !== Token.EOF && !match('}')) {
	                var badToken = lookahead;
	                if (extra.errors) {
	                    rewind(startLineStart); // ORION mutates lookahead
	                }
	                //tolerateUnexpectedToken(badToken);
	                throwUnexpectedToken(badToken);
	            }
	        }
	        catch(e) {
	            if(extra.errors) {
	                recordError(e);
	                return;
	            } else {
	                throw e;
	            }
	        }
	    }
	
	    // Return true if provided expression is LeftHandSideExpression
	
	    function isLeftHandSide(expr) {
	        return expr.type === Syntax.Identifier || expr.type === Syntax.MemberExpression;
	    }
	
	    // 11.1.4 Array Initialiser
	
	    function parseArrayInitialiser() {
	        var elements = [], node = new Node();
	
	        expect('[');
	
	        while (!match(']')) {
	            if (match(',')) {
	                lex();
	                elements.push(null);
	            } else {
	                elements.push(parseAssignmentExpression());
	
	                if (!match(']')) {
	                    expect(',');
	                }
	            }
	        }
	
	        lex();
	
	        return node.finishArrayExpression(elements);
	    }
	
	    // 11.1.5 Object Initialiser
	
	    function parsePropertyFunction(param, first) {
	        var previousStrict, body, node = new Node();
	
	        previousStrict = strict;
	        body = parseFunctionSourceElements();
	        if (first && strict && isRestrictedWord(param[0].name)) {
	            tolerateUnexpectedToken(first, Messages.StrictParamName);
	        }
	        strict = previousStrict;
	        return node.finishFunctionExpression(null, param, [], body);
	    }
	
	    function parsePropertyMethodFunction() {
	        var previousStrict, param, method;
	
	        previousStrict = strict;
	        strict = true;
	        param = parseParams();
	        method = parsePropertyFunction(param.params);
	        strict = previousStrict;
	
	        return method;
	    }
	
	    function parseObjectPropertyKey() {
	        var token, node = new Node();
	
	        token = lex();
	
	        // Note: This function is called only from parseObjectProperty(), where
	        // EOF and Punctuator tokens are already filtered out.
	
	        if (token.type === Token.StringLiteral || token.type === Token.NumericLiteral) {
	            if (strict && token.octal) {
	                tolerateUnexpectedToken(token, Messages.StrictOctalLiteral);
	            }
	            return node.finishLiteral(token);
	        }
	
	        return node.finishIdentifier(token.value);
	    }
	    
	    //ORION
	    function parseObjectProperty() {
	        var token, key, id, value, param, node = new Node();
	
	        token = lookahead;
	
	        if (token.type === Token.Identifier) {
	
	            id = parseObjectPropertyKey();
	
	            // Property Assignment: Getter and Setter.
	
	            if (token.value === 'get' && !(match(':') || match('('))) {
	                key = parseObjectPropertyKey();
	                expect('(');
	                expect(')');
	                value = parsePropertyFunction([]);
	                return node.finishProperty('get', key, value, false, false);
	            }
	            if (token.value === 'set' && !(match(':') || match('('))) {
	                key = parseObjectPropertyKey();
	                expect('(');
	                token = lookahead;
	                if (token.type !== Token.Identifier) {
	                    expect(')');
	                    tolerateUnexpectedToken(token);
	                    value = parsePropertyFunction([]);
	                } else {
	                    param = [ parseVariableIdentifier() ];
	                    expect(')');
	                    value = parsePropertyFunction(param, token);
	                }
	                return node.finishProperty('set', key, value, false, false);
	            }
	            return recoverProperty(token, id, node);
	        }
	        if (token.type === Token.EOF || token.type === Token.Punctuator) {
	            throwUnexpectedToken(token);
	        } else {
	            return recoverProperty(token, parseObjectPropertyKey(), node);
	        }
	    }
	
	    function parseObjectInitialiser() {
	        var properties = [], property, name, key, kind, map = {}, toString = String, node = new Node();
	
	        expect('{');
	
	        while (!match('}')) {
	            property = parseObjectProperty();
	            if(property == null || typeof property === 'undefined') {
	                continue;
	            }
	            if (property.key.type === Syntax.Identifier) {
	                name = property.key.name;
	            } else {
	                name = toString(property.key.value);
	            }
	            kind = (property.kind === 'init') ? PropertyKind.Data : (property.kind === 'get') ? PropertyKind.Get : PropertyKind.Set;
	
	            key = '$' + name;
	            if (Object.prototype.hasOwnProperty.call(map, key)) {
	                if (map[key] === PropertyKind.Data) {
	                    if (strict && kind === PropertyKind.Data) {
	                        tolerateError(Messages.StrictDuplicateProperty);
	                    } else if (kind !== PropertyKind.Data) {
	                        tolerateError(Messages.AccessorDataProperty);
	                    }
	                } else {
	                    if (kind === PropertyKind.Data) {
	                        tolerateError(Messages.AccessorDataProperty);
	                    } else if (map[key] & kind) {
	                        tolerateError(Messages.AccessorGetSet);
	                    }
	                }
	                map[key] |= kind;
	            } else {
	                map[key] = kind;
	            }
	
	            properties.push(property);
	
	            if (!match('}')) {
	                expectCommaSeparator('}');
	            }
	        }
	
	        expect('}');
	
	        return node.finishObjectExpression(properties);
	    }
	
	    // 11.1.6 The Grouping Operator
	
	    function parseGroupExpression() {
	        var expr;
	
	        expect('(');
	
	        if (match(')')) {
	            lex();
	            return PlaceHolders.ArrowParameterPlaceHolder;
	        }
	
	        ++state.parenthesisCount;
	
	        expr = parseExpression();
	
	        expect(')');
	
	        return expr;
	    }
	
	
	    // 11.1 Primary Expressions
	
	    function parsePrimaryExpression() {
	        var type, token, expr, node;
	
	        if (match('(')) {
	            return parseGroupExpression();
	        }
	
	        if (match('[')) {
	            return parseArrayInitialiser();
	        }
	
	        if (match('{')) {
	            return parseObjectInitialiser();
	        }
	
	        type = lookahead.type;
	        node = new Node();
	
	        if (type === Token.Identifier) {
	            expr =  node.finishIdentifier(lex().value);
	        } else if (type === Token.StringLiteral || type === Token.NumericLiteral) {
	            if (strict && lookahead.octal) {
	                tolerateUnexpectedToken(lookahead, Messages.StrictOctalLiteral);
	            }
	            expr = node.finishLiteral(lex());
	        } else if (type === Token.Keyword) {
	            if (matchKeyword('function')) {
	                return parseFunctionExpression();
	            }
	            if (matchKeyword('this')) {
	                lex();
	                expr = node.finishThisExpression();
	            } else {
	                throwUnexpectedToken(lex());
	            }
	        } else if (type === Token.BooleanLiteral) {
	            token = lex();
	            token.value = (token.value === 'true');
	            expr = node.finishLiteral(token);
	        } else if (type === Token.NullLiteral) {
	            token = lex();
	            token.value = null;
	            expr = node.finishLiteral(token);
	        } else if (match('/') || match('/=')) {
	            index = startIndex;
	
	            if (typeof extra.tokens !== 'undefined') {
	                token = collectRegex();
	            } else {
	                token = scanRegExp();
	            }
	            lex();
	            expr = node.finishLiteral(token);
	        } else {
	            throwUnexpectedToken(lex());
	        }
	
	        return expr;
	    }
	
	    // 11.2 Left-Hand-Side Expressions
	
	    function parseArguments() {
	        var args = [];
	
	        expect('(');
	
	        if (!match(')')) {
	            while (startIndex < length) {
	                args.push(parseAssignmentExpression());
	                if (match(')')) {
	                    break;
	                }
	                expectCommaSeparator(')');
	            }
	        }
	
	        expectSkipTo(')');
	
	        return args;
	    }
	
	    //ORION
	    function parseNonComputedProperty() {
	        var token, node = new Node();
	        try {
	            token = lex();
	            if (!isIdentifierName(token)) {
	                if (extra.errors) {
	                    recoverNonComputedProperty(token);
	                }
	                throwUnexpectedToken(token);
	            }
	        }
	        catch(e) {
	            if (extra.errors) {
	                recordError(e);
	                return recoveredNode(node, Syntax.Identifier);
	            } else {
	                throw e;
	            }
	        }
	        return node.finishIdentifier(token.value);
	    }
	
	    function parseNonComputedMember() {
	        expect('.');
	
	        return parseNonComputedProperty();
	    }
	
	    function parseComputedMember() {
	        var expr;
	
	        expect('[');
	
	        expr = parseExpression();
	
	        expect(']');
	
	        return expr;
	    }
	
	    function parseNewExpression() {
	        var callee, args, node = new Node();
	
	        expectKeyword('new');
	        callee = parseLeftHandSideExpression();
	        args = match('(') ? parseArguments() : [];
	
	        return node.finishNewExpression(callee, args);
	    }
	
	    function parseLeftHandSideExpressionAllowCall() {
	        var expr, args, property, startToken, previousAllowIn = state.allowIn;
	
	        startToken = lookahead;
	        state.allowIn = true;
	        expr = matchKeyword('new') ? parseNewExpression() : parsePrimaryExpression();
	
	        for (;;) {
	            if (match('.')) {
	                property = parseNonComputedMember();
	                expr = new WrappingNode(startToken).finishMemberExpression('.', expr, property);
	            } else if (match('(')) {
	                args = parseArguments();
	                expr = new WrappingNode(startToken).finishCallExpression(expr, args);
	            } else if (match('[')) {
	                property = parseComputedMember();
	                expr = new WrappingNode(startToken).finishMemberExpression('[', expr, property);
	            } else {
	                break;
	            }
	        }
	        state.allowIn = previousAllowIn;
	
	        return expr;
	    }
	
	    function parseLeftHandSideExpression() {
	        var expr, property, startToken;
	        assert(state.allowIn, 'callee of new expression always allow in keyword.');
	
	        startToken = lookahead;
	
	        expr = matchKeyword('new') ? parseNewExpression() : parsePrimaryExpression();
	
	        for (;;) {
	            if (match('[')) {
	                property = parseComputedMember();
	                expr = new WrappingNode(startToken).finishMemberExpression('[', expr, property);
	            } else if (match('.')) {
	                property = parseNonComputedMember();
	                expr = new WrappingNode(startToken).finishMemberExpression('.', expr, property);
	            } else {
	                break;
	            }
	        }
	
	        return expr;
	    }
	
	    // 11.3 Postfix Expressions
	
	    function parsePostfixExpression() {
	        var expr, token, startToken = lookahead;
	        expr = parseLeftHandSideExpressionAllowCall();
	
	        if (!hasLineTerminator && lookahead.type === Token.Punctuator) {
	            if (match('++') || match('--')) {
	                // 11.3.1, 11.3.2
	                if (strict && expr.type === Syntax.Identifier && isRestrictedWord(expr.name)) {
	                    tolerateError(Messages.StrictLHSPostfix);
	                }
	
	                if (!isLeftHandSide(expr)) {
	                    tolerateError(Messages.InvalidLHSInAssignment);
	                }
	
	                token = lex();
	                expr = new WrappingNode(startToken).finishPostfixExpression(token.value, expr);
	            }
	        }
	        return expr;
	    }
	
	    // 11.4 Unary Operators
	
	    function parseUnaryExpression() {
	        var token, expr, startToken;
	
	        if (lookahead.type !== Token.Punctuator && lookahead.type !== Token.Keyword) {
	            expr = parsePostfixExpression();
	        } else if (match('++') || match('--')) {
	            startToken = lookahead;
	            token = lex();
	            expr = parseUnaryExpression();
	            // 11.4.4, 11.4.5
	            if (strict && expr.type === Syntax.Identifier && isRestrictedWord(expr.name)) {
	                tolerateError(Messages.StrictLHSPrefix);
	            }
	
	            if (!isLeftHandSide(expr)) {
	                tolerateError(Messages.InvalidLHSInAssignment);
	            }
	
	            expr = new WrappingNode(startToken).finishUnaryExpression(token.value, expr);
	        } else if (match('+') || match('-') || match('~') || match('!')) {
	            startToken = lookahead;
	            token = lex();
	            expr = parseUnaryExpression();
	            expr = new WrappingNode(startToken).finishUnaryExpression(token.value, expr);
	        } else if (matchKeyword('delete') || matchKeyword('void') || matchKeyword('typeof')) {
	            startToken = lookahead;
	            token = lex();
	            expr = parseUnaryExpression();
	            expr = new WrappingNode(startToken).finishUnaryExpression(token.value, expr);
	            if (strict && expr.operator === 'delete' && expr.argument.type === Syntax.Identifier) {
	                tolerateError(Messages.StrictDelete);
	            }
	        } else {
	            expr = parsePostfixExpression();
	        }
	
	        return expr;
	    }
	
	    function binaryPrecedence(token, allowIn) {
	        var prec = 0;
	
	        if (token.type !== Token.Punctuator && token.type !== Token.Keyword) {
	            return 0;
	        }
	
	        switch (token.value) {
	        case '||':
	            prec = 1;
	            break;
	
	        case '&&':
	            prec = 2;
	            break;
	
	        case '|':
	            prec = 3;
	            break;
	
	        case '^':
	            prec = 4;
	            break;
	
	        case '&':
	            prec = 5;
	            break;
	
	        case '==':
	        case '!=':
	        case '===':
	        case '!==':
	            prec = 6;
	            break;
	
	        case '<':
	        case '>':
	        case '<=':
	        case '>=':
	        case 'instanceof':
	            prec = 7;
	            break;
	
	        case 'in':
	            prec = allowIn ? 7 : 0;
	            break;
	
	        case '<<':
	        case '>>':
	        case '>>>':
	            prec = 8;
	            break;
	
	        case '+':
	        case '-':
	            prec = 9;
	            break;
	
	        case '*':
	        case '/':
	        case '%':
	            prec = 11;
	            break;
	
	        default:
	            break;
	        }
	
	        return prec;
	    }
	
	    // 11.5 Multiplicative Operators
	    // 11.6 Additive Operators
	    // 11.7 Bitwise Shift Operators
	    // 11.8 Relational Operators
	    // 11.9 Equality Operators
	    // 11.10 Binary Bitwise Operators
	    // 11.11 Binary Logical Operators
	
	    function parseBinaryExpression() {
	        var marker, markers, expr, token, prec, stack, right, operator, left, i;
	
	        marker = lookahead;
	        left = parseUnaryExpression();
	        if (left === PlaceHolders.ArrowParameterPlaceHolder) {
	            return left;
	        }
	
	        token = lookahead;
	        prec = binaryPrecedence(token, state.allowIn);
	        if (prec === 0) {
	            return left;
	        }
	        token.prec = prec;
	        lex();
	
	        markers = [marker, lookahead];
	        right = parseUnaryExpression();
	
	        stack = [left, token, right];
	
	        while ((prec = binaryPrecedence(lookahead, state.allowIn)) > 0) {
	
	            // Reduce: make a binary expression from the three topmost entries.
	            while ((stack.length > 2) && (prec <= stack[stack.length - 2].prec)) {
	                right = stack.pop();
	                operator = stack.pop().value;
	                left = stack.pop();
	                markers.pop();
	                expr = new WrappingNode(markers[markers.length - 1]).finishBinaryExpression(operator, left, right);
	                stack.push(expr);
	            }
	
	            // Shift.
	            token = lex();
	            token.prec = prec;
	            stack.push(token);
	            markers.push(lookahead);
	            expr = parseUnaryExpression();
	            stack.push(expr);
	        }
	
	        // Final reduce to clean-up the stack.
	        i = stack.length - 1;
	        expr = stack[i];
	        markers.pop();
	        while (i > 1) {
	            expr = new WrappingNode(markers.pop()).finishBinaryExpression(stack[i - 1].value, stack[i - 2], expr);
	            i -= 2;
	        }
	
	        return expr;
	    }
	
	
	    // 11.12 Conditional Operator
	
	    function parseConditionalExpression() {
	        var expr, previousAllowIn, consequent, alternate, startToken;
	
	        startToken = lookahead;
	
	        expr = parseBinaryExpression();
	        if (expr === PlaceHolders.ArrowParameterPlaceHolder) {
	            return expr;
	        }
	        if (match('?')) {
	            lex();
	            previousAllowIn = state.allowIn;
	            state.allowIn = true;
	            consequent = parseAssignmentExpression();
	            state.allowIn = previousAllowIn;
	            expect(':');
	            alternate = parseAssignmentExpression();
	
	            expr = new WrappingNode(startToken).finishConditionalExpression(expr, consequent, alternate);
	        }
	
	        return expr;
	    }
	
	    // [ES6] 14.2 Arrow Function
	
	    function parseConciseBody() {
	        if (match('{')) {
	            return parseFunctionSourceElements();
	        }
	        return parseAssignmentExpression();
	    }
	
	    function reinterpretAsCoverFormalsList(expressions) {
	        var i, len, param, params, defaults, defaultCount, options, rest, token;
	
	        params = [];
	        defaults = [];
	        defaultCount = 0;
	        rest = null;
	        options = {
	            paramSet: {}
	        };
	
	        for (i = 0, len = expressions.length; i < len; i += 1) {
	            param = expressions[i];
	            if (param.type === Syntax.Identifier) {
	                params.push(param);
	                defaults.push(null);
	                validateParam(options, param, param.name);
	            } else if (param.type === Syntax.AssignmentExpression) {
	                params.push(param.left);
	                defaults.push(param.right);
	                ++defaultCount;
	                validateParam(options, param.left, param.left.name);
	            } else {
	                return null;
	            }
	        }
	
	        if (options.message === Messages.StrictParamDupe) {
	            token = strict ? options.stricted : options.firstRestricted;
	            throwUnexpectedToken(token, options.message);
	        }
	
	        if (defaultCount === 0) {
	            defaults = [];
	        }
	
	        return {
	            params: params,
	            defaults: defaults,
	            rest: rest,
	            stricted: options.stricted,
	            firstRestricted: options.firstRestricted,
	            message: options.message
	        };
	    }
	
	    function parseArrowFunctionExpression(options, node) {
	        var previousStrict, body;
	
	        expect('=>');
	        previousStrict = strict;
	
	        body = parseConciseBody();
	
	        if (strict && options.firstRestricted) {
	            throwUnexpectedToken(options.firstRestricted, options.message);
	        }
	        if (strict && options.stricted) {
	            tolerateUnexpectedToken(options.stricted, options.message);
	        }
	
	        strict = previousStrict;
	
	        return node.finishArrowFunctionExpression(options.params, options.defaults, body, body.type !== Syntax.BlockStatement);
	    }
	
	    // 11.13 Assignment Operators
	
	    function parseAssignmentExpression() {
	        var oldParenthesisCount, token, expr, right, list, startToken;
	
	        oldParenthesisCount = state.parenthesisCount;
	
	        startToken = lookahead;
	        token = lookahead;
	
	        expr = parseConditionalExpression();
	
	        if (expr === PlaceHolders.ArrowParameterPlaceHolder || match('=>')) {
	            if (state.parenthesisCount === oldParenthesisCount ||
	                    state.parenthesisCount === (oldParenthesisCount + 1)) {
	                if (expr.type === Syntax.Identifier) {
	                    list = reinterpretAsCoverFormalsList([ expr ]);
	                } else if (expr.type === Syntax.AssignmentExpression) {
	                    list = reinterpretAsCoverFormalsList([ expr ]);
	                } else if (expr.type === Syntax.SequenceExpression) {
	                    list = reinterpretAsCoverFormalsList(expr.expressions);
	                } else if (expr === PlaceHolders.ArrowParameterPlaceHolder) {
	                    list = reinterpretAsCoverFormalsList([]);
	                }
	                if (list) {
	                    return parseArrowFunctionExpression(list, new WrappingNode(startToken));
	                }
	            }
	        }
	
	        if (matchAssign()) {
	            // LeftHandSideExpression
	            if (!isLeftHandSide(expr)) {
	                tolerateError(Messages.InvalidLHSInAssignment);
	            }
	
	            // 11.13.1
	            if (strict && expr.type === Syntax.Identifier && isRestrictedWord(expr.name)) {
	                tolerateUnexpectedToken(token, Messages.StrictLHSAssignment);
	            }
	
	            token = lex();
	            right = parseAssignmentExpression();
	            expr = new WrappingNode(startToken).finishAssignmentExpression(token.value, expr, right);
	        }
	
	        return expr;
	    }
	
	    // 11.14 Comma Operator
	
	    function parseExpression() {
	        var expr, startToken = lookahead, expressions;
	
	        expr = parseAssignmentExpression();
	
	        if (match(',')) {
	            expressions = [expr];
	
	            while (startIndex < length) {
	                if (!match(',')) {
	                    break;
	                }
	                lex();
	                expressions.push(parseAssignmentExpression());
	            }
	
	            expr = new WrappingNode(startToken).finishSequenceExpression(expressions);
	        }
	
	        return expr;
	    }
	
	    // 12.1 Block
	
	    function parseStatementList() {
	        var element, list = [];
	        var strt = index;
	         while (startIndex < length) {
	             if (match('}')) {
	                 break;
	             }
	             //ORION
	             element = parseSourceElement();
	            if (typeof element === 'undefined' || strt === index) {
	                break;
	             }
	            list.push(element);
	            strt = index;
	        }
	
	        return list;
	    }
	
	    function parseBlock() {
	        var block, node = new Node();
	
	        expect('{');
	
	        block = parseStatementList();
	
	        expectSkipTo('}');
	
	        return node.finishBlockStatement(block);
	    }
	
	    // 12.2 Variable Statement
	
	    function parseVariableIdentifier() {
	        var token, node = new Node();
	
	        token = lex();
	
	        if (token.type !== Token.Identifier) {
	            if (strict && token.type === Token.Keyword && isStrictModeReservedWord(token.value)) {
	                tolerateUnexpectedToken(token, Messages.StrictReservedWord);
	            } else {
	                throwUnexpectedToken(token);
	            }
	        }
	
	        return node.finishIdentifier(token.value);
	    }
	
	    function parseVariableDeclaration(kind) {
	        var init = null, id, node = new Node();
	
	        id = parseVariableIdentifier();
	
	        // 12.2.1
	        if (strict && isRestrictedWord(id.name)) {
	            tolerateError(Messages.StrictVarName);
	        }
	
	        if (kind === 'const') {
	            expect('=');
	            init = parseAssignmentExpression();
	        } else if (match('=')) {
	            lex();
	            init = parseAssignmentExpression();
	        }
	
	        return node.finishVariableDeclarator(id, init);
	    }
	
	    function parseVariableDeclarationList(kind) {
	        var list = [];
	
	        do {
	            list.push(parseVariableDeclaration(kind));
	            if (!match(',')) {
	                break;
	            }
	            lex();
	        } while (startIndex < length);
	
	        return list;
	    }
	
	    function parseVariableStatement(node) {
	        var declarations;
	
	        expectKeyword('var');
	
	        declarations = parseVariableDeclarationList();
	
	        consumeSemicolon();
	
	        return node.finishVariableDeclaration(declarations, 'var');
	    }
	
	    // kind may be `const` or `let`
	    // Both are experimental and not in the specification yet.
	    // see http://wiki.ecmascript.org/doku.php?id=harmony:const
	    // and http://wiki.ecmascript.org/doku.php?id=harmony:let
	    function parseConstLetDeclaration(kind) {
	        var declarations, node = new Node();
	
	        expectKeyword(kind);
	
	        declarations = parseVariableDeclarationList(kind);
	
	        consumeSemicolon();
	
	        return node.finishVariableDeclaration(declarations, kind);
	    }
	
	    // 12.3 Empty Statement
	
	    function parseEmptyStatement() {
	        var node = new Node();
	        expect(';');
	        return node.finishEmptyStatement();
	    }
	
	    // 12.4 Expression Statement
	
	    function parseExpressionStatement(node) {
	        var expr = parseExpression();
	        consumeSemicolon();
	        if(!expr) {
	        	expr = recoveredNode(node);  //ORION don't insert null expressions
	        }
	        return node.finishExpressionStatement(expr);
	    }
	
	    // 12.5 If statement
	
	    function parseIfStatement(node) {
	        var test, consequent, alternate;
	
	        expectKeyword('if');
	
	        expect('(');
	
	        test = parseExpression();
	
	        expectSkipTo(')', '{');
	
	        consequent = parseStatement();
			
	        if (matchKeyword('else')) {
	            lex();
	            alternate = parseStatement();
	        } else {
	            alternate = null;
	        }
	
	        return node.finishIfStatement(test, consequent, alternate);
	    }
	
	    // 12.6 Iteration Statements
	
	    function parseDoWhileStatement(node) {
	        var body, test, oldInIteration;
	
	        expectKeyword('do');
	
	        oldInIteration = state.inIteration;
	        state.inIteration = true;
	
	        body = parseStatement();
	
	        state.inIteration = oldInIteration;
	
	        expectKeyword('while');
	
	        expect('(');
	
	        test = parseExpression();
	
	        expectSkipTo(')', '{');
	
	        if (match(';')) {
	            lex();
	        }
	
	        return node.finishDoWhileStatement(body, test);
	    }
	
	    function parseWhileStatement(node) {
	        var test, body, oldInIteration;
	
	        expectKeyword('while');
	
	        expect('(');
	
	        test = parseExpression();
	
	        expectSkipTo(')', '{');
	
	        oldInIteration = state.inIteration;
	        state.inIteration = true;
	
	        body = parseStatement();
	
	        state.inIteration = oldInIteration;
	
	        return node.finishWhileStatement(test, body);
	    }
	
	    function parseForVariableDeclaration() {
	        var token, declarations, node = new Node();
	
	        token = lex();
	        declarations = parseVariableDeclarationList();
	
	        return node.finishVariableDeclaration(declarations, token.value);
	    }
	
	    function parseForStatement(node) {
	        var init, test, update, left, right, body, oldInIteration, previousAllowIn = state.allowIn;
	
	        init = test = update = null;
	
	        expectKeyword('for');
	
	        expect('(');
	
	        if (match(';')) {
	            lex();
	        } else {
	            if (matchKeyword('var') || matchKeyword('let')) {
	                state.allowIn = false;
	                init = parseForVariableDeclaration();
	                state.allowIn = previousAllowIn;
	
	                if (init.declarations.length === 1 && matchKeyword('in')) {
	                    lex();
	                    left = init;
	                    right = parseExpression();
	                    init = null;
	                }
	            } else {
	                state.allowIn = false;
	                init = parseExpression();
	                state.allowIn = previousAllowIn;
	
	                if (matchKeyword('in')) {
	                    // LeftHandSideExpression
	                    if (!isLeftHandSide(init)) {
	                        tolerateError(Messages.InvalidLHSInForIn);
	                    }
	
	                    lex();
	                    left = init;
	                    right = parseExpression();
	                    init = null;
	                }
	            }
	
	            if (typeof left === 'undefined') {
	                expect(';');
	            }
	        }
	
	        if (typeof left === 'undefined') {
	
	            if (!match(';')) {
	                test = parseExpression();
	            }
	            expect(';');
	
	            if (!match(')')) {
	                update = parseExpression();
	            }
	        }
	
	        expectSkipTo(')', '{');
	
	        oldInIteration = state.inIteration;
	        state.inIteration = true;
	
	        body = parseStatement();
	
	        state.inIteration = oldInIteration;
	
	        return (typeof left === 'undefined') ?
	                node.finishForStatement(init, test, update, body) :
	                node.finishForInStatement(left, right, body);
	    }
	
	    // 12.7 The continue statement
	
	    function parseContinueStatement(node) {
	        var label = null, key;
	
	        expectKeyword('continue');
	
	        // Optimize the most common form: 'continue;'.
	        if (source.charCodeAt(startIndex) === 0x3B) {
	            lex();
	
	            if (!state.inIteration) {
	                throwError(Messages.IllegalContinue);
	            }
	
	            return node.finishContinueStatement(null);
	        }
	
	        if (hasLineTerminator) {
	            if (!state.inIteration) {
	                throwError(Messages.IllegalContinue);
	            }
	
	            return node.finishContinueStatement(null);
	        }
	
	        if (lookahead.type === Token.Identifier) {
	        	var token = lookahead;
	            label = parseVariableIdentifier();
	
	            key = '$' + label.name;
	            if (!Object.prototype.hasOwnProperty.call(state.labelSet, key)) {
	            	tolerateUnexpectedToken(token, Messages.UnknownLabel, label.name); //ORION
	            }
	        }
	
	        consumeSemicolon();
	
	        if (label === null && !state.inIteration) {
	            throwError(Messages.IllegalContinue);
	        }
	
	        return node.finishContinueStatement(label);
	    }
	
	    // 12.8 The break statement
	
	    function parseBreakStatement(node) {
	        var label = null, key;
	
	        expectKeyword('break');
	
	        // Catch the very common case first: immediately a semicolon (U+003B).
	        if (source.charCodeAt(lastIndex) === 0x3B) {
	            lex();
	
	            if (!(state.inIteration || state.inSwitch)) {
	                throwError(Messages.IllegalBreak);
	            }
	
	            return node.finishBreakStatement(null);
	        }
	
	        if (hasLineTerminator) {
	            if (!(state.inIteration || state.inSwitch)) {
	                throwError(Messages.IllegalBreak);
	            }
	
	            return node.finishBreakStatement(null);
	        }
	
	        if (lookahead.type === Token.Identifier) {
	            label = parseVariableIdentifier();
	
	            key = '$' + label.name;
	            if (!Object.prototype.hasOwnProperty.call(state.labelSet, key)) {
	                throwError(Messages.UnknownLabel, label.name);
	            }
	        }
	
	        consumeSemicolon();
	
	        if (label === null && !(state.inIteration || state.inSwitch)) {
	            throwError(Messages.IllegalBreak);
	        }
	
	        return node.finishBreakStatement(label);
	    }
	
	    // 12.9 The return statement
	
	    function parseReturnStatement(node) {
	        var argument = null, token = lookahead;
			
	        expectKeyword('return');
	
	        if (!state.inFunctionBody) {
	        	//ORION
	        	tolerateUnexpectedToken(token, Messages.IllegalReturn, token.value);
	            //tolerateError();
	        }
	
	        // 'return' followed by a space and an identifier is very common.
	        if (source.charCodeAt(lastIndex) === 0x20) {
	            if (isIdentifierStart(source.charCodeAt(lastIndex + 1))) {
	                argument = parseExpression();
	                consumeSemicolon();
	                return node.finishReturnStatement(argument);
	            }
	        }
	
	        if (hasLineTerminator) {
	            // HACK
	            return node.finishReturnStatement(null);
	        }
	
	        if (!match(';')) {
	            if (!match('}') && lookahead.type !== Token.EOF) {
	                argument = parseExpression();
	            }
	        }
	
	        consumeSemicolon();
	
	        return node.finishReturnStatement(argument);
	    }
	
	    // 12.10 The with statement
	
	    function parseWithStatement(node) {
	        var object, body;
	
	        if (strict) {
	            tolerateError(Messages.StrictModeWith);
	        }
	
	        expectKeyword('with');
	
	        expect('(');
	
	        object = parseExpression();
	
	        expectSkipTo(')', '{');
	
	        body = parseStatement();
	
	        return node.finishWithStatement(object, body);
	    }
	
	    // 12.10 The swith statement
	
	    function parseSwitchCase() {
	        var test, consequent = [], statement, node = new Node();
	
	        if (matchKeyword('default')) {
	            lex();
	            test = null;
	        } else {
	            expectKeyword('case');
	            test = parseExpression();
	        }
	        //ORION
	        if(match(':')) {
	        	lex();
	        }
	    	var start = index; //ORION prevent infinite loops by checking if the index moved
	        while (startIndex < length) {
	            if (match('}') || matchKeyword('default') || matchKeyword('case')) {
	                break;
	            }
	            statement = parseStatement();
	            if(typeof statement === 'undefined' || statement === null) {
	                break;
	            }
	            consequent.push(statement);
	            if(start === index) {
	                break;
	            }
	            start = index;
	        }
	
	        return node.finishSwitchCase(test, consequent);
	    }
	
	    function parseSwitchStatement(node) {
	        var discriminant, cases, clause, oldInSwitch, defaultFound;
	
	        expectKeyword('switch');
	
	        expect('(');
	
	        discriminant = parseExpression();
	
	        expect(')');
	
	        expect('{');
	
	        cases = [];
	
	        if (match('}')) {
	            lex();
	            return node.finishSwitchStatement(discriminant, cases);
	        }
	
	        oldInSwitch = state.inSwitch;
	        state.inSwitch = true;
	        defaultFound = false;
	
	        while (startIndex < length) {
	            if (match('}')) {
	                break;
	            }
	            clause = parseSwitchCase();
	            if (clause.test === null) {
	                if (defaultFound) {
	                    throwError(Messages.MultipleDefaultsInSwitch);
	                }
	                defaultFound = true;
	            }
	            cases.push(clause);
	        }
	
	        state.inSwitch = oldInSwitch;
	
	        expect('}');
	
	        return node.finishSwitchStatement(discriminant, cases);
	    }
	
	    // 12.13 The throw statement
	
	    function parseThrowStatement(node) {
	        var argument;
	
	        expectKeyword('throw');
	
	        if (hasLineTerminator) {
	            throwError(Messages.NewlineAfterThrow);
	        }
	
	        argument = parseExpression();
	
	        consumeSemicolon();
	
	        return node.finishThrowStatement(argument);
	    }
	
	    // 12.14 The try statement
	
	    function parseCatchClause() {
	        var param, body, node = new Node();
	
	        expectKeyword('catch');
	
	        expect('(');
	        if (match(')')) {
	            throwUnexpectedToken(lookahead);
	        }
	
	        param = parseVariableIdentifier();
	        // 12.14.1
	        if (strict && isRestrictedWord(param.name)) {
	            tolerateError(Messages.StrictCatchVariable);
	        }
	
	        expect(')');
	        body = parseBlock();
	        return node.finishCatchClause(param, body);
	    }
	
	    function parseTryStatement(node) {
	        var block, handlers = [], finalizer = null;
	
	        expectKeyword('try');
	
	        block = parseBlock();
	
	        if (matchKeyword('catch')) {
	            handlers.push(parseCatchClause());
	        }
	
	        if (matchKeyword('finally')) {
	            lex();
	            finalizer = parseBlock();
	        }
	
	        if (handlers.length === 0 && !finalizer) {
	            throwError(Messages.NoCatchOrFinally);
	        }
	
	        return node.finishTryStatement(block, [], handlers, finalizer);
	    }
	
	    // 12.15 The debugger statement
	
	    function parseDebuggerStatement(node) {
	        expectKeyword('debugger');
	
	        consumeSemicolon();
	
	        return node.finishDebuggerStatement();
	    }
	
	    // 12 Statements
	
	    function parseStatement() {
	        var type = lookahead.type,
	            expr,
	            labeledBody,
	            key,
	            node;
	
	        if (type === Token.EOF) {
	            throwUnexpectedToken(lookahead);
	        }
	
	        if (type === Token.Punctuator && lookahead.value === '{') {
	            return parseBlock();
	        }
	
	        node = new Node();
	
	        if (type === Token.Punctuator) {
	            switch (lookahead.value) {
	            case ';':
	                return parseEmptyStatement(node);
	            case '(':
	                return parseExpressionStatement(node);
	            default:
	                break;
	            }
	        } else if (type === Token.Keyword) {
	            switch (lookahead.value) {
	            case 'break':
	                return parseBreakStatement(node);
	            case 'continue':
	                return parseContinueStatement(node);
	            case 'debugger':
	                return parseDebuggerStatement(node);
	            case 'do':
	                return parseDoWhileStatement(node);
	            case 'for':
	                return parseForStatement(node);
	            case 'function':
	                return parseFunctionDeclaration(node);
	            case 'if':
	                return parseIfStatement(node);
	            case 'return':
	                return parseReturnStatement(node);
	            case 'switch':
	                return parseSwitchStatement(node);
	            case 'throw':
	                return parseThrowStatement(node);
	            case 'try':
	                return parseTryStatement(node);
	            case 'var':
	                return parseVariableStatement(node);
	            case 'while':
	                return parseWhileStatement(node);
	            case 'with':
	                return parseWithStatement(node);
	            default:
	                break;
	            }
	        }
	
	        expr = parseExpression();
	
	        // 12.12 Labelled Statements
	        //ORION check if the expression failed to parse
	        if (expr && (expr.type === Syntax.Identifier) && match(':')) {
	            lex();
	
	            key = '$' + expr.name;
	            if (Object.prototype.hasOwnProperty.call(state.labelSet, key)) {
	                throwError(Messages.Redeclaration, 'Label', expr.name);
	            }
	
	            state.labelSet[key] = true;
	            labeledBody = parseStatement();
	            delete state.labelSet[key];
	            return node.finishLabeledStatement(expr, labeledBody);
	        }
	
	        consumeSemicolon();
			if(!expr) {
				expr = recoveredNode(node); //ORION do not set a null expression
			}
	        return node.finishExpressionStatement(expr);
	    }
	
	    // 13 Function Definition
	
	    function parseFunctionSourceElements() {
	        var sourceElement, sourceElements = [], token, directive, firstRestricted,
	            oldLabelSet, oldInIteration, oldInSwitch, oldInFunctionBody, oldParenthesisCount,
	            node = new Node();
	
	        expect('{');
	
	        while (startIndex < length) {
	            if (lookahead.type !== Token.StringLiteral) {
	                break;
	            }
	            token = lookahead;
	
	            sourceElement = parseSourceElement();
	            sourceElements.push(sourceElement);
	            if (sourceElement.expression.type !== Syntax.Literal) {
	                // this is not directive
	                break;
	            }
	            directive = source.slice(token.start + 1, token.end - 1);
	            if (directive === 'use strict') {
	                strict = true;
	                if (firstRestricted) {
	                    tolerateUnexpectedToken(firstRestricted, Messages.StrictOctalLiteral);
	                }
	            } else {
	                if (!firstRestricted && token.octal) {
	                    firstRestricted = token;
	                }
	            }
	        }
	
	        oldLabelSet = state.labelSet;
	        oldInIteration = state.inIteration;
	        oldInSwitch = state.inSwitch;
	        oldInFunctionBody = state.inFunctionBody;
	        oldParenthesisCount = state.parenthesizedCount;
	
	        state.labelSet = {};
	        state.inIteration = false;
	        state.inSwitch = false;
	        state.inFunctionBody = true;
	        state.parenthesizedCount = 0;
	        var start = index; //ORION 8.0 prevent infinite loops by checking for index movement
	        while (index < length) {
	            if (match('}')) {
	                break;
	            }
	            sourceElement = parseSourceElement();
	            if (typeof sourceElement === 'undefined' || sourceElement == null) {
	                break;
	            }
	            sourceElements.push(sourceElement);
	            if(start === index) {
	                break;
	            }
	            start = index;
	        }
	
	        expectSkipTo('}');
	
	        state.labelSet = oldLabelSet;
	        state.inIteration = oldInIteration;
	        state.inSwitch = oldInSwitch;
	        state.inFunctionBody = oldInFunctionBody;
	        state.parenthesizedCount = oldParenthesisCount;
	
	        return node.finishBlockStatement(sourceElements);
	    }
	
	    function validateParam(options, param, name) {
	        var key = '$' + name;
	        if (strict) {
	            if (isRestrictedWord(name)) {
	                options.stricted = param;
	                options.message = Messages.StrictParamName;
	            }
	            if (Object.prototype.hasOwnProperty.call(options.paramSet, key)) {
	                options.stricted = param;
	                options.message = Messages.StrictParamDupe;
	            }
	        } else if (!options.firstRestricted) {
	            if (isRestrictedWord(name)) {
	                options.firstRestricted = param;
	                options.message = Messages.StrictParamName;
	            } else if (isStrictModeReservedWord(name)) {
	                options.firstRestricted = param;
	                options.message = Messages.StrictReservedWord;
	            } else if (Object.prototype.hasOwnProperty.call(options.paramSet, key)) {
	                options.firstRestricted = param;
	                options.message = Messages.StrictParamDupe;
	            }
	        }
	        options.paramSet[key] = true;
	    }
	
	    function parseParam(options) {
	        var token, param, def;
	
	        token = lookahead;
	        param = parseVariableIdentifier();
	        validateParam(options, token, token.value);
	        if (match('=')) {
	            lex();
	            def = parseAssignmentExpression();
	            ++options.defaultCount;
	        }
	
	        options.params.push(param);
	        options.defaults.push(def);
	
	        return !match(')');
	    }
	
	    function parseParams(firstRestricted) {
	        var options;
	
	        options = {
	            params: [],
	            defaultCount: 0,
	            defaults: [],
	            firstRestricted: firstRestricted
	        };
	
	        expect('(');
	
	        if (!match(')')) {
	            options.paramSet = {};
	            while (startIndex < length) {
	                if (!parseParam(options)) {
	                    break;
	                }
	                expect(',');
	            }
	        }
	
	        expect(')');
	
	        if (options.defaultCount === 0) {
	            options.defaults = [];
	        }
	
	        return {
	            params: options.params,
	            defaults: options.defaults,
	            stricted: options.stricted,
	            firstRestricted: options.firstRestricted,
	            message: options.message
	        };
	    }
	
	    function parseFunctionDeclaration() {
	        var id, params = [], defaults = [], body, token, stricted, tmp, firstRestricted, message, previousStrict, node = new Node();
	
	        expectKeyword('function');
	        token = lookahead;
	        id = parseVariableIdentifier();
	        if (strict) {
	            if (isRestrictedWord(token.value)) {
	                tolerateUnexpectedToken(token, Messages.StrictFunctionName);
	            }
	        } else {
	            if (isRestrictedWord(token.value)) {
	                firstRestricted = token;
	                message = Messages.StrictFunctionName;
	            } else if (isStrictModeReservedWord(token.value)) {
	                firstRestricted = token;
	                message = Messages.StrictReservedWord;
	            }
	        }
	
	        tmp = parseParams(firstRestricted);
	        params = tmp.params;
	        defaults = tmp.defaults;
	        stricted = tmp.stricted;
	        firstRestricted = tmp.firstRestricted;
	        if (tmp.message) {
	            message = tmp.message;
	        }
	
	        previousStrict = strict;
	        body = parseFunctionSourceElements();
	        if (strict && firstRestricted) {
	            throwUnexpectedToken(firstRestricted, message);
	        }
	        if (strict && stricted) {
	            tolerateUnexpectedToken(stricted, message);
	        }
	        strict = previousStrict;
	
	        return node.finishFunctionDeclaration(id, params, defaults, body);
	    }
	
	    function parseFunctionExpression() {
	        var token, id = null, stricted, firstRestricted, message, tmp,
	            params = [], defaults = [], body, previousStrict, node = new Node();
	
	        expectKeyword('function');
	
	        if (!match('(')) {
	            token = lookahead;
	            id = parseVariableIdentifier();
	            if (strict) {
	                if (isRestrictedWord(token.value)) {
	                    tolerateUnexpectedToken(token, Messages.StrictFunctionName);
	                }
	            } else {
	                if (isRestrictedWord(token.value)) {
	                    firstRestricted = token;
	                    message = Messages.StrictFunctionName;
	                } else if (isStrictModeReservedWord(token.value)) {
	                    firstRestricted = token;
	                    message = Messages.StrictReservedWord;
	                }
	            }
	        }
	
	        tmp = parseParams(firstRestricted);
	        params = tmp.params;
	        defaults = tmp.defaults;
	        stricted = tmp.stricted;
	        firstRestricted = tmp.firstRestricted;
	        if (tmp.message) {
	            message = tmp.message;
	        }
	
	        previousStrict = strict;
	        body = parseFunctionSourceElements();
	        if (strict && firstRestricted) {
	            throwUnexpectedToken(firstRestricted, message);
	        }
	        if (strict && stricted) {
	            tolerateUnexpectedToken(stricted, message);
	        }
	        strict = previousStrict;
	
	        return node.finishFunctionExpression(id, params, defaults, body);
	    }
	
	    // 14 Program
	
	    function parseSourceElement() {
	        if (lookahead.type === Token.Keyword) {
	            switch (lookahead.value) {
	            case 'const':
	            case 'let':
	                return parseConstLetDeclaration(lookahead.value);
	            case 'function':
	                return parseFunctionDeclaration();
	            default:
	                return parseStatement(); //ORION if we can't determine the type try a statement
	            }
	        }
	
	        if (lookahead.type !== Token.EOF) {  //ORION if we are not at the end keep trying
	            return parseStatement();
	        }
	    }
	
	    function parseSourceElements() {
	        var sourceElement, sourceElements = [], token, directive, firstRestricted;
	
	        while (startIndex < length) {
	            token = lookahead;
	            if (token.type !== Token.StringLiteral) {
	                break;
	            }
	
	            sourceElement = parseSourceElement();
	            sourceElements.push(sourceElement);
	            if (sourceElement.expression.type !== Syntax.Literal) {
	                // this is not directive
	                break;
	            }
	            directive = source.slice(token.start + 1, token.end - 1);
	            if (directive === 'use strict') {
	                strict = true;
	                if (firstRestricted) {
	                    tolerateUnexpectedToken(firstRestricted, Messages.StrictOctalLiteral);
	                }
	            } else {
	                if (!firstRestricted && token.octal) {
	                    firstRestricted = token;
	                }
	            }
	        }
	        //ORION prevent infinite loops by checking index movement
	        var start = index;  
	        while (startIndex < length) {
	            sourceElement = parseSourceElement();
	            /* istanbul ignore if */
	            if (typeof sourceElement === 'undefined' || sourceElement === null) {
	                break;
	            }
	            sourceElements.push(sourceElement);
	            if(start === index) {
	                break;
	            }
	            start = index;
	        }
	        return sourceElements;
	    }
	
	    function parseProgram() {
	        var body, node;
	
	        peek();
	        node = new Node();
	        strict = false;
	
	        body = parseSourceElements();
	        return node.finishProgram(body);
	    }
	
	    function filterTokenLocation() {
	        var i, entry, token, tokens = [];
	
	        for (i = 0; i < extra.tokens.length; ++i) {
	            entry = extra.tokens[i];
	            token = {
	                type: entry.type,
	                value: entry.value
	            };
	            if (entry.regex) {
	                token.regex = {
	                    pattern: entry.regex.pattern,
	                    flags: entry.regex.flags
	                };
	            }
	            if (extra.range) {
	                token.range = entry.range;
	            }
	            if (extra.loc) {
	                token.loc = entry.loc;
	            }
	            tokens.push(token);
	        }
	
	        extra.tokens = tokens;
	    }
	
	    function tokenize(code, options) {
	        var toString,
	            tokens;
	
	        toString = String;
	        if (typeof code !== 'string' && !(code instanceof String)) {
	            code = toString(code);
	        }
	
	        source = code;
	        index = 0;
	        lineNumber = (source.length > 0) ? 1 : 0;
	        lineStart = 0;
	        startIndex = index;
	        startLineNumber = lineNumber;
	        startLineStart = lineStart;
	        length = source.length;
	        lookahead = null;
	        state = {
	            allowIn: true,
	            labelSet: {},
	            inFunctionBody: false,
	            inIteration: false,
	            inSwitch: false,
	            lastCommentStart: -1
	        };
	
	        extra = {};
	
	        // Options matching.
	        options = options || {};
	
	        // Of course we collect tokens here.
	        options.tokens = true;
	        extra.tokens = [];
	        extra.tokenize = true;
	        // The following two fields are necessary to compute the Regex tokens.
	        extra.openParenToken = -1;
	        extra.openCurlyToken = -1;
	
	        extra.range = (typeof options.range === 'boolean') && options.range;
	        extra.loc = (typeof options.loc === 'boolean') && options.loc;
	
	        if (typeof options.comment === 'boolean' && options.comment) {
	            extra.comments = [];
	        }
	        if (typeof options.tolerant === 'boolean' && options.tolerant) {
	            extra.errors = [];
	        }
	
	        try {
	            peek();
	            if (lookahead.type === Token.EOF) {
	                return extra.tokens;
	            }
	
	            lex();
	            while (lookahead.type !== Token.EOF) {
	                try {
	                    lex();
	                } catch (lexError) {
	                    if (extra.errors) {
	                        extra.errors.push(lexError);
	                        // We have to break on the first error
	                        // to avoid infinite loops.
	                        break;
	                    } else {
	                        throw lexError;
	                    }
	                }
	            }
	
	            filterTokenLocation();
	            tokens = extra.tokens;
	            if (typeof extra.comments !== 'undefined') {
	                tokens.comments = extra.comments;
	            }
	            if (typeof extra.errors !== 'undefined') {
	                tokens.errors = extra.errors;
	            }
	        } catch (e) {
	            throw e;
	        } finally {
	            extra = {};
	        }
	        return tokens;
	    }
	
	    function parse(code, options) {
	        var program, toString;
	
	        toString = String;
	        if (typeof code !== 'string' && !(code instanceof String)) {
	            code = toString(code);
	        }
	
	        source = code;
	        index = 0;
	        lineNumber = (source.length > 0) ? 1 : 0;
	        lineStart = 0;
	        startIndex = index;
	        startLineNumber = lineNumber;
	        startLineStart = lineStart;
	        length = source.length;
	        lookahead = null;
	        state = {
	            allowIn: true,
	            labelSet: {},
	            parenthesisCount: 0,
	            inFunctionBody: false,
	            inIteration: false,
	            inSwitch: false,
	            lastCommentStart: -1
	        };
	
	        extra = {};
	        if (typeof options !== 'undefined') {
	        	if(typeof(options.deps) === 'boolean' && options.deps)  { //ORION dependencies
	        		extra.deps = [];
	        		extra.envs = Object.create(null);
	        	}
	            extra.range = (typeof options.range === 'boolean') && options.range;
	            extra.loc = (typeof options.loc === 'boolean') && options.loc;
	            extra.attachComment = (typeof options.attachComment === 'boolean') && options.attachComment;
	
	            if (extra.loc && options.source !== null && options.source !== undefined) {
	                extra.source = toString(options.source);
	            }
	
	            if (typeof options.tokens === 'boolean' && options.tokens) {
	                extra.tokens = [];
	            }
	            if (typeof options.comment === 'boolean' && options.comment) {
	                extra.comments = [];
	            }
	            if (typeof options.tolerant === 'boolean' && options.tolerant) {
	                extra.errors = [];
	                //ORION hijack the parse statements we want to recover from
	                extra.parseStatement = parseStatement;
	                extra.parseExpression = parseExpression;
					
					parseStatement = parseStatementTolerant(parseStatement); // Note special case
					parseExpression = parseTolerant(parseExpression);
	            }
	            if (extra.attachComment) {
	                extra.range = true;
	                extra.comments = [];
	                extra.bottomRightStack = [];
	                extra.trailingComments = [];
	                extra.leadingComments = [];
	            }
	            
	            extra.directSourceFile = options.directSourceFile; //ORION for Tern
	        }
	
	        try {
	            program = parseProgram();
	            if (typeof extra.comments !== 'undefined') {
	                program.comments = extra.comments;
	            }
	            if (typeof extra.tokens !== 'undefined') {
	                filterTokenLocation();
	                program.tokens = extra.tokens;
	            }
	            if (typeof extra.errors !== 'undefined') {
	                program.errors = extra.errors;
	            }
	            if(typeof(extra.deps) !== 'undefined') {
	            	program.dependencies = extra.deps;
	            	program.environments = extra.envs;
	            }
	        } catch (e) {
	            throw e;
	        } finally {
	        	//ORION release the hostages
	            if (typeof extra.errors !== 'undefined') {
	        		parseStatement = extra.parseStatement;
	        		parseExpression = extra.parseExpression;
	        	}
	            extra = {};
	        }
	
	        return program;
	    }
	
	    /**
		 * @description For statements like if, while, for, etc. check for the ')' on the condition. If
		 * it is not present, catch the error, and backtrack if we see a '{' instead (to continue parsing the block)
		 * @throws The original error from  trying to consume the ')' char if not in tolerant mode
		 * @since 5.0
		 */
		function expectSkipTo(value, skipTo) {
	        try {
	            expect(value);
	        } catch (e) {
	            if (extra.errors) {
		            recordError(e);
		            if (skipTo &&  source[e.index] === skipTo) {
		              index = e.index;
		              peek();
		            }
	            } else {
	                throw e;
	            }
	        }
		}
	
	    /**
		 * @name recordError
	     * @description Add the error if not already reported.
	     * @param {Object} error The error object to record
	     * @since 5.0
	     */
	    function recordError(error) {
	        var len = extra.errors.length;
	        for (var e = 0; e < len; e++) {
	            var existing = extra.errors[e];
	            if (existing.index === error.index && existing.message === error.message) {
	                return; // do not add duplicate
	            }
	        }
	        extra.errors.push(error);
	    }
	
	    /**
	     * @description Wraps the given parse function to handle parse failures
	     * @param {Function} parseFunction The function to wrap
	     * @returns {Object} The wrapped function value or <code>undefined</code>
	     * @since 6.0
	     */
	    function parseTolerant(parseFunction) {
	        return function () {
	            try {
	                return parseFunction.apply(null, arguments);
	            } catch (e) {
					recordError(e);
	            }
	        };
	    }
	    
	    /**
	     * @description Wraps the given parse function to handle parse failures
	     * @param {Function} parseFunction The function to wrap
	     * @returns {Object} The wrapped function value or <code>undefined</code>
	     * @since 6.0
	     */
	    function parseStatementTolerant(parseFunction) {
	        return function () {
	        	extra.statementStart = index;
	            try {
	                return parseFunction.apply(null, arguments);
	            } catch (e) {
					recordError(e);
	            }
	        };
	    }
	
	    /**
	     * @descripton Rewind the lex position to the most recent newline or semicolon.  If that turns out
	     * to be the same position as the most recent parsing of a statement was attempted at, 
	     * don't rewind (because it will fail in the same way).  If it turns out to be the same
	     * position as where we last rewound to, don't do it.  Clears the buffer and sets the
	     * index in order to continue lexing from the new position.
	     * @param {Number} linestart The start of the line to rewind to
	     * @since 5.0
	     */
	    function rewind(linestart) {
	        var idx = linestart;
	        while (idx > -1 && source[idx] !== ';' && source[idx] !== '\n') {
	            idx--;
	        }
	        if (idx <= extra.statementStart) {
	            return;
	        }
	        var doRewind = false;
	        if (extra.lastRewindLocation) {
	            doRewind = true;
	        } else {
	            if (extra.lastRewindLocation !== idx) {
	            	doRewind=true;
	            }
	        }	        
	        if (doRewind) {
		        index = idx;
		        rewindTokenStream(linestart);
		        peek(); // recalculate lookahead
		        extra.lastRewindLocation = index;
	        }
	    }
	    
	    /**
	     * @description Rewinds the state of the token stream to make sure we remove stale
	     * tokens when we are re-parsing
	     * @param {Number} offset The index into the source
	     * @returns {Number} The index we stopped rewinding at 
	     * @since 9.0
	     */
	    function rewindTokenStream(offset, more) {
	        var idx = extra.tokens.length-1;
	    	while(idx > -1) {
	    	    var tok = extra.tokens[idx];
	    		if(tok.range[0] < offset) {
	    		    if(more) {
	    		      extra.tokens.pop();
	    		    }
	    			break;
	    		}
	    		idx--;
	    		extra.tokens.pop();
	    	}
	    	return idx;
	    }
	    
	    /**
	     * @description When a problem occurs in parseNonComputedProperty, attempt to reposition 
	     * the lexer to continue processing.
	     * Example: '(foo.)' we will hit the ')' instead of discovering a property and consuming the ')'
	     * will cause the parse of the paretheses to fail, so 'unconsume' it.
	     * Basically rewind by one token if punctuation (type 7) is hit and the char before it was
	     * a dot.  This will enable the enclosing parse rule to consume the punctuation.
	     * @param {Object} token The token to try and recover from
	     * @since 5.0
	     */
	    function recoverNonComputedProperty(token) {
	        if (token.value && token.type === Token.Punctuator) {
	            var start = token.range ? token.range[0] : token.start;
	            var idx = rewindTokenStream(start);
	        	var prev = extra.tokens[idx];
	        	if(prev.type === TokenName[Token.Punctuator] && prev.value === '.') {
	        		//extra.tokens.pop();
	        		index = prev.range[0]+1;
	                peek(); // recalculate lookahead
	        	}
	        }
	    }
	
	    /**
	     * @description Returns a node to fill in incomplete tree locations while recovering
	     * @param {Node} node The node context we tried to parse. Used to collect range and loc infos
	     * @param {String} expectedType The expected type of node (if known)
	     * @param {String} expectedValue The expected value of the node (if known)
	     * @since 2.0
	     */
	    function recoveredNode(node, expectedType, expectedValue) {
	        var recovered = {
	            type: 'RecoveredNode',
	            name: '',
	            recovered: true,
	            expectedValue: expectedValue,
	            expectedType: expectedType
	        };
	        if (extra.range) {
	            recovered.range = node.range;
	            recovered.range[1] = index;
	            recovered.start = node.range;
	            recovered.end = index;
	        }
	        if (extra.loc) {
	            recovered.loc = node.loc;
	            recovered.loc.end = new Position();
	        }
	        return recovered;
	    }
	
	    /**
		 * @description Recover an object property or ignore it
		 * @private
		 * @param {Object} prev The previous token from the stream
		 * @see https://bugs.eclipse.org/bugs/show_bug.cgi?id=432956
		 */
		function recoverProperty(prev, id, node) {
			if(extra.errors) {
				var token = lookahead; //advance();
		        if(token.value === ':') {
		        	try {
		        		token = lex(); // eat the ':' so the assignment parsing starts on the correct index
		            	return node.finishProperty('init', id, parseAssignmentExpression(), false, true);
	            	}
	            	catch(e) {
	            	    token = extra.tokens[extra.tokens.length-1];    
	            	    tolerateUnexpectedToken(token, Messages.UnexpectedToken, token.value);
	            		node.finishProperty('init', id, null, false, true);
	            		return null;
	            	}
		        } else if(token.type === Token.Punctuator && token.value === '}') {
		        	tolerateUnexpectedToken(prev, Messages.UnexpectedToken, prev.value);
		        	node.finishProperty('init', id, false, true, true);
		        	return null;
		        } else {
		        	tolerateUnexpectedToken(prev, Messages.UnexpectedToken, prev.value);
		        	if(token.type === Token.Identifier || token.type === Token.StringLiteral) {
		        		//if the next token is an identifer / literal, start over
		        		node.finishProperty('init', id, false, true);
		        		return null;
		        	}
		        	while(token.type !== Token.EOF) {
		        		if(token.type === Token.Punctuator && (token.value === ',' || token.value === '}')) {
			            	//entering a prop, not complete, return null
		        			node.finishProperty('init', id, false, true);
		        			return null;
			            } else {
		        			token = lex(); // the token if we skipped it
		        		}
		        		token = advance();
		        	}
		        }
		        node.finishProperty('init', id, false, true);
		        return null;
	        }
	        else {
	        	expect(':');
	        	return node.finishProperty('init', id, parseAssignmentExpression(), false, true);
	        }
		}
	
	    // Sync with *.json manifests.
	    exports.version = '2.0.0';
	
	    exports.tokenize = tokenize;
	
	    exports.parse = parse;
	
	  //ORION
	    exports.isIdentifierPart = isIdentifierPart;
	    exports.isIdentifierStart = isIdentifierStart;
	    //for Tern
	    exports.isIdentifierChar = isIdentifierPart;
	
	    // Deep copy.
	   /* istanbul ignore next */
	    exports.Syntax = (function () {
	        var name, types = {};
	
	        if (typeof Object.create === 'function') {
	            types = Object.create(null);
	        }
	
	        for (name in Syntax) {
	            if (Syntax.hasOwnProperty(name)) {
	                types[name] = Syntax[name];
	            }
	        }
	
	        if (typeof Object.freeze === 'function') {
	            Object.freeze(types);
	        }
	
	        return types;
	    }());
	
	}));
	/* vim: set sw=4 ts=4 et tw=80 : */


/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	var require;var require;/* eslint-disable  */
	(function(f){if(true){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}(g.acorn || (g.acorn = {})).walk = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return require(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){
	// AST walker module for Mozilla Parser API compatible trees
	
	// A simple walk is one where you simply specify callbacks to be
	// called on specific nodes. The last two arguments are optional. A
	// simple use would be
	//
	//     walk.simple(myTree, {
	//         Expression: function(node) { ... }
	//     });
	//
	// to do something with all expressions. All Parser API node types
	// can be used to identify node types, as well as Expression,
	// Statement, and ScopeBody, which denote categories of nodes.
	//
	// The base argument can be used to pass a custom (recursive)
	// walker, and state can be used to give this walked an initial
	// state.
	
	"use strict";
	
	exports.__esModule = true;
	exports.simple = simple;
	exports.ancestor = ancestor;
	exports.recursive = recursive;
	exports.findNodeAt = findNodeAt;
	exports.findNodeAround = findNodeAround;
	exports.findNodeAfter = findNodeAfter;
	exports.findNodeBefore = findNodeBefore;
	exports.make = make;
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function simple(node, visitors, base, state, override) {
	  if (!base) base = exports.base;(function c(node, st, override) {
	    var type = override || node.type,
	        found = visitors[type];
	    base[type](node, st, c);
	    if (found) found(node, st);
	  })(node, state, override);
	}
	
	// An ancestor walk builds up an array of ancestor nodes (including
	// the current node) and passes them to the callback as the state parameter.
	
	function ancestor(node, visitors, base, state) {
	  if (!base) base = exports.base;
	  if (!state) state = [];(function c(node, st, override) {
	    var type = override || node.type,
	        found = visitors[type];
	    if (node != st[st.length - 1]) {
	      st = st.slice();
	      st.push(node);
	    }
	    base[type](node, st, c);
	    if (found) found(node, st);
	  })(node, state);
	}
	
	// A recursive walk is one where your functions override the default
	// walkers. They can modify and replace the state parameter that's
	// threaded through the walk, and can opt how and whether to walk
	// their child nodes (by calling their third argument on these
	// nodes).
	
	function recursive(node, state, funcs, base, override) {
	  var visitor = funcs ? exports.make(funcs, base) : base;(function c(node, st, override) {
	    visitor[override || node.type](node, st, c);
	  })(node, state, override);
	}
	
	function makeTest(test) {
	  if (typeof test == "string") return function (type) {
	    return type == test;
	  };else if (!test) return function () {
	    return true;
	  };else return test;
	}
	
	var Found = function Found(node, state) {
	  _classCallCheck(this, Found);
	
	  this.node = node;this.state = state;
	}
	
	// Find a node with a given start, end, and type (all are optional,
	// null can be used as wildcard). Returns a {node, state} object, or
	// undefined when it doesn't find a matching node.
	;
	
	function findNodeAt(node, start, end, test, base, state) {
	  test = makeTest(test);
	  if (!base) base = exports.base;
	  try {
	    ;(function c(node, st, override) {
	      var type = override || node.type;
	      if ((start == null || node.start <= start) && (end == null || node.end >= end)) base[type](node, st, c);
	      if ((start == null || node.start == start) && (end == null || node.end == end) && test(type, node)) throw new Found(node, st);
	    })(node, state);
	  } catch (e) {
	    if (e instanceof Found) return e;
	    throw e;
	  }
	}
	
	// Find the innermost node of a given type that contains the given
	// position. Interface similar to findNodeAt.
	
	function findNodeAround(node, pos, test, base, state) {
	  test = makeTest(test);
	  if (!base) base = exports.base;
	  try {
	    ;(function c(node, st, override) {
	      var type = override || node.type;
	      if (node.start > pos || node.end < pos) return;
	      base[type](node, st, c);
	      if (test(type, node)) throw new Found(node, st);
	    })(node, state);
	  } catch (e) {
	    if (e instanceof Found) return e;
	    throw e;
	  }
	}
	
	// Find the outermost matching node after a given position.
	
	function findNodeAfter(node, pos, test, base, state) {
	  test = makeTest(test);
	  if (!base) base = exports.base;
	  try {
	    ;(function c(node, st, override) {
	      if (node.end < pos) return;
	      var type = override || node.type;
	      if (node.start >= pos && test(type, node)) throw new Found(node, st);
	      base[type](node, st, c);
	    })(node, state);
	  } catch (e) {
	    if (e instanceof Found) return e;
	    throw e;
	  }
	}
	
	// Find the outermost matching node before a given position.
	
	function findNodeBefore(node, pos, test, base, state) {
	  test = makeTest(test);
	  if (!base) base = exports.base;
	  var max = undefined;(function c(node, st, override) {
	    if (node.start > pos) return;
	    var type = override || node.type;
	    if (node.end <= pos && (!max || max.node.end < node.end) && test(type, node)) max = new Found(node, st);
	    base[type](node, st, c);
	  })(node, state);
	  return max;
	}
	
	// Used to create a custom walker. Will fill in all missing node
	// type properties with the defaults.
	
	function make(funcs, base) {
	  if (!base) base = exports.base;
	  var visitor = {};
	  for (var type in base) visitor[type] = base[type];
	  for (var type in funcs) visitor[type] = funcs[type];
	  return visitor;
	}
	
	function skipThrough(node, st, c) {
	  c(node, st);
	}
	function ignore(_node, _st, _c) {}
	
	// Node walkers.
	
	var base = {};
	
	exports.base = base;
	base.Program = base.BlockStatement = function (node, st, c) {
	  for (var i = 0; i < node.body.length; ++i) {
	    c(node.body[i], st, "Statement");
	  }
	};
	base.Statement = skipThrough;
	base.EmptyStatement = ignore;
	base.ExpressionStatement = base.ParenthesizedExpression = function (node, st, c) {
	  return c(node.expression, st, "Expression");
	};
	base.IfStatement = function (node, st, c) {
	  c(node.test, st, "Expression");
	  c(node.consequent, st, "Statement");
	  if (node.alternate) c(node.alternate, st, "Statement");
	};
	base.LabeledStatement = function (node, st, c) {
	  return c(node.body, st, "Statement");
	};
	base.BreakStatement = base.ContinueStatement = ignore;
	base.WithStatement = function (node, st, c) {
	  c(node.object, st, "Expression");
	  c(node.body, st, "Statement");
	};
	base.SwitchStatement = function (node, st, c) {
	  c(node.discriminant, st, "Expression");
	  for (var i = 0; i < node.cases.length; ++i) {
	    var cs = node.cases[i];
	    if (cs.test) c(cs.test, st, "Expression");
	    for (var j = 0; j < cs.consequent.length; ++j) {
	      c(cs.consequent[j], st, "Statement");
	    }
	  }
	};
	base.ReturnStatement = base.YieldExpression = function (node, st, c) {
	  if (node.argument) c(node.argument, st, "Expression");
	};
	base.ThrowStatement = base.SpreadElement = function (node, st, c) {
	  return c(node.argument, st, "Expression");
	};
	base.TryStatement = function (node, st, c) {
	  c(node.block, st, "Statement");
	  if (node.handler) {
	    c(node.handler.param, st, "Pattern");
	    c(node.handler.body, st, "ScopeBody");
	  }
	  if (node.finalizer) c(node.finalizer, st, "Statement");
	};
	base.WhileStatement = base.DoWhileStatement = function (node, st, c) {
	  c(node.test, st, "Expression");
	  c(node.body, st, "Statement");
	};
	base.ForStatement = function (node, st, c) {
	  if (node.init) c(node.init, st, "ForInit");
	  if (node.test) c(node.test, st, "Expression");
	  if (node.update) c(node.update, st, "Expression");
	  c(node.body, st, "Statement");
	};
	base.ForInStatement = base.ForOfStatement = function (node, st, c) {
	  c(node.left, st, "ForInit");
	  c(node.right, st, "Expression");
	  c(node.body, st, "Statement");
	};
	base.ForInit = function (node, st, c) {
	  if (node.type == "VariableDeclaration") c(node, st);else c(node, st, "Expression");
	};
	base.DebuggerStatement = ignore;
	
	base.FunctionDeclaration = function (node, st, c) {
	  return c(node, st, "Function");
	};
	base.VariableDeclaration = function (node, st, c) {
	  for (var i = 0; i < node.declarations.length; ++i) {
	    c(node.declarations[i], st);
	  }
	};
	base.VariableDeclarator = function (node, st, c) {
	  c(node.id, st, "Pattern");
	  if (node.init) c(node.init, st, "Expression");
	};
	
	base.Function = function (node, st, c) {
	  if (node.id) c(node.id, st, "Pattern");
	  for (var i = 0; i < node.params.length; i++) {
	    c(node.params[i], st, "Pattern");
	  }c(node.body, st, node.expression ? "ScopeExpression" : "ScopeBody");
	};
	// FIXME drop these node types in next major version
	// (They are awkward, and in ES6 every block can be a scope.)
	base.ScopeBody = function (node, st, c) {
	  return c(node, st, "Statement");
	};
	base.ScopeExpression = function (node, st, c) {
	  return c(node, st, "Expression");
	};
	
	base.Pattern = function (node, st, c) {
	  if (node.type == "Identifier") c(node, st, "VariablePattern");else if (node.type == "MemberExpression") c(node, st, "MemberPattern");else c(node, st);
	};
	base.VariablePattern = ignore;
	base.MemberPattern = skipThrough;
	base.RestElement = function (node, st, c) {
	  return c(node.argument, st, "Pattern");
	};
	base.ArrayPattern = function (node, st, c) {
	  for (var i = 0; i < node.elements.length; ++i) {
	    var elt = node.elements[i];
	    if (elt) c(elt, st, "Pattern");
	  }
	};
	base.ObjectPattern = function (node, st, c) {
	  for (var i = 0; i < node.properties.length; ++i) {
	    c(node.properties[i].value, st, "Pattern");
	  }
	};
	
	base.Expression = skipThrough;
	base.ThisExpression = base.Super = base.MetaProperty = ignore;
	base.ArrayExpression = function (node, st, c) {
	  for (var i = 0; i < node.elements.length; ++i) {
	    var elt = node.elements[i];
	    if (elt) c(elt, st, "Expression");
	  }
	};
	base.ObjectExpression = function (node, st, c) {
	  for (var i = 0; i < node.properties.length; ++i) {
	    c(node.properties[i], st);
	  }
	};
	base.FunctionExpression = base.ArrowFunctionExpression = base.FunctionDeclaration;
	base.SequenceExpression = base.TemplateLiteral = function (node, st, c) {
	  for (var i = 0; i < node.expressions.length; ++i) {
	    c(node.expressions[i], st, "Expression");
	  }
	};
	base.UnaryExpression = base.UpdateExpression = function (node, st, c) {
	  c(node.argument, st, "Expression");
	};
	base.BinaryExpression = base.LogicalExpression = function (node, st, c) {
	  c(node.left, st, "Expression");
	  c(node.right, st, "Expression");
	};
	base.AssignmentExpression = base.AssignmentPattern = function (node, st, c) {
	  c(node.left, st, "Pattern");
	  c(node.right, st, "Expression");
	};
	base.ConditionalExpression = function (node, st, c) {
	  c(node.test, st, "Expression");
	  c(node.consequent, st, "Expression");
	  c(node.alternate, st, "Expression");
	};
	base.NewExpression = base.CallExpression = function (node, st, c) {
	  c(node.callee, st, "Expression");
	  if (node.arguments) for (var i = 0; i < node.arguments.length; ++i) {
	    c(node.arguments[i], st, "Expression");
	  }
	};
	base.MemberExpression = function (node, st, c) {
	  c(node.object, st, "Expression");
	  if (node.computed) c(node.property, st, "Expression");
	};
	base.ExportNamedDeclaration = base.ExportDefaultDeclaration = function (node, st, c) {
	  if (node.declaration) c(node.declaration, st, node.type == "ExportNamedDeclaration" || node.declaration.id ? "Statement" : "Expression");
	  if (node.source) c(node.source, st, "Expression");
	};
	base.ExportAllDeclaration = function (node, st, c) {
	  c(node.source, st, "Expression");
	};
	base.ImportDeclaration = function (node, st, c) {
	  for (var i = 0; i < node.specifiers.length; i++) {
	    c(node.specifiers[i], st);
	  }c(node.source, st, "Expression");
	};
	base.ImportSpecifier = base.ImportDefaultSpecifier = base.ImportNamespaceSpecifier = base.Identifier = base.Literal = ignore;
	
	base.TaggedTemplateExpression = function (node, st, c) {
	  c(node.tag, st, "Expression");
	  c(node.quasi, st);
	};
	base.ClassDeclaration = base.ClassExpression = function (node, st, c) {
	  return c(node, st, "Class");
	};
	base.Class = function (node, st, c) {
	  if (node.id) c(node.id, st, "Pattern");
	  if (node.superClass) c(node.superClass, st, "Expression");
	  for (var i = 0; i < node.body.body.length; i++) {
	    c(node.body.body[i], st);
	  }
	};
	base.MethodDefinition = base.Property = function (node, st, c) {
	  if (node.computed) c(node.key, st, "Expression");
	  c(node.value, st, "Expression");
	};
	base.ComprehensionExpression = function (node, st, c) {
	  for (var i = 0; i < node.blocks.length; i++) {
	    c(node.blocks[i].right, st, "Expression");
	  }c(node.body, st, "Expression");
	};
	
	//ORION
	base.RecoveredNode = ignore;
	
	},{}]},{},[1])(1)
	});

/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	// Type description parser
	//
	// Type description JSON files (such as ecma5.json and browser.json)
	// are used to
	//
	// A) describe types that come from native code
	//
	// B) to cheaply load the types for big libraries, or libraries that
	//    can't be inferred well
	
	(function(mod) {
	  if (true) // CommonJS
	    return exports.init = mod;
	  if (true) // AMD
	    return !(module.exports = {init: mod});
	  tern.def = {init: mod};
	})(function(exports, infer) {
	  "use strict";
	
	  function hop(obj, prop) {
	    return Object.prototype.hasOwnProperty.call(obj, prop);
	  }
	
	  var TypeParser = exports.TypeParser = function(spec, start, base, forceNew) {
	    this.pos = start || 0;
	    this.spec = spec;
	    this.base = base;
	    this.forceNew = forceNew;
	  };
	
	  function unwrapType(type, self, args) {
	    return type.call ? type(self, args) : type;
	  }
	
	  function extractProp(type, prop) {
	    if (prop == "!ret") {
	      if (type.retval) return type.retval;
	      var rv = new infer.AVal;
	      type.propagate(new infer.IsCallee(infer.ANull, [], null, rv));
	      return rv;
	    } else {
	      return type.getProp(prop);
	    }
	  }
	
	  function computedFunc(args, retType) {
	    return function(self, cArgs) {
	      var realArgs = [];
	      for (var i = 0; i < args.length; i++) realArgs.push(unwrapType(args[i], self, cArgs));
	      return new infer.Fn(name, infer.ANull, realArgs, unwrapType(retType, self, cArgs));
	    };
	  }
	  function computedUnion(types) {
	    return function(self, args) {
	      var union = new infer.AVal;
	      for (var i = 0; i < types.length; i++) unwrapType(types[i], self, args).propagate(union);
	      union.maxWeight = 1e5;
	      return union;
	    };
	  }
	  function computedArray(inner) {
	    return function(self, args) {
	      return new infer.Arr(inner(self, args));
	    };
	  }
	
	  TypeParser.prototype = {
	    eat: function(str) {
	      if (str.length == 1 ? this.spec.charAt(this.pos) == str : this.spec.indexOf(str, this.pos) == this.pos) {
	        this.pos += str.length;
	        return true;
	      }
	    },
	    word: function(re) {
	      var word = "", ch, re = re || /[\w$]/;
	      while ((ch = this.spec.charAt(this.pos)) && re.test(ch)) { word += ch; ++this.pos; }
	      return word;
	    },
	    error: function() {
	      throw new Error("Unrecognized type spec: " + this.spec + " (at " + this.pos + ")");
	    },
	    parseFnType: function(comp, name, top) {
	      var args = [], names = [], computed = false;
	      if (!this.eat(")")) for (var i = 0; ; ++i) {
	        var colon = this.spec.indexOf(": ", this.pos), argname;
	        if (colon != -1) {
	          argname = this.spec.slice(this.pos, colon);
	          if (/^[$\w?]+$/.test(argname))
	            this.pos = colon + 2;
	          else
	            argname = null;
	        }
	        names.push(argname);
	        var argType = this.parseType(comp);
	        if (argType.call) computed = true;
	        args.push(argType);
	        if (!this.eat(", ")) {
	          this.eat(")") || this.error();
	          break;
	        }
	      }
	      var retType, computeRet, computeRetStart, fn;
	      if (this.eat(" -> ")) {
	        var retStart = this.pos;
	        retType = this.parseType(true);
	        if (retType.call) {
	          if (top) {
	            computeRet = retType;
	            retType = infer.ANull;
	            computeRetStart = retStart;
	          } else {
	            computed = true;
	          }
	        }
	      } else {
	        retType = infer.ANull;
	      }
	      if (computed) return computedFunc(args, retType);
	
	      if (top && (fn = this.base))
	        infer.Fn.call(this.base, name, infer.ANull, args, names, retType);
	      else
	        fn = new infer.Fn(name, infer.ANull, args, names, retType);
	      if (computeRet) fn.computeRet = computeRet;
	      if (computeRetStart != null) fn.computeRetSource = this.spec.slice(computeRetStart, this.pos);
	      return fn;
	    },
	    parseType: function(comp, name, top) {
	      var main = this.parseTypeMaybeProp(comp, name, top);
	      if (!this.eat("|")) return main;
	      var types = [main], computed = main.call;
	      for (;;) {
	        var next = this.parseTypeMaybeProp(comp, name, top);
	        types.push(next);
	        if (next.call) computed = true;
	        if (!this.eat("|")) break;
	      }
	      if (computed) return computedUnion(types);
	      var union = new infer.AVal;
	      for (var i = 0; i < types.length; i++) types[i].propagate(union);
	      union.maxWeight = 1e5;
	      return union;
	    },
	    parseTypeMaybeProp: function(comp, name, top) {
	      var result = this.parseTypeInner(comp, name, top);
	      while (comp && this.eat(".")) result = this.extendWithProp(result);
	      return result;
	    },
	    extendWithProp: function(base) {
	      var propName = this.word(/[\w<>$!]/) || this.error();
	      if (base.apply) return function(self, args) {
	        return extractProp(base(self, args), propName);
	      };
	      return extractProp(base, propName);
	    },
	    parseTypeInner: function(comp, name, top) {
	      if (this.eat("fn(")) {
	        return this.parseFnType(comp, name, top);
	      } else if (this.eat("[")) {
	        var inner = this.parseType(comp);
	        this.eat("]") || this.error();
	        if (inner.call) return computedArray(inner);
	        if (top && this.base) {
	          infer.Arr.call(this.base, inner);
	          return this.base;
	        }
	        return new infer.Arr(inner);
	      } else if (this.eat("+")) {
	        var path = this.word(/[\w$<>\.!]/);
	        var base = parsePath(path + ".prototype");
	        var type;
	        if (!(base instanceof infer.Obj)) base = parsePath(path);
	        if (!(base instanceof infer.Obj)) return base;
	        if (comp && this.eat("[")) return this.parsePoly(base);
	        if (top && this.forceNew) return new infer.Obj(base);
	        return infer.getInstance(base);
	      } else if (comp && this.eat("!")) {
	        var arg = this.word(/\d/);
	        if (arg) {
	          arg = Number(arg);
	          return function(_self, args) {return args[arg] || infer.ANull;};
	        } else if (this.eat("this")) {
	          return function(self) {return self;};
	        } else if (this.eat("custom:")) {
	          var fname = this.word(/[\w$]/);
	          return customFunctions[fname] || function() { return infer.ANull; };
	        } else {
	          return this.fromWord("!" + this.word(/[\w$<>\.!]/));
	        }
	      } else if (this.eat("?")) {
	        return infer.ANull;
	      } else {
	        return this.fromWord(this.word(/[\w$<>\.!`]/));
	      }
	    },
	    fromWord: function(spec) {
	      var cx = infer.cx();
	      switch (spec) {
	      case "number": return cx.num;
	      case "string": return cx.str;
	      case "bool": return cx.bool;
	      case "<top>": return cx.topScope;
	      }
	      if (cx.localDefs && spec in cx.localDefs) return cx.localDefs[spec];
	      return parsePath(spec);
	    },
	    parsePoly: function(base) {
	      var propName = "<i>", match;
	      if (match = this.spec.slice(this.pos).match(/^\s*(\w+)\s*=\s*/)) {
	        propName = match[1];
	        this.pos += match[0].length;
	      }
	      var value = this.parseType(true);
	      if (!this.eat("]")) this.error();
	      if (value.call) return function(self, args) {
	        var instance = infer.getInstance(base);
	        value(self, args).propagate(instance.defProp(propName));
	        return instance;
	      };
	      var instance = infer.getInstance(base);
	      value.propagate(instance.defProp(propName));
	      return instance;
	    }
	  };
	
	  function parseType(spec, name, base, forceNew) {
	    var type = new TypeParser(spec, null, base, forceNew).parseType(false, name, true);
	    if (/^fn\(/.test(spec)) for (var i = 0; i < type.args.length; ++i) (function(i) {
	      var arg = type.args[i];
	      if (arg instanceof infer.Fn && arg.args && arg.args.length) addEffect(type, function(_self, fArgs) {
	        var fArg = fArgs[i];
	        if (fArg) fArg.propagate(new infer.IsCallee(infer.cx().topScope, arg.args, null, infer.ANull));
	      });
	    })(i);
	    return type;
	  }
	
	  function addEffect(fn, handler, replaceRet) {
	    var oldCmp = fn.computeRet, rv = fn.retval;
	    fn.computeRet = function(self, args, argNodes) {
	      var handled = handler(self, args, argNodes);
	      var old = oldCmp ? oldCmp(self, args, argNodes) : rv;
	      return replaceRet ? handled : old;
	    };
	  }
	
	  var parseEffect = exports.parseEffect = function(effect, fn) {
	    var m;
	    if (effect.indexOf("propagate ") == 0) {
	      var p = new TypeParser(effect, 10);
	      var origin = p.parseType(true);
	      if (!p.eat(" ")) p.error();
	      var target = p.parseType(true);
	      addEffect(fn, function(self, args) {
	        unwrapType(origin, self, args).propagate(unwrapType(target, self, args));
	      });
	    } else if (effect.indexOf("call ") == 0) {
	      var andRet = effect.indexOf("and return ", 5) == 5;
	      var p = new TypeParser(effect, andRet ? 16 : 5);
	      var getCallee = p.parseType(true), getSelf = null, getArgs = [];
	      if (p.eat(" this=")) getSelf = p.parseType(true);
	      while (p.eat(" ")) getArgs.push(p.parseType(true));
	      addEffect(fn, function(self, args) {
	        var callee = unwrapType(getCallee, self, args);
	        var slf = getSelf ? unwrapType(getSelf, self, args) : infer.ANull, as = [];
	        for (var i = 0; i < getArgs.length; ++i) as.push(unwrapType(getArgs[i], self, args));
	        var result = andRet ? new infer.AVal : infer.ANull;
	        callee.propagate(new infer.IsCallee(slf, as, null, result));
	        return result;
	      }, andRet);
	    } else if (m = effect.match(/^custom (\S+)\s*(.*)/)) {
	      var customFunc = customFunctions[m[1]];
	      if (customFunc) addEffect(fn, m[2] ? customFunc(m[2]) : customFunc);
	    } else if (effect.indexOf("copy ") == 0) {
	      var p = new TypeParser(effect, 5);
	      var getFrom = p.parseType(true);
	      p.eat(" ");
	      var getTo = p.parseType(true);
	      addEffect(fn, function(self, args) {
	        var from = unwrapType(getFrom, self, args), to = unwrapType(getTo, self, args);
	        from.forAllProps(function(prop, val, local) {
	          if (local && prop != "<i>")
	            to.propagate(new infer.PropHasSubset(prop, val));
	        });
	      });
	    } else {
	      throw new Error("Unknown effect type: " + effect);
	    }
	  };
	
	  var currentTopScope;
	
	  var parsePath = exports.parsePath = function(path, scope) {
	    var cx = infer.cx(), cached = cx.paths[path], origPath = path;
	    if (cached != null) return cached;
	    cx.paths[path] = infer.ANull;
	
	    var base = scope || currentTopScope || cx.topScope;
	
	    if (cx.localDefs) for (var name in cx.localDefs) {
	      if (path.indexOf(name) == 0) {
	        if (path == name) return cx.paths[path] = cx.localDefs[path];
	        if (path.charAt(name.length) == ".") {
	          base = cx.localDefs[name];
	          path = path.slice(name.length + 1);
	          break;
	        }
	      }
	    }
	
	    var parts = path.split(".");
	    for (var i = 0; i < parts.length && base != infer.ANull; ++i) {
	      var prop = parts[i];
	      if (prop.charAt(0) == "!") {
	        if (prop == "!proto") {
	          base = (base instanceof infer.Obj && base.proto) || infer.ANull;
	        } else {
	          var fn = base.getFunctionType();
	          if (!fn) {
	            base = infer.ANull;
	          } else if (prop == "!ret") {
	            base = fn.retval && fn.retval.getType(false) || infer.ANull;
	          } else {
	            var arg = fn.args && fn.args[Number(prop.slice(1))];
	            base = (arg && arg.getType(false)) || infer.ANull;
	          }
	        }
	      } else if (base instanceof infer.Obj) {
	        var propVal = (prop == "prototype" && base instanceof infer.Fn) ? base.getProp(prop) : base.props[prop];
	        if (!propVal || propVal.isEmpty())
	          base = infer.ANull;
	        else
	          base = propVal.types[0];
	      }
	    }
	    // Uncomment this to get feedback on your poorly written .json files
	    // if (base == infer.ANull) console.error("bad path: " + origPath + " (" + cx.curOrigin + ")");
	    cx.paths[origPath] = base == infer.ANull ? null : base;
	    return base;
	  };
	
	  function emptyObj(ctor) {
	    var empty = Object.create(ctor.prototype);
	    empty.props = Object.create(null);
	    empty.isShell = true;
	    return empty;
	  }
	
	  function isSimpleAnnotation(spec) {
	    if (!spec["!type"] || /^(fn\(|\[)/.test(spec["!type"])) return false;
	    for (var prop in spec)
	      if (prop != "!type" && prop != "!doc" && prop != "!url" && prop != "!span" && prop != "!data")
	        return false;
	    return true;
	  }
	
	  function passOne(base, spec, path) {
	    if (!base) {
	      var tp = spec["!type"];
	      if (tp) {
	        if (/^fn\(/.test(tp)) base = emptyObj(infer.Fn);
	        else if (tp.charAt(0) == "[") base = emptyObj(infer.Arr);
	        else throw new Error("Invalid !type spec: " + tp);
	      } else if (spec["!stdProto"]) {
	        base = infer.cx().protos[spec["!stdProto"]];
	      } else {
	        base = emptyObj(infer.Obj);
	      }
	      base.name = path;
	    }
	
	    for (var name in spec) if (hop(spec, name) && name.charCodeAt(0) != 33) {
	      var inner = spec[name];
	      if (typeof inner == "string" || isSimpleAnnotation(inner)) continue;
	      var prop = base.defProp(name);
	      passOne(prop.getObjType(), inner, path ? path + "." + name : name).propagate(prop);
	    }
	    return base;
	  }
	
	  function passTwo(base, spec, path) {
	    if (base.isShell) {
	      delete base.isShell;
	      var tp = spec["!type"];
	      if (tp) {
	        parseType(tp, path, base);
	      } else {
	        var proto = spec["!proto"] && parseType(spec["!proto"]);
	        infer.Obj.call(base, proto instanceof infer.Obj ? proto : true, path);
	      }
	    }
	
	    var effects = spec["!effects"];
	    if (effects && base instanceof infer.Fn) for (var i = 0; i < effects.length; ++i)
	      parseEffect(effects[i], base);
	    copyInfo(spec, base);
	
	    for (var name in spec) if (hop(spec, name) && name.charCodeAt(0) != 33) {
	      var inner = spec[name], known = base.defProp(name), innerPath = path ? path + "." + name : name;
	      if (typeof inner == "string") {
	        if (known.isEmpty()) parseType(inner, innerPath).propagate(known);
	      } else {
	        if (!isSimpleAnnotation(inner))
	          passTwo(known.getObjType(), inner, innerPath);
	        else if (known.isEmpty())
	          parseType(inner["!type"], innerPath, null, true).propagate(known);
	        else
	          continue;
	        if (inner["!doc"]) known.doc = inner["!doc"];
	        if (inner["!url"]) known.url = inner["!url"];
	        if (inner["!span"]) known.span = inner["!span"];
	      }
	    }
	    return base;
	  }
	
	  function copyInfo(spec, type) {
	    if (spec["!doc"]) type.doc = spec["!doc"];
	    if (spec["!url"]) type.url = spec["!url"];
	    if (spec["!span"]) type.span = spec["!span"];
	    if (spec["!data"]) type.metaData = spec["!data"];
	  }
	
	  function runPasses(type, arg) {
	    var parent = infer.cx().parent, pass = parent && parent.passes && parent.passes[type];
	    if (pass) for (var i = 0; i < pass.length; i++) pass[i](arg);
	  }
	
	  function doLoadEnvironment(data, scope) {
	    var cx = infer.cx();
	
	    infer.addOrigin(cx.curOrigin = data["!name"] || "env#" + cx.origins.length);
	    cx.localDefs = cx.definitions[cx.curOrigin] = Object.create(null);
	
	    runPasses("preLoadDef", data);
	
	    passOne(scope, data);
	
	    var def = data["!define"];
	    if (def) {
	      for (var name in def) {
	        var spec = def[name];
	        cx.localDefs[name] = typeof spec == "string" ? parsePath(spec) : passOne(null, spec, name);
	      }
	      for (var name in def) {
	        var spec = def[name];
	        if (typeof spec != "string") passTwo(cx.localDefs[name], def[name], name);
	      }
	    }
	
	    passTwo(scope, data);
	
	    runPasses("postLoadDef", data);
	
	    cx.curOrigin = cx.localDefs = null;
	  }
	
	  exports.load = function(data, scope) {
	    if (!scope) scope = infer.cx().topScope;
	    var oldScope = currentTopScope;
	    currentTopScope = scope;
	    try {
	      doLoadEnvironment(data, scope);
	    } finally {
	      currentTopScope = oldScope;
	    }
	  };
	
	  exports.parse = function(data, origin, path) {
	    var cx = infer.cx();
	    if (origin) {
	      cx.origin = origin;
	      cx.localDefs = cx.definitions[origin];
	    }
	
	    try {
	      if (typeof data == "string")
	        return parseType(data, path);
	      else
	        return passTwo(passOne(null, data, path), data, path);
	    } finally {
	      if (origin) cx.origin = cx.localDefs = null;
	    }
	  };
	
	  // Used to register custom logic for more involved effect or type
	  // computation.
	  var customFunctions = Object.create(null);
	  infer.registerFunction = function(name, f) { customFunctions[name] = f; };
	
	  var IsCreated = infer.constraint({
	    construct: function(created, target, spec) {
	      this.created = created;
	      this.target = target;
	      this.spec = spec;
	    },
	    addType: function(tp) {
	      if (tp instanceof infer.Obj && this.created++ < 5) {
	        var derived = new infer.Obj(tp), spec = this.spec;
	        if (spec instanceof infer.AVal) spec = spec.getObjType(false);
	        if (spec instanceof infer.Obj) for (var prop in spec.props) {
	          var cur = spec.props[prop].types[0];
	          var p = derived.defProp(prop);
	          if (cur && cur instanceof infer.Obj && cur.props.value) {
	            var vtp = cur.props.value.getType(false);
	            if (vtp) p.addType(vtp);
	          }
	        }
	        this.target.addType(derived);
	      }
	    }
	  });
	
	  infer.registerFunction("Object_create", function(_self, args, argNodes) {
	    if (argNodes && argNodes.length && argNodes[0].type == "Literal" && argNodes[0].value == null)
	      return new infer.Obj();
	
	    var result = new infer.AVal;
	    if (args[0]) args[0].propagate(new IsCreated(0, result, args[1]));
	    return result;
	  });
	
	  var PropSpec = infer.constraint({
	    construct: function(target) { this.target = target; },
	    addType: function(tp) {
	      if (!(tp instanceof infer.Obj)) return;
	      if (tp.hasProp("value"))
	        tp.getProp("value").propagate(this.target);
	      else if (tp.hasProp("get"))
	        tp.getProp("get").propagate(new infer.IsCallee(infer.ANull, [], null, this.target));
	    }
	  });
	
	  infer.registerFunction("Object_defineProperty", function(_self, args, argNodes) {
	    if (argNodes && argNodes.length >= 3 && argNodes[1].type == "Literal" &&
	        typeof argNodes[1].value == "string") {
	      var obj = args[0], connect = new infer.AVal;
	      obj.propagate(new infer.PropHasSubset(argNodes[1].value, connect, argNodes[1]));
	      args[2].propagate(new PropSpec(connect));
	    }
	    return infer.ANull;
	  });
	
	  infer.registerFunction("Object_defineProperties", function(_self, args, argNodes) {
	    if (args.length >= 2) {
	      var obj = args[0];
	      args[1].forAllProps(function(prop, val, local) {
	        if (!local) return;
	        var connect = new infer.AVal;
	        obj.propagate(new infer.PropHasSubset(prop, connect, argNodes && argNodes[1]));
	        val.propagate(new PropSpec(connect));
	      });
	    }
	    return infer.ANull;
	  });
	
	  var IsBound = infer.constraint({
	    construct: function(self, args, target) {
	      this.self = self; this.args = args; this.target = target;
	    },
	    addType: function(tp) {
	      if (!(tp instanceof infer.Fn)) return;
	      this.target.addType(new infer.Fn(tp.name, infer.ANull, tp.args.slice(this.args.length),
	                                       tp.argNames.slice(this.args.length), tp.retval));
	      this.self.propagate(tp.self);
	      for (var i = 0; i < Math.min(tp.args.length, this.args.length); ++i)
	        this.args[i].propagate(tp.args[i]);
	    }
	  });
	
	  infer.registerFunction("Function_bind", function(self, args) {
	    if (!args.length) return infer.ANull;
	    var result = new infer.AVal;
	    self.propagate(new IsBound(args[0], args.slice(1), result));
	    return result;
	  });
	
	  infer.registerFunction("Array_ctor", function(_self, args) {
	    var arr = new infer.Arr;
	    if (args.length != 1 || !args[0].hasType(infer.cx().num)) {
	      var content = arr.getProp("<i>");
	      for (var i = 0; i < args.length; ++i) args[i].propagate(content);
	    }
	    return arr;
	  });
	
	  infer.registerFunction("Promise_ctor", function(_self, args, argNodes) {
	    if (args.length < 1) return infer.ANull;
	    var self = new infer.Obj(infer.cx().definitions.ecma6["Promise.prototype"]);
	    var valProp = self.defProp("value", argNodes && argNodes[0]);
	    var valArg = new infer.AVal;
	    valArg.propagate(valProp);
	    var exec = new infer.Fn("execute", infer.ANull, [valArg], ["value"], infer.ANull);
	    var reject = infer.cx().definitions.ecma6.promiseReject;
	    args[0].propagate(new infer.IsCallee(infer.ANull, [exec, reject], null, infer.ANull));
	    return self;
	  });
	
	  return exports;
	});


/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(root, mod) {
	  if (true) // CommonJS
	    return mod(exports);
	  if (true) // AMD
	    return !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports], __WEBPACK_AMD_DEFINE_FACTORY__ = (mod), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  mod((root.tern || (root.tern = {})).signal = {}); // Plain browser env
	})(this, function(exports) {
	  function on(type, f) {
	    var handlers = this._handlers || (this._handlers = Object.create(null));
	    (handlers[type] || (handlers[type] = [])).push(f);
	  }
	  function off(type, f) {
	    var arr = this._handlers && this._handlers[type];
	    if (arr) for (var i = 0; i < arr.length; ++i)
	      if (arr[i] == f) { arr.splice(i, 1); break; }
	  }
	  function signal(type, a1, a2, a3, a4) {
	    var arr = this._handlers && this._handlers[type];
	    if (arr) for (var i = 0; i < arr.length; ++i) arr[i].call(this, a1, a2, a3, a4);
	  }
	
	  exports.mixin = function(obj) {
	    obj.on = on; obj.off = off; obj.signal = signal;
	    return obj;
	  };
	});


/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*******************************************************************************
	 * @license
	 * Copyright (c) 2015 IBM Corporation and others.
	 * All rights reserved. This program and the accompanying materials are made 
	 * available under the terms of the Eclipse Public License v1.0 
	 * (http://www.eclipse.org/legal/epl-v10.html), and the Eclipse Distribution 
	 * License v1.0 (http://www.eclipse.org/org/documents/edl-v10.html). 
	 *
	 * Contributors:
	 *     IBM Corporation - initial API and implementation
	 *******************************************************************************/
	/*eslint-env amd*/
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
		
		/**
		 * @description Returns if the given character is upper case or not considering the locale
		 * @param {String} string A string of at least one char14acter
		 * @return {Boolean} True iff the first character of the given string is uppercase
		 */
		 function isUpperCase(string) {
			if (string.length < 1) {
			return false;
			}
			if (isNaN(string.charCodeAt(0))) {
				return false;
			}
			return string.toLocaleUpperCase().charAt(0) === string.charAt(0);
		}
		
		/**
		 * @description Match ignoring case and checking camel case.
		 * @param {String} prefix
		 * @param {String} target
		 * @returns {Boolean} If the two strings match
		 */
		function looselyMatches(prefix, target) {
			if (typeof prefix !== "string" || typeof target !== "string") {
				return false;
			}
	
			// Zero length string matches everything.
			if (prefix.length === 0) {
				return true;
			}
	
			// Exclude a bunch right away
			if (prefix.charAt(0).toLowerCase() !== target.charAt(0).toLowerCase()) {
				return false;
			}
	
			if (startsWith(target, prefix)) {
				return true;
			}
	
			var lowerCase = target.toLowerCase();
			if (startsWith(lowerCase, prefix)) {
				return true;
			}
			
			var _prefix = prefix.toLowerCase();
	
			var equalIndex = prefix.indexOf("=");
			if (equalIndex !== -1) {
				if (startsWith(target, prefix.substring(0, equalIndex))) {
					return true;
				}
			}
			// Test for camel characters in the prefix.
			if (prefix === _prefix) {
				return false;
			}
			//https://bugs.eclipse.org/bugs/show_bug.cgi?id=473777
			if(startsWith(lowerCase, _prefix)) {
				return true;
			}
			var prefixParts = toCamelCaseParts(prefix);
			var targetParts = toCamelCaseParts(target);
	
			if (prefixParts.length > targetParts.length) {
				return false;
			}
	
			for (var i = 0; i < prefixParts.length; ++i) {
				if (!startsWith(targetParts[i], prefixParts[i])) {
					return false;
				}
			}
	
			return true;
		}
		
		/**
		 * @description Returns if the string starts with the given prefix
		 * @param {String} s The string to check
		 * @param {String} pre The prefix 
		 * @returns {Boolean} True if the string starts with the prefix
		 */
		function startsWith(s, pre) {
			return s.slice(0, pre.length) === pre;
		}
		
		/**
		 * @description Convert an input string into parts delimited by upper case characters. Used for camel case matches.
		 * e.g. GroClaL = ['Gro','Cla','L'] to match say 'GroovyClassLoader'.
		 * e.g. mA = ['m','A']
		 * @function
		 * @public
		 * @param {String} str
		 * @return Array.<String>
		 */
		function toCamelCaseParts(str) {
			var parts = [];
			for (var i = str.length - 1; i >= 0; --i) {
				if (isUpperCase(str.charAt(i))) {
					parts.push(str.substring(i));
					str = str.substring(0, i);
				}
			}
			if (str.length !== 0) {
				parts.push(str);
			}
			return parts.reverse();
		}
		
		var emptyAST = {
			type: "Program", //$NON-NLS-0$
			body: [],
			comments: [],
			tokens: [],
			range: [0, 0],
			loc: {
				start: {},
				end: {}
			}
		};
		
		/**
		 * @description Creates a new empty AST for the fatal thrown error case
		 * @param {Object} error The fatal error thrown while trying to parse
		 * @param {String} name The name of the file we tried to parse
		 * @param {String} text The text we tried to parse
		 * @returns {Object} An empty AST with the fatal error attached in the errors array
		 * @since 11.0
		 */
		function errorAST(error, name, text) {
			var ast = emptyAST;
			ast.range[1] = typeof(text) === 'string' ? text.length : 0;
			ast.loc.start.line = error.lineNumber;
			ast.loc.start.column = 0;
			ast.loc.end.line = error.lineNumber;
			ast.loc.end.column = error.column;
			ast.errors = [error];
	        ast.sourceFile  = Object.create(null);
	        ast.sourceFile.text = text;
	        ast.sourceFile.name = name;
	        return ast;
		}
		
		/**
		 * @description Makes the errors from the given AST safe to transport (using postMessage for example)
		 * @param {Object} ast The AST to serialize errors for
		 * @returns {Array.<Object>} The searialized errors
		 * @since 11.0
		 */
		function serializeAstErrors(ast) {
			var errors = [];
			if(ast && ast.errors) {
				ast.errors.forEach(function(error) {
					var result = error ? JSON.parse(JSON.stringify(error)) : error; // sanitizing Error object
					if (error instanceof Error) {
						result.__isError = true;
						result.lineNumber = typeof(result.lineNumber) === 'number' ? result.lineNumber : error.lineNumber; //FF fails to include the line number from JSON.stringify
						result.message = result.message || error.message;
						result.name = result.name || error.name;
						result.stack = result.stack || error.stack;
					}
					var msg = error.message;
					result.message = msg = msg.replace(/^Line \d+: /, '');
					if(/^Unexpected/.test(msg)) {
						result.type = 1;
						if(/end of input$/.test(msg)) {
							result.type = 2;
						}
					}
					errors.push(result);
				});
			}
			return errors;
		}
	
		return {
			isUpperCase: isUpperCase,
			looselyMatches: looselyMatches,
			startsWith: startsWith,
			toCamelCaseParts: toCamelCaseParts,
			errorAST: errorAST,
			serializeAstErrors: serializeAstErrors
		};
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// The Tern server object
	
	// A server is a stateful object that manages the analysis for a
	// project, and defines an interface for querying the code in the
	// project.
	/* eslint-disable */
	(function(root, mod) {
	  if (true) // CommonJS
	    return mod(exports, __webpack_require__(3), __webpack_require__(7),
	               __webpack_require__(4), __webpack_require__(5));
	  if (true) // AMD
	    return !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports, __webpack_require__(3), __webpack_require__(7), __webpack_require__(4), __webpack_require__(5)], __WEBPACK_AMD_DEFINE_FACTORY__ = (mod), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  mod(root.tern || (root.tern = {}), tern, tern.signal, acorn, acorn.walk); // Plain browser env
	})(this, function(exports, infer, signal, acorn, walk) {
	  "use strict";
	
	  var plugins = Object.create(null);
	  exports.registerPlugin = function(name, init) { plugins[name] = init; };
	
	  var defaultOptions = exports.defaultOptions = {
	    debug: false,
	    async: false,
	    getFile: function(_f, c) { if (this.async) c(null, null); },
	    defs: [],
	    plugins: {},
	    fetchTimeout: 1000,
	    dependencyBudget: 20000,
	    reuseInstances: true,
	    stripCRs: false
	  };
	
	  var queryTypes = {
	    completions: {
	      takesFile: true,
	      run: findCompletions
	    },
	    properties: {
	      run: findProperties
	    },
	    type: {
	      takesFile: true,
	      run: findTypeAt
	    },
	    documentation: {
	      takesFile: true,
	      run: findDocs
	    },
	    definition: {
	      takesFile: true,
	      run: findDef
	    },
	    refs: {
	      takesFile: true,
	      fullFile: true,
	      run: findRefs
	    },
	    rename: {
	      takesFile: true,
	      fullFile: true,
	      run: buildRename
	    },
	    files: {
	      run: listFiles
	    }
	  };
	
	  exports.defineQueryType = function(name, desc) { queryTypes[name] = desc; };
	
	  function File(name, parent) {
	    this.name = name;
	    this.parent = parent;
	    this.scope = this.text = this.ast = this.lineOffsets = null;
	  }
	  File.prototype.asLineChar = function(pos) { return asLineChar(this, pos); };
	
	  function updateText(file, text, srv) {
	    file.text = srv.options.stripCRs ? text.replace(/\r\n/g, "\n") : text;
	    infer.withContext(srv.cx, function() {
	      file.ast = infer.parse(file.text, srv.passes, {directSourceFile: file, allowReturnOutsideFunction: true});
	    });
	    file.lineOffsets = null;
	  }
	
	  var Server = exports.Server = function(options) {
	    this.cx = null;
	    this.options = options || {};
	    for (var o in defaultOptions) if (!options.hasOwnProperty(o))
	      options[o] = defaultOptions[o];
	
	    this.handlers = Object.create(null);
	    this.files = [];
	    this.fileMap = Object.create(null);
	    this.needsPurge = [];
	    this.budgets = Object.create(null);
	    this.uses = 0;
	    this.pending = 0;
	    this.asyncError = null;
	    this.passes = Object.create(null);
	
	    this.defs = options.defs.slice(0);
	    for (var plugin in options.plugins) if (options.plugins.hasOwnProperty(plugin) && plugin in plugins) {
	      var init = plugins[plugin](this, options.plugins[plugin]);
	      if (init && init.defs) {
	        if (init.loadFirst) this.defs.unshift(init.defs);
	        else this.defs.push(init.defs);
	      }
	      if (init && init.passes) for (var type in init.passes) if (init.passes.hasOwnProperty(type))
	        (this.passes[type] || (this.passes[type] = [])).push(init.passes[type]);
	    }
	
	    this.reset();
	  };
	  Server.prototype = signal.mixin({
	    addFile: function(name, /*optional*/ text, parent) {
	      // Don't crash when sloppy plugins pass non-existent parent ids
	      if (parent && !(parent in this.fileMap)) parent = null;
	      ensureFile(this, name, parent, text);
	    },
	    delFile: function(name) {
	      var file = this.findFile(name);
	      if (file) {
	        this.needsPurge.push(file.name);
	        this.files.splice(this.files.indexOf(file), 1);
	        delete this.fileMap[name];
	      }
	    },
	    reset: function() {
	      this.signal("reset");
	      this.cx = new infer.Context(this.defs, this);
	      this.uses = 0;
	      this.budgets = Object.create(null);
	      for (var i = 0; i < this.files.length; ++i) {
	        var file = this.files[i];
	        file.scope = null;
	      }
	    },
	
	    request: function(doc, c) {
	      var inv = invalidDoc(doc);
	      if (inv) return c(inv);
	
	      var self = this;
	      doRequest(this, doc, function(err, data) {
	        c(err, data);
	        if (self.uses > 40000) {
	          self.reset();
	          analyzeAll(self, null, function(){});
	        }
	      });
	    },
	
	    findFile: function(name) {
	      return this.fileMap[name];
	    },
	
	    flush: function(c) {
	      var cx = this.cx;
	      analyzeAll(this, null, function(err) {
	        if (err) return c(err);
	        infer.withContext(cx, c);
	      });
	    },
	
	    startAsyncAction: function() {
	      ++this.pending;
	    },
	    finishAsyncAction: function(err) {
	      if (err) this.asyncError = err;
	      //ORION
	      if(this.pending > 0) {
	      	this.pending--;
	      }
	      if (this.pending === 0) this.signal("everythingFetched");
	    }
	  });
	
	  function doRequest(srv, doc, c) {
	    if (doc.query && !queryTypes.hasOwnProperty(doc.query.type))
	      return c("No query type '" + doc.query.type + "' defined");
	
	    var query = doc.query;
	    // Respond as soon as possible when this just uploads files
	    if (!query) c(null, {});
	
	    var files = doc.files || [];
	    if (files.length) ++srv.uses;
	    for (var i = 0; i < files.length; ++i) {
	      var file = files[i];
	      if (file.type == "delete")
	        srv.delFile(file.name);
	      else
	        ensureFile(srv, file.name, null, file.type == "full" ? file.text : null);
	    }
	
	    var timeBudget = typeof doc.timeout == "number" ? [doc.timeout] : null;
	    if (!query) {
	      analyzeAll(srv, timeBudget, function(){});
	      return;
	    }
	
	    var queryType = queryTypes[query.type];
	    if (queryType.takesFile) {
	      if (typeof query.file != "string") return c(".query.file must be a string");
	      if (!/^#/.test(query.file)) ensureFile(srv, query.file, null);
	    }
	
	    analyzeAll(srv, timeBudget, function(err) {
	      if (err) return c(err);
	      var file = queryType.takesFile && resolveFile(srv, files, query.file);
	      if (queryType.fullFile && file.type == "part")
	        return c("Can't run a " + query.type + " query on a file fragment");
	
	      function run() {
	        var result;
	        try {
	          result = queryType.run(srv, query, file);
	        } catch (e) {
	          if (srv.options.debug && e.name != "TernError") console.error(e.stack);
	          return c(e);
	        }
	        c(null, result);
	      }
	      infer.withContext(srv.cx, timeBudget ? function() { infer.withTimeout(timeBudget[0], run); } : run);
	    });
	  }
	
	  function analyzeFile(srv, file) {
	    infer.withContext(srv.cx, function() {
	      file.scope = srv.cx.topScope;
	      srv.signal("beforeLoad", file);
	      infer.analyze(file.ast, file.name, file.scope, srv.passes);
	      srv.signal("afterLoad", file);
	    });
	    return file;
	  }
	
	  function ensureFile(srv, name, parent, text) {
	    var known = srv.findFile(name);
	    if (known) {
	      if (text != null) {
	        if (known.scope) {
	          srv.needsPurge.push(name);
	          known.scope = null;
	        }
	        updateText(known, text, srv);
	      }
	      if (parentDepth(srv, known.parent) > parentDepth(srv, parent)) {
	        known.parent = parent;
	        if (known.excluded) known.excluded = null;
	      } else if(!known.parent) {
	      	known.parent = parent; //ORION - if no parent assign it
	      }
	      return;
	    }
	
	    var file = new File(name, parent);
	    srv.files.push(file);
	    srv.fileMap[name] = file;
	    if (text != null) {
	      updateText(file, text, srv);
	    } else if (srv.options.async) {
	      srv.startAsyncAction();
	      srv.options.getFile(name, function(err, text) {
	        updateText(file, text || "", srv);
	        srv.finishAsyncAction(err);
	      });
	    } else {
	      updateText(file, srv.options.getFile(name) || "", srv);
	    }
	  }
	
	  function fetchAll(srv, c) {
	    var done = true, returned = false;
	    srv.files.forEach(function(file) {
	      if (file.text != null) return;
	      if (srv.options.async) {
	        done = false;
	        srv.options.getFile(file.name, function(err, text) {
	          if (err && !returned) { returned = true; return c(err); }
	          updateText(file, text || "", srv);
	          fetchAll(srv, c);
	        });
	      } else {
	        try {
	          updateText(file, srv.options.getFile(file.name) || "", srv);
	        } catch (e) { return c(e); }
	      }
	    });
	    if (done) c();
	  }
	
	  function waitOnFetch(srv, timeBudget, c) {
	    var done = function() {
	      srv.off("everythingFetched", done);
	      clearTimeout(timeout);
	      analyzeAll(srv, timeBudget, c);
	    };
	    srv.on("everythingFetched", done);
	    var timeout = setTimeout(done, srv.options.fetchTimeout);
	  }
	
	  function analyzeAll(srv, timeBudget, c) {
	    if (srv.pending) return waitOnFetch(srv, timeBudget, c);
	
	    var e = srv.fetchError;
	    if (e) { srv.fetchError = null; return c(e); }
	
	    if (srv.needsPurge.length > 0) infer.withContext(srv.cx, function() {
	      infer.purge(srv.needsPurge);
	      srv.needsPurge.length = 0;
	    });
	
	    var done = true;
	    // The second inner loop might add new files. The outer loop keeps
	    // repeating both inner loops until all files have been looked at.
	    for (var i = 0; i < srv.files.length;) {
	      var toAnalyze = [];
	      for (; i < srv.files.length; ++i) {
	        var file = srv.files[i];
	        if (file.text == null) done = false;
	        else if (file.scope == null && !file.excluded) toAnalyze.push(file);
	      }
	      toAnalyze.sort(function(a, b) {
	        return parentDepth(srv, a.parent) - parentDepth(srv, b.parent);
	      });
	      for (var j = 0; j < toAnalyze.length; j++) {
	        var file = toAnalyze[j];
	        if (file.parent && !chargeOnBudget(srv, file)) {
	          file.excluded = true;
	        } else if (timeBudget) {
	          var startTime = +new Date;
	          infer.withTimeout(timeBudget[0], function() { analyzeFile(srv, file); });
	          timeBudget[0] -= +new Date - startTime;
	        } else {
	          analyzeFile(srv, file);
	        }
	      }
	    }
	    if (done) c();
	    else waitOnFetch(srv, timeBudget, c);
	  }
	
	  function firstLine(str) {
	    var end = str.indexOf("\n");
	    if (end < 0) return str;
	    return str.slice(0, end);
	  }
	
	  function findMatchingPosition(line, file, near) {
	    var pos = Math.max(0, near - 500), closest = null;
	    if (!/^\s*$/.test(line)) for (;;) {
	      var found = file.indexOf(line, pos);
	      if (found < 0 || found > near + 500) break;
	      if (closest == null || Math.abs(closest - near) > Math.abs(found - near))
	        closest = found;
	      pos = found + line.length;
	    }
	    return closest;
	  }
	
	  function scopeDepth(s) {
	    for (var i = 0; s; ++i, s = s.prev) {}
	    return i;
	  }
	
	  function ternError(msg) {
	    var err = new Error(msg);
	    err.name = "TernError";
	    return err;
	  }
	
	  function resolveFile(srv, localFiles, name) {
	    var isRef = name.match(/^#(\d+)$/);
	    if (!isRef) return srv.findFile(name);
	
	    var file = localFiles[isRef[1]];
	    if (!file || file.type == "delete") throw ternError("Reference to unknown file " + name);
	    if (file.type == "full") return srv.findFile(file.name);
	
	    // This is a partial file
	
	    var realFile = file.backing = srv.findFile(file.name);
	    var offset = file.offset;
	    if (file.offsetLines) offset = {line: file.offsetLines, ch: 0};
	    file.offset = offset = resolvePos(realFile, file.offsetLines == null ? file.offset : {line: file.offsetLines, ch: 0}, true);
	    var line = firstLine(file.text);
	    var foundPos = findMatchingPosition(line, realFile.text, offset);
	    var pos = foundPos == null ? Math.max(0, realFile.text.lastIndexOf("\n", offset)) : foundPos;
	    var inObject, atFunction;
	
	    infer.withContext(srv.cx, function() {
	      infer.purge(file.name, pos, pos + file.text.length);
	
	      var text = file.text, m;
	      if (m = text.match(/(?:"([^"]*)"|([\w$]+))\s*:\s*function\b/)) {
	        var objNode = walk.findNodeAround(file.backing.ast, pos, "ObjectExpression");
	        if (objNode && objNode.node.objType)
	          inObject = {type: objNode.node.objType, prop: m[2] || m[1]};
	      }
	      if (foundPos && (m = line.match(/^(.*?)\bfunction\b/))) {
	        var cut = m[1].length, white = "";
	        for (var i = 0; i < cut; ++i) white += " ";
	        text = white + text.slice(cut);
	        atFunction = true;
	      }
	
	      var scopeStart = infer.scopeAt(realFile.ast, pos, realFile.scope);
	      var scopeEnd = infer.scopeAt(realFile.ast, pos + text.length, realFile.scope);
	      var scope = file.scope = scopeDepth(scopeStart) < scopeDepth(scopeEnd) ? scopeEnd : scopeStart;
	      file.ast = infer.parse(text, srv.passes, {directSourceFile: file, allowReturnOutsideFunction: true});
	      infer.analyze(file.ast, file.name, scope, srv.passes);
	
	      // This is a kludge to tie together the function types (if any)
	      // outside and inside of the fragment, so that arguments and
	      // return values have some information known about them.
	      tieTogether: if (inObject || atFunction) {
	        var newInner = infer.scopeAt(file.ast, line.length, scopeStart);
	        if (!newInner.fnType) break tieTogether;
	        if (inObject) {
	          var prop = inObject.type.getProp(inObject.prop);
	          prop.addType(newInner.fnType);
	        } else if (atFunction) {
	          var inner = infer.scopeAt(realFile.ast, pos + line.length, realFile.scope);
	          if (inner == scopeStart || !inner.fnType) break tieTogether;
	          var fOld = inner.fnType, fNew = newInner.fnType;
	          if (!fNew || (fNew.name != fOld.name && fOld.name)) break tieTogether;
	          for (var i = 0, e = Math.min(fOld.args.length, fNew.args.length); i < e; ++i)
	            fOld.args[i].propagate(fNew.args[i]);
	          fOld.self.propagate(fNew.self);
	          fNew.retval.propagate(fOld.retval);
	        }
	      }
	    });
	    return file;
	  }
	
	  // Budget management
	
	  function astSize(node) {
	    var size = 0;
	    walk.simple(node, {Expression: function() { ++size; }});
	    return size;
	  }
	
	  function parentDepth(srv, parent) {
	    var depth = 0;
	    while (parent) {
	      parent = srv.findFile(parent).parent;
	      ++depth;
	    }
	    return depth;
	  }
	
	  function budgetName(srv, file) {
	    for (;;) {
	      var parent = srv.findFile(file.parent);
	      if (!parent.parent) break;
	      file = parent;
	    }
	    return file.name;
	  }
	
	  function chargeOnBudget(srv, file) {
	    var bName = budgetName(srv, file);
	    var size = astSize(file.ast);
	    var known = srv.budgets[bName];
	    if (known == null)
	      known = srv.budgets[bName] = srv.options.dependencyBudget;
	    if (known < size) return false;
	    srv.budgets[bName] = known - size;
	    return true;
	  }
	
	  // Query helpers
	
	  function isPosition(val) {
	    return typeof val == "number" || typeof val == "object" &&
	      typeof val.line == "number" && typeof val.ch == "number";
	  }
	
	  // Baseline query document validation
	  function invalidDoc(doc) {
	    if (doc.query) {
	      if (typeof doc.query.type != "string") return ".query.type must be a string";
	      if (doc.query.start && !isPosition(doc.query.start)) return ".query.start must be a position";
	      if (doc.query.end && !isPosition(doc.query.end)) return ".query.end must be a position";
	    }
	    if (doc.files) {
	      if (!Array.isArray(doc.files)) return "Files property must be an array";
	      for (var i = 0; i < doc.files.length; ++i) {
	        var file = doc.files[i];
	        if (typeof file != "object") return ".files[n] must be objects";
	        else if (typeof file.name != "string") return ".files[n].name must be a string";
	        else if (file.type == "delete") continue;
	        else if (typeof file.text != "string") return ".files[n].text must be a string";
	        else if (file.type == "part") {
	          if (!isPosition(file.offset) && typeof file.offsetLines != "number")
	            return ".files[n].offset must be a position";
	        } else if (file.type != "full") return ".files[n].type must be \"full\" or \"part\"";
	      }
	    }
	  }
	
	  var offsetSkipLines = 25;
	
	  function findLineStart(file, line) {
	    var text = file.text, offsets = file.lineOffsets || (file.lineOffsets = [0]);
	    var pos = 0, curLine = 0;
	    var storePos = Math.min(Math.floor(line / offsetSkipLines), offsets.length - 1);
	    var pos = offsets[storePos], curLine = storePos * offsetSkipLines;
	
	    while (curLine < line) {
	      ++curLine;
	      pos = text.indexOf("\n", pos) + 1;
	      if (pos === 0) return null;
	      if (curLine % offsetSkipLines === 0) offsets.push(pos);
	    }
	    return pos;
	  }
	
	  var resolvePos = exports.resolvePos = function(file, pos, tolerant) {
	    if (typeof pos != "number") {
	      var lineStart = findLineStart(file, pos.line);
	      if (lineStart == null) {
	        if (tolerant) pos = file.text.length;
	        else throw ternError("File doesn't contain a line " + pos.line);
	      } else {
	        pos = lineStart + pos.ch;
	      }
	    }
	    if (pos > file.text.length) {
	      if (tolerant) pos = file.text.length;
	      else throw ternError("Position " + pos + " is outside of file.");
	    }
	    return pos;
	  };
	
	  function asLineChar(file, pos) {
	    if (!file) return {line: 0, ch: 0};
	    var offsets = file.lineOffsets || (file.lineOffsets = [0]);
	    var text = file.text, line, lineStart;
	    for (var i = offsets.length - 1; i >= 0; --i) if (offsets[i] <= pos) {
	      line = i * offsetSkipLines;
	      lineStart = offsets[i];
	    }
	    for (;;) {
	      var eol = text.indexOf("\n", lineStart);
	      if (eol >= pos || eol < 0) break;
	      lineStart = eol + 1;
	      ++line;
	    }
	    return {line: line, ch: pos - lineStart};
	  }
	
	  var outputPos = exports.outputPos = function(query, file, pos) {
	    if (query.lineCharPositions) {
	      var out = asLineChar(file, pos);
	      if (file.type == "part")
	        out.line += file.offsetLines != null ? file.offsetLines : asLineChar(file.backing, file.offset).line;
	      return out;
	    } else {
	      return pos + (file.type == "part" ? file.offset : 0);
	    }
	  };
	
	  // Delete empty fields from result objects
	  function clean(obj) {
	    for (var prop in obj) if (obj[prop] == null) delete obj[prop];
	    return obj;
	  }
	  function maybeSet(obj, prop, val) {
	    if (val != null) obj[prop] = val;
	  }
	
	  // Built-in query types
	
	  function compareCompletions(a, b) {
	    if (typeof a != "string") { a = a.name; b = b.name; }
	    var aUp = /^[A-Z]/.test(a), bUp = /^[A-Z]/.test(b);
	    if (aUp == bUp) return a < b ? -1 : a == b ? 0 : 1;
	    else return aUp ? 1 : -1;
	  }
	
	  function isStringAround(node, start, end) {
	    return node.type == "Literal" && typeof node.value == "string" &&
	      node.start == start - 1 && node.end <= end + 1;
	  }
	
	  function pointInProp(objNode, point) {
	    for (var i = 0; i < objNode.properties.length; i++) {
	      var curProp = objNode.properties[i];
	      if (curProp.key.start <= point && curProp.key.end >= point)
	        return curProp;
	    }
	  }
	
	  var jsKeywords = ("break do instanceof typeof case else new var " +
	    "catch finally return void continue for switch while debugger " +
	    "function this with default if throw delete in try").split(" ");
	
	  function findCompletions(srv, query, file) {
	    if (query.end == null) throw ternError("missing .query.end field");
	    if (srv.passes.completion) for (var i = 0; i < srv.passes.completion.length; i++) {
	      var result = srv.passes.completion[i](file, query);
	      if (result) return result;
	    }
	
	    var wordStart = resolvePos(file, query.end), wordEnd = wordStart, text = file.text;
	    while (wordStart && acorn.isIdentifierChar(text.charCodeAt(wordStart - 1))) --wordStart;
	    if (query.expandWordForward !== false)
	      while (wordEnd < text.length && acorn.isIdentifierChar(text.charCodeAt(wordEnd))) ++wordEnd;
	    var word = text.slice(wordStart, wordEnd), completions = [], ignoreObj;
	    if (query.caseInsensitive) word = word.toLowerCase();
	    var wrapAsObjs = query.types || query.depths || query.docs || query.urls || query.origins;
	
	    function gather(prop, obj, depth, addInfo) {
	      // 'hasOwnProperty' and such are usually just noise, leave them
	      // out when no prefix is provided.
	      if ((objLit || query.omitObjectPrototype !== false) && obj == srv.cx.protos.Object && !word) return;
	      if (query.filter !== false && word &&
	          (query.caseInsensitive ? prop.toLowerCase() : prop).indexOf(word) !== 0) return;
	      if (ignoreObj && ignoreObj.props[prop]) return;
	      for (var i = 0; i < completions.length; ++i) {
	        var c = completions[i];
	        if ((wrapAsObjs ? c.name : c) == prop) return;
	      }
	      var rec = wrapAsObjs ? {name: prop} : prop;
	      completions.push(rec);
	
	      if (obj && (query.types || query.docs || query.urls || query.origins)) {
	        var val = obj.props[prop];
	        infer.resetGuessing();
	        var type = val.getType();
	        rec.guess = infer.didGuess();
	        if (query.types)
	          rec.type = infer.toString(val);
	        if (query.docs)
	          maybeSet(rec, "doc", parseDoc(query, val.doc || type && type.doc));
	        if (query.urls)
	          maybeSet(rec, "url", val.url || type && type.url);
	        if (query.origins)
	          maybeSet(rec, "origin", val.origin || type && type.origin);
	      }
	      if (query.depths) rec.depth = depth;
	      if (wrapAsObjs && addInfo) addInfo(rec);
	    }
	
	    var hookname, prop, objType, isKey;
	
	    var exprAt = infer.findExpressionAround(file.ast, null, wordStart, file.scope);
	    var memberExpr, objLit;
	    // Decide whether this is an object property, either in a member
	    // expression or an object literal.
	    if (exprAt) {
	      if (exprAt.node.type == "MemberExpression" && exprAt.node.object.end < wordStart) {
	        memberExpr = exprAt;
	      } else if (isStringAround(exprAt.node, wordStart, wordEnd)) {
	        var parent = infer.parentNode(exprAt.node, file.ast);
	        if (parent.type == "MemberExpression" && parent.property == exprAt.node)
	          memberExpr = {node: parent, state: exprAt.state};
	      } else if (exprAt.node.type == "ObjectExpression") {
	        var objProp = pointInProp(exprAt.node, wordEnd);
	        if (objProp) {
	          objLit = exprAt;
	          prop = isKey = objProp.key.name;
	        } else if (!word && !/:\s*$/.test(file.text.slice(0, wordStart))) {
	          objLit = exprAt;
	          prop = isKey = true;
	        }
	      }
	    }
	
	    if (objLit) {
	      // Since we can't use the type of the literal itself to complete
	      // its properties (it doesn't contain the information we need),
	      // we have to try asking the surrounding expression for type info.
	      objType = infer.typeFromContext(file.ast, objLit);
	      ignoreObj = objLit.node.objType;
	    } else if (memberExpr) {
	      prop = memberExpr.node.property;
	      prop = prop.type == "Literal" ? prop.value.slice(1) : prop.name;
	      memberExpr.node = memberExpr.node.object;
	      objType = infer.expressionType(memberExpr);
	    } else if (text.charAt(wordStart - 1) == ".") {
	      var pathStart = wordStart - 1;
	      while (pathStart && (text.charAt(pathStart - 1) == "." || acorn.isIdentifierChar(text.charCodeAt(pathStart - 1)))) pathStart--;
	      var path = text.slice(pathStart, wordStart - 1);
	      if (path) {
	        objType = infer.def.parsePath(path, file.scope).getObjType();
	        prop = word;
	      }
	    }
	
	    if (prop != null) {
	      srv.cx.completingProperty = prop;
	
	      if (objType) infer.forAllPropertiesOf(objType, gather);
	
	      if (!completions.length && query.guess !== false && objType && objType.guessProperties)
	        objType.guessProperties(function(p, o, d) {if (p != prop && p != "✖") gather(p, o, d);});
	      if (!completions.length && word.length >= 2 && query.guess !== false)
	        for (var prop in srv.cx.props) gather(prop, srv.cx.props[prop][0], 0);
	      hookname = "memberCompletion";
	    } else {
	      infer.forAllLocalsAt(file.ast, wordStart, file.scope, gather);
	      if (query.includeKeywords) jsKeywords.forEach(function(kw) {
	        gather(kw, null, 0, function(rec) { rec.isKeyword = true; });
	      });
	      hookname = "variableCompletion";
	    }
	    if (query.sort !== false) completions.sort(compareCompletions);
	    srv.cx.completingProperty = null;
	
	    return {start: outputPos(query, file, wordStart),
	            end: outputPos(query, file, wordEnd),
	            isProperty: !!prop,
	            isObjectKey: !!isKey,
	            completions: completions};
	  }
	
	  function findProperties(srv, query) {
	    var prefix = query.prefix, found = [];
	    for (var prop in srv.cx.props)
	      if (prop != "<i>" && (!prefix || prop.indexOf(prefix) === 0)) found.push(prop);
	    if (query.sort !== false) found.sort(compareCompletions);
	    return {completions: found};
	  }
	
	  var findExpr = exports.findQueryExpr = function(file, query, wide) {
	    if (query.end == null) throw ternError("missing .query.end field");
	
	    if (query.variable) {
	      var scope = infer.scopeAt(file.ast, resolvePos(file, query.end), file.scope);
	      return {node: {type: "Identifier", name: query.variable, start: query.end, end: query.end + 1},
	              state: scope};
	    } else {
	      var start = query.start && resolvePos(file, query.start), end = resolvePos(file, query.end);
	      var expr = infer.findExpressionAt(file.ast, start, end, file.scope);
	      if (expr) return expr;
	      expr = infer.findExpressionAround(file.ast, start, end, file.scope);
	      if (expr && (expr.node.type == "ObjectExpression" || wide ||
	                   (start == null ? end : start) - expr.node.start < 20 || expr.node.end - end < 20))
	        return expr;
	      return null;
	    }
	  };
	
	  function findExprOrThrow(file, query, wide) {
	    var expr = findExpr(file, query, wide);
	    if (expr) return expr;
	    throw ternError("No expression at the given position.");
	  }
	
	  function ensureObj(tp) {
	    if (!tp || !(tp = tp.getType()) || !(tp instanceof infer.Obj)) return null;
	    return tp;
	  }
	
	  function findExprType(srv, query, file, expr) {
	    var type;
	    if (expr) {
	      infer.resetGuessing();
	      type = infer.expressionType(expr);
	    }
	    if (srv.passes["typeAt"]) {
	      var pos = resolvePos(file, query.end);
	      srv.passes["typeAt"].forEach(function(hook) {
	        type = hook(file, pos, expr, type);
	      });
	    }
	    if (!type) throw ternError("No type found at the given position.");
	
	    var objProp;
	    if (expr.node.type == "ObjectExpression" && query.end != null &&
	        (objProp = pointInProp(expr.node, resolvePos(file, query.end)))) {
	      var name = objProp.key.name;
	      var fromCx = ensureObj(infer.typeFromContext(file.ast, expr));
	      if (fromCx && fromCx.hasProp(name)) {
	        type = fromCx.hasProp(name);
	      } else {
	        var fromLocal = ensureObj(type);
	        if (fromLocal && fromLocal.hasProp(name))
	          type = fromLocal.hasProp(name);
	      }
	    }
	    return type;
	  };
	
	  function findTypeAt(srv, query, file) {
	    var expr = findExpr(file, query), exprName;
	    var type = findExprType(srv, query, file, expr), exprType = type;
	    if (query.preferFunction)
	      type = type.getFunctionType() || type.getType();
	    else
	      type = type.getType();
	
	    if (expr) {
	      if (expr.node.type == "Identifier")
	        exprName = expr.node.name;
	      else if (expr.node.type == "MemberExpression" && !expr.node.computed)
	        exprName = expr.node.property.name;
	    }
	
	    if (query.depth != null && typeof query.depth != "number")
	      throw ternError(".query.depth must be a number");
	
	    var result = {guess: infer.didGuess(),
	                  type: infer.toString(exprType, query.depth),
	                  name: type && type.name,
	                  exprName: exprName};
	    if (type) storeTypeDocs(query, type, result);
	    if (!result.doc && exprType.doc) result.doc = parseDoc(query, exprType.doc);
	
	    return clean(result);
	  }
	
	  function parseDoc(query, doc) {
	    if (!doc) return null;
	    if (query.docFormat == "full") return doc;
	    var parabreak = /.\n[\s@\n]/.exec(doc);
	    if (parabreak) doc = doc.slice(0, parabreak.index + 1);
	    doc = doc.replace(/\n\s*/g, " ");
	    if (doc.length < 100) return doc;
	    var sentenceEnd = /[\.!?] [A-Z]/g;
	    sentenceEnd.lastIndex = 80;
	    var found = sentenceEnd.exec(doc);
	    if (found) doc = doc.slice(0, found.index + 1);
	    return doc;
	  }
	
	  function findDocs(srv, query, file) {
	    var expr = findExpr(file, query);
	    var type = findExprType(srv, query, file, expr);
	    var result = {url: type.url, doc: parseDoc(query, type.doc), type: infer.toString(type)};
	    var inner = type.getType();
	    if (inner) storeTypeDocs(query, inner, result);
	    return clean(result);
	  }
	
	  function storeTypeDocs(query, type, out) {
	    if (!out.url) out.url = type.url;
	    if (!out.doc) out.doc = parseDoc(query, type.doc);
	    if (!out.origin) out.origin = type.origin;
	    var ctor, boring = infer.cx().protos;
	    if (!out.url && !out.doc && type.proto && (ctor = type.proto.hasCtor) &&
	        type.proto != boring.Object && type.proto != boring.Function && type.proto != boring.Array) {
	      out.url = ctor.url;
	      out.doc = parseDoc(query, ctor.doc);
	    }
	  }
	
	  var getSpan = exports.getSpan = function(obj) {
	    if (!obj.origin) return;
	    if (obj.originNode) {
	      var node = obj.originNode;
	      if (/^Function/.test(node.type) && node.id) node = node.id;
	      return {origin: obj.origin, node: node};
	    }
	    if (obj.span) return {origin: obj.origin, span: obj.span};
	  };
	
	  var storeSpan = exports.storeSpan = function(srv, query, span, target) {
	    target.origin = span.origin;
	    if (span.span) {
	      var m = /^(\d+)\[(\d+):(\d+)\]-(\d+)\[(\d+):(\d+)\]$/.exec(span.span);
	      target.start = query.lineCharPositions ? {line: Number(m[2]), ch: Number(m[3])} : Number(m[1]);
	      target.end = query.lineCharPositions ? {line: Number(m[5]), ch: Number(m[6])} : Number(m[4]);
	    } else {
	      var file = srv.findFile(span.origin);
	      target.start = outputPos(query, file, span.node.start);
	      target.end = outputPos(query, file, span.node.end);
	    }
	  };
	
		function findDef(srv, query, file) {
		    var expr = findExpr(file, query);
		    var type = findExprType(srv, query, file, expr);
		    if (infer.didGuess() && !query.guess) return {}; //ORION
		    
		    //ORION
		    var result = getResult(type, srv, query);
		    if (infer.didGuess()) {
		    	   if (type.potentialMatches) {
		    	      var temp = [];
		    	      for (var i = 0; i < type.potentialMatches.length; i++) {
					temp.push(getResult(type.potentialMatches[i], srv, query));
		    	      }
		    	      result.results = temp;
		    	   }
		    	}
		    	return result;
	    	};
	    	
	    	function getResult(type, srv, query) {
	    		//ORION
		    var span = getSpan(type);
		    var result = {url: type.url, doc: parseDoc(query, type.doc), origin: type.origin, guess: infer.didGuess()}; //ORION
		
		    if (type.types) for (var i = type.types.length - 1; i >= 0; --i) {
		      var tp = type.types[i];
		      storeTypeDocs(query, tp, result);
		      if (!span) span = getSpan(tp);
		    }
		
		    if (span && span.node) { // refers to a loaded file
		      var spanFile = span.node.sourceFile || srv.findFile(span.origin);
		      var start = outputPos(query, spanFile, span.node.start), end = outputPos(query, spanFile, span.node.end);
		      result.start = start; result.end = end;
		      result.file = span.origin;
		      var cxStart = Math.max(0, span.node.start - 50);
		      result.contextOffset = span.node.start - cxStart;
		      result.context = spanFile.text.slice(cxStart, cxStart + 50);
		    } else if (span) { // external
		      result.file = span.origin;
		      storeSpan(srv, query, span, result);
		    }
		    return clean(result);
		}
	
	  function findRefsToVariable(srv, query, file, expr, checkShadowing) {
	    var name = expr.node.name;
	
	    for (var scope = expr.state; scope && !(name in scope.props); scope = scope.prev) {}
	    if (!scope) throw ternError("Could not find a definition for " + name + " " + !!srv.cx.topScope.props.x);
	
	    var type, refs = [];
	    function storeRef(file) {
	      return function(node, scopeHere) {
	        if (checkShadowing) for (var s = scopeHere; s != scope; s = s.prev) {
	          var exists = s.hasProp(checkShadowing);
	          if (exists)
	            throw ternError("Renaming `" + name + "` to `" + checkShadowing + "` would make a variable at line " +
	                            (asLineChar(file, node.start).line + 1) + " point to the definition at line " +
	                            (asLineChar(file, exists.name.start).line + 1));
	        }
	        refs.push({file: file.name,
	                   start: outputPos(query, file, node.start),
	                   end: outputPos(query, file, node.end)});
	      };
	    }
	
	    if (scope.originNode) {
	      type = "local";
	      if (checkShadowing) {
	        for (var prev = scope.prev; prev; prev = prev.prev)
	          if (checkShadowing in prev.props) break;
	        if (prev) infer.findRefs(scope.originNode, scope, checkShadowing, prev, function(node) {
	          throw ternError("Renaming `" + name + "` to `" + checkShadowing + "` would shadow the definition used at line " +
	                          (asLineChar(file, node.start).line + 1));
	        });
	      }
	      infer.findRefs(scope.originNode, scope, name, scope, storeRef(file));
	    } else {
	      type = "global";
	      for (var i = 0; i < srv.files.length; ++i) {
	        var cur = srv.files[i];
	        infer.findRefs(cur.ast, cur.scope, name, scope, storeRef(cur));
	      }
	    }
	
	    return {refs: refs, type: type, name: name};
	  }
	
	  function findRefsToProperty(srv, query, expr, prop) {
	    var objType = infer.expressionType(expr).getObjType();
	    if (!objType) throw ternError("Couldn't determine type of base object.");
	
	    var refs = [];
	    function storeRef(file) {
	      return function(node) {
	        refs.push({file: file.name,
	                   start: outputPos(query, file, node.start),
	                   end: outputPos(query, file, node.end)});
	      };
	    }
	    for (var i = 0; i < srv.files.length; ++i) {
	      var cur = srv.files[i];
	      infer.findPropRefs(cur.ast, cur.scope, objType, prop.name, storeRef(cur));
	    }
	
	    return {refs: refs, name: prop.name};
	  }
	
	  function findRefs(srv, query, file) {
	    var expr = findExprOrThrow(file, query, true);
	    if (expr && expr.node.type == "Identifier") {
	      return findRefsToVariable(srv, query, file, expr);
	    } else if (expr && expr.node.type == "MemberExpression" && !expr.node.computed) {
	      var p = expr.node.property;
	      expr.node = expr.node.object;
	      return findRefsToProperty(srv, query, expr, p);
	    } else if (expr && expr.node.type == "ObjectExpression") {
	      var pos = resolvePos(file, query.end);
	      for (var i = 0; i < expr.node.properties.length; ++i) {
	        var k = expr.node.properties[i].key;
	        if (k.start <= pos && k.end >= pos)
	          return findRefsToProperty(srv, query, expr, k);
	      }
	    }
	    throw ternError("Not at a variable or property name.");
	  }
	
	  function buildRename(srv, query, file) {
	    if (typeof query.newName != "string") throw ternError(".query.newName should be a string");
	    var expr = findExprOrThrow(file, query);
	    if (!expr || expr.node.type != "Identifier") throw ternError("Not at a variable.");
	
	    var data = findRefsToVariable(srv, query, file, expr, query.newName), refs = data.refs;
	    delete data.refs;
	    data.files = srv.files.map(function(f){return f.name;});
	
	    var changes = data.changes = [];
	    for (var i = 0; i < refs.length; ++i) {
	      var use = refs[i];
	      use.text = query.newName;
	      changes.push(use);
	    }
	
	    return data;
	  }
	
	  function listFiles(srv) {
	    return {files: srv.files.map(function(f){return f.name;})};
	  }
	
	  exports.version = "0.12.0";
	  exports.findDef = findDef; //ORION
	  exports.findExpr = findExpr; //ORION
	  exports.findExprType = findExprType; //ORION
	  exports.resolveFile = resolveFile; //ORION
	  exports.storeTypeDocs = storeTypeDocs; //ORION
	  exports.parseDoc = parseDoc; //ORION
	  exports.findRefs = findRefs; // ORION
	  exports.findRefsToProperty = findRefsToProperty; // ORION
	  exports.findRefsToVariable = findRefsToVariable; // ORION
	  exports.ternError = ternError; // ORION
	});


/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*******************************************************************************
	 * @license
	 * Copyright (c) 2015 IBM Corporation and others.
	 * All rights reserved. This program and the accompanying materials are made 
	 * available under the terms of the Eclipse Public License v1.0 
	 * (http://www.eclipse.org/legal/epl-v10.html), and the Eclipse Distribution 
	 * License v1.0 (http://www.eclipse.org/org/documents/edl-v10.html). 
	 *
	 * Contributors:
	 *     IBM Corporation - initial API and implementation
	 *******************************************************************************/
	/*eslint-env amd, browser*/
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
		__webpack_require__(11)
	], __WEBPACK_AMD_DEFINE_RESULT__ = function(mTemplates) {
		
		var _resolved = Object.create(null);
		
		/**
		 * @description Resolves the computed dependencies
		 * @param {TernServer} server The Tern server
		 * @param {String} loc The original file context location (from the AST)
		 * @since 9.0
		 */
		function resolveDependencies(server, loc) {
		    var keys = Object.keys(_resolved);
		    for (var i = 0; i < keys.length; i++) {
		        var key = keys[i];
		        var dep = _resolved[key];
		        //we will try again for a timed out read
		        if (dep && (dep.pending || dep.file)) {
		      	  continue;
		        }
		  		resolve(server, key, loc);
			}
		}
		
		/**
		 * @description Resolves the given key (logical name) via the server. This function starts an asynchronous job to resolve the
		 * script via the scriptResolver in the client
		 * @param {TernServer} server The server
		 * @param {String} key The logcial name to resolve
		 * @param {String} loc The original file context location (from the AST)
		 * @since 9.0
		 */
		function resolve(server, key, loc) {
			if(_resolved[key].pending || _resolved[key].err) {
				//if we are waiting don't fire of another request
				return;
			}
			var resetPending = function(key) {
				clearTimeout(_resolved[key].timeout);
				_resolved[key].file = null;
				_resolved[key].contents = '';
				_resolved[key].err = "Read operation timed out."; //$NON-NLS-1$
				delete _resolved[key].pending;
				server.finishAsyncAction(_resolved[key].err);
			};
	  		server.startAsyncAction();
	  		_resolved[key].pending = true;
	  		_resolved[key].timeout = setTimeout(resetPending, 4000, key);
			server.options.getFile({logical: key, file: loc}, function(err, _file) {
				clearTimeout(_resolved[key].timeout);
				_resolved[key].file = _file.file;
		   		_resolved[key].contents = typeof _file.contents === 'string' ? _file.contents : '';
		   		_resolved[key].logical = _file.logical;
		   		_resolved[key].err = err;
		   		delete _resolved[key].pending;
		   		server.finishAsyncAction(err);
			});
		}
		
		/**
		 * @description Callback to cycle waiting for async jobs to finish
		 * @param {TernServer} server The server
		 */
		function waitOnResolve(server) {
	    	var done = function() {
	      		clearTimeout(timeout);
	      		doPreInfer(server);
	    	};
	    	var timeout = setTimeout(done, server.options.fetchTimeout);
		}
		/**
		 * @description Default callback to be used durning the pre-infer phase of plugin loading
		 * @param {TernServer} server The server
		 * @param {Object} resolved The object containing names to be resolved
		 * @since 9.0
		 */
		function doPreInfer(server) {
		  	if(server.pending) {
				return waitOnResolve(server);
			}
			var done = true;
			var keys = Object.keys(_resolved);
			for(var i = 0; i < keys.length; i++) {
				if(_resolved[keys[i]]) {
					continue;
				}
				done = false;
				break;
			}
			if(!done) {
				return waitOnResolve(server);
			}
		}
		
		/**
		 * @description Default callback to be used durning the post-parse phase of plugin loading
		 * @param {TernServer} server The server
		 * @param {Object} ast The backing AST that was just parsed
		 * @param {Object} ignores A mapping of names that can be ignored
		 * @param {Function} test An optional function callback to test the name of the dependency
		 * @since 9.0
		 */
		function doPostParse(server, ast, ignores, test) {
			if(Array.isArray(ast.dependencies) && ast.dependencies.length > 0) {
				for(var i = 0; i < ast.dependencies.length; i++) {
					var _d = _getDependencyName(ast.dependencies[i]);
					if(_d) {
						if(typeof _resolved[_d] === 'object') {
							continue; //we already resolved it or are trying, keep going
						}
						if(typeof ignores === 'object') {
							if(ignores[_d]) {
								continue;
							}
							if(typeof ignores.node === 'object' && ignores.node[_d]) {
								continue;
							}
							if(typeof ignores.requirejs === 'object' && ignores.requirejs[_d]) {
								continue;
							}
						}
						/**
						 * @since 11.0
						 * @see https://bugs.eclipse.org/bugs/show_bug.cgi?id=481271
						 */
						if(typeof test === 'function' && !test(_d)) {
							continue;
						}
						_resolved[_d] = Object.create(null);
					}
				}
				resolveDependencies(server, ast.sourceFile ? ast.sourceFile.name : null);
			}  	
		}
		
		/**
		 * @description Resolve the dependency name
		 * @param {Object|String} dep
		 * @since 10.0
		 */
		function _getDependencyName(dep) {
			if(typeof dep === 'string') {
				return dep;
			} else if(dep && typeof dep === 'object') {
				return dep.value;
			}
			return null;
		}
		
		/**
		 * @description Get the resolved file for the given logical name
		 * @param {String} _name The logical name 
		 * @sinnce 9.0
		 */
		function getResolved(_name) {
			return _resolved[_name];
		}
		
		/**
		 * @description Returns the corresponding {orion.editor.Template} object for the given metadata
		 * @private
		 * @param {Object} meta The metadata about the template
		 * @returns {orion.editor.Template} The corresponding template object
		 * @since 9.0
		 */
		function _getTemplate(meta) {
			if(meta.t) {
				return meta.t;
			}
			var t = new mTemplates.Template(meta.prefix, meta.description, meta.template, meta.name);
			meta.t = t;
			return t;
		}
		
		/**
		 * @description Gets the template kind of node
		 * @param {Object} node The AST node
		 * @param {Number} offset The offset into the AST 
		 * @returns {Object} The kind object or null
		 * @since 9.0
		 */
		function _getKind(node, offset) {
			if(node) {
	    		if(node.parents && node.parents.length > 0) {
		    		var prnt = node.parents.pop();
		    		switch(prnt.type) {
						case 'MemberExpression': {
							return { kind : 'member'}; //$NON-NLS-1$
						}
						case 'VariableDeclarator': {
							return null;
						}
						case 'FunctionDelcaration':
						case 'FunctionExpression': {
							if(offset < prnt.body.range[0]) {
								return null;						
							}
							break;
						}
						case 'Property': {
							if(offset-1 >= prnt.value.range[0] && offset-1 <= prnt.value.range[1]) {
								return { kind : 'prop'}; //$NON-NLS-1$
							}
							return null;
						}
						case 'SwitchStatement': {
							return {kind: 'swtch'}; //$NON-NLS-1$
						}
					}
				}
	    	}
			return {kind:'top'}; //$NON-NLS-1$
		}
	
		/**
		 * @description Returns the templates that apply to the given completion kind
		 * @public
		 * @param {Array.<Object>} templates The array of raw template data 
		 * @param {String} kind The kind of the completion
		 * @param {Number} offset The offset to get the templates for
		 * @returns {Array} The array of templates that apply to the given completion kind
		 * @since 9.0
		 */
		function getTemplatesForNode(templates, node, offset) {
			var kind = _getKind(node, offset);
			if(kind && kind.kind) {
				var tmplates = [];
				var len = templates.length;
				for(var i = 0; i < len; i++) {
					var template = templates[i];
					if(template.nodes && template.nodes[kind.kind]) {
						tmplates.push(template);
					}
				}
				return tmplates.map(_getTemplate, this);
			}
		}
		
		return {
			doPostParse: doPostParse,
			doPreInfer: doPreInfer,
			getResolved: getResolved,
			getTemplatesForNode: getTemplatesForNode
		};
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*******************************************************************************
	 * @license
	 * Copyright (c) 2010, 2014 IBM Corporation and others.
	 * All rights reserved. This program and the accompanying materials are made 
	 * available under the terms of the Eclipse Public License v1.0 
	 * (http://www.eclipse.org/legal/epl-v10.html), and the Eclipse Distribution 
	 * License v1.0 (http://www.eclipse.org/org/documents/edl-v10.html). 
	 * 
	 * Contributors: IBM Corporation - initial API and implementation
	 ******************************************************************************/
	
	/*eslint-env browser, amd*/
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() { //$NON-NLS-0$
	
		/** 
		 * Removes prefix from string.
		 * @param {String} prefix
		 * @param {String} string
		 */
		function chop(prefix, string) {
			return string.substring(prefix.length);
		}
		
		var tabVar = "${tab}"; //$NON-NLS-0$
		var delimiterVar = "${delimiter}"; //$NON-NLS-0$
		var cursorVar = "${cursor}"; //$NON-NLS-0$
		
		function Template (prefix, description, template, name) {
			this.prefix = prefix;
			this.description = description;
			this.template = template;
			this.name = name;
			this._parse();
		}
		Template.prototype = /** @lends orion.editor.Template.prototype */ {
			getProposal: function(prefix, offset, context) {
				//any returned positions need to be offset based on current cursor position and length of prefix
				var startOffset = offset-prefix.length;
				var groups = {};
				var escapePosition;
				var delimiter = context.delimiter !== undefined ? context.delimiter : "\n"; //$NON-NLS-0$
				if (context.indentation) {
					delimiter += context.indentation;
				}
				var tab = context.tab !== undefined ? context.tab : "\t"; //$NON-NLS-0$
				var delta = 0;
				var variables = this.variables;
				var segments = this.segments, proposal = [];
				for (var i = 0; i < segments.length; i++) {
					var segment = segments[i];
					var variable = variables[segment];
					if (variable !== undefined) {
						switch (segment) {
							case tabVar:
								segment = tab;
								break;
							case delimiterVar:
								segment = delimiter;
								break;
							case cursorVar:
								segment = "";
								escapePosition = delta;
								break;
							default:
								var g = groups[segment];
								if (!g) {
									g = groups[segment] = {data: variable.data, positions: []};
								}
								segment = variable.substitution;
								if (g.data && g.data.values) { segment = g.data.values[0]; }
								g.positions.push({
									offset: startOffset + delta,
									length: segment.length
								});
						}
					}
					proposal.push(segment);
					delta += segment.length;
				}
				var newGroups = [];
				for (var p in groups) {
					if (groups.hasOwnProperty(p)) {
						newGroups.push(groups[p]);
					}
				}
				proposal = proposal.join("");
				if (escapePosition === undefined) {
					escapePosition = proposal.length;
				}
				return {
					proposal: proposal,
					name: this.name,
					description: this.description,
					groups: newGroups,
					escapePosition: startOffset + escapePosition,
					style: 'noemphasis'
				};
			},
			match: function(prefix) {
				return this.prefix.indexOf(prefix) === 0;
			},
			_parse: function() {
				var template = this.template;
				var segments = [], variables = {}, segment, start = 0;
				template = template.replace(/\n/g, delimiterVar);
				template = template.replace(/\t/g, tabVar);
				template.replace(/\$\{((?:[^\\}]+|\\.))*\}/g, function(group, text1, index) {
					var text = group.substring(2,group.length-1);
					var variable = group, substitution = text, data = null;
					var colon = substitution.indexOf(":"); //$NON-NLS-0$
					if (colon !== -1) {
						substitution = substitution.substring(0, colon);
						variable = "${"+ substitution + "}"; //$NON-NLS-1$ //$NON-NLS-0$
						data = JSON.parse(text.substring(colon + 1).replace("\\}", "}").trim()); //$NON-NLS-1$ //$NON-NLS-0$
					}
					var v = variables[variable];
					if (!v) { v = variables[variable] = {}; }
					v.substitution = substitution;
					if (data) {
						v.data = data;
					}
					segment = template.substring(start, index);
					if (segment) { segments.push(segment); }
					segments.push(variable);
					start = index + group.length;
					return substitution;
				});
				segment = template.substring(start, template.length);
				if (segment) { segments.push(segment); }
				this.segments = segments;
				this.variables = variables;
			}
		};
		
		function TemplateContentAssist (keywords, templates) {
			this._keywords = keywords || [];
			this._templates = [];
			this.addTemplates(templates || []);
		}
		TemplateContentAssist.prototype = /** @lends orion.editor.TemplateContentAssist.prototype */ {
			addTemplates: function(json) {
				var templates = this.getTemplates();
				for (var j = 0; j < json.length; j++) {
					templates.push(new Template(json[j].prefix, json[j].description, json[j].template, json[j].name));
				}
			},
			/**
			 * Called by the content assist engine to initialize this provider before any <tt>computeProposals()</tt> calls.
			 * This implementation does nothing; subclasses may override.
			 */
			initialize: function() {
			},
			computeProposals: function(buffer, offset, context) {
				var prefix = this.getPrefix(buffer, offset, context);
				var proposals = [];
				if (this.isValid(prefix, buffer, offset, context)) {
					proposals = proposals.concat(this.getTemplateProposals(prefix, offset, context));
					proposals = proposals.concat(this.getKeywordProposals(prefix));
				}
				return proposals;
			},
			getKeywords: function() {
				return this._keywords;
			},
			getKeywordProposals: function(prefix) {
				var proposals = [];
				var keywords = this.getKeywords();
				if (keywords) {
					for (var i = 0; i < keywords.length; i++) {
						if (keywords[i].indexOf(prefix) === 0) {
							proposals.push({proposal: chop(prefix, keywords[i]), 
								description: keywords[i], 
								style: 'noemphasis_keyword'//$NON-NLS-0$
							});
						}
					}
					
					if (0 < proposals.length) {
						proposals.splice(0, 0,{
							proposal: '',
							description: 'Keywords', //$NON-NLS-0$
							style: 'noemphasis_title_keywords', //$NON-NLS-0$
							unselectable: true
						});	
					}
				}
				return proposals;
			},
			getPrefix: function(buffer, offset, context) {
				return context.prefix;
			},
			getTemplates: function() {
				return this._templates;
			},
			getTemplateProposals: function(prefix, offset, context) {
				var proposals = [];
				var templates = this.getTemplates();
				for (var t = 0; t < templates.length; t++) {
					var template = templates[t];
					if (template.match(prefix)) {
						var proposal = template.getProposal(prefix, offset, context);
						this.removePrefix(prefix, proposal);
						proposals.push(proposal);
					}
				}
				
				if (0 < proposals.length) {
					//sort the proposals by name
					proposals.sort(function(p1, p2) {
						if (p1.name < p2.name) return -1;
						if (p1.name > p2.name) return 1;
						return 0;
					});
					// if any templates were added to the list of 
					// proposals, add a title as the first element
					proposals.splice(0, 0, {
						proposal: '',
						description: 'Templates', //$NON-NLS-0$
						style: 'noemphasis_title', //$NON-NLS-0$
						unselectable: true
					});
				}
				
				return proposals;
			},
			removePrefix: function(prefix, proposal) {
				var overwrite = proposal.overwrite = proposal.proposal.substring(0, prefix.length) !== prefix;
				if (!overwrite) {
					proposal.proposal = chop(prefix, proposal.proposal);
				}
			},
			isValid: function(prefix, buffer, offset, context) {
				return true;
			}
		};
		
		return {
			Template: Template,
			TemplateContentAssist: TemplateContentAssist
		};
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	var require;var require;/** vim: et:ts=4:sw=4:sts=4
	 * @license RequireJS 2.1.15 Copyright (c) 2010-2014, The Dojo Foundation All Rights Reserved.
	 * Available via the MIT or new BSD license.
	 * see: http://github.com/jrburke/requirejs for details
	 */
	//Not using strict: uneven strict support in browsers, #392, and causes
	//problems with requirejs.exec()/transpiler plugins that may not be strict.
	/*jslint regexp: true, nomen: true, sloppy: true */
	/*global window, navigator, document, importScripts, setTimeout, opera */
	
	var requirejs, require, define;
	(function (global) {
	    var req, s, head, baseElement, dataMain, src,
	        interactiveScript, currentlyAddingScript, mainScript, subPath,
	        version = '2.1.15',
	        commentRegExp = /(\/\*([\s\S]*?)\*\/|([^:]|^)\/\/(.*)$)/mg,
	        cjsRequireRegExp = /[^.]\s*require\s*\(\s*["']([^'"\s]+)["']\s*\)/g,
	        jsSuffixRegExp = /\.js$/,
	        currDirRegExp = /^\.\//,
	        op = Object.prototype,
	        ostring = op.toString,
	        hasOwn = op.hasOwnProperty,
	        ap = Array.prototype,
	        apsp = ap.splice,
	        isBrowser = !!(typeof window !== 'undefined' && typeof navigator !== 'undefined' && window.document),
	        isWebWorker = !isBrowser && typeof importScripts !== 'undefined',
	        //PS3 indicates loaded and complete, but need to wait for complete
	        //specifically. Sequence is 'loading', 'loaded', execution,
	        // then 'complete'. The UA check is unfortunate, but not sure how
	        //to feature test w/o causing perf issues.
	        readyRegExp = isBrowser && navigator.platform === 'PLAYSTATION 3' ?
	                      /^complete$/ : /^(complete|loaded)$/,
	        defContextName = '_',
	        //Oh the tragedy, detecting opera. See the usage of isOpera for reason.
	        isOpera = typeof opera !== 'undefined' && opera.toString() === '[object Opera]',
	        contexts = {},
	        cfg = {},
	        globalDefQueue = [],
	        useInteractive = false;
	
	    function isFunction(it) {
	        return ostring.call(it) === '[object Function]';
	    }
	
	    function isArray(it) {
	        return ostring.call(it) === '[object Array]';
	    }
	
	    /**
	     * Helper function for iterating over an array. If the func returns
	     * a true value, it will break out of the loop.
	     */
	    function each(ary, func) {
	        if (ary) {
	            var i;
	            for (i = 0; i < ary.length; i += 1) {
	                if (ary[i] && func(ary[i], i, ary)) {
	                    break;
	                }
	            }
	        }
	    }
	
	    /**
	     * Helper function for iterating over an array backwards. If the func
	     * returns a true value, it will break out of the loop.
	     */
	    function eachReverse(ary, func) {
	        if (ary) {
	            var i;
	            for (i = ary.length - 1; i > -1; i -= 1) {
	                if (ary[i] && func(ary[i], i, ary)) {
	                    break;
	                }
	            }
	        }
	    }
	
	    function hasProp(obj, prop) {
	        return hasOwn.call(obj, prop);
	    }
	
	    function getOwn(obj, prop) {
	        return hasProp(obj, prop) && obj[prop];
	    }
	
	    /**
	     * Cycles over properties in an object and calls a function for each
	     * property value. If the function returns a truthy value, then the
	     * iteration is stopped.
	     */
	    function eachProp(obj, func) {
	        var prop;
	        for (prop in obj) {
	            if (hasProp(obj, prop)) {
	                if (func(obj[prop], prop)) {
	                    break;
	                }
	            }
	        }
	    }
	
	    /**
	     * Simple function to mix in properties from source into target,
	     * but only if target does not already have a property of the same name.
	     */
	    function mixin(target, source, force, deepStringMixin) {
	        if (source) {
	            eachProp(source, function (value, prop) {
	                if (force || !hasProp(target, prop)) {
	                    if (deepStringMixin && typeof value === 'object' && value &&
	                        !isArray(value) && !isFunction(value) &&
	                        !(value instanceof RegExp)) {
	
	                        if (!target[prop]) {
	                            target[prop] = {};
	                        }
	                        mixin(target[prop], value, force, deepStringMixin);
	                    } else {
	                        target[prop] = value;
	                    }
	                }
	            });
	        }
	        return target;
	    }
	
	    //Similar to Function.prototype.bind, but the 'this' object is specified
	    //first, since it is easier to read/figure out what 'this' will be.
	    function bind(obj, fn) {
	        return function () {
	            return fn.apply(obj, arguments);
	        };
	    }
	
	    function scripts() {
	        return document.getElementsByTagName('script');
	    }
	
	    function defaultOnError(err) {
	        throw err;
	    }
	
	    //Allow getting a global that is expressed in
	    //dot notation, like 'a.b.c'.
	    function getGlobal(value) {
	        if (!value) {
	            return value;
	        }
	        var g = global;
	        each(value.split('.'), function (part) {
	            g = g[part];
	        });
	        return g;
	    }
	
	    /**
	     * Constructs an error with a pointer to an URL with more information.
	     * @param {String} id the error ID that maps to an ID on a web page.
	     * @param {String} message human readable error.
	     * @param {Error} [err] the original error, if there is one.
	     *
	     * @returns {Error}
	     */
	    function makeError(id, msg, err, requireModules) {
	        var e = new Error(msg + '\nhttp://requirejs.org/docs/errors.html#' + id);
	        e.requireType = id;
	        e.requireModules = requireModules;
	        if (err) {
	            e.originalError = err;
	        }
	        return e;
	    }
	
	    if (typeof define !== 'undefined') {
	        //If a define is already in play via another AMD loader,
	        //do not overwrite.
	        return;
	    }
	
	    if (typeof requirejs !== 'undefined') {
	        if (isFunction(requirejs)) {
	            //Do not overwrite an existing requirejs instance.
	            return;
	        }
	        cfg = requirejs;
	        requirejs = undefined;
	    }
	
	    //Allow for a require config object
	    if (typeof require !== 'undefined' && !isFunction(require)) {
	        //assume it is a config object.
	        cfg = require;
	        require = undefined;
	    }
	
	    function newContext(contextName) {
	        var inCheckLoaded, Module, context, handlers,
	            checkLoadedTimeoutId,
	            config = {
	                //Defaults. Do not set a default for map
	                //config to speed up normalize(), which
	                //will run faster if there is no default.
	                waitSeconds: 7,
	                baseUrl: './',
	                paths: {},
	                bundles: {},
	                pkgs: {},
	                shim: {},
	                config: {}
	            },
	            registry = {},
	            //registry of just enabled modules, to speed
	            //cycle breaking code when lots of modules
	            //are registered, but not activated.
	            enabledRegistry = {},
	            undefEvents = {},
	            defQueue = [],
	            defined = {},
	            urlFetched = {},
	            bundlesMap = {},
	            requireCounter = 1,
	            unnormalizedCounter = 1;
	
	        /**
	         * Trims the . and .. from an array of path segments.
	         * It will keep a leading path segment if a .. will become
	         * the first path segment, to help with module name lookups,
	         * which act like paths, but can be remapped. But the end result,
	         * all paths that use this function should look normalized.
	         * NOTE: this method MODIFIES the input array.
	         * @param {Array} ary the array of path segments.
	         */
	        function trimDots(ary) {
	            var i, part;
	            for (i = 0; i < ary.length; i++) {
	                part = ary[i];
	                if (part === '.') {
	                    ary.splice(i, 1);
	                    i -= 1;
	                } else if (part === '..') {
	                    // If at the start, or previous value is still ..,
	                    // keep them so that when converted to a path it may
	                    // still work when converted to a path, even though
	                    // as an ID it is less than ideal. In larger point
	                    // releases, may be better to just kick out an error.
	                    if (i === 0 || (i == 1 && ary[2] === '..') || ary[i - 1] === '..') {
	                        continue;
	                    } else if (i > 0) {
	                        ary.splice(i - 1, 2);
	                        i -= 2;
	                    }
	                }
	            }
	        }
	
	        /**
	         * Given a relative module name, like ./something, normalize it to
	         * a real name that can be mapped to a path.
	         * @param {String} name the relative name
	         * @param {String} baseName a real name that the name arg is relative
	         * to.
	         * @param {Boolean} applyMap apply the map config to the value. Should
	         * only be done if this normalization is for a dependency ID.
	         * @returns {String} normalized name
	         */
	        function normalize(name, baseName, applyMap) {
	            var pkgMain, mapValue, nameParts, i, j, nameSegment, lastIndex,
	                foundMap, foundI, foundStarMap, starI, normalizedBaseParts,
	                baseParts = (baseName && baseName.split('/')),
	                map = config.map,
	                starMap = map && map['*'];
	
	            //Adjust any relative paths.
	            if (name) {
	                name = name.split('/');
	                lastIndex = name.length - 1;
	
	                // If wanting node ID compatibility, strip .js from end
	                // of IDs. Have to do this here, and not in nameToUrl
	                // because node allows either .js or non .js to map
	                // to same file.
	                if (config.nodeIdCompat && jsSuffixRegExp.test(name[lastIndex])) {
	                    name[lastIndex] = name[lastIndex].replace(jsSuffixRegExp, '');
	                }
	
	                // Starts with a '.' so need the baseName
	                if (name[0].charAt(0) === '.' && baseParts) {
	                    //Convert baseName to array, and lop off the last part,
	                    //so that . matches that 'directory' and not name of the baseName's
	                    //module. For instance, baseName of 'one/two/three', maps to
	                    //'one/two/three.js', but we want the directory, 'one/two' for
	                    //this normalization.
	                    normalizedBaseParts = baseParts.slice(0, baseParts.length - 1);
	                    name = normalizedBaseParts.concat(name);
	                }
	
	                trimDots(name);
	                name = name.join('/');
	            }
	
	            //Apply map config if available.
	            if (applyMap && map && (baseParts || starMap)) {
	                nameParts = name.split('/');
	
	                outerLoop: for (i = nameParts.length; i > 0; i -= 1) {
	                    nameSegment = nameParts.slice(0, i).join('/');
	
	                    if (baseParts) {
	                        //Find the longest baseName segment match in the config.
	                        //So, do joins on the biggest to smallest lengths of baseParts.
	                        for (j = baseParts.length; j > 0; j -= 1) {
	                            mapValue = getOwn(map, baseParts.slice(0, j).join('/'));
	
	                            //baseName segment has config, find if it has one for
	                            //this name.
	                            if (mapValue) {
	                                mapValue = getOwn(mapValue, nameSegment);
	                                if (mapValue) {
	                                    //Match, update name to the new value.
	                                    foundMap = mapValue;
	                                    foundI = i;
	                                    break outerLoop;
	                                }
	                            }
	                        }
	                    }
	
	                    //Check for a star map match, but just hold on to it,
	                    //if there is a shorter segment match later in a matching
	                    //config, then favor over this star map.
	                    if (!foundStarMap && starMap && getOwn(starMap, nameSegment)) {
	                        foundStarMap = getOwn(starMap, nameSegment);
	                        starI = i;
	                    }
	                }
	
	                if (!foundMap && foundStarMap) {
	                    foundMap = foundStarMap;
	                    foundI = starI;
	                }
	
	                if (foundMap) {
	                    nameParts.splice(0, foundI, foundMap);
	                    name = nameParts.join('/');
	                }
	            }
	
	            // If the name points to a package's name, use
	            // the package main instead.
	            pkgMain = getOwn(config.pkgs, name);
	
	            return pkgMain ? pkgMain : name;
	        }
	
	        function removeScript(name) {
	            if (isBrowser) {
	                each(scripts(), function (scriptNode) {
	                    if (scriptNode.getAttribute('data-requiremodule') === name &&
	                            scriptNode.getAttribute('data-requirecontext') === context.contextName) {
	                        scriptNode.parentNode.removeChild(scriptNode);
	                        return true;
	                    }
	                });
	            }
	        }
	
	        function hasPathFallback(id) {
	            var pathConfig = getOwn(config.paths, id);
	            if (pathConfig && isArray(pathConfig) && pathConfig.length > 1) {
	                //Pop off the first array value, since it failed, and
	                //retry
	                pathConfig.shift();
	                context.require.undef(id);
	
	                //Custom require that does not do map translation, since
	                //ID is "absolute", already mapped/resolved.
	                context.makeRequire(null, {
	                    skipMap: true
	                })([id]);
	
	                return true;
	            }
	        }
	
	        //Turns a plugin!resource to [plugin, resource]
	        //with the plugin being undefined if the name
	        //did not have a plugin prefix.
	        function splitPrefix(name) {
	            var prefix,
	                index = name ? name.indexOf('!') : -1;
	            if (index > -1) {
	                prefix = name.substring(0, index);
	                name = name.substring(index + 1, name.length);
	            }
	            return [prefix, name];
	        }
	
	        /**
	         * Creates a module mapping that includes plugin prefix, module
	         * name, and path. If parentModuleMap is provided it will
	         * also normalize the name via require.normalize()
	         *
	         * @param {String} name the module name
	         * @param {String} [parentModuleMap] parent module map
	         * for the module name, used to resolve relative names.
	         * @param {Boolean} isNormalized: is the ID already normalized.
	         * This is true if this call is done for a define() module ID.
	         * @param {Boolean} applyMap: apply the map config to the ID.
	         * Should only be true if this map is for a dependency.
	         *
	         * @returns {Object}
	         */
	        function makeModuleMap(name, parentModuleMap, isNormalized, applyMap) {
	            var url, pluginModule, suffix, nameParts,
	                prefix = null,
	                parentName = parentModuleMap ? parentModuleMap.name : null,
	                originalName = name,
	                isDefine = true,
	                normalizedName = '';
	
	            //If no name, then it means it is a require call, generate an
	            //internal name.
	            if (!name) {
	                isDefine = false;
	                name = '_@r' + (requireCounter += 1);
	            }
	
	            nameParts = splitPrefix(name);
	            prefix = nameParts[0];
	            name = nameParts[1];
	
	            if (prefix) {
	                prefix = normalize(prefix, parentName, applyMap);
	                pluginModule = getOwn(defined, prefix);
	            }
	
	            //Account for relative paths if there is a base name.
	            if (name) {
	                if (prefix) {
	                    if (pluginModule && pluginModule.normalize) {
	                        //Plugin is loaded, use its normalize method.
	                        normalizedName = pluginModule.normalize(name, function (name) {
	                            return normalize(name, parentName, applyMap);
	                        });
	                    } else {
	                        // If nested plugin references, then do not try to
	                        // normalize, as it will not normalize correctly. This
	                        // places a restriction on resourceIds, and the longer
	                        // term solution is not to normalize until plugins are
	                        // loaded and all normalizations to allow for async
	                        // loading of a loader plugin. But for now, fixes the
	                        // common uses. Details in #1131
	                        normalizedName = name.indexOf('!') === -1 ?
	                                         normalize(name, parentName, applyMap) :
	                                         name;
	                    }
	                } else {
	                    //A regular module.
	                    normalizedName = normalize(name, parentName, applyMap);
	
	                    //Normalized name may be a plugin ID due to map config
	                    //application in normalize. The map config values must
	                    //already be normalized, so do not need to redo that part.
	                    nameParts = splitPrefix(normalizedName);
	                    prefix = nameParts[0];
	                    normalizedName = nameParts[1];
	                    isNormalized = true;
	
	                    url = context.nameToUrl(normalizedName);
	                }
	            }
	
	            //If the id is a plugin id that cannot be determined if it needs
	            //normalization, stamp it with a unique ID so two matching relative
	            //ids that may conflict can be separate.
	            suffix = prefix && !pluginModule && !isNormalized ?
	                     '_unnormalized' + (unnormalizedCounter += 1) :
	                     '';
	
	            return {
	                prefix: prefix,
	                name: normalizedName,
	                parentMap: parentModuleMap,
	                unnormalized: !!suffix,
	                url: url,
	                originalName: originalName,
	                isDefine: isDefine,
	                id: (prefix ?
	                        prefix + '!' + normalizedName :
	                        normalizedName) + suffix
	            };
	        }
	
	        function getModule(depMap) {
	            var id = depMap.id,
	                mod = getOwn(registry, id);
	
	            if (!mod) {
	                mod = registry[id] = new context.Module(depMap);
	            }
	
	            return mod;
	        }
	
	        function on(depMap, name, fn) {
	            var id = depMap.id,
	                mod = getOwn(registry, id);
	
	            if (hasProp(defined, id) &&
	                    (!mod || mod.defineEmitComplete)) {
	                if (name === 'defined') {
	                    fn(defined[id]);
	                }
	            } else {
	                mod = getModule(depMap);
	                if (mod.error && name === 'error') {
	                    fn(mod.error);
	                } else {
	                    mod.on(name, fn);
	                }
	            }
	        }
	
	        function onError(err, errback) {
	            var ids = err.requireModules,
	                notified = false;
	
	            if (errback) {
	                errback(err);
	            } else {
	                each(ids, function (id) {
	                    var mod = getOwn(registry, id);
	                    if (mod) {
	                        //Set error on module, so it skips timeout checks.
	                        mod.error = err;
	                        if (mod.events.error) {
	                            notified = true;
	                            mod.emit('error', err);
	                        }
	                    }
	                });
	
	                if (!notified) {
	                    req.onError(err);
	                }
	            }
	        }
	
	        /**
	         * Internal method to transfer globalQueue items to this context's
	         * defQueue.
	         */
	        function takeGlobalQueue() {
	            //Push all the globalDefQueue items into the context's defQueue
	            if (globalDefQueue.length) {
	                //Array splice in the values since the context code has a
	                //local var ref to defQueue, so cannot just reassign the one
	                //on context.
	                apsp.apply(defQueue,
	                           [defQueue.length, 0].concat(globalDefQueue));
	                globalDefQueue = [];
	            }
	        }
	
	        handlers = {
	            'require': function (mod) {
	                if (mod.require) {
	                    return mod.require;
	                } else {
	                    return (mod.require = context.makeRequire(mod.map));
	                }
	            },
	            'exports': function (mod) {
	                mod.usingExports = true;
	                if (mod.map.isDefine) {
	                    if (mod.exports) {
	                        return (defined[mod.map.id] = mod.exports);
	                    } else {
	                        return (mod.exports = defined[mod.map.id] = {});
	                    }
	                }
	            },
	            'module': function (mod) {
	                if (mod.module) {
	                    return mod.module;
	                } else {
	                    return (mod.module = {
	                        id: mod.map.id,
	                        uri: mod.map.url,
	                        config: function () {
	                            return  getOwn(config.config, mod.map.id) || {};
	                        },
	                        exports: mod.exports || (mod.exports = {})
	                    });
	                }
	            }
	        };
	
	        function cleanRegistry(id) {
	            //Clean up machinery used for waiting modules.
	            delete registry[id];
	            delete enabledRegistry[id];
	        }
	
	        function breakCycle(mod, traced, processed) {
	            var id = mod.map.id;
	
	            if (mod.error) {
	                mod.emit('error', mod.error);
	            } else {
	                traced[id] = true;
	                each(mod.depMaps, function (depMap, i) {
	                    var depId = depMap.id,
	                        dep = getOwn(registry, depId);
	
	                    //Only force things that have not completed
	                    //being defined, so still in the registry,
	                    //and only if it has not been matched up
	                    //in the module already.
	                    if (dep && !mod.depMatched[i] && !processed[depId]) {
	                        if (getOwn(traced, depId)) {
	                            mod.defineDep(i, defined[depId]);
	                            mod.check(); //pass false?
	                        } else {
	                            breakCycle(dep, traced, processed);
	                        }
	                    }
	                });
	                processed[id] = true;
	            }
	        }
	
	        function checkLoaded() {
	            var err, usingPathFallback,
	                waitInterval = config.waitSeconds * 1000,
	                //It is possible to disable the wait interval by using waitSeconds of 0.
	                expired = waitInterval && (context.startTime + waitInterval) < new Date().getTime(),
	                noLoads = [],
	                reqCalls = [],
	                stillLoading = false,
	                needCycleCheck = true;
	
	            //Do not bother if this call was a result of a cycle break.
	            if (inCheckLoaded) {
	                return;
	            }
	
	            inCheckLoaded = true;
	
	            //Figure out the state of all the modules.
	            eachProp(enabledRegistry, function (mod) {
	                var map = mod.map,
	                    modId = map.id;
	
	                //Skip things that are not enabled or in error state.
	                if (!mod.enabled) {
	                    return;
	                }
	
	                if (!map.isDefine) {
	                    reqCalls.push(mod);
	                }
	
	                if (!mod.error) {
	                    //If the module should be executed, and it has not
	                    //been inited and time is up, remember it.
	                    if (!mod.inited && expired) {
	                        if (hasPathFallback(modId)) {
	                            usingPathFallback = true;
	                            stillLoading = true;
	                        } else {
	                            noLoads.push(modId);
	                            removeScript(modId);
	                        }
	                    } else if (!mod.inited && mod.fetched && map.isDefine) {
	                        stillLoading = true;
	                        if (!map.prefix) {
	                            //No reason to keep looking for unfinished
	                            //loading. If the only stillLoading is a
	                            //plugin resource though, keep going,
	                            //because it may be that a plugin resource
	                            //is waiting on a non-plugin cycle.
	                            return (needCycleCheck = false);
	                        }
	                    }
	                }
	            });
	
	            if (expired && noLoads.length) {
	                //If wait time expired, throw error of unloaded modules.
	                err = makeError('timeout', 'Load timeout for modules: ' + noLoads, null, noLoads);
	                err.contextName = context.contextName;
	                return onError(err);
	            }
	
	            //Not expired, check for a cycle.
	            if (needCycleCheck) {
	                each(reqCalls, function (mod) {
	                    breakCycle(mod, {}, {});
	                });
	            }
	
	            //If still waiting on loads, and the waiting load is something
	            //other than a plugin resource, or there are still outstanding
	            //scripts, then just try back later.
	            if ((!expired || usingPathFallback) && stillLoading) {
	                //Something is still waiting to load. Wait for it, but only
	                //if a timeout is not already in effect.
	                if ((isBrowser || isWebWorker) && !checkLoadedTimeoutId) {
	                    checkLoadedTimeoutId = setTimeout(function () {
	                        checkLoadedTimeoutId = 0;
	                        checkLoaded();
	                    }, 50);
	                }
	            }
	
	            inCheckLoaded = false;
	        }
	
	        Module = function (map) {
	            this.events = getOwn(undefEvents, map.id) || {};
	            this.map = map;
	            this.shim = getOwn(config.shim, map.id);
	            this.depExports = [];
	            this.depMaps = [];
	            this.depMatched = [];
	            this.pluginMaps = {};
	            this.depCount = 0;
	
	            /* this.exports this.factory
	               this.depMaps = [],
	               this.enabled, this.fetched
	            */
	        };
	
	        Module.prototype = {
	            init: function (depMaps, factory, errback, options) {
	                options = options || {};
	
	                //Do not do more inits if already done. Can happen if there
	                //are multiple define calls for the same module. That is not
	                //a normal, common case, but it is also not unexpected.
	                if (this.inited) {
	                    return;
	                }
	
	                this.factory = factory;
	
	                if (errback) {
	                    //Register for errors on this module.
	                    this.on('error', errback);
	                } else if (this.events.error) {
	                    //If no errback already, but there are error listeners
	                    //on this module, set up an errback to pass to the deps.
	                    errback = bind(this, function (err) {
	                        this.emit('error', err);
	                    });
	                }
	
	                //Do a copy of the dependency array, so that
	                //source inputs are not modified. For example
	                //"shim" deps are passed in here directly, and
	                //doing a direct modification of the depMaps array
	                //would affect that config.
	                this.depMaps = depMaps && depMaps.slice(0);
	
	                this.errback = errback;
	
	                //Indicate this module has be initialized
	                this.inited = true;
	
	                this.ignore = options.ignore;
	
	                //Could have option to init this module in enabled mode,
	                //or could have been previously marked as enabled. However,
	                //the dependencies are not known until init is called. So
	                //if enabled previously, now trigger dependencies as enabled.
	                if (options.enabled || this.enabled) {
	                    //Enable this module and dependencies.
	                    //Will call this.check()
	                    this.enable();
	                } else {
	                    this.check();
	                }
	            },
	
	            defineDep: function (i, depExports) {
	                //Because of cycles, defined callback for a given
	                //export can be called more than once.
	                if (!this.depMatched[i]) {
	                    this.depMatched[i] = true;
	                    this.depCount -= 1;
	                    this.depExports[i] = depExports;
	                }
	            },
	
	            fetch: function () {
	                if (this.fetched) {
	                    return;
	                }
	                this.fetched = true;
	
	                context.startTime = (new Date()).getTime();
	
	                var map = this.map;
	
	                //If the manager is for a plugin managed resource,
	                //ask the plugin to load it now.
	                if (this.shim) {
	                    context.makeRequire(this.map, {
	                        enableBuildCallback: true
	                    })(this.shim.deps || [], bind(this, function () {
	                        return map.prefix ? this.callPlugin() : this.load();
	                    }));
	                } else {
	                    //Regular dependency.
	                    return map.prefix ? this.callPlugin() : this.load();
	                }
	            },
	
	            load: function () {
	                var url = this.map.url;
	
	                //Regular dependency.
	                if (!urlFetched[url]) {
	                    urlFetched[url] = true;
	                    context.load(this.map.id, url);
	                }
	            },
	
	            /**
	             * Checks if the module is ready to define itself, and if so,
	             * define it.
	             */
	            check: function () {
	                if (!this.enabled || this.enabling) {
	                    return;
	                }
	
	                var err, cjsModule,
	                    id = this.map.id,
	                    depExports = this.depExports,
	                    exports = this.exports,
	                    factory = this.factory;
	
	                if (!this.inited) {
	                    this.fetch();
	                } else if (this.error) {
	                    this.emit('error', this.error);
	                } else if (!this.defining) {
	                    //The factory could trigger another require call
	                    //that would result in checking this module to
	                    //define itself again. If already in the process
	                    //of doing that, skip this work.
	                    this.defining = true;
	
	                    if (this.depCount < 1 && !this.defined) {
	                        if (isFunction(factory)) {
	                            //If there is an error listener, favor passing
	                            //to that instead of throwing an error. However,
	                            //only do it for define()'d  modules. require
	                            //errbacks should not be called for failures in
	                            //their callbacks (#699). However if a global
	                            //onError is set, use that.
	                            if ((this.events.error && this.map.isDefine) ||
	                                req.onError !== defaultOnError) {
	                                try {
	                                    exports = context.execCb(id, factory, depExports, exports);
	                                } catch (e) {
	                                    err = e;
	                                }
	                            } else {
	                                exports = context.execCb(id, factory, depExports, exports);
	                            }
	
	                            // Favor return value over exports. If node/cjs in play,
	                            // then will not have a return value anyway. Favor
	                            // module.exports assignment over exports object.
	                            if (this.map.isDefine && exports === undefined) {
	                                cjsModule = this.module;
	                                if (cjsModule) {
	                                    exports = cjsModule.exports;
	                                } else if (this.usingExports) {
	                                    //exports already set the defined value.
	                                    exports = this.exports;
	                                }
	                            }
	
	                            if (err) {
	                                err.requireMap = this.map;
	                                err.requireModules = this.map.isDefine ? [this.map.id] : null;
	                                err.requireType = this.map.isDefine ? 'define' : 'require';
	                                return onError((this.error = err));
	                            }
	
	                        } else {
	                            //Just a literal value
	                            exports = factory;
	                        }
	
	                        this.exports = exports;
	
	                        if (this.map.isDefine && !this.ignore) {
	                            defined[id] = exports;
	
	                            if (req.onResourceLoad) {
	                                req.onResourceLoad(context, this.map, this.depMaps);
	                            }
	                        }
	
	                        //Clean up
	                        cleanRegistry(id);
	
	                        this.defined = true;
	                    }
	
	                    //Finished the define stage. Allow calling check again
	                    //to allow define notifications below in the case of a
	                    //cycle.
	                    this.defining = false;
	
	                    if (this.defined && !this.defineEmitted) {
	                        this.defineEmitted = true;
	                        this.emit('defined', this.exports);
	                        this.defineEmitComplete = true;
	                    }
	
	                }
	            },
	
	            callPlugin: function () {
	                var map = this.map,
	                    id = map.id,
	                    //Map already normalized the prefix.
	                    pluginMap = makeModuleMap(map.prefix);
	
	                //Mark this as a dependency for this plugin, so it
	                //can be traced for cycles.
	                this.depMaps.push(pluginMap);
	
	                on(pluginMap, 'defined', bind(this, function (plugin) {
	                    var load, normalizedMap, normalizedMod,
	                        bundleId = getOwn(bundlesMap, this.map.id),
	                        name = this.map.name,
	                        parentName = this.map.parentMap ? this.map.parentMap.name : null,
	                        localRequire = context.makeRequire(map.parentMap, {
	                            enableBuildCallback: true
	                        });
	
	                    //If current map is not normalized, wait for that
	                    //normalized name to load instead of continuing.
	                    if (this.map.unnormalized) {
	                        //Normalize the ID if the plugin allows it.
	                        if (plugin.normalize) {
	                            name = plugin.normalize(name, function (name) {
	                                return normalize(name, parentName, true);
	                            }) || '';
	                        }
	
	                        //prefix and name should already be normalized, no need
	                        //for applying map config again either.
	                        normalizedMap = makeModuleMap(map.prefix + '!' + name,
	                                                      this.map.parentMap);
	                        on(normalizedMap,
	                            'defined', bind(this, function (value) {
	                                this.init([], function () { return value; }, null, {
	                                    enabled: true,
	                                    ignore: true
	                                });
	                            }));
	
	                        normalizedMod = getOwn(registry, normalizedMap.id);
	                        if (normalizedMod) {
	                            //Mark this as a dependency for this plugin, so it
	                            //can be traced for cycles.
	                            this.depMaps.push(normalizedMap);
	
	                            if (this.events.error) {
	                                normalizedMod.on('error', bind(this, function (err) {
	                                    this.emit('error', err);
	                                }));
	                            }
	                            normalizedMod.enable();
	                        }
	
	                        return;
	                    }
	
	                    //If a paths config, then just load that file instead to
	                    //resolve the plugin, as it is built into that paths layer.
	                    if (bundleId) {
	                        this.map.url = context.nameToUrl(bundleId);
	                        this.load();
	                        return;
	                    }
	
	                    load = bind(this, function (value) {
	                        this.init([], function () { return value; }, null, {
	                            enabled: true
	                        });
	                    });
	
	                    load.error = bind(this, function (err) {
	                        this.inited = true;
	                        this.error = err;
	                        err.requireModules = [id];
	
	                        //Remove temp unnormalized modules for this module,
	                        //since they will never be resolved otherwise now.
	                        eachProp(registry, function (mod) {
	                            if (mod.map.id.indexOf(id + '_unnormalized') === 0) {
	                                cleanRegistry(mod.map.id);
	                            }
	                        });
	
	                        onError(err);
	                    });
	
	                    //Allow plugins to load other code without having to know the
	                    //context or how to 'complete' the load.
	                    load.fromText = bind(this, function (text, textAlt) {
	                        /*jslint evil: true */
	                        var moduleName = map.name,
	                            moduleMap = makeModuleMap(moduleName),
	                            hasInteractive = useInteractive;
	
	                        //As of 2.1.0, support just passing the text, to reinforce
	                        //fromText only being called once per resource. Still
	                        //support old style of passing moduleName but discard
	                        //that moduleName in favor of the internal ref.
	                        if (textAlt) {
	                            text = textAlt;
	                        }
	
	                        //Turn off interactive script matching for IE for any define
	                        //calls in the text, then turn it back on at the end.
	                        if (hasInteractive) {
	                            useInteractive = false;
	                        }
	
	                        //Prime the system by creating a module instance for
	                        //it.
	                        getModule(moduleMap);
	
	                        //Transfer any config to this other module.
	                        if (hasProp(config.config, id)) {
	                            config.config[moduleName] = config.config[id];
	                        }
	
	                        try {
	                            req.exec(text);
	                        } catch (e) {
	                            return onError(makeError('fromtexteval',
	                                             'fromText eval for ' + id +
	                                            ' failed: ' + e,
	                                             e,
	                                             [id]));
	                        }
	
	                        if (hasInteractive) {
	                            useInteractive = true;
	                        }
	
	                        //Mark this as a dependency for the plugin
	                        //resource
	                        this.depMaps.push(moduleMap);
	
	                        //Support anonymous modules.
	                        context.completeLoad(moduleName);
	
	                        //Bind the value of that module to the value for this
	                        //resource ID.
	                        localRequire([moduleName], load);
	                    });
	
	                    //Use parentName here since the plugin's name is not reliable,
	                    //could be some weird string with no path that actually wants to
	                    //reference the parentName's path.
	                    plugin.load(map.name, localRequire, load, config);
	                }));
	
	                context.enable(pluginMap, this);
	                this.pluginMaps[pluginMap.id] = pluginMap;
	            },
	
	            enable: function () {
	                enabledRegistry[this.map.id] = this;
	                this.enabled = true;
	
	                //Set flag mentioning that the module is enabling,
	                //so that immediate calls to the defined callbacks
	                //for dependencies do not trigger inadvertent load
	                //with the depCount still being zero.
	                this.enabling = true;
	
	                //Enable each dependency
	                each(this.depMaps, bind(this, function (depMap, i) {
	                    var id, mod, handler;
	
	                    if (typeof depMap === 'string') {
	                        //Dependency needs to be converted to a depMap
	                        //and wired up to this module.
	                        depMap = makeModuleMap(depMap,
	                                               (this.map.isDefine ? this.map : this.map.parentMap),
	                                               false,
	                                               !this.skipMap);
	                        this.depMaps[i] = depMap;
	
	                        handler = getOwn(handlers, depMap.id);
	
	                        if (handler) {
	                            this.depExports[i] = handler(this);
	                            return;
	                        }
	
	                        this.depCount += 1;
	
	                        on(depMap, 'defined', bind(this, function (depExports) {
	                            this.defineDep(i, depExports);
	                            this.check();
	                        }));
	
	                        if (this.errback) {
	                            on(depMap, 'error', bind(this, this.errback));
	                        }
	                    }
	
	                    id = depMap.id;
	                    mod = registry[id];
	
	                    //Skip special modules like 'require', 'exports', 'module'
	                    //Also, don't call enable if it is already enabled,
	                    //important in circular dependency cases.
	                    if (!hasProp(handlers, id) && mod && !mod.enabled) {
	                        context.enable(depMap, this);
	                    }
	                }));
	
	                //Enable each plugin that is used in
	                //a dependency
	                eachProp(this.pluginMaps, bind(this, function (pluginMap) {
	                    var mod = getOwn(registry, pluginMap.id);
	                    if (mod && !mod.enabled) {
	                        context.enable(pluginMap, this);
	                    }
	                }));
	
	                this.enabling = false;
	
	                this.check();
	            },
	
	            on: function (name, cb) {
	                var cbs = this.events[name];
	                if (!cbs) {
	                    cbs = this.events[name] = [];
	                }
	                cbs.push(cb);
	            },
	
	            emit: function (name, evt) {
	                each(this.events[name], function (cb) {
	                    cb(evt);
	                });
	                if (name === 'error') {
	                    //Now that the error handler was triggered, remove
	                    //the listeners, since this broken Module instance
	                    //can stay around for a while in the registry.
	                    delete this.events[name];
	                }
	            }
	        };
	
	        function callGetModule(args) {
	            //Skip modules already defined.
	            if (!hasProp(defined, args[0])) {
	                getModule(makeModuleMap(args[0], null, true)).init(args[1], args[2]);
	            }
	        }
	
	        function removeListener(node, func, name, ieName) {
	            //Favor detachEvent because of IE9
	            //issue, see attachEvent/addEventListener comment elsewhere
	            //in this file.
	            if (node.detachEvent && !isOpera) {
	                //Probably IE. If not it will throw an error, which will be
	                //useful to know.
	                if (ieName) {
	                    node.detachEvent(ieName, func);
	                }
	            } else {
	                node.removeEventListener(name, func, false);
	            }
	        }
	
	        /**
	         * Given an event from a script node, get the requirejs info from it,
	         * and then removes the event listeners on the node.
	         * @param {Event} evt
	         * @returns {Object}
	         */
	        function getScriptData(evt) {
	            //Using currentTarget instead of target for Firefox 2.0's sake. Not
	            //all old browsers will be supported, but this one was easy enough
	            //to support and still makes sense.
	            var node = evt.currentTarget || evt.srcElement;
	
	            //Remove the listeners once here.
	            removeListener(node, context.onScriptLoad, 'load', 'onreadystatechange');
	            removeListener(node, context.onScriptError, 'error');
	
	            return {
	                node: node,
	                id: node && node.getAttribute('data-requiremodule')
	            };
	        }
	
	        function intakeDefines() {
	            var args;
	
	            //Any defined modules in the global queue, intake them now.
	            takeGlobalQueue();
	
	            //Make sure any remaining defQueue items get properly processed.
	            while (defQueue.length) {
	                args = defQueue.shift();
	                if (args[0] === null) {
	                    return onError(makeError('mismatch', 'Mismatched anonymous define() module: ' + args[args.length - 1]));
	                } else {
	                    //args are id, deps, factory. Should be normalized by the
	                    //define() function.
	                    callGetModule(args);
	                }
	            }
	        }
	
	        context = {
	            config: config,
	            contextName: contextName,
	            registry: registry,
	            defined: defined,
	            urlFetched: urlFetched,
	            defQueue: defQueue,
	            Module: Module,
	            makeModuleMap: makeModuleMap,
	            nextTick: req.nextTick,
	            onError: onError,
	
	            /**
	             * Set a configuration for the context.
	             * @param {Object} cfg config object to integrate.
	             */
	            configure: function (cfg) {
	                //Make sure the baseUrl ends in a slash.
	                if (cfg.baseUrl) {
	                    if (cfg.baseUrl.charAt(cfg.baseUrl.length - 1) !== '/') {
	                        cfg.baseUrl += '/';
	                    }
	                }
	
	                //Save off the paths since they require special processing,
	                //they are additive.
	                var shim = config.shim,
	                    objs = {
	                        paths: true,
	                        bundles: true,
	                        config: true,
	                        map: true
	                    };
	
	                eachProp(cfg, function (value, prop) {
	                    if (objs[prop]) {
	                        if (!config[prop]) {
	                            config[prop] = {};
	                        }
	                        mixin(config[prop], value, true, true);
	                    } else {
	                        config[prop] = value;
	                    }
	                });
	
	                //Reverse map the bundles
	                if (cfg.bundles) {
	                    eachProp(cfg.bundles, function (value, prop) {
	                        each(value, function (v) {
	                            if (v !== prop) {
	                                bundlesMap[v] = prop;
	                            }
	                        });
	                    });
	                }
	
	                //Merge shim
	                if (cfg.shim) {
	                    eachProp(cfg.shim, function (value, id) {
	                        //Normalize the structure
	                        if (isArray(value)) {
	                            value = {
	                                deps: value
	                            };
	                        }
	                        if ((value.exports || value.init) && !value.exportsFn) {
	                            value.exportsFn = context.makeShimExports(value);
	                        }
	                        shim[id] = value;
	                    });
	                    config.shim = shim;
	                }
	
	                //Adjust packages if necessary.
	                if (cfg.packages) {
	                    each(cfg.packages, function (pkgObj) {
	                        var location, name;
	
	                        pkgObj = typeof pkgObj === 'string' ? { name: pkgObj } : pkgObj;
	
	                        name = pkgObj.name;
	                        location = pkgObj.location;
	                        if (location) {
	                            config.paths[name] = pkgObj.location;
	                        }
	
	                        //Save pointer to main module ID for pkg name.
	                        //Remove leading dot in main, so main paths are normalized,
	                        //and remove any trailing .js, since different package
	                        //envs have different conventions: some use a module name,
	                        //some use a file name.
	                        config.pkgs[name] = pkgObj.name + '/' + (pkgObj.main || 'main')
	                                     .replace(currDirRegExp, '')
	                                     .replace(jsSuffixRegExp, '');
	                    });
	                }
	
	                //If there are any "waiting to execute" modules in the registry,
	                //update the maps for them, since their info, like URLs to load,
	                //may have changed.
	                eachProp(registry, function (mod, id) {
	                    //If module already has init called, since it is too
	                    //late to modify them, and ignore unnormalized ones
	                    //since they are transient.
	                    if (!mod.inited && !mod.map.unnormalized) {
	                        mod.map = makeModuleMap(id);
	                    }
	                });
	
	                //If a deps array or a config callback is specified, then call
	                //require with those args. This is useful when require is defined as a
	                //config object before require.js is loaded.
	                if (cfg.deps || cfg.callback) {
	                    context.require(cfg.deps || [], cfg.callback);
	                }
	            },
	
	            makeShimExports: function (value) {
	                function fn() {
	                    var ret;
	                    if (value.init) {
	                        ret = value.init.apply(global, arguments);
	                    }
	                    return ret || (value.exports && getGlobal(value.exports));
	                }
	                return fn;
	            },
	
	            makeRequire: function (relMap, options) {
	                options = options || {};
	
	                function localRequire(deps, callback, errback) {
	                    var id, map, requireMod;
	
	                    if (options.enableBuildCallback && callback && isFunction(callback)) {
	                        callback.__requireJsBuild = true;
	                    }
	
	                    if (typeof deps === 'string') {
	                        if (isFunction(callback)) {
	                            //Invalid call
	                            return onError(makeError('requireargs', 'Invalid require call'), errback);
	                        }
	
	                        //If require|exports|module are requested, get the
	                        //value for them from the special handlers. Caveat:
	                        //this only works while module is being defined.
	                        if (relMap && hasProp(handlers, deps)) {
	                            return handlers[deps](registry[relMap.id]);
	                        }
	
	                        //Synchronous access to one module. If require.get is
	                        //available (as in the Node adapter), prefer that.
	                        if (req.get) {
	                            return req.get(context, deps, relMap, localRequire);
	                        }
	
	                        //Normalize module name, if it contains . or ..
	                        map = makeModuleMap(deps, relMap, false, true);
	                        id = map.id;
	
	                        if (!hasProp(defined, id)) {
	                            return onError(makeError('notloaded', 'Module name "' +
	                                        id +
	                                        '" has not been loaded yet for context: ' +
	                                        contextName +
	                                        (relMap ? '' : '. Use require([])')));
	                        }
	                        return defined[id];
	                    }
	
	                    //Grab defines waiting in the global queue.
	                    intakeDefines();
	
	                    //Mark all the dependencies as needing to be loaded.
	                    context.nextTick(function () {
	                        //Some defines could have been added since the
	                        //require call, collect them.
	                        intakeDefines();
	
	                        requireMod = getModule(makeModuleMap(null, relMap));
	
	                        //Store if map config should be applied to this require
	                        //call for dependencies.
	                        requireMod.skipMap = options.skipMap;
	
	                        requireMod.init(deps, callback, errback, {
	                            enabled: true
	                        });
	
	                        checkLoaded();
	                    });
	
	                    return localRequire;
	                }
	
	                mixin(localRequire, {
	                    isBrowser: isBrowser,
	
	                    /**
	                     * Converts a module name + .extension into an URL path.
	                     * *Requires* the use of a module name. It does not support using
	                     * plain URLs like nameToUrl.
	                     */
	                    toUrl: function (moduleNamePlusExt) {
	                        var ext,
	                            index = moduleNamePlusExt.lastIndexOf('.'),
	                            segment = moduleNamePlusExt.split('/')[0],
	                            isRelative = segment === '.' || segment === '..';
	
	                        //Have a file extension alias, and it is not the
	                        //dots from a relative path.
	                        if (index !== -1 && (!isRelative || index > 1)) {
	                            ext = moduleNamePlusExt.substring(index, moduleNamePlusExt.length);
	                            moduleNamePlusExt = moduleNamePlusExt.substring(0, index);
	                        }
	
	                        return context.nameToUrl(normalize(moduleNamePlusExt,
	                                                relMap && relMap.id, true), ext,  true);
	                    },
	
	                    defined: function (id) {
	                        return hasProp(defined, makeModuleMap(id, relMap, false, true).id);
	                    },
	
	                    specified: function (id) {
	                        id = makeModuleMap(id, relMap, false, true).id;
	                        return hasProp(defined, id) || hasProp(registry, id);
	                    }
	                });
	
	                //Only allow undef on top level require calls
	                if (!relMap) {
	                    localRequire.undef = function (id) {
	                        //Bind any waiting define() calls to this context,
	                        //fix for #408
	                        takeGlobalQueue();
	
	                        var map = makeModuleMap(id, relMap, true),
	                            mod = getOwn(registry, id);
	
	                        removeScript(id);
	
	                        delete defined[id];
	                        delete urlFetched[map.url];
	                        delete undefEvents[id];
	
	                        //Clean queued defines too. Go backwards
	                        //in array so that the splices do not
	                        //mess up the iteration.
	                        eachReverse(defQueue, function(args, i) {
	                            if(args[0] === id) {
	                                defQueue.splice(i, 1);
	                            }
	                        });
	
	                        if (mod) {
	                            //Hold on to listeners in case the
	                            //module will be attempted to be reloaded
	                            //using a different config.
	                            if (mod.events.defined) {
	                                undefEvents[id] = mod.events;
	                            }
	
	                            cleanRegistry(id);
	                        }
	                    };
	                }
	
	                return localRequire;
	            },
	
	            /**
	             * Called to enable a module if it is still in the registry
	             * awaiting enablement. A second arg, parent, the parent module,
	             * is passed in for context, when this method is overridden by
	             * the optimizer. Not shown here to keep code compact.
	             */
	            enable: function (depMap) {
	                var mod = getOwn(registry, depMap.id);
	                if (mod) {
	                    getModule(depMap).enable();
	                }
	            },
	
	            /**
	             * Internal method used by environment adapters to complete a load event.
	             * A load event could be a script load or just a load pass from a synchronous
	             * load call.
	             * @param {String} moduleName the name of the module to potentially complete.
	             */
	            completeLoad: function (moduleName) {
	                var found, args, mod,
	                    shim = getOwn(config.shim, moduleName) || {},
	                    shExports = shim.exports;
	
	                takeGlobalQueue();
	
	                while (defQueue.length) {
	                    args = defQueue.shift();
	                    if (args[0] === null) {
	                        args[0] = moduleName;
	                        //If already found an anonymous module and bound it
	                        //to this name, then this is some other anon module
	                        //waiting for its completeLoad to fire.
	                        if (found) {
	                            break;
	                        }
	                        found = true;
	                    } else if (args[0] === moduleName) {
	                        //Found matching define call for this script!
	                        found = true;
	                    }
	
	                    callGetModule(args);
	                }
	
	                //Do this after the cycle of callGetModule in case the result
	                //of those calls/init calls changes the registry.
	                mod = getOwn(registry, moduleName);
	
	                if (!found && !hasProp(defined, moduleName) && mod && !mod.inited) {
	                    if (config.enforceDefine && (!shExports || !getGlobal(shExports))) {
	                        if (hasPathFallback(moduleName)) {
	                            return;
	                        } else {
	                            return onError(makeError('nodefine',
	                                             'No define call for ' + moduleName,
	                                             null,
	                                             [moduleName]));
	                        }
	                    } else {
	                        //A script that does not call define(), so just simulate
	                        //the call for it.
	                        callGetModule([moduleName, (shim.deps || []), shim.exportsFn]);
	                    }
	                }
	
	                checkLoaded();
	            },
	
	            /**
	             * Converts a module name to a file path. Supports cases where
	             * moduleName may actually be just an URL.
	             * Note that it **does not** call normalize on the moduleName,
	             * it is assumed to have already been normalized. This is an
	             * internal API, not a public one. Use toUrl for the public API.
	             */
	            nameToUrl: function (moduleName, ext, skipExt) {
	                var paths, syms, i, parentModule, url,
	                    parentPath, bundleId,
	                    pkgMain = getOwn(config.pkgs, moduleName);
	
	                if (pkgMain) {
	                    moduleName = pkgMain;
	                }
	
	                bundleId = getOwn(bundlesMap, moduleName);
	
	                if (bundleId) {
	                    return context.nameToUrl(bundleId, ext, skipExt);
	                }
	
	                //If a colon is in the URL, it indicates a protocol is used and it is just
	                //an URL to a file, or if it starts with a slash, contains a query arg (i.e. ?)
	                //or ends with .js, then assume the user meant to use an url and not a module id.
	                //The slash is important for protocol-less URLs as well as full paths.
	                if (req.jsExtRegExp.test(moduleName)) {
	                    //Just a plain path, not module name lookup, so just return it.
	                    //Add extension if it is included. This is a bit wonky, only non-.js things pass
	                    //an extension, this method probably needs to be reworked.
	                    url = moduleName + (ext || '');
	                } else {
	                    //A module that needs to be converted to a path.
	                    paths = config.paths;
	
	                    syms = moduleName.split('/');
	                    //For each module name segment, see if there is a path
	                    //registered for it. Start with most specific name
	                    //and work up from it.
	                    for (i = syms.length; i > 0; i -= 1) {
	                        parentModule = syms.slice(0, i).join('/');
	
	                        parentPath = getOwn(paths, parentModule);
	                        if (parentPath) {
	                            //If an array, it means there are a few choices,
	                            //Choose the one that is desired
	                            if (isArray(parentPath)) {
	                                parentPath = parentPath[0];
	                            }
	                            syms.splice(0, i, parentPath);
	                            break;
	                        }
	                    }
	
	                    //Join the path parts together, then figure out if baseUrl is needed.
	                    url = syms.join('/');
	                    url += (ext || (/^data\:|\?/.test(url) || skipExt ? '' : '.js'));
	                    url = (url.charAt(0) === '/' || url.match(/^[\w\+\.\-]+:/) ? '' : config.baseUrl) + url;
	                }
	
	                return config.urlArgs ? url +
	                                        ((url.indexOf('?') === -1 ? '?' : '&') +
	                                         config.urlArgs) : url;
	            },
	
	            //Delegates to req.load. Broken out as a separate function to
	            //allow overriding in the optimizer.
	            load: function (id, url) {
	                req.load(context, id, url);
	            },
	
	            /**
	             * Executes a module callback function. Broken out as a separate function
	             * solely to allow the build system to sequence the files in the built
	             * layer in the right sequence.
	             *
	             * @private
	             */
	            execCb: function (name, callback, args, exports) {
	                return callback.apply(exports, args);
	            },
	
	            /**
	             * callback for script loads, used to check status of loading.
	             *
	             * @param {Event} evt the event from the browser for the script
	             * that was loaded.
	             */
	            onScriptLoad: function (evt) {
	                //Using currentTarget instead of target for Firefox 2.0's sake. Not
	                //all old browsers will be supported, but this one was easy enough
	                //to support and still makes sense.
	                if (evt.type === 'load' ||
	                        (readyRegExp.test((evt.currentTarget || evt.srcElement).readyState))) {
	                    //Reset interactive script so a script node is not held onto for
	                    //to long.
	                    interactiveScript = null;
	
	                    //Pull out the name of the module and the context.
	                    var data = getScriptData(evt);
	                    context.completeLoad(data.id);
	                }
	            },
	
	            /**
	             * Callback for script errors.
	             */
	            onScriptError: function (evt) {
	                var data = getScriptData(evt);
	                if (!hasPathFallback(data.id)) {
	                    return onError(makeError('scripterror', 'Script error for: ' + data.id, evt, [data.id]));
	                }
	            }
	        };
	
	        context.require = context.makeRequire();
	        return context;
	    }
	
	    /**
	     * Main entry point.
	     *
	     * If the only argument to require is a string, then the module that
	     * is represented by that string is fetched for the appropriate context.
	     *
	     * If the first argument is an array, then it will be treated as an array
	     * of dependency string names to fetch. An optional function callback can
	     * be specified to execute when all of those dependencies are available.
	     *
	     * Make a local req variable to help Caja compliance (it assumes things
	     * on a require that are not standardized), and to give a short
	     * name for minification/local scope use.
	     */
	    req = requirejs = function (deps, callback, errback, optional) {
	
	        //Find the right context, use default
	        var context, config,
	            contextName = defContextName;
	
	        // Determine if have config object in the call.
	        if (!isArray(deps) && typeof deps !== 'string') {
	            // deps is a config object
	            config = deps;
	            if (isArray(callback)) {
	                // Adjust args if there are dependencies
	                deps = callback;
	                callback = errback;
	                errback = optional;
	            } else {
	                deps = [];
	            }
	        }
	
	        if (config && config.context) {
	            contextName = config.context;
	        }
	
	        context = getOwn(contexts, contextName);
	        if (!context) {
	            context = contexts[contextName] = req.s.newContext(contextName);
	        }
	
	        if (config) {
	            context.configure(config);
	        }
	
	        return context.require(deps, callback, errback);
	    };
	
	    /**
	     * Support require.config() to make it easier to cooperate with other
	     * AMD loaders on globally agreed names.
	     */
	    req.config = function (config) {
	        return req(config);
	    };
	
	    /**
	     * Execute something after the current tick
	     * of the event loop. Override for other envs
	     * that have a better solution than setTimeout.
	     * @param  {Function} fn function to execute later.
	     */
	    req.nextTick = typeof setTimeout !== 'undefined' ? function (fn) {
	        setTimeout(fn, 4);
	    } : function (fn) { fn(); };
	
	    /**
	     * Export require as a global, but only if it does not already exist.
	     */
	    if (!require) {
	        require = req;
	    }
	
	    req.version = version;
	
	    //Used to filter out dependencies that are already paths.
	    req.jsExtRegExp = /^\/|:|\?|\.js$/;
	    req.isBrowser = isBrowser;
	    s = req.s = {
	        contexts: contexts,
	        newContext: newContext
	    };
	
	    //Create default context.
	    req({});
	
	    //Exports some context-sensitive methods on global require.
	    each([
	        'toUrl',
	        'undef',
	        'defined',
	        'specified'
	    ], function (prop) {
	        //Reference from contexts instead of early binding to default context,
	        //so that during builds, the latest instance of the default context
	        //with its config gets used.
	        req[prop] = function () {
	            var ctx = contexts[defContextName];
	            return ctx.require[prop].apply(ctx, arguments);
	        };
	    });
	
	    if (isBrowser) {
	        head = s.head = document.getElementsByTagName('head')[0];
	        //If BASE tag is in play, using appendChild is a problem for IE6.
	        //When that browser dies, this can be removed. Details in this jQuery bug:
	        //http://dev.jquery.com/ticket/2709
	        baseElement = document.getElementsByTagName('base')[0];
	        if (baseElement) {
	            head = s.head = baseElement.parentNode;
	        }
	    }
	
	    /**
	     * Any errors that require explicitly generates will be passed to this
	     * function. Intercept/override it if you want custom error handling.
	     * @param {Error} err the error object.
	     */
	    req.onError = defaultOnError;
	
	    /**
	     * Creates the node for the load command. Only used in browser envs.
	     */
	    req.createNode = function (config, moduleName, url) {
	        var node = config.xhtml ?
	                document.createElementNS('http://www.w3.org/1999/xhtml', 'html:script') :
	                document.createElement('script');
	        node.type = config.scriptType || 'text/javascript';
	        node.charset = 'utf-8';
	        node.async = true;
	        return node;
	    };
	
	    /**
	     * Does the request to load a module for the browser case.
	     * Make this a separate function to allow other environments
	     * to override it.
	     *
	     * @param {Object} context the require context to find state.
	     * @param {String} moduleName the name of the module.
	     * @param {Object} url the URL to the module.
	     */
	    req.load = function (context, moduleName, url) {
	        var config = (context && context.config) || {},
	            node;
	        if (isBrowser) {
	            //In the browser so use a script tag
	            node = req.createNode(config, moduleName, url);
	
	            node.setAttribute('data-requirecontext', context.contextName);
	            node.setAttribute('data-requiremodule', moduleName);
	
	            //Set up load listener. Test attachEvent first because IE9 has
	            //a subtle issue in its addEventListener and script onload firings
	            //that do not match the behavior of all other browsers with
	            //addEventListener support, which fire the onload event for a
	            //script right after the script execution. See:
	            //https://connect.microsoft.com/IE/feedback/details/648057/script-onload-event-is-not-fired-immediately-after-script-execution
	            //UNFORTUNATELY Opera implements attachEvent but does not follow the script
	            //script execution mode.
	            if (node.attachEvent &&
	                    //Check if node.attachEvent is artificially added by custom script or
	                    //natively supported by browser
	                    //read https://github.com/jrburke/requirejs/issues/187
	                    //if we can NOT find [native code] then it must NOT natively supported.
	                    //in IE8, node.attachEvent does not have toString()
	                    //Note the test for "[native code" with no closing brace, see:
	                    //https://github.com/jrburke/requirejs/issues/273
	                    !(node.attachEvent.toString && node.attachEvent.toString().indexOf('[native code') < 0) &&
	                    !isOpera) {
	                //Probably IE. IE (at least 6-8) do not fire
	                //script onload right after executing the script, so
	                //we cannot tie the anonymous define call to a name.
	                //However, IE reports the script as being in 'interactive'
	                //readyState at the time of the define call.
	                useInteractive = true;
	
	                node.attachEvent('onreadystatechange', context.onScriptLoad);
	                //It would be great to add an error handler here to catch
	                //404s in IE9+. However, onreadystatechange will fire before
	                //the error handler, so that does not help. If addEventListener
	                //is used, then IE will fire error before load, but we cannot
	                //use that pathway given the connect.microsoft.com issue
	                //mentioned above about not doing the 'script execute,
	                //then fire the script load event listener before execute
	                //next script' that other browsers do.
	                //Best hope: IE10 fixes the issues,
	                //and then destroys all installs of IE 6-9.
	                //node.attachEvent('onerror', context.onScriptError);
	            } else {
	                node.addEventListener('load', context.onScriptLoad, false);
	                node.addEventListener('error', context.onScriptError, false);
	            }
	            node.src = url;
	
	            //For some cache cases in IE 6-8, the script executes before the end
	            //of the appendChild execution, so to tie an anonymous define
	            //call to the module name (which is stored on the node), hold on
	            //to a reference to this node, but clear after the DOM insertion.
	            currentlyAddingScript = node;
	            if (baseElement) {
	                head.insertBefore(node, baseElement);
	            } else {
	                head.appendChild(node);
	            }
	            currentlyAddingScript = null;
	
	            return node;
	        } else if (isWebWorker) {
	            try {
	                //In a web worker, use importScripts. This is not a very
	                //efficient use of importScripts, importScripts will block until
	                //its script is downloaded and evaluated. However, if web workers
	                //are in play, the expectation that a build has been done so that
	                //only one script needs to be loaded anyway. This may need to be
	                //reevaluated if other use cases become common.
	                importScripts(url);
	
	                //Account for anonymous modules
	                context.completeLoad(moduleName);
	            } catch (e) {
	                context.onError(makeError('importscripts',
	                                'importScripts failed for ' +
	                                    moduleName + ' at ' + url,
	                                e,
	                                [moduleName]));
	            }
	        }
	    };
	
	    function getInteractiveScript() {
	        if (interactiveScript && interactiveScript.readyState === 'interactive') {
	            return interactiveScript;
	        }
	
	        eachReverse(scripts(), function (script) {
	            if (script.readyState === 'interactive') {
	                return (interactiveScript = script);
	            }
	        });
	        return interactiveScript;
	    }
	
	    //Look for a data-main script attribute, which could also adjust the baseUrl.
	    if (isBrowser && !cfg.skipDataMain) {
	        //Figure out baseUrl. Get it from the script tag with require.js in it.
	        eachReverse(scripts(), function (script) {
	            //Set the 'head' where we can append children by
	            //using the script's parent.
	            if (!head) {
	                head = script.parentNode;
	            }
	
	            //Look for a data-main attribute to set main script for the page
	            //to load. If it is there, the path to data main becomes the
	            //baseUrl, if it is not already set.
	            dataMain = script.getAttribute('data-main');
	            if (dataMain) {
	                //Preserve dataMain in case it is a path (i.e. contains '?')
	                mainScript = dataMain;
	
	                //Set final baseUrl if there is not already an explicit one.
	                if (!cfg.baseUrl) {
	                    //Pull off the directory of data-main for use as the
	                    //baseUrl.
	                    src = mainScript.split('/');
	                    mainScript = src.pop();
	                    subPath = src.length ? src.join('/')  + '/' : './';
	
	                    cfg.baseUrl = subPath;
	                }
	
	                //Strip off any trailing .js since mainScript is now
	                //like a module name.
	                mainScript = mainScript.replace(jsSuffixRegExp, '');
	
	                 //If mainScript is still a path, fall back to dataMain
	                if (req.jsExtRegExp.test(mainScript)) {
	                    mainScript = dataMain;
	                }
	
	                //Put the data-main script in the files to load.
	                cfg.deps = cfg.deps ? cfg.deps.concat(mainScript) : [mainScript];
	
	                return true;
	            }
	        });
	    }
	
	    /**
	     * The function that handles definitions of modules. Differs from
	     * require() in that a string for the module should be the first argument,
	     * and the function to execute after dependencies are loaded should
	     * return a value to define the module corresponding to the first argument's
	     * name.
	     */
	    define = function (name, deps, callback) {
	        var node, context;
	
	        //Allow for anonymous modules
	        if (typeof name !== 'string') {
	            //Adjust args appropriately
	            callback = deps;
	            deps = name;
	            name = null;
	        }
	
	        //This module may not have dependencies
	        if (!isArray(deps)) {
	            callback = deps;
	            deps = null;
	        }
	
	        //If no name, and callback is a function, then figure out if it a
	        //CommonJS thing with dependencies.
	        if (!deps && isFunction(callback)) {
	            deps = [];
	            //Remove comments from the callback string,
	            //look for require calls, and pull them into the dependencies,
	            //but only if there are function args.
	            if (callback.length) {
	                callback
	                    .toString()
	                    .replace(commentRegExp, '')
	                    .replace(cjsRequireRegExp, function (match, dep) {
	                        deps.push(dep);
	                    });
	
	                //May be a CommonJS thing even without require calls, but still
	                //could use exports, and module. Avoid doing exports and module
	                //work though if it just needs require.
	                //REQUIRES the function to expect the CommonJS variables in the
	                //order listed below.
	                deps = (callback.length === 1 ? ['require'] : ['require', 'exports', 'module']).concat(deps);
	            }
	        }
	
	        //If in IE 6-8 and hit an anonymous define() call, do the interactive
	        //work.
	        if (useInteractive) {
	            node = currentlyAddingScript || getInteractiveScript();
	            if (node) {
	                if (!name) {
	                    name = node.getAttribute('data-requiremodule');
	                }
	                context = contexts[node.getAttribute('data-requirecontext')];
	            }
	        }
	
	        //Always save off evaluating the def call until the script onload handler.
	        //This allows multiple modules to be in a file without prematurely
	        //tracing dependencies, and allows for anonymous module support,
	        //where the module name is not known until the script onload event
	        //occurs. If no context, use the global queue, and get it processed
	        //in the onscript load callback.
	        (context ? context.defQueue : globalDefQueue).push([name, deps, callback]);
	    };
	
	    define.amd = {
	        jQuery: true
	    };
	
	
	    /**
	     * Executes the text. Normally just uses eval, but can be modified
	     * to use a better, environment-specific call. Only used for transpiling
	     * loader plugins, not for plain JS modules.
	     * @param {String} text the text to execute/evaluate.
	     */
	    req.exec = function (text) {
	        /*jslint evil: true */
	        return eval(text);
	    };
	
	    //Set up with config info.
	    req(cfg);
	}(this));


/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(process) {/*******************************************************************************
	 * @license
	 * Copyright (c) 2012 IBM Corporation and others.
	 * All rights reserved. This program and the accompanying materials are made 
	 * available under the terms of the Eclipse Public License v1.0 
	 * (http://www.eclipse.org/legal/epl-v10.html), and the Eclipse Distribution 
	 * License v1.0 (http://www.eclipse.org/org/documents/edl-v10.html). 
	 * 
	 * Contributors: IBM Corporation - initial API and implementation
	 ******************************************************************************/
	/*eslint-env browser, amd, node*/
	(function(root, factory) { // UMD
	    if (true) { //$NON-NLS-0$
	        !(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    } else if (typeof exports === "object") { //$NON-NLS-0$
	        module.exports = factory();
	    } else {
	        root.orion = root.orion || {};
	        root.orion.Deferred = factory();
	    }
	}(this, function() {
	    var queue = [],
	        running = false;
	
	    function run() {
	        var fn;
	        while ((fn = queue.shift())) {
	            fn();
	        }
	        running = false;
	    }
	
		var runAsync = (function() {
			if (typeof process !== "undefined" && typeof process.nextTick === "function") {
				var nextTick = process.nextTick;
	    		return function() {
	    			nextTick(run);
	    		};
			} else if (typeof MutationObserver === "function") {
				var div = document.createElement("div");
				var observer = new MutationObserver(run);
				observer.observe(div, {
	            	attributes: true
	        	});
	        	return function() {
	        		div.setAttribute("class", "_tick");
	        	};
			}
			return function() {
				setTimeout(run, 0);
			};
		})();
	
	    function enqueue(fn) {
	        queue.push(fn);
	        if (!running) {
	            running = true;
	            runAsync();
	        }
	    }
	
	    function noReturn(fn) {
	        return function(result) {
	            fn(result);
	        };
	    }
	    
	    function settleDeferred(fn, result, deferred) {
	    	try {
	    		var listenerResult = fn(result);
	    		var listenerThen = listenerResult && (typeof listenerResult === "object" || typeof listenerResult === "function") && listenerResult.then;
	    		if (typeof listenerThen === "function") {
	    			if (listenerResult === deferred.promise) {
	    				deferred.reject(new TypeError());
	    			} else {
	    				var listenerResultCancel = listenerResult.cancel;
	    				if (typeof listenerResultCancel === "function") {
	    					deferred._parentCancel = listenerResultCancel.bind(listenerResult);
	    				} else {
	    					delete deferred._parentCancel;
	    				}
	    				listenerThen.call(listenerResult, noReturn(deferred.resolve), noReturn(deferred.reject), noReturn(deferred.progress));
	    			}
	    		} else {
	    			deferred.resolve(listenerResult);
	    		}
	    	} catch (e) {
	    		deferred.reject(e);
	    	}
	    }
	
	
	    /**
	     * @name orion.Promise
	     * @class Interface representing an eventual value.
	     * @description Promise is an interface that represents an eventual value returned from the single completion of an operation.
	     *
	     * <p>For a concrete class that implements Promise and provides additional API, see {@link orion.Deferred}.</p>
	     * @see orion.Deferred
	     * @see orion.Deferred#promise
	     */
	    /**
	     * @name then
	     * @function
	     * @memberOf orion.Promise.prototype
	     * @description Adds handlers to be called on fulfillment or progress of this promise.
	     * @param {Function} [onResolve] Called when this promise is resolved.
	     * @param {Function} [onReject] Called when this promise is rejected.
	     * @param {Function} [onProgress] May be called to report progress events on this promise.
	     * @returns {orion.Promise} A new promise that is fulfilled when the given <code>onResolve</code> or <code>onReject</code>
	     * callback is finished. The callback's return value gives the fulfillment value of the returned promise.
	     */
	    /**
	     * Cancels this promise.
	     * @name cancel
	     * @function
	     * @memberOf orion.Promise.prototype
	     * @param {Object} reason The reason for canceling this promise.
	     * @param {Boolean} [strict]
	     */
	
	    /**
	     * @name orion.Deferred
	     * @borrows orion.Promise#then as #then
	     * @borrows orion.Promise#cancel as #cancel
	     * @class Provides abstraction over asynchronous operations.
	     * @description Deferred provides abstraction over asynchronous operations.
	     *
	     * <p>Because Deferred implements the {@link orion.Promise} interface, a Deferred may be used anywhere a Promise is called for.
	     * However, in most such cases it is recommended to use the Deferred's {@link #promise} field instead, which exposes a 
	     * simplified, minimally <a href="https://github.com/promises-aplus/promises-spec">Promises/A+</a>-compliant interface to callers.</p>
	     */
	    function Deferred() {
	        var result, state, listeners = [],
	            _this = this;
	
	        function notify() {
	            var listener;
	            while ((listener = listeners.shift())) {
	                var deferred = listener.deferred;
	                var methodName = state === "fulfilled" ? "resolve" : "reject"; //$NON-NLS-0$ //$NON-NLS-1$ //$NON-NLS-2$
	                var fn = listener[methodName];
	                if (typeof fn === "function") { //$NON-NLS-0$
	                	settleDeferred(fn, result, deferred);
	                } else {
	                    deferred[methodName](result);
	                }
	            }
	        }
	
	        function _reject(error) {
	            delete _this._parentCancel;
	            state = "rejected";
	            result = error;
	            if (listeners.length) {
	                enqueue(notify);
	            }
	        }
	
	        function _resolve(value) {
	            function once(fn) {
	                return function(result) {
	                    if (!state || state === "assumed") {
	                          fn(result);
	                    }
	                };
	            }
	            delete _this._parentCancel;
	            try {
	                var valueThen = value && (typeof value === "object" || typeof value === "function") && value.then;
	                if (typeof valueThen === "function") {
	                    if (value === _this) {
	                        _reject(new TypeError());
	                    } else {
	                        state = "assumed";
	                        var valueCancel = value && value.cancel;
	                        if (typeof valueCancel !== "function") {
	                            var deferred = new Deferred();
	                            value = deferred.promise;
	                            try {
	                                valueThen(deferred.resolve, deferred.reject, deferred.progress);
	                            } catch (thenError) {
	                                deferred.reject(thenError);
	                            }
	                            valueCancel = value.cancel;
	                            valueThen = value.then;
	                        }
	                        result = value;
	                        valueThen.call(value, once(_resolve), once(_reject));
	                        _this._parentCancel = valueCancel.bind(value);
	                    }
	                } else {
	                    state = "fulfilled";
	                    result = value;
	                    if (listeners.length) {
	                        enqueue(notify);
	                    }
	                }
	            } catch (error) {
	                once(_reject)(error);
	            }
	        }
	
	        function cancel() {
	            var parentCancel = _this._parentCancel;
	            if (parentCancel) {
	                delete _this._parentCancel;
	                parentCancel();
	            } else if (!state) {
	                var cancelError = new Error("Cancel");
	                cancelError.name = "Cancel";
	                _reject(cancelError);
	            }
	        }
	
	
	        /**
	         * Resolves this Deferred.
	         * @name resolve
	         * @function
	         * @memberOf orion.Deferred.prototype
	         * @param {Object} value
	         * @returns {orion.Promise}
	         */
	        this.resolve = function(value) {
	            if (!state) {
	                _resolve(value);
	            }
	            return _this;
	        };
	
	        /**
	         * Rejects this Deferred.
	         * @name reject
	         * @function
	         * @memberOf orion.Deferred.prototype
	         * @param {Object} error
	         * @param {Boolean} [strict]
	         * @returns {orion.Promise}
	         */
	        this.reject = function(error) {
	            if (!state) {
	                _reject(error);
	            }
	            return _this;
	        };
	
	        /**
	         * Notifies listeners of progress on this Deferred.
	         * @name progress
	         * @function
	         * @memberOf orion.Deferred.prototype
	         * @param {Object} update The progress update.
	         * @returns {orion.Promise}
	         */
	        this.progress = function(update) {
	            if (!state) {
	                listeners.forEach(function(listener) {
	                    if (listener.progress) {
	                        try {
	                            listener.progress(update);
	                        } catch (ignore) {
	                            // ignore
	                        }
	                    }
	                });
	            }
	            return _this.promise;
	        };
	
	        this.cancel = function() {
	            if (_this._parentCancel) {
	                setTimeout(cancel, 0);
	            } else {
	                cancel();
	            }
	            return _this;
	        };
	
	        // Note: "then" ALWAYS returns before having onResolve or onReject called as per http://promises-aplus.github.com/promises-spec/
	        this.then = function(onFulfill, onReject, onProgress) {
	        	var deferred = new Deferred();
	            deferred._parentCancel = _this.promise.cancel;
	            listeners.push({
	                resolve: onFulfill,
	                reject: onReject,
	                progress: onProgress,
	                deferred: deferred
	            });
	            if (state === "fulfilled" || state === "rejected") {
	                enqueue(notify);
	            }
	            return deferred.promise;
	        };
	
	        /**
	         * The promise exposed by this Deferred.
	         * @name promise
	         * @field
	         * @memberOf orion.Deferred.prototype
	         * @type orion.Promise
	         */
	        this.promise = {
	            then: _this.then,
	            cancel: _this.cancel
	        };
	    }
	
	    /**
	     * Returns a promise that represents the outcome of all the input promises.
	     * <p>When <code>all</code> is called with a single parameter, the returned promise has <dfn>eager</dfn> semantics,
	     * meaning that if any input promise rejects, the returned promise immediately rejects, without waiting for the rest of the
	     * input promises to fulfill.</p>
	     *
	     * To obtain <dfn>lazy</dfn> semantics (meaning the returned promise waits for every input promise to fulfill), pass the
	     * optional parameter <code>optOnError</code>.
	     * @name all
	     * @function
	     * @memberOf orion.Deferred
	     * @static
	     * @param {orion.Promise[]} promises The input promises.
	     * @param {Function} [optOnError] Handles a rejected input promise. <code>optOnError</code> is invoked for every rejected
	     * input promise, and is passed the reason the input promise was rejected. <p><code>optOnError</code> can return a value, which
	     * allows it to act as a transformer: the return value serves as the final fulfillment value of the rejected promise in the 
	     * results array generated by <code>all</code>.
	     * @returns {orion.Promise} A new promise. The returned promise is generally fulfilled to an <code>Array</code> whose elements
	     * give the fulfillment values of the input promises. <p>However, if an input promise rejects and eager semantics is used, the 
	     * returned promise will instead be fulfilled to a single error value.</p>
	     */
	    Deferred.all = function(promises, optOnError) {
	        var count = promises.length,
	            result = [],
	            rejected = false,
	            deferred = new Deferred();
	
	        deferred.then(undefined, function() {
	            rejected = true;
	            promises.forEach(function(promise) {
	                if (promise.cancel) {
	                    promise.cancel();
	                }
	            });
	        });
	
	        function onResolve(i, value) {
	            if (!rejected) {
	                result[i] = value;
	                if (--count === 0) {
	                    deferred.resolve(result);
	                }
	            }
	        }
	
	        function onReject(i, error) {
	            if (!rejected) {
	                if (optOnError) {
	                    try {
	                        onResolve(i, optOnError(error));
	                        return;
	                    } catch (e) {
	                        error = e;
	                    }
	                }
	                deferred.reject(error);
	            }
	        }
	
	        if (count === 0) {
	            deferred.resolve(result);
	        } else {
	            promises.forEach(function(promise, i) {
	                promise.then(onResolve.bind(undefined, i), onReject.bind(undefined, i));
	            });
	        }
	        return deferred.promise;
	    };
	
	    /**
	     * Applies callbacks to a promise or to a regular object.
	     * @name when
	     * @function
	     * @memberOf orion.Deferred
	     * @static
	     * @param {Object|orion.Promise} value Either a {@link orion.Promise}, or a normal value.
	     * @param {Function} onResolve Called when the <code>value</code> promise is resolved. If <code>value</code> is not a promise,
	     * this function is called immediately.
	     * @param {Function} onReject Called when the <code>value</code> promise is rejected. If <code>value</code> is not a promise, 
	     * this function is never called.
	     * @param {Function} onProgress Called when the <code>value</code> promise provides a progress update. If <code>value</code> is
	     * not a promise, this function is never called.
	     * @returns {orion.Promise} A new promise.
	     */
	    Deferred.when = function(value, onResolve, onReject, onProgress) {
	        var promise, deferred;
	        if (value && typeof value.then === "function") { //$NON-NLS-0$
	            promise = value;
	        } else {
	            deferred = new Deferred();
	            deferred.resolve(value);
	            promise = deferred.promise;
	        }
	        return promise.then(onResolve, onReject, onProgress);
	    };
	
	    return Deferred;
	}));
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14)))

/***/ },
/* 14 */
/***/ function(module, exports) {

	// shim for using process in browser
	
	var process = module.exports = {};
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;
	
	function cleanUpNextTick() {
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}
	
	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = setTimeout(cleanUpNextTick);
	    draining = true;
	
	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    clearTimeout(timeout);
	}
	
	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        setTimeout(drainQueue, 0);
	    }
	};
	
	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};
	
	function noop() {}
	
	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;
	
	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};
	
	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*******************************************************************************
	 * @license
	 * Copyright (c) 2013 IBM Corporation and others.
	 * All rights reserved. This program and the accompanying materials are made 
	 * available under the terms of the Eclipse Public License v1.0 
	 * (http://www.eclipse.org/legal/epl-v10.html), and the Eclipse Distribution 
	 * License v1.0 (http://www.eclipse.org/org/documents/edl-v10.html). 
	 * 
	 * Contributors: IBM Corporation - initial API and implementation
	 ******************************************************************************/
	/*eslint-env browser, amd*/
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
		function mixin(target/*, source..*/) {
			var hasOwnProperty = Object.prototype.hasOwnProperty;
			for (var j = 1, len = arguments.length; j < len; j++) {
				var source = arguments[j];
				for (var key in source) {
					if (hasOwnProperty.call(source, key)) {
						target[key] = source[key];
					}
				}
			}
			return target;
		}
	
		/**
		 * @name orion.objects
		 * @class Object-oriented helpers.
		 */
		return {
			/**
			 * Creates a shallow clone of the given <code>object</code>.
			 * @name orion.objects.clone
			 * @function
			 * @static
			 * @param {Object|Array} object The object to clone. Must be a "normal" Object or Array. Other built-ins,
			 * host objects, primitives, etc, will not work.
			 * @returns {Object|Array} A clone of <code>object</code>.
			 */
			clone: function(object) {
				if (Array.isArray(object)) {
					return Array.prototype.slice.call(object);
				}
				var clone = Object.create(Object.getPrototypeOf(object));
				mixin(clone, object);
				return clone;
			},
			/**
			 * Mixes all <code>source</code>'s own enumerable properties into <code>target</code>. Multiple source objects
			 * can be passed as varargs.
			 * @name orion.objects.mixin
			 * @function
			 * @static
			 * @param {Object} target
			 * @param {Object} source
			 */
			mixin: mixin,
			/**
			 * Wraps an object into an Array if necessary.
			 * @name orion.objects.toArray
			 * @function
			 * @static
			 * @param {Object} obj An object.
			 * @returns {Array} Returns <code>obj</code> unchanged, if <code>obj</code> is an Array. Otherwise returns a 1-element Array
			 * whose sole element is <code>obj</code>.
			 */
			toArray: function(o) {
				return Array.isArray(o) ? o : [o];
			}
		};
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 16 */
/***/ function(module, exports) {
	if (typeof window === 'undefined') {
		window = {}
	}
	var amdi18n={"__root":{"pluginName":"Orion JavaScript Tool Support","pluginDescription":"This plug-in provides JavaScript tools support for Orion, like editing, search, navigation, validation, and code completion.","error":"Error","warning":"Warning","ignore":"Ignore","ternContentAssist":"Tern JavaScript content assist","ternProjectAssist":"Tern project file content assist","emptyFileTemplateDoc":"Create new default contents for the .tern-project file","prefCodeStyle":"Code Style","prefBestPractices":"Best Practices","prefPotentialProblems":"Potential Programming Problems","sourceOutline":"Source Outline","sourceOutlineTitle":"JavaScript source outline","contentAssist":"JavaScript content assist","eslintValidator":"JavaScript Validator","missingCurly":"Statements not enclosed in braces:","curlyFixName":"Enclose statement in braces","noCaller":"Discouraged 'arguments.caller' or 'arguments.callee' use:","noCommaDangle":"Trailing commas in object expressions:","noCondAssign":"Assignments in conditional expressions:","noConsole":"Discouraged console use in browser code:","noConstantCondition":"Constant as conditional expression:","noRegexSpaces":"Multiple spaces in regular expressions:","noReservedKeys":"Reserved words used as property keys:","noReservedKeysFixName":"Surround key with quotes","noEqeqeq":"Discouraged '==' use:","noDebugger":"Discouraged 'debugger' statement use:","noDebuggerFixName":"Remove statement","noWith":"Discouraged 'with' statement use:","noEval":"Discouraged 'eval()' use:","noImpliedEval":"Discouraged implied 'eval()' use:","noDupeKeys":"Duplicate object keys:","noDupeKeysFixName":"Rename key","noDuplicateCaseFixName":"Rename case","noIterator":"Discouraged __iterator__ property use:","noProto":"Discouraged __proto__ property use:","noUndefInit":"Explicitly initializing variables to undefined:","noundefinitFixName":"Remove assignment","useIsNaN":"NaN not compared with isNaN():","useIsNanFixName":"Use isNaN()","missingDoc":"Missing JSDoc:","missingDocFixName":"Generate element JSDoc","noUnreachable":"Unreachable code:","noFallthrough":"Switch case fall-through:","useBeforeDefine":"Member used before definition:","noEmptyBlock":"Undocumented empty block:","newParens":"Missing parentheses in constructor call:","newparensFixName":"Add parentheses","noNewArray":"Discouraged 'new Array()':","noNewArrayFixName":"Convert to array literal","noNewFunc":"Discouraged 'new Function()':","noNewObject":"Discouraged 'new Object()':","noNewWrappers":"Discouraged wrapper objects:","noNewWrappersLiteralFixName":"Convert to literal","noNewWrappersFixName":"Remove 'new' keyword","noMixedSpacesAndTabs":"Mixed spaces and tabs:","missingSemi":"Missing semicolons:","unusedVars":"Unused variables:","varRedecl":"Variable re-declarations:","varShadow":"Variable shadowing:","undefMember":"Undeclared global reference:","unnecessarySemis":"Unnecessary semicolons:","unusedParams":"Unused parameters:","unsupportedJSLint":"Unsupported environment directive:","noThrowLiteral":"Literal used in 'throw':","noselfassignFixName":"Remove assignment","noselfassignRenameFixName":"Rename right hand variable","missingNls":"Non-externalized string literals (missing $NON-NLS$ tag):","unnecessaryNls":"Unnecessary $NON-NLS$ tags:","generateDocName":"Generate Element Comment","generateDocTooltip":"Generate a JSDoc-like comment for the selected JavaScript element","renameElement":"Rename Element","renameElementTooltip":"Rename the selected JavaScript element","renameFailedTimedOut":"Could not rename element - operation timed out","openDeclName":"Open Declaration","openDeclTooltip":"Open the declaration of the selected element","openImplName":"Open Implementation","openImplTooltip":"Open the implementation of the selected element","noImplFound":"No implementation was found","implTimedOut":"Could not compute implementation, the operation timed out","workspaceRefsName":"Workspace","workspaceRefsTooltip":"Show all references to the selection in the workspace","projectRefsName":"Project","projectRefsTooltip":"Show all references to the selection in the current project","referencesMenuName":"References","referencesMenuTooltip":"Show different kinds of references","noDeclTimedOut":"No declaration was found - operation timed out","validTypeof":"Invalid 'typeof' comparison:","noSparseArrays":"Sparse array declarations:","javascriptValidation":"Javascript Validation","jsHover":"JavaScript Hover Provider","removeExtraSemiFixName":"Remove extra semicolon","addFallthroughCommentFixName":"Add $FALLTHROUGH$ comment","addEmptyCommentFixName":"Comment empty block","addESLintEnvFixName":"Add to eslint-env directive","addESLintGlobalFixName":"Add to globals directive","removeUnusedParamsFixName":"Remove parameter","commentCallbackFixName":"Add @callback to function","eqeqeqFixName":"Update operator","unreachableFixName":"Remove unreachable code","sparseArrayFixName":"Convert to normal array","semiFixName":"Add missing ';'","radix":"Missing radix parameter to parseInt():","radixFixName":"Add default radix","unusedVarsUnusedFixName":"Remove unused variable","unusedFuncDeclFixName":"Remove unused function","noCommaDangleFixName":"Remove extra ','","addBBreakFixName":"Add break statement","noShadowGlobals":"Global shadowing:","noThrowLiteralFixName":"Change to Error","missingNlsFixName":"Add missing $NON-NLS$ tag","unnecessaryNlsFixName":"Remove unnecessary $NON-NLS$ tag","funcProposalDescription":" - The name of the function","funcParamProposalDescription":" - Function parameter","eslintRuleProposalDescripton":" - ESLint rule","eslintEnvProposalDescription":" - ESLint environment name","onlineDocumentationProposalEntry":"\n\n[Online documentation](${0})","keywordProposalDescription":" - Keyword","keywordHoverProposal":"ECMAScript reserved keyword","reloadPluginCmd":"Reload","reloadPluginCmdTooltip":"Reload plug-in","reloadAllPluginsCmd":"Reload All","reloadAllPluginsCmdTooltip":"Reload all plug-ins","templateHoverHeader":"Template source code:\n\n","templateAssistHeader":"Templates","keywordAssistHeader":"Keywords","ternPlugins":"Tern Plug-ins","noTernPluginsAvailable":"No Tern plug-ins are currently loaded. This may be because you have not yet activated content assist in a JavaScript file. Tern plug-ins provide type information and code templates for JavaScript.","noDeclFound":"Could not find declaration","deprecatedHoverTitle":"Deprecated.","parametersHoverTitle":"Parameters:","returnsHoverTitle":"Returns:","throwsHoverTitle":"Throws:","callbackHoverTitle":"Callback:","callbackText":"This function is used as a callback","sinceHoverTitle":"Since:","seeAlsoHoverTitle":"See Also:","openFileForTitle":"Open file for","failedToReadFile":"Failed to read file: ${0}","badInlineRename":"In-line rename is only available for local variables and declarations.","failedRename":"In-line rename failed: ${0}","declDisplayName":"${0} (start: ${1}, end: ${2})","declPotentialHeader":"**Potential matches:**\n","typeofOptions":"Typeof Options","functionDecls":"Function Declarations","functionCalls":"Function Calls","propAccess":"Property Access","propWrite":"Property Write","varAccess":"Variable Access","varWrite":"Variable Write","varDecls":"Variable Declarations","regex":"Regular Expressions","strings":"Strings","blockComments":"Block Comments","lineComments":"Line Comments","partial":"Partial Matches","uncategorized":"Uncategorized","parseErrors":"Parse Errors","noFileContents":"Could not compute references: failed to compute file text content","noFileMeta":"Could not compute references: failed to compute file metadata","cannotComputeRefs":"Cannot compute references: ${0}","notAnIdentifier":"Cannot compute references at the selected location: Location is not an identifier","notHtmlOffset":"Not a valid offset in HTML","allProjectRefs":"Finding all project references...","allWorkspaceRefs":"Finding all workspace references...","refsFoundIn":"References found in file: '${0}' (${1}/${2})","addToTernCommand":"Add to .tern-project","addToTernCommandTooltip":"The JavaScript tooling will always load the contents of this file to Tern","accessor-pairs":"Getter and setter accessors not in pairs:","no-control-regex":"Disallow control characters in regular expressions:","no-duplicate-case":"Duplicate case:","no-empty-character-class":"Disallow empty character classes:","no-extra-boolean-cast":"Discourage redundant double negation:","no-extra-parens":"Discourage redundant parentheses:","no-invalid-regexp":"Invalid regular expressions:","no-negated-in-lhs":"Disallow negated left operand of in operator:","no-obj-calls":"Disallow global object as function calls:","no-eq-null":"Disallow null comparisons:","noeqnullFixName":"Update operator","no-else-return":"Unnecessary else after return:","no-empty-label":"No empty labels:","no-self-compare":"Disallow self compare:","no-irregular-whitespace":"Disallow irregular whitespace:","no-self-assign":"Disallow self assignment:","noShadowFixName":"Rename in scope","type-checked-consistent-return":"Discouraged inconsistent returns:","ternDocPluginName":"Doc Comments","ternDocPluginDescription":"Tern plug-in to parse and use JSDoc-like comments for inferencing","orionAMQPPluginName":"Orion AMQP","orionAMQPPluginDescription":"Plug-in that contributes type information and code templates for AMQP.","orionAngularPluginName":"AngularJS","orionAngularPluginDescription":"Plug-in that contributes type information and code templates for AngularJS.","orionComponentPluginName":"ComponentJS","orionComponentPluginDescription":"Plug-in that contributes type information and code templates for ComponentJS.","orionExpressPluginName":"Orion ExpressJS","orionExpressPluginDescription":"Plug-in that contributes type information and code templates for ExpressJS.","orionMongoDBPluginName":"Orion MongoDB","orionMongoDBPluginDescription":"Plug-in that contributes type information and code templates for MongoDB.","orionMySQLPluginName":"Orion MySQL","orionMySQLPluginDescription":"Plug-in that contributes type information and code templates for MySQL.","orionNodePluginName":"Orion Node.js","orionNodePluginDescription":"Plug-in that contributes type information and code templates for Node.js.","orionPostgresPluginName":"Orion PostgreSQL","orionPostgresPluginDescription":"Plug-in that contributes type information and code templates for PostgreSQL.","orionRequirePluginName":"Orion RequireJS","orionRequirePluginDescription":"Plug-in that contributes type information and code templates for RequireJS.","orionRedisPluginName":"Orion Redis","orionRedisPluginDescription":"Plug-in that contributes type information and code templates for Redis.","ternPluginsPluginName":"Orion Tern Plug-in Support","ternPluginsPluginDescription":"Plug-in that allows Orion to inspect and modify plug-ins running in Tern.","openImplPluginName":"Orion Open Implementation Support","openImplPluginDescription":"Plug-in that allows Orion to try to find implementation locations of elements rather than simple declarations","htmlDepPluginName":"Orion HTML Dependency Analysis","htmlDepPluginDescription":"Resolves script block and script tag dependencies","findTypesName":"Orion References Support","findTypesDescription":"Plug-in that provides expanded type-finding support in Orion","eslintPluginName":"ESLint plugin for Tern","eslintPluginDescription":"Provides ESLint linting for Tern","jsdocPluginName":"JSDoc types and completion support","jsdocPluginDescription":"Provides auto-complete and type information for JSDoc","outlinerPluginName":"JavaScript outlining","outlinerPluginDescription":"Provides JavaScript outlining","browser":"Browser global variables.","node":"Node.js global variables and Node.js scoping.","commonjs":"CommonJS global variables and CommonJS scoping (use this for browser-only code that uses Browserify/WebPack).","worker":"Web workers global variables.","amd":"Defines require() and define() as global variables as per the amd spec.","mocha":"Adds all of the Mocha testing global variables.","jasmine":"Adds all of the Jasmine testing global variables for version 1.3 and 2.0.","jest":"Jest global variables.","phantomjs":"PhantomJS global variables.","protractor":"Protractor global variables.","qunit":"QUnit global variables.","jquery":"jQuery global variables.","prototypejs":"Prototype.js global variables.","shelljs":"ShellJS global variables.","meteor":"Meteor global variables.","mongo":"MongoDB global variables.","applescript":"AppleScript global variables.","nashorn":"Java 8 Nashorn global variables.","serviceworker":"Service Worker global variables.","embertest":"Ember test helper globals.","webextensions":"WebExtensions globals.","es6":"Enable all ECMAScript 6 features except for modules.","unknownError":"An unknown error occurred.","failedDeleteRequest":"Failed to delete file from Tern: ${0}","failedReadRequest":"Failed to read file into Tern: ${0}","failedToComputeProposals":"Failed to compute proposals","failedToComputeProposalsNoServer":"Failed to compute proposals, server not started","failedToComputeDecl":"Failed to compute declaration","failedToComputeDeclNoServer":"Failed to compute declaration, server not started","failedToComputeImpl":"Failed to compute implementation","failedToComputeImplNoServer":"Failed to compute implementation, server not started","failedToComputeDoc":"Failed to compute documentation","failedToComputeDocNoServer":"Failed to compute documentation, server not started","failedToComputeOccurrences":"Failed to compute occurrences","failedToComputeOccurrencesNoServer":"failed to compute occurrences, server not started","failedGetInstalledPlugins":"Failed to get installed plug-ins","failedGetInstalledPluginsNoServer":"Failed to get installed plug-ins, server not started","failedGetInstalledDefs":"Failed to get installed Tern definitions","failedGetInstalledDefsNoServer":"Failed to get installed Tern definitions, server not started","failedInstallPlugins":"Failed to install plug-ins","failedInstallPluginsNoServer":"Failed to install plug-ins, server not started","failedRemovePlugins":"Failed to remove plug-ins","failedRemovePluginsNoServer":"Failed to remove plug-ins, server not started","failedEnablementPlugins":"Failed to set enablement of plug-ins","failedEnablementPluginsNoServer":"Failed to set enablement of plug-ins, server not started","failedGetEnvs":"Failed to get contributed environments","failedGetEnvsNoServer":"Failed to get contributed environments, server not started","failedRenameTern":"Failed to compute rename changes","failedRenameNoServer":"Failed to compute rename changes, server not started","failedRefs":"Failed to find references","failedRefsNoServer":"failed to find references - server not started","failedType":"Failed to find type","unknownRequest":"The request '${0}' is unknown","serverNotStarted":"The server has not been started. Request: '${0}'","eslintRuleEnableDisable":"Enable or disable ESLint rule using the ```ruleid:0/1/2``` form.\n\nExample use:\n\n>```/* eslint semi:1, no-console:0, no-redeclare:2 */```","eslintEnvDirective":"Specify which environments are used in this JavaScript file.\n\nExample use:\n\n>```/* eslint-env amd, node, broswer */```","eslintRuleEnable":"Enable a given set of ESLint rules.\n\nExample use:\n\n>```/* eslint-enable semi, no-console, no-redeclare */```","eslintRuleDisable":"Disable a given set of ESLint rules.\n\nExample use:\n\n>```/* eslint-disable semi, no-console, no-redeclare */```","failedToComputeProblems":"Failed to compute ESLint problems/markers","failedToComputeOutline":"Failed to compute outline"}};amdi18n.init=function (language){
	    if(!language){
	        if(window._i18n && window._i18n.locale){
	            language = window._i18n.locale;
	        }else{
	            language = 'root';
	        }
	    }
	    if (Object.assign) {
	        Object.assign(this,this.__root,this['__'+language]);
	    } else {
	        var target = this['__' + language] || this.__root;
	        if (target) {
	            for (var name in target) {
	                this[name] = target[name];
	            }
	        }
	    }
	  };amdi18n.init();module.exports=amdi18n;

/***/ },
/* 17 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*******************************************************************************
	 * @license
	 * Copyright (c) 2012, 2015 IBM Corporation and others.
	 * All rights reserved. This program and the accompanying materials are made 
	 * available under the terms of the Eclipse Public License v1.0 
	 * (http://www.eclipse.org/legal/epl-v10.html), and the Eclipse Distribution 
	 * License v1.0 (http://www.eclipse.org/org/documents/edl-v10.html). 
	 *
	 * Contributors: IBM Corporation - initial API and implementation
	 *******************************************************************************/
	/*eslint-env browser, amd*/
	/*global requirejs*/
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
		/**
		 * Performs string substitution. Can be invoked in 2 ways:
		 *
		 * i) vargs giving numbered substition values:
		 *   formatMessage("${0} is ${1}", "foo", "bar")  // "foo is bar"
		 *
		 * ii) a map giving the substitutions:
		 *   formatMessage("${thing} is ${1}", {1: "bar", thing: "foo"})  // "foo is bar"
		 */
		function formatMessage(msg) {
			var pattern = /\$\{([^\}]+)\}/g, args = arguments;
			if (args.length === 2 && args[1] && typeof args[1] === "object") {
				return msg.replace(pattern, function(str, key) {
					return args[1][key];
				});
			}
			return msg.replace(pattern, function(str, index) {
				return args[(index << 0) + 1];
			});
		}
		return {
			formatMessage: formatMessage
		};
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 18 */
/***/ function(module, exports) {

	module.exports = {
		"!name": "ecma5",
		"!define": {
			"Error.prototype": "Error.prototype"
		},
		"Infinity": {
			"!type": "number",
			"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Infinity",
			"!doc": "A numeric value representing infinity."
		},
		"undefined": {
			"!type": "?",
			"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/undefined",
			"!doc": "The value undefined."
		},
		"NaN": {
			"!type": "number",
			"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/NaN",
			"!doc": "A value representing Not-A-Number."
		},
		"Object": {
			"!type": "fn()",
			"getPrototypeOf": {
				"!type": "fn(obj: ?) -> ?",
				"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Object/getPrototypeOf",
				"!doc": "Returns the prototype (i.e. the internal prototype) of the specified object."
			},
			"create": {
				"!type": "fn(proto: ?) -> !custom:Object_create",
				"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Object/create",
				"!doc": "Creates a new object with the specified prototype object and properties."
			},
			"defineProperty": {
				"!type": "fn(obj: ?, prop: string, desc: ?) -> !custom:Object_defineProperty",
				"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Object/defineProperty",
				"!doc": "Defines a new property directly on an object, or modifies an existing property on an object, and returns the object. If you want to see how to use the Object.defineProperty method with a binary-flags-like syntax, see this article."
			},
			"defineProperties": {
				"!type": "fn(obj: ?, props: ?) -> !custom:Object_defineProperties",
				"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Object/defineProperty",
				"!doc": "Defines a new property directly on an object, or modifies an existing property on an object, and returns the object. If you want to see how to use the Object.defineProperty method with a binary-flags-like syntax, see this article."
			},
			"getOwnPropertyDescriptor": {
				"!type": "fn(obj: ?, prop: string) -> ?",
				"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor",
				"!doc": "Returns a property descriptor for an own property (that is, one directly present on an object, not present by dint of being along an object's prototype chain) of a given object."
			},
			"keys": {
				"!type": "fn(obj: ?) -> [string]",
				"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Object/keys",
				"!doc": "Returns an array of a given object's own enumerable properties, in the same order as that provided by a for-in loop (the difference being that a for-in loop enumerates properties in the prototype chain as well)."
			},
			"getOwnPropertyNames": {
				"!type": "fn(obj: ?) -> [string]",
				"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Object/getOwnPropertyNames",
				"!doc": "Returns an array of all properties (enumerable or not) found directly upon a given object."
			},
			"seal": {
				"!type": "fn(obj: ?)",
				"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Object/seal",
				"!doc": "Seals an object, preventing new properties from being added to it and marking all existing properties as non-configurable. Values of present properties can still be changed as long as they are writable."
			},
			"isSealed": {
				"!type": "fn(obj: ?) -> bool",
				"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Object/isSealed",
				"!doc": "Determine if an object is sealed."
			},
			"freeze": {
				"!type": "fn(obj: ?) -> !0",
				"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Object/freeze",
				"!doc": "Freezes an object: that is, prevents new properties from being added to it; prevents existing properties from being removed; and prevents existing properties, or their enumerability, configurability, or writability, from being changed. In essence the object is made effectively immutable. The method returns the object being frozen."
			},
			"isFrozen": {
				"!type": "fn(obj: ?) -> bool",
				"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Object/isFrozen",
				"!doc": "Determine if an object is frozen."
			},
			"preventExtensions": {
				"!type": "fn(obj: ?)",
				"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/preventExtensions",
				"!doc": "Prevents new properties from ever being added to an object."
			},
			"isExtensible": {
				"!type": "fn(obj: ?) -> bool",
				"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isExtensible",
				"!doc": "The Object.isExtensible() method determines if an object is extensible (whether it can have new properties added to it)."
			},
			"prototype": {
				"!stdProto": "Object",
				"toString": {
					"!type": "fn() -> string",
					"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Object/toString",
					"!doc": "Returns a string representing the object."
				},
				"toLocaleString": {
					"!type": "fn() -> string",
					"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Object/toLocaleString",
					"!doc": "Returns a string representing the object. This method is meant to be overriden by derived objects for locale-specific purposes."
				},
				"valueOf": {
					"!type": "fn() -> number",
					"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Object/valueOf",
					"!doc": "Returns the primitive value of the specified object"
				},
				"hasOwnProperty": {
					"!type": "fn(prop: string) -> bool",
					"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Object/hasOwnProperty",
					"!doc": "Returns a boolean indicating whether the object has the specified property."
				},
				"propertyIsEnumerable": {
					"!type": "fn(prop: string) -> bool",
					"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Object/propertyIsEnumerable",
					"!doc": "Returns a Boolean indicating whether the specified property is enumerable."
				},
				"isPrototypeOf": {
					"!type": "fn(obj: ?) -> bool",
					"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isPrototypeOf",
					"!doc": "Tests for an object in another object's prototype chain."
				}
			},
			"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Object",
			"!doc": "Creates an object wrapper."
		},
		"Function": {
			"!type": "fn(body: string) -> fn()",
			"prototype": {
				"!stdProto": "Function",
				"apply": {
					"!type": "fn(this: ?, args: [?])",
					"!effects": [
						"call and return !this this=!0 !1.<i> !1.<i> !1.<i>"
					],
					"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Function/apply",
					"!doc": "Calls a function with a given this value and arguments provided as an array (or an array like object)."
				},
				"call": {
					"!type": "fn(this: ?, args?: ?) -> !this.!ret",
					"!effects": [
						"call and return !this this=!0 !1 !2 !3 !4"
					],
					"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Function/call",
					"!doc": "Calls a function with a given this value and arguments provided individually."
				},
				"bind": {
					"!type": "fn(this: ?, args?: ?) -> !custom:Function_bind",
					"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Function/bind",
					"!doc": "Creates a new function that, when called, has its this keyword set to the provided value, with a given sequence of arguments preceding any provided when the new function was called."
				},
				"prototype": "?"
			},
			"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Function",
			"!doc": "Every function in JavaScript is actually a Function object."
		},
		"Array": {
			"!type": "fn(size: number) -> !custom:Array_ctor",
			"isArray": {
				"!type": "fn(value: ?) -> bool",
				"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/isArray",
				"!doc": "Returns true if an object is an array, false if it is not."
			},
			"prototype": {
				"!stdProto": "Array",
				"length": {
					"!type": "number",
					"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/length",
					"!doc": "An unsigned, 32-bit integer that specifies the number of elements in an array."
				},
				"concat": {
					"!type": "fn(other: [?]) -> !this",
					"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/concat",
					"!doc": "Returns a new array comprised of this array joined with other array(s) and/or value(s)."
				},
				"join": {
					"!type": "fn(separator?: string) -> string",
					"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/join",
					"!doc": "Joins all elements of an array into a string."
				},
				"splice": {
					"!type": "fn(pos: number, amount: number)",
					"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/splice",
					"!doc": "Changes the content of an array, adding new elements while removing old elements."
				},
				"pop": {
					"!type": "fn() -> !this.<i>",
					"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/pop",
					"!doc": "Removes the last element from an array and returns that element."
				},
				"push": {
					"!type": "fn(newelt: ?) -> number",
					"!effects": [
						"propagate !0 !this.<i>"
					],
					"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/push",
					"!doc": "Mutates an array by appending the given elements and returning the new length of the array."
				},
				"shift": {
					"!type": "fn() -> !this.<i>",
					"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/shift",
					"!doc": "Removes the first element from an array and returns that element. This method changes the length of the array."
				},
				"unshift": {
					"!type": "fn(newelt: ?) -> number",
					"!effects": [
						"propagate !0 !this.<i>"
					],
					"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/unshift",
					"!doc": "Adds one or more elements to the beginning of an array and returns the new length of the array."
				},
				"slice": {
					"!type": "fn(from: number, to?: number) -> !this",
					"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/slice",
					"!doc": "Returns a shallow copy of a portion of an array."
				},
				"reverse": {
					"!type": "fn()",
					"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/reverse",
					"!doc": "Reverses an array in place.  The first array element becomes the last and the last becomes the first."
				},
				"sort": {
					"!type": "fn(compare?: fn(a: ?, b: ?) -> number)",
					"!effects": [
						"call !0 !this.<i> !this.<i>"
					],
					"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/sort",
					"!doc": "Sorts the elements of an array in place and returns the array."
				},
				"indexOf": {
					"!type": "fn(elt: ?, from?: number) -> number",
					"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/indexOf",
					"!doc": "Returns the first index at which a given element can be found in the array, or -1 if it is not present."
				},
				"lastIndexOf": {
					"!type": "fn(elt: ?, from?: number) -> number",
					"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/lastIndexOf",
					"!doc": "Returns the last index at which a given element can be found in the array, or -1 if it is not present. The array is searched backwards, starting at fromIndex."
				},
				"every": {
					"!type": "fn(test: fn(elt: ?, i: number) -> bool, context?: ?) -> bool",
					"!effects": [
						"call !0 this=!1 !this.<i> number"
					],
					"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/every",
					"!doc": "Tests whether all elements in the array pass the test implemented by the provided function."
				},
				"some": {
					"!type": "fn(test: fn(elt: ?, i: number) -> bool, context?: ?) -> bool",
					"!effects": [
						"call !0 this=!1 !this.<i> number"
					],
					"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/some",
					"!doc": "Tests whether some element in the array passes the test implemented by the provided function."
				},
				"filter": {
					"!type": "fn(test: fn(elt: ?, i: number) -> bool, context?: ?) -> !this",
					"!effects": [
						"call !0 this=!1 !this.<i> number"
					],
					"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/filter",
					"!doc": "Creates a new array with all elements that pass the test implemented by the provided function."
				},
				"forEach": {
					"!type": "fn(f: fn(elt: ?, i: number), context?: ?)",
					"!effects": [
						"call !0 this=!1 !this.<i> number"
					],
					"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/forEach",
					"!doc": "Executes a provided function once per array element."
				},
				"map": {
					"!type": "fn(f: fn(elt: ?, i: number) -> ?, context?: ?) -> [!0.!ret]",
					"!effects": [
						"call !0 this=!1 !this.<i> number"
					],
					"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/map",
					"!doc": "Creates a new array with the results of calling a provided function on every element in this array."
				},
				"reduce": {
					"!type": "fn(combine: fn(sum: ?, elt: ?, i: number) -> ?, init?: ?) -> !0.!ret",
					"!effects": [
						"call !0 !1 !this.<i> number"
					],
					"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/Reduce",
					"!doc": "Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value."
				},
				"reduceRight": {
					"!type": "fn(combine: fn(sum: ?, elt: ?, i: number) -> ?, init?: ?) -> !0.!ret",
					"!effects": [
						"call !0 !1 !this.<i> number"
					],
					"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/ReduceRight",
					"!doc": "Apply a function simultaneously against two values of the array (from right-to-left) as to reduce it to a single value."
				}
			},
			"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array",
			"!doc": "The JavaScript Array global object is a constructor for arrays, which are high-level, list-like objects."
		},
		"String": {
			"!type": "fn(value: ?) -> string",
			"fromCharCode": {
				"!type": "fn(code: number) -> string",
				"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/String/fromCharCode",
				"!doc": "Returns a string created by using the specified sequence of Unicode values."
			},
			"prototype": {
				"!stdProto": "String",
				"length": {
					"!type": "number",
					"!url": "https://developer.mozilla.org/en/docs/JavaScript/Reference/Global_Objects/String/length",
					"!doc": "Represents the length of a string."
				},
				"<i>": "string",
				"charAt": {
					"!type": "fn(i: number) -> string",
					"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/String/charAt",
					"!doc": "Returns the specified character from a string."
				},
				"charCodeAt": {
					"!type": "fn(i: number) -> number",
					"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/String/charCodeAt",
					"!doc": "Returns the numeric Unicode value of the character at the given index (except for unicode codepoints > 0x10000)."
				},
				"indexOf": {
					"!type": "fn(char: string, from?: number) -> number",
					"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/String/indexOf",
					"!doc": "Returns the index within the calling String object of the first occurrence of the specified value, starting the search at fromIndex,\nreturns -1 if the value is not found."
				},
				"lastIndexOf": {
					"!type": "fn(char: string, from?: number) -> number",
					"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/String/lastIndexOf",
					"!doc": "Returns the index within the calling String object of the last occurrence of the specified value, or -1 if not found. The calling string is searched backward, starting at fromIndex."
				},
				"substring": {
					"!type": "fn(from: number, to?: number) -> string",
					"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/String/substring",
					"!doc": "Returns a subset of a string between one index and another, or through the end of the string."
				},
				"substr": {
					"!type": "fn(from: number, length?: number) -> string",
					"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/String/substr",
					"!doc": "Returns the characters in a string beginning at the specified location through the specified number of characters."
				},
				"slice": {
					"!type": "fn(from: number, to?: number) -> string",
					"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/String/slice",
					"!doc": "Extracts a section of a string and returns a new string."
				},
				"trim": {
					"!type": "fn() -> string",
					"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/String/Trim",
					"!doc": "Removes whitespace from both ends of the string."
				},
				"toUpperCase": {
					"!type": "fn() -> string",
					"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/String/toUpperCase",
					"!doc": "Returns the calling string value converted to uppercase."
				},
				"toLowerCase": {
					"!type": "fn() -> string",
					"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/String/toLowerCase",
					"!doc": "Returns the calling string value converted to lowercase."
				},
				"toLocaleUpperCase": {
					"!type": "fn() -> string",
					"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/String/toLocaleUpperCase",
					"!doc": "Returns the calling string value converted to upper case, according to any locale-specific case mappings."
				},
				"toLocaleLowerCase": {
					"!type": "fn() -> string",
					"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/String/toLocaleLowerCase",
					"!doc": "Returns the calling string value converted to lower case, according to any locale-specific case mappings."
				},
				"split": {
					"!type": "fn(pattern: string) -> [string]",
					"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/String/split",
					"!doc": "Splits a String object into an array of strings by separating the string into substrings."
				},
				"concat": {
					"!type": "fn(other: string) -> string",
					"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/String/concat",
					"!doc": "Combines the text of two or more strings and returns a new string."
				},
				"localeCompare": {
					"!type": "fn(other: string) -> number",
					"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/String/localeCompare",
					"!doc": "Returns a number indicating whether a reference string comes before or after or is the same as the given string in sort order."
				},
				"match": {
					"!type": "fn(pattern: +RegExp) -> [string]",
					"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/String/match",
					"!doc": "Used to retrieve the matches when matching a string against a regular expression."
				},
				"replace": {
					"!type": "fn(pattern: string|+RegExp, replacement: string) -> string",
					"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/String/replace",
					"!doc": "Returns a new string with some or all matches of a pattern replaced by a replacement.  The pattern can be a string or a RegExp, and the replacement can be a string or a function to be called for each match."
				},
				"search": {
					"!type": "fn(pattern: +RegExp) -> number",
					"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/String/search",
					"!doc": "Executes the search for a match between a regular expression and this String object."
				}
			},
			"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/String",
			"!doc": "The String global object is a constructor for strings, or a sequence of characters."
		},
		"Number": {
			"!type": "fn(value: ?) -> number",
			"MAX_VALUE": {
				"!type": "number",
				"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Number/MAX_VALUE",
				"!doc": "The maximum numeric value representable in JavaScript."
			},
			"MIN_VALUE": {
				"!type": "number",
				"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Number/MIN_VALUE",
				"!doc": "The smallest positive numeric value representable in JavaScript."
			},
			"POSITIVE_INFINITY": {
				"!type": "number",
				"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Number/POSITIVE_INFINITY",
				"!doc": "A value representing the positive Infinity value."
			},
			"NEGATIVE_INFINITY": {
				"!type": "number",
				"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Number/NEGATIVE_INFINITY",
				"!doc": "A value representing the negative Infinity value."
			},
			"prototype": {
				"!stdProto": "Number",
				"toString": {
					"!type": "fn(radix?: number) -> string",
					"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Number/toString",
					"!doc": "Returns a string representing the specified Number object"
				},
				"toFixed": {
					"!type": "fn(digits: number) -> string",
					"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Number/toFixed",
					"!doc": "Formats a number using fixed-point notation"
				},
				"toExponential": {
					"!type": "fn(digits: number) -> string",
					"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Number/toExponential",
					"!doc": "Returns a string representing the Number object in exponential notation"
				},
				"toPrecision": {
					"!type": "fn(digits: number) -> string",
					"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Number/toPrecision",
					"!doc": "The toPrecision() method returns a string representing the number to the specified precision."
				}
			},
			"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Number",
			"!doc": "The Number JavaScript object is a wrapper object allowing you to work with numerical values. A Number object is created using the Number() constructor."
		},
		"Boolean": {
			"!type": "fn(value: ?) -> bool",
			"prototype": {
				"!stdProto": "Boolean"
			},
			"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Boolean",
			"!doc": "The Boolean object is an object wrapper for a boolean value."
		},
		"RegExp": {
			"!type": "fn(source: string, flags?: string)",
			"prototype": {
				"!stdProto": "RegExp",
				"exec": {
					"!type": "fn(input: string) -> [string]",
					"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/RegExp/exec",
					"!doc": "Executes a search for a match in a specified string. Returns a result array, or null."
				},
				"test": {
					"!type": "fn(input: string) -> bool",
					"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/RegExp/test",
					"!doc": "Executes the search for a match between a regular expression and a specified string. Returns true or false."
				},
				"global": {
					"!type": "bool",
					"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/RegExp",
					"!doc": "Creates a regular expression object for matching text with a pattern."
				},
				"ignoreCase": {
					"!type": "bool",
					"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/RegExp",
					"!doc": "Creates a regular expression object for matching text with a pattern."
				},
				"multiline": {
					"!type": "bool",
					"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/RegExp/multiline",
					"!doc": "Reflects whether or not to search in strings across multiple lines.\n"
				},
				"source": {
					"!type": "string",
					"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/RegExp/source",
					"!doc": "A read-only property that contains the text of the pattern, excluding the forward slashes.\n"
				},
				"lastIndex": {
					"!type": "number",
					"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/RegExp/lastIndex",
					"!doc": "A read/write integer property that specifies the index at which to start the next match."
				}
			},
			"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/RegExp",
			"!doc": "Creates a regular expression object for matching text with a pattern."
		},
		"Date": {
			"!type": "fn(ms: number)",
			"parse": {
				"!type": "fn(source: string) -> +Date",
				"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date/parse",
				"!doc": "Parses a string representation of a date, and returns the number of milliseconds since January 1, 1970, 00:00:00 UTC."
			},
			"UTC": {
				"!type": "fn(year: number, month: number, date: number, hour?: number, min?: number, sec?: number, ms?: number) -> number",
				"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date/UTC",
				"!doc": "Accepts the same parameters as the longest form of the constructor, and returns the number of milliseconds in a Date object since January 1, 1970, 00:00:00, universal time."
			},
			"now": {
				"!type": "fn() -> number",
				"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date/now",
				"!doc": "Returns the number of milliseconds elapsed since 1 January 1970 00:00:00 UTC."
			},
			"prototype": {
				"toUTCString": {
					"!type": "fn() -> string",
					"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date/toUTCString",
					"!doc": "Converts a date to a string, using the universal time convention."
				},
				"toISOString": {
					"!type": "fn() -> string",
					"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date/toISOString",
					"!doc": "JavaScript provides a direct way to convert a date object into a string in ISO format, the ISO 8601 Extended Format."
				},
				"toDateString": {
					"!type": "fn() -> string",
					"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date/toDateString",
					"!doc": "Returns the date portion of a Date object in human readable form in American English."
				},
				"toTimeString": {
					"!type": "fn() -> string",
					"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date/toTimeString",
					"!doc": "Returns the time portion of a Date object in human readable form in American English."
				},
				"toLocaleDateString": {
					"!type": "fn() -> string",
					"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date/toLocaleDateString",
					"!doc": "Converts a date to a string, returning the \"date\" portion using the operating system's locale's conventions.\n"
				},
				"toLocaleTimeString": {
					"!type": "fn() -> string",
					"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date/toLocaleTimeString",
					"!doc": "Converts a date to a string, returning the \"time\" portion using the current locale's conventions."
				},
				"getTime": {
					"!type": "fn() -> number",
					"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date/getTime",
					"!doc": "Returns the numeric value corresponding to the time for the specified date according to universal time."
				},
				"getFullYear": {
					"!type": "fn() -> number",
					"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date/getFullYear",
					"!doc": "Returns the year of the specified date according to local time."
				},
				"getYear": {
					"!type": "fn() -> number",
					"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date/getYear",
					"!doc": "Returns the year in the specified date according to local time."
				},
				"getMonth": {
					"!type": "fn() -> number",
					"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date/getMonth",
					"!doc": "Returns the month in the specified date according to local time."
				},
				"getUTCMonth": {
					"!type": "fn() -> number",
					"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date/getUTCMonth",
					"!doc": "Returns the month of the specified date according to universal time.\n"
				},
				"getDate": {
					"!type": "fn() -> number",
					"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date/getDate",
					"!doc": "Returns the day of the month for the specified date according to local time."
				},
				"getUTCDate": {
					"!type": "fn() -> number",
					"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date/getUTCDate",
					"!doc": "Returns the day (date) of the month in the specified date according to universal time.\n"
				},
				"getDay": {
					"!type": "fn() -> number",
					"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date/getDay",
					"!doc": "Returns the day of the week for the specified date according to local time."
				},
				"getUTCDay": {
					"!type": "fn() -> number",
					"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date/getUTCDay",
					"!doc": "Returns the day of the week in the specified date according to universal time.\n"
				},
				"getHours": {
					"!type": "fn() -> number",
					"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date/getHours",
					"!doc": "Returns the hour for the specified date according to local time."
				},
				"getUTCHours": {
					"!type": "fn() -> number",
					"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date/getUTCHours",
					"!doc": "Returns the hours in the specified date according to universal time.\n"
				},
				"getMinutes": {
					"!type": "fn() -> number",
					"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date/getMinutes",
					"!doc": "Returns the minutes in the specified date according to local time."
				},
				"getUTCMinutes": {
					"!type": "fn() -> number",
					"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date",
					"!doc": "Creates JavaScript Date instances which let you work with dates and times."
				},
				"getSeconds": {
					"!type": "fn() -> number",
					"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date/getSeconds",
					"!doc": "Returns the seconds in the specified date according to local time."
				},
				"getUTCSeconds": {
					"!type": "fn() -> number",
					"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date/getUTCSeconds",
					"!doc": "Returns the seconds in the specified date according to universal time.\n"
				},
				"getMilliseconds": {
					"!type": "fn() -> number",
					"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date/getMilliseconds",
					"!doc": "Returns the milliseconds in the specified date according to local time."
				},
				"getUTCMilliseconds": {
					"!type": "fn() -> number",
					"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date/getUTCMilliseconds",
					"!doc": "Returns the milliseconds in the specified date according to universal time.\n"
				},
				"getTimezoneOffset": {
					"!type": "fn() -> number",
					"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date/getTimezoneOffset",
					"!doc": "Returns the time-zone offset from UTC, in minutes, for the current locale."
				},
				"setTime": {
					"!type": "fn(date: +Date) -> number",
					"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date/setTime",
					"!doc": "Sets the Date object to the time represented by a number of milliseconds since January 1, 1970, 00:00:00 UTC.\n"
				},
				"setFullYear": {
					"!type": "fn(year: number) -> number",
					"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date/setFullYear",
					"!doc": "Sets the full year for a specified date according to local time.\n"
				},
				"setUTCFullYear": {
					"!type": "fn(year: number) -> number",
					"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date/setUTCFullYear",
					"!doc": "Sets the full year for a specified date according to universal time.\n"
				},
				"setMonth": {
					"!type": "fn(month: number) -> number",
					"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date/setMonth",
					"!doc": "Set the month for a specified date according to local time."
				},
				"setUTCMonth": {
					"!type": "fn(month: number) -> number",
					"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date/setUTCMonth",
					"!doc": "Sets the month for a specified date according to universal time.\n"
				},
				"setDate": {
					"!type": "fn(day: number) -> number",
					"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date/setDate",
					"!doc": "Sets the day of the month for a specified date according to local time."
				},
				"setUTCDate": {
					"!type": "fn(day: number) -> number",
					"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date/setUTCDate",
					"!doc": "Sets the day of the month for a specified date according to universal time.\n"
				},
				"setHours": {
					"!type": "fn(hour: number) -> number",
					"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date/setHours",
					"!doc": "Sets the hours for a specified date according to local time, and returns the number of milliseconds since 1 January 1970 00:00:00 UTC until the time represented by the updated Date instance."
				},
				"setUTCHours": {
					"!type": "fn(hour: number) -> number",
					"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date/setUTCHours",
					"!doc": "Sets the hour for a specified date according to universal time.\n"
				},
				"setMinutes": {
					"!type": "fn(min: number) -> number",
					"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date/setMinutes",
					"!doc": "Sets the minutes for a specified date according to local time."
				},
				"setUTCMinutes": {
					"!type": "fn(min: number) -> number",
					"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date/setUTCMinutes",
					"!doc": "Sets the minutes for a specified date according to universal time.\n"
				},
				"setSeconds": {
					"!type": "fn(sec: number) -> number",
					"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date/setSeconds",
					"!doc": "Sets the seconds for a specified date according to local time."
				},
				"setUTCSeconds": {
					"!type": "fn(sec: number) -> number",
					"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date/setUTCSeconds",
					"!doc": "Sets the seconds for a specified date according to universal time.\n"
				},
				"setMilliseconds": {
					"!type": "fn(ms: number) -> number",
					"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date/setMilliseconds",
					"!doc": "Sets the milliseconds for a specified date according to local time.\n"
				},
				"setUTCMilliseconds": {
					"!type": "fn(ms: number) -> number",
					"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date/setUTCMilliseconds",
					"!doc": "Sets the milliseconds for a specified date according to universal time.\n"
				}
			},
			"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date",
			"!doc": "Creates JavaScript Date instances which let you work with dates and times."
		},
		"Error": {
			"!type": "fn(message: string)",
			"prototype": {
				"name": {
					"!type": "string",
					"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Error/name",
					"!doc": "A name for the type of error."
				},
				"message": {
					"!type": "string",
					"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Error/message",
					"!doc": "A human-readable description of the error."
				}
			},
			"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Error",
			"!doc": "Creates an error object."
		},
		"SyntaxError": {
			"!type": "fn(message: string)",
			"prototype": "Error.prototype",
			"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/SyntaxError",
			"!doc": "Represents an error when trying to interpret syntactically invalid code."
		},
		"ReferenceError": {
			"!type": "fn(message: string)",
			"prototype": "Error.prototype",
			"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/ReferenceError",
			"!doc": "Represents an error when a non-existent variable is referenced."
		},
		"URIError": {
			"!type": "fn(message: string)",
			"prototype": "Error.prototype",
			"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/URIError",
			"!doc": "Represents an error when a malformed URI is encountered."
		},
		"EvalError": {
			"!type": "fn(message: string)",
			"prototype": "Error.prototype",
			"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/EvalError",
			"!doc": "Represents an error regarding the eval function."
		},
		"RangeError": {
			"!type": "fn(message: string)",
			"prototype": "Error.prototype",
			"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/RangeError",
			"!doc": "Represents an error when a number is not within the correct range allowed."
		},
		"TypeError": {
			"!type": "fn(message: string)",
			"prototype": "Error.prototype",
			"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/TypeError",
			"!doc": "Represents an error an error when a value is not of the expected type."
		},
		"parseInt": {
			"!type": "fn(string: string, radix?: number) -> number",
			"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/parseInt",
			"!doc": "Parses a string argument and returns an integer of the specified radix or base."
		},
		"parseFloat": {
			"!type": "fn(string: string) -> number",
			"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/parseFloat",
			"!doc": "Parses a string argument and returns a floating point number."
		},
		"isNaN": {
			"!type": "fn(value: number) -> bool",
			"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/isNaN",
			"!doc": "Determines whether a value is NaN or not. Be careful, this function is broken. You may be interested in ECMAScript 6 Number.isNaN."
		},
		"isFinite": {
			"!type": "fn(value: number) -> bool",
			"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/isFinite",
			"!doc": "Determines whether the passed value is a finite number."
		},
		"eval": {
			"!type": "fn(code: string) -> ?",
			"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/eval",
			"!doc": "Evaluates JavaScript code represented as a string."
		},
		"encodeURI": {
			"!type": "fn(uri: string) -> string",
			"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/encodeURI",
			"!doc": "Encodes a Uniform Resource Identifier (URI) by replacing each instance of certain characters by one, two, three, or four escape sequences representing the UTF-8 encoding of the character (will only be four escape sequences for characters composed of two \"surrogate\" characters)."
		},
		"encodeURIComponent": {
			"!type": "fn(uri: string) -> string",
			"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/encodeURIComponent",
			"!doc": "Encodes a Uniform Resource Identifier (URI) component by replacing each instance of certain characters by one, two, three, or four escape sequences representing the UTF-8 encoding of the character (will only be four escape sequences for characters composed of two \"surrogate\" characters)."
		},
		"decodeURI": {
			"!type": "fn(uri: string) -> string",
			"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/decodeURI",
			"!doc": "Decodes a Uniform Resource Identifier (URI) previously created by encodeURI or by a similar routine."
		},
		"decodeURIComponent": {
			"!type": "fn(uri: string) -> string",
			"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/decodeURIComponent",
			"!doc": "Decodes a Uniform Resource Identifier (URI) component previously created by encodeURIComponent or by a similar routine."
		},
		"Math": {
			"E": {
				"!type": "number",
				"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Math/E",
				"!doc": "The base of natural logarithms, e, approximately 2.718."
			},
			"LN2": {
				"!type": "number",
				"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Math/LN2",
				"!doc": "The natural logarithm of 2, approximately 0.693."
			},
			"LN10": {
				"!type": "number",
				"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Math/LN10",
				"!doc": "The natural logarithm of 10, approximately 2.302."
			},
			"LOG2E": {
				"!type": "number",
				"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Math/LOG2E",
				"!doc": "The base 2 logarithm of E (approximately 1.442)."
			},
			"LOG10E": {
				"!type": "number",
				"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Math/LOG10E",
				"!doc": "The base 10 logarithm of E (approximately 0.434)."
			},
			"SQRT1_2": {
				"!type": "number",
				"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Math/SQRT1_2",
				"!doc": "The square root of 1/2; equivalently, 1 over the square root of 2, approximately 0.707."
			},
			"SQRT2": {
				"!type": "number",
				"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Math/SQRT2",
				"!doc": "The square root of 2, approximately 1.414."
			},
			"PI": {
				"!type": "number",
				"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Math/PI",
				"!doc": "The ratio of the circumference of a circle to its diameter, approximately 3.14159."
			},
			"abs": {
				"!type": "fn(number) -> number",
				"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Math/abs",
				"!doc": "Returns the absolute value of a number."
			},
			"cos": {
				"!type": "fn(number) -> number",
				"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Math/cos",
				"!doc": "Returns the cosine of a number."
			},
			"sin": {
				"!type": "fn(number) -> number",
				"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Math/sin",
				"!doc": "Returns the sine of a number."
			},
			"tan": {
				"!type": "fn(number) -> number",
				"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Math/tan",
				"!doc": "Returns the tangent of a number."
			},
			"acos": {
				"!type": "fn(number) -> number",
				"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Math/acos",
				"!doc": "Returns the arccosine (in radians) of a number."
			},
			"asin": {
				"!type": "fn(number) -> number",
				"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Math/asin",
				"!doc": "Returns the arcsine (in radians) of a number."
			},
			"atan": {
				"!type": "fn(number) -> number",
				"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Math/atan",
				"!doc": "Returns the arctangent (in radians) of a number."
			},
			"atan2": {
				"!type": "fn(y: number, x: number) -> number",
				"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Math/atan2",
				"!doc": "Returns the arctangent of the quotient of its arguments."
			},
			"ceil": {
				"!type": "fn(number) -> number",
				"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Math/ceil",
				"!doc": "Returns the smallest integer greater than or equal to a number."
			},
			"floor": {
				"!type": "fn(number) -> number",
				"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Math/floor",
				"!doc": "Returns the largest integer less than or equal to a number."
			},
			"round": {
				"!type": "fn(number) -> number",
				"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Math/round",
				"!doc": "Returns the value of a number rounded to the nearest integer."
			},
			"exp": {
				"!type": "fn(number) -> number",
				"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Math/exp",
				"!doc": "Returns Ex, where x is the argument, and E is Euler's constant, the base of the natural logarithms."
			},
			"log": {
				"!type": "fn(number) -> number",
				"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Math/log",
				"!doc": "Returns the natural logarithm (base E) of a number."
			},
			"sqrt": {
				"!type": "fn(number) -> number",
				"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Math/sqrt",
				"!doc": "Returns the square root of a number."
			},
			"pow": {
				"!type": "fn(number, number) -> number",
				"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Math/pow",
				"!doc": "Returns base to the exponent power, that is, baseexponent."
			},
			"max": {
				"!type": "fn(number, number) -> number",
				"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Math/max",
				"!doc": "Returns the largest of zero or more numbers."
			},
			"min": {
				"!type": "fn(number, number) -> number",
				"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Math/min",
				"!doc": "Returns the smallest of zero or more numbers."
			},
			"random": {
				"!type": "fn() -> number",
				"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Math/random",
				"!doc": "Returns a floating-point, pseudo-random number in the range [0, 1) that is, from 0 (inclusive) up to but not including 1 (exclusive), which you can then scale to your desired range."
			},
			"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Math",
			"!doc": "A built-in object that has properties and methods for mathematical constants and functions."
		},
		"JSON": {
			"parse": {
				"!type": "fn(json: string) -> ?",
				"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/JSON/parse",
				"!doc": "Parse a string as JSON, optionally transforming the value produced by parsing."
			},
			"stringify": {
				"!type": "fn(value: ?) -> string",
				"!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/JSON/stringify",
				"!doc": "Convert a value to JSON, optionally replacing values if a replacer function is specified, or optionally including only the specified properties if a replacer array is specified."
			},
			"!url": "https://developer.mozilla.org/en-US/docs/JSON",
			"!doc": "JSON (JavaScript Object Notation) is a data-interchange format.  It closely resembles a subset of JavaScript syntax, although it is not a strict subset. (See JSON in the JavaScript Reference for full details.)  It is useful when writing any kind of JavaScript-based application, including websites and browser extensions.  For example, you might store user information in JSON format in a cookie, or you might store extension preferences in JSON in a string-valued browser preference."
		}
	};

/***/ },
/* 19 */
/***/ function(module, exports) {

	module.exports = {
		"!name": "ecma6",
		"!define": {
			"Promise.prototype": {
				"catch": {
					"!doc": "The catch() method returns a Promise and deals with rejected cases only. It behaves the same as calling Promise.prototype.then(undefined, onRejected).",
					"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/catch",
					"!type": "fn(onRejected: fn(reason: ?))"
				},
				"then": {
					"!doc": "The then() method returns a Promise. It takes two arguments, both are callback functions for the success and failure cases of the Promise.",
					"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then",
					"!type": "fn(onFulfilled: fn(value: ?), onRejected: fn(reason: ?))",
					"!effects": [
						"call !0 !this.value"
					]
				}
			},
			"promiseReject": {
				"!type": "fn(reason: ?)"
			}
		},
		"Array": {
			"from": {
				"!type": "fn(arrayLike: [], mapFn?: fn(), thisArg?: ?) -> !custom:Array_ctor",
				"!doc": "The Array.from() method creates a new Array instance from an array-like or iterable object.",
				"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from"
			},
			"of": {
				"!type": "fn(elementN: ?) -> !custom:Array_ctor",
				"!doc": "The Array.of() method creates a new Array instance with a variable number of arguments, regardless of number or type of the arguments.",
				"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of"
			},
			"prototype": {
				"copyWithin": {
					"!type": "fn(target: number, start: number, end?: number) -> !custom:Array_ctor",
					"!doc": "The copyWithin() method copies the sequence of array elements within the array to the position starting at target. The copy is taken from the index positions of the second and third arguments start and end. The end argument is optional and defaults to the length of the array.",
					"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin"
				},
				"entries": {
					"!type": "fn() -> TODO_ITERATOR",
					"!doc": "The entries() method returns a new Array Iterator object that contains the key/value pairs for each index in the array.",
					"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/entries"
				},
				"fill": {
					"!type": "fn(value: ?, start?: number, end?: number)",
					"!doc": "The fill() method fills all the elements of an array from a start index to an end index with a static value.",
					"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill"
				},
				"find": {
					"!type": "fn(callback: fn(element: ?, index: number, array: []), thisArg?: ?) -> ?",
					"!doc": "The find() method returns a value in the array, if an element in the array satisfies the provided testing function. Otherwise undefined is returned.",
					"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find"
				},
				"findIndex": {
					"!type": "fn(callback: fn(element: ?, index: number, array: []), thisArg?: ?) -> number",
					"!doc": "The findIndex() method returns an index in the array, if an element in the array satisfies the provided testing function. Otherwise -1 is returned.",
					"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex"
				},
				"keys": {
					"!type": "fn() -> !custom:Array_ctor",
					"!doc": "The keys() method returns a new Array Iterator that contains the keys for each index in the array.",
					"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/keys"
				},
				"values": {
					"!type": "fn() -> !custom:Array_ctor",
					"!doc": "The values() method returns a new Array Iterator object that contains the values for each index in the array.",
					"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/values"
				}
			}
		},
		"ArrayBuffer": {
			"!type": "fn(length: number)",
			"!doc": "The ArrayBuffer object is used to represent a generic, fixed-length raw binary data buffer. You can not directly manipulate the contents of an ArrayBuffer; instead, you create one of the typed array objects or a DataView object which represents the buffer in a specific format, and use that to read and write the contents of the buffer.",
			"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
			"isView": {
				"!type": "fn(arg: ?) -> bool",
				"!doc": "The ArrayBuffer.isView() method returns true if arg is a view one of the ArrayBuffer views, such as typed array objects or a DataView; false otherwise.",
				"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/isView"
			},
			"transfer": {
				"!type": "fn(oldBuffer: ?, newByteLength: ?)",
				"!doc": "The static ArrayBuffer.transfer() method returns a new ArrayBuffer whose contents are taken from the oldBuffer's data and then is either truncated or zero-extended by newByteLength. If newByteLength is undefined, the byteLength of the oldBuffer is used. This operation leaves oldBuffer in a detached state.",
				"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/transfer"
			},
			"prototype": {
				"byteLength": {
					"!type": "number",
					"!doc": "The byteLength accessor property represents the length of an ArrayBuffer in bytes.",
					"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/byteLength"
				},
				"slice": {
					"!type": "fn(begin: number, end?: number) -> +ArrayBuffer",
					"!doc": "The slice() method returns a new ArrayBuffer whose contents are a copy of this ArrayBuffer's bytes from begin, inclusive, up to end, exclusive.",
					"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/slice"
				}
			}
		},
		"DataView": {
			"!type": "fn(buffer: +ArrayBuffer, byteOffset?: number, byteLength?: number)",
			"!doc": "The DataView view provides a low-level interface for reading data from and writing it to an ArrayBuffer.",
			"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
			"prototype": {
				"buffer": {
					"!type": "+ArrayBuffer",
					"!doc": "The buffer accessor property represents the ArrayBuffer referenced by the DataView at construction time.",
					"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/buffer"
				},
				"byteLength": {
					"!type": "number",
					"!doc": "The byteLength accessor property represents the length (in bytes) of this view from the start of its ArrayBuffer.",
					"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/byteLength"
				},
				"byteOffset": {
					"!type": "number",
					"!doc": "The byteOffset accessor property represents the offset (in bytes) of this view from the start of its ArrayBuffer.",
					"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/byteOffset"
				},
				"getFloat32": {
					"!type": "fn(byteOffset: number, littleEndian?: bool) -> number",
					"!doc": "The getFloat32() method gets a signed 32-bit integer (float) at the specified byte offset from the start of the DataView.",
					"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getFloat32"
				},
				"getFloat64": {
					"!type": "fn(byteOffset: number, littleEndian?: bool) -> number",
					"!doc": "The getFloat64() method gets a signed 64-bit float (double) at the specified byte offset from the start of the DataView.",
					"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getFloat64"
				},
				"getInt16": {
					"!type": "fn(byteOffset: number, littleEndian?: bool) -> number",
					"!doc": "The getInt16() method gets a signed 16-bit integer (short) at the specified byte offset from the start of the DataView.",
					"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getInt16"
				},
				"getInt32": {
					"!type": "fn(byteOffset: number, littleEndian?: bool) -> number",
					"!doc": "The getInt32() method gets a signed 32-bit integer (long) at the specified byte offset from the start of the DataView.",
					"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getInt32"
				},
				"getInt8": {
					"!type": "fn(byteOffset: number, littleEndian?: bool) -> number",
					"!doc": "The getInt8() method gets a signed 8-bit integer (byte) at the specified byte offset from the start of the DataView.",
					"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getInt8"
				},
				"getUint16": {
					"!type": "fn(byteOffset: number, littleEndian?: bool) -> number",
					"!doc": "The getUint16() method gets an unsigned 16-bit integer (unsigned short) at the specified byte offset from the start of the DataView.",
					"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getUint16"
				},
				"getUint32": {
					"!type": "fn(byteOffset: number, littleEndian?: bool) -> number",
					"!doc": "The getUint32() method gets an unsigned 32-bit integer (unsigned long) at the specified byte offset from the start of the DataView.",
					"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getUint32"
				},
				"getUint8": {
					"!type": "fn(byteOffset: number) -> number",
					"!doc": "The getUint8() method gets an unsigned 8-bit integer (unsigned byte) at the specified byte offset from the start of the DataView.",
					"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getUint8"
				},
				"setFloat32": {
					"!type": "fn(byteOffset: number, value: number, littleEndian?: bool)",
					"!doc": "The setFloat32() method stores a signed 32-bit integer (float) value at the specified byte offset from the start of the DataView.",
					"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setFloat32"
				},
				"setFloat64": {
					"!type": "fn(byteOffset: number, value: number, littleEndian?: bool)",
					"!doc": "The setFloat64() method stores a signed 64-bit integer (double) value at the specified byte offset from the start of the DataView.",
					"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setFloat64"
				},
				"setInt16": {
					"!type": "fn(byteOffset: number, value: number, littleEndian?: bool)",
					"!doc": "The setInt16() method stores a signed 16-bit integer (short) value at the specified byte offset from the start of the DataView.",
					"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setInt16"
				},
				"setInt32": {
					"!type": "fn(byteOffset: number, value: number, littleEndian?: bool)",
					"!doc": "The setInt32() method stores a signed 32-bit integer (long) value at the specified byte offset from the start of the DataView.",
					"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setInt32"
				},
				"setInt8": {
					"!type": "fn(byteOffset: number, value: number)",
					"!doc": "The setInt8() method stores a signed 8-bit integer (byte) value at the specified byte offset from the start of the DataView.",
					"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setInt8"
				},
				"setUint16": {
					"!type": "fn(byteOffset: number, value: number, littleEndian?: bool)",
					"!doc": "The setUint16() method stores an unsigned 16-bit integer (unsigned short) value at the specified byte offset from the start of the DataView.",
					"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setUint16"
				},
				"setUint32": {
					"!type": "fn(byteOffset: number, value: number, littleEndian?: bool)",
					"!doc": "The setUint32() method stores an unsigned 32-bit integer (unsigned long) value at the specified byte offset from the start of the DataView.",
					"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setUint32"
				},
				"setUint8": {
					"!type": "fn(byteOffset: number, value: number)",
					"!doc": "The setUint8() method stores an unsigned 8-bit integer (byte) value at the specified byte offset from the start of the DataView.",
					"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setUint8"
				}
			}
		},
		"Float32Array": {
			"!type": "fn(length: number)",
			"!doc": "The Float32Array typed array represents an array of 32-bit floating point numbers (corresponding to the C float data type) in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).",
			"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
			"prototype": {
				"!proto": "TypedArray.prototype"
			},
			"length": "TypedArray.length",
			"BYTES_PER_ELEMENT": "TypedArray.BYTES_PER_ELEMENT",
			"name": "TypedArray.name",
			"from": "TypedArray.from",
			"of": "TypedArray.of"
		},
		"Float64Array": {
			"!type": "fn(length: number)",
			"!doc": "The Float64Array typed array represents an array of 64-bit floating point numbers (corresponding to the C double data type) in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).",
			"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
			"prototype": {
				"!proto": "TypedArray.prototype"
			},
			"length": "TypedArray.length",
			"BYTES_PER_ELEMENT": "TypedArray.BYTES_PER_ELEMENT",
			"name": "TypedArray.name",
			"from": "TypedArray.from",
			"of": "TypedArray.of"
		},
		"Int16Array": {
			"!type": "fn(length: number)",
			"!doc": "The Int16Array typed array represents an array of twos-complement 16-bit signed integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).",
			"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
			"prototype": {
				"!proto": "TypedArray.prototype"
			},
			"length": "TypedArray.length",
			"BYTES_PER_ELEMENT": "TypedArray.BYTES_PER_ELEMENT",
			"name": "TypedArray.name",
			"from": "TypedArray.from",
			"of": "TypedArray.of"
		},
		"Int32Array": {
			"!type": "fn(length: number)",
			"!doc": "The Int32Array typed array represents an array of twos-complement 32-bit signed integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).",
			"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
			"prototype": {
				"!proto": "TypedArray.prototype"
			},
			"length": "TypedArray.length",
			"BYTES_PER_ELEMENT": "TypedArray.BYTES_PER_ELEMENT",
			"name": "TypedArray.name",
			"from": "TypedArray.from",
			"of": "TypedArray.of"
		},
		"Int8Array": {
			"!type": "fn(length: number)",
			"!doc": "The Int8Array typed array represents an array of twos-complement 8-bit signed integers. The contents are initialized to 0. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).",
			"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
			"prototype": {
				"!proto": "TypedArray.prototype"
			},
			"length": "TypedArray.length",
			"BYTES_PER_ELEMENT": "TypedArray.BYTES_PER_ELEMENT",
			"name": "TypedArray.name",
			"from": "TypedArray.from",
			"of": "TypedArray.of"
		},
		"Map": {
			"!type": "fn(iterable?: [])",
			"!doc": "The Map object is a simple key/value map. Any value (both objects and primitive values) may be used as either a key or a value.",
			"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
			"prototype": {
				"clear": {
					"!type": "fn()",
					"!doc": "The clear() method removes all elements from a Map object.",
					"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/clear"
				},
				"delete": {
					"!type": "fn(key: ?)",
					"!doc": "The delete() method removes the specified element from a Map object.",
					"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/delete"
				},
				"entries": {
					"!type": "fn() -> TODO_ITERATOR",
					"!doc": "The entries() method returns a new Iterator object that contains the [key, value] pairs for each element in the Map object in insertion order.",
					"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/entries"
				},
				"forEach": {
					"!type": "fn(callback: fn(value: ?, key: ?, map: +Map), thisArg?: ?)",
					"!effects": [
						"call !0 this=!1 !this.<i> number !this"
					],
					"!doc": "The forEach() method executes a provided function once per each key/value pair in the Map object, in insertion order.",
					"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/forEach"
				},
				"get": {
					"!type": "fn(key: ?) -> !this.<i>",
					"!doc": "The get() method returns a specified element from a Map object.",
					"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/get"
				},
				"has": {
					"!type": "fn(key: ?) -> bool",
					"!doc": "The has() method returns a boolean indicating whether an element with the specified key exists or not.",
					"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/has"
				},
				"keys": {
					"!type": "fn() -> TODO_ITERATOR",
					"!doc": "The keys() method returns a new Iterator object that contains the keys for each element in the Map object in insertion order.",
					"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/keys"
				},
				"set": {
					"!type": "fn(key: ?, value: ?) -> !this",
					"!doc": "The set() method adds a new element with a specified key and value to a Map object.",
					"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/set"
				},
				"size": {
					"!type": "number",
					"!doc": "The size accessor property returns the number of elements in a Map object.",
					"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/size"
				},
				"values": {
					"!type": "fn() -> TODO_ITERATOR",
					"!doc": "The values() method returns a new Iterator object that contains the values for each element in the Map object in insertion order.",
					"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/values"
				},
				"prototype[@@iterator]": {
					"!type": "fn()",
					"!doc": "The initial value of the @@iterator property is the same function object as the initial value of the entries property.",
					"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/@@iterator"
				}
			}
		},
		"Math": {
			"acosh": {
				"!type": "fn(x: number) -> number",
				"!doc": "The Math.acosh() function returns the hyperbolic arc-cosine of a number, that is",
				"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/acosh"
			},
			"asinh": {
				"!type": "fn(x: number) -> number",
				"!doc": "The Math.asinh() function returns the hyperbolic arcsine of a number, that is",
				"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/asinh"
			},
			"atanh": {
				"!type": "fn(x: number) -> number",
				"!doc": "The Math.atanh() function returns the hyperbolic arctangent of a number, that is",
				"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/atanh"
			},
			"cbrt": {
				"!type": "fn(x: number) -> number",
				"!doc": "The Math.cbrt() function returns the cube root of a number, that is",
				"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/cbrt"
			},
			"clz32": {
				"!type": "fn(x: number) -> number",
				"!doc": "The Math.clz32() function returns the number of leading zero bits in the 32-bit binary representation of a number.",
				"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32"
			},
			"cosh": {
				"!type": "fn(x: number) -> number",
				"!doc": "The Math.cosh() function returns the hyperbolic cosine of a number, that can be expressed using the constant e:",
				"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/cosh"
			},
			"expm1": {
				"!type": "fn(x: number) -> number",
				"!doc": "The Math.expm1() function returns ex - 1, where x is the argument, and e the base of the natural logarithms.",
				"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/expm1"
			},
			"fround": {
				"!type": "fn(x: number) -> number",
				"!doc": "The Math.fround() function returns the nearest single precision float representation of a number.",
				"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/fround"
			},
			"hypot": {
				"!type": "fn(value: number) -> number",
				"!doc": "The Math.hypot() function returns the square root of the sum of squares of its arguments, that is",
				"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/hypot"
			},
			"imul": {
				"!type": "fn(a: number, b: number) -> number",
				"!doc": "The Math.imul() function returns the result of the C-like 32-bit multiplication of the two parameters.",
				"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/imul"
			},
			"log10": {
				"!type": "fn(x: number) -> number",
				"!doc": "The Math.log10() function returns the base 10 logarithm of a number, that is",
				"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/log10"
			},
			"log1p": {
				"!type": "fn(x: number) -> number",
				"!doc": "The Math.log1p() function returns the natural logarithm (base e) of 1 + a number, that is",
				"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/log1p"
			},
			"log2": {
				"!type": "fn(x: number) -> number",
				"!doc": "The Math.log2() function returns the base 2 logarithm of a number, that is",
				"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/log2"
			},
			"sign": {
				"!type": "fn(x: number) -> number",
				"!doc": "The Math.sign() function returns the sign of a number, indicating whether the number is positive, negative or zero.",
				"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sign"
			},
			"sinh": {
				"!type": "fn(x: number) -> number",
				"!doc": "The Math.sinh() function returns the hyperbolic sine of a number, that can be expressed using the constant e:",
				"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sinh"
			},
			"tanh": {
				"!type": "fn(x: number) -> number",
				"!doc": "The Math.tanh() function returns the hyperbolic tangent of a number, that is",
				"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/tanh"
			},
			"trunc": {
				"!type": "fn(x: number) -> number",
				"!doc": "The Math.trunc() function returns the integral part of a number by removing any fractional digits. It does not round any numbers. The function can be expressed with the floor() and ceil() function:",
				"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/trunc"
			}
		},
		"Number": {
			"EPSILON": {
				"!type": "number",
				"!doc": "The Number.EPSILON property represents the difference between one and the smallest value greater than one that can be represented as a Number.",
				"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/EPSILON"
			},
			"MAX_SAFE_INTEGER": {
				"!type": "number",
				"!doc": "The Number.MAX_SAFE_INTEGER constant represents the maximum safe integer in JavaScript (253 - 1).",
				"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER"
			},
			"MIN_SAFE_INTEGER": {
				"!type": "number",
				"!doc": "The Number.MIN_SAFE_INTEGER constant represents the minimum safe integer in JavaScript (-(253 - 1)).",
				"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MIN_SAFE_INTEGER"
			},
			"isFinite": {
				"!type": "fn(testValue: ?) -> bool",
				"!doc": "The Number.isFinite() method determines whether the passed value is finite.",
				"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isFinite"
			},
			"isInteger": {
				"!type": "fn(testValue: ?) -> bool",
				"!doc": "The Number.isInteger() method determines whether the passed value is an integer.",
				"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isInteger"
			},
			"isNaN": {
				"!type": "fn(testValue: ?) -> bool",
				"!doc": "The Number.isNaN() method determines whether the passed value is NaN. More robust version of the original global isNaN().",
				"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN"
			},
			"isSafeInteger": {
				"!type": "fn(testValue: ?) -> bool",
				"!doc": "The Number.isSafeInteger() method determines whether the provided value is a number that is a safe integer. A safe integer is an integer that",
				"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isSafeInteger"
			},
			"parseFloat": {
				"!type": "fn(string: string) -> number",
				"!doc": "The Number.parseFloat() method parses a string argument and returns a floating point number. This method behaves identically to the global function parseFloat() and is part of ECMAScript 6 (its purpose is modularization of globals).",
				"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/parseFloat"
			},
			"parseInt": {
				"!type": "fn(string: string, radix?: number) -> number",
				"!doc": "The Number.parseInt() method parses a string argument and returns an integer of the specified radix or base. This method behaves identically to the global function parseInt() and is part of ECMAScript 6 (its purpose is modularization of globals).",
				"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/parseInt"
			}
		},
		"Object": {
			"assign": {
				"!type": "fn(target: ?, sources: ?) -> ?",
				"!doc": "The Object.assign() method is used to copy the values of all enumerable own properties from one or more source objects to a target object. It will return the target object.",
				"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign"
			},
			"getOwnPropertySymbols": {
				"!type": "fn(obj: ?) -> [?]",
				"!doc": "The Object.getOwnPropertySymbols() method returns an array of all symbol properties found directly upon a given object.",
				"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertySymbols"
			},
			"is": {
				"!type": "fn(value1: ?, value2: ?) -> bool",
				"!doc": "The Object.is() method determines whether two values are the same value.",
				"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is"
			},
			"setPrototypeOf": {
				"!type": "fn(obj: ?, prototype: ?)",
				"!doc": "The Object.setPrototype() method sets the prototype (i.e., the internal [[Prototype]] property) of a specified object to another object or null.",
				"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf"
			}
		},
		"Promise": {
			"!type": "fn(executor: fn(resolve: fn(value: ?), reject: promiseReject)) -> !custom:Promise_ctor",
			"!doc": "The Promise object is used for deferred and asynchronous computations. A Promise is in one of the three states:",
			"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
			"all": {
				"!type": "fn(iterable: [+Promise]) -> !0.<i>",
				"!doc": "The Promise.all(iterable) method returns a promise that resolves when all of the promises in the iterable argument have resolved.",
				"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/all"
			},
			"race": {
				"!type": "fn(iterable: [+Promise]) -> !0.<i>",
				"!doc": "The Promise.race(iterable) method returns a promise that resolves or rejects as soon as one of the promises in the iterable resolves or rejects, with the value or reason from that promise.",
				"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/race"
			},
			"reject": {
				"!type": "fn(reason: ?) -> !this",
				"!doc": "The Promise.reject(reason) method returns a Promise object that is rejected with the given reason.",
				"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/reject"
			},
			"resolve": {
				"!type": "fn(value: ?) -> +Promise[value=!0]",
				"!doc": "The Promise.resolve(value) method returns a Promise object that is resolved with the given value. If the value is a thenable (i.e. has a then method), the returned promise will 'follow' that thenable, adopting its eventual state; otherwise the returned promise will be fulfilled with the value.",
				"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/resolve"
			},
			"prototype": "Promise.prototype"
		},
		"Proxy": {
			"!type": "fn(target: ?, handler: ?)",
			"!doc": "The Proxy object is used to define the custom behavior in JavaScript fundamental operation (e.g. property lookup, assignment, enumeration, function invocation, etc).",
			"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
			"revocable": {
				"!doc": "The Proxy.revocable() method is used to create a revocable Proxy object.",
				"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/revocable"
			}
		},
		"RegExp": {
			"prototype": {
				"flags": {
					"!type": "string",
					"!doc": "The flags property returns a string consisting of the flags of the current regular expression object.",
					"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/flags"
				},
				"sticky": {
					"!type": "bool",
					"!doc": "The sticky property reflects whether or not the search is sticky (searches in strings only from the index indicated by the lastIndex property of this regular expression). sticky is a read-only property of an individual regular expression object.",
					"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/sticky"
				}
			}
		},
		"Set": {
			"!type": "fn(iterable: [?])",
			"!doc": "The Set object lets you store unique values of any type, whether primitive values or object references.",
			"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
			"length": {
				"!type": "number",
				"!doc": "The value of the length property is 1."
			},
			"prototype": {
				"add": {
					"!type": "fn(value: ?) -> !this",
					"!doc": "The add() method appends a new element with a specified value to the end of a Set object.",
					"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/add"
				},
				"clear": {
					"!type": "fn()",
					"!doc": "The clear() method removes all elements from a Set object.",
					"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/clear"
				},
				"delete": {
					"!type": "fn(value: ?) -> bool",
					"!doc": "The delete() method removes the specified element from a Set object.",
					"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/delete"
				},
				"entries": {
					"!type": "fn() -> TODO_ITERATOR",
					"!doc": "The entries() method returns a new Iterator object that contains an array of [value, value] for each element in the Set object, in insertion order. For Set objects there is no key like in Map objects. However, to keep the API similar to the Map object, each entry has the same value for its key and value here, so that an array [value, value] is returned.",
					"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/entries"
				},
				"forEach": {
					"!type": "fn(callback: fn(value: ?, value2: ?, set: +Set), thisArg?: ?)",
					"!effects": [
						"call !0 this=!1 !this.<i> number !this"
					]
				},
				"has": {
					"!type": "fn(value: ?) -> bool",
					"!doc": "The has() method returns a boolean indicating whether an element with the specified value exists in a Set object or not.",
					"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/has"
				},
				"keys": {
					"!type": "fn() -> TODO_ITERATOR",
					"!doc": "The values() method returns a new Iterator object that contains the values for each element in the Set object in insertion order.",
					"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/keys"
				},
				"size": {
					"!type": "number",
					"!doc": "The size accessor property returns the number of elements in a Set object.",
					"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/size"
				},
				"values": {
					"!type": "fn() -> TODO_ITERATOR",
					"!doc": "The values() method returns a new Iterator object that contains the values for each element in the Set object in insertion order.",
					"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/values"
				},
				"prototype[@@iterator]": {
					"!type": "fn()",
					"!doc": "The initial value of the @@iterator property is the same function object as the initial value of the values property.",
					"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/@@iterator"
				}
			}
		},
		"String": {
			"fromCodePoint": {
				"!type": "fn(num1: ?) -> string",
				"!doc": "The static String.fromCodePoint() method returns a string created by using the specified sequence of code points.",
				"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint"
			},
			"raw": {
				"!type": "fn(callSite: ?, substitutions: ?, templateString: ?) -> string",
				"!doc": "The static String.raw() method is a tag function of template strings, like the r prefix in Python or the @ prefix in C# for string literals, this function is used to get the raw string form of template strings.",
				"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/raw"
			},
			"prototype": {
				"codePointAt": {
					"!type": "fn(pos: number) -> number",
					"!doc": "The codePointAt() method returns a non-negative integer that is the UTF-16 encoded code point value.",
					"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/codePointAt"
				},
				"endsWith": {
					"!type": "fn(searchString: string, position?: number) -> bool",
					"!doc": "The endsWith() method determines whether a string ends with the characters of another string, returning true or false as appropriate.",
					"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith"
				},
				"includes": {
					"!type": "fn(searchString: string, position?: number) -> bool",
					"!doc": "The includes() method determines whether one string may be found within another string, returning true or false as appropriate.",
					"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/contains"
				},
				"normalize": {
					"!type": "fn(form: string) -> string",
					"!doc": "The normalize() method returns the Unicode Normalization Form of a given string (if the value isn't a string, it will be converted to one first).",
					"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize"
				},
				"repeat": {
					"!type": "fn(count: number) -> string",
					"!doc": "The repeat() method constructs and returns a new string which contains the specified number of copies of the string on which it was called, concatenated together.",
					"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/repeat"
				},
				"startsWith": {
					"!type": "fn(searchString: string, position?: number) -> bool",
					"!doc": "The startsWith() method determines whether a string begins with the characters of another string, returning true or false as appropriate.",
					"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith"
				}
			}
		},
		"Symbol": {
			"!type": "fn(description?: string)",
			"!doc": "A symbol is a unique and immutable data type and may be used as an identifier for object properties. The symbol object is an implicit object wrapper for the symbol primitive data type.",
			"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
			"for": {
				"!type": "fn(key: string) -> +Symbol",
				"!doc": "The Symbol.for(key) method searches for existing symbols in a runtime-wide symbol registry with the given key and returns it if found. Otherwise a new symbol gets created in the global symbol registry with this key.",
				"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/for"
			},
			"keyFor": {
				"!type": "fn(sym: +Symbol) -> +Symbol",
				"!doc": "The Symbol.keyFor(sym) method retrieves a shared symbol key from the global symbol registry for the given symbol.",
				"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/keyFor"
			},
			"prototype": {
				"toString": {
					"!type": "fn() -> string",
					"!doc": "The toString() method returns a string representing the specified Symbol object.",
					"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toString"
				},
				"valueOf": {
					"!type": "fn() -> ?",
					"!doc": "The valueOf() method returns the primitive value of a Symbol object.",
					"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/valueOf"
				}
			}
		},
		"TypedArray": {
			"!type": "fn(length: number)",
			"!doc": "A TypedArray object describes an array-like view of an underlying binary data buffer. There is no global property named TypedArray, nor is there a directly visible TypedArray constructor.  Instead, there are a number of different global properties, whose values are typed array constructors for specific element types, listed below. On the following pages you will find common properties and methods that can be used with any typed array containing elements of any type.",
			"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray",
			"BYTES_PER_ELEMENT": {
				"!type": "number",
				"!doc": "The TypedArray.BYTES_PER_ELEMENT property represents the size in bytes of each element in an typed array.",
				"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/BYTES_PER_ELEMENT"
			},
			"length": {
				"!type": "number",
				"!doc": "The length accessor property represents the length (in elements) of a typed array.",
				"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/length"
			},
			"name": {
				"!type": "string",
				"!doc": "The TypedArray.name property represents a string value of the typed array constructor name.",
				"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/name"
			},
			"prototype": {
				"buffer": {
					"!type": "+ArrayBuffer",
					"!doc": "The buffer accessor property represents the ArrayBuffer referenced by a TypedArray at construction time.",
					"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/buffer"
				},
				"byteLength": {
					"!type": "number",
					"!doc": "The byteLength accessor property represents the length (in bytes) of a typed array from the start of its ArrayBuffer.",
					"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/byteLength"
				},
				"byteOffset": {
					"!type": "number",
					"!doc": "The byteOffset accessor property represents the offset (in bytes) of a typed array from the start of its ArrayBuffer.",
					"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/byteOffset"
				},
				"copyWithin": {
					"!type": "fn(target: number, start: number, end?: number) -> ?",
					"!doc": "The copyWithin() method copies the sequence of array elements within the array to the position starting at target. The copy is taken from the index positions of the second and third arguments start and end. The end argument is optional and defaults to the length of the array. This method has the same algorithm as Array.prototype.copyWithin. TypedArray is one of the typed array types here.",
					"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/copyWithin"
				},
				"entries": {
					"!type": "fn() -> TODO_ITERATOR",
					"!doc": "The entries() method returns a new Array Iterator object that contains the key/value pairs for each index in the array.",
					"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/entries"
				},
				"every": {
					"!type": "fn(callback: fn(currentValue: ?, index: number, array: +TypedArray) -> bool, thisArg?: ?) -> bool",
					"!effects": [
						"call !0 this=!1 !this.<i> number !this"
					],
					"!doc": "The every() method tests whether all elements in the typed array pass the test implemented by the provided function. This method has the same algorithm as Array.prototype.every(). TypedArray is one of the typed array types here.",
					"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/every"
				},
				"fill": {
					"!type": "fn(value: ?, start?: number, end?: number)",
					"!doc": "The fill() method fills all the elements of a typed array from a start index to an end index with a static value. This method has the same algorithm as Array.prototype.fill(). TypedArray is one of the typed array types here.",
					"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/fill"
				},
				"filter": {
					"!type": "fn(test: fn(elt: ?, i: number) -> bool, context?: ?) -> !this",
					"!effects": [
						"call !0 this=!1 !this.<i> number"
					],
					"!doc": "Creates a new array with all of the elements of this array for which the provided filtering function returns true. See also Array.prototype.filter().",
					"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/filter"
				},
				"find": {
					"!type": "fn(callback: fn(element: ?, index: number, array: +TypedArray) -> bool, thisArg?: ?) -> ?",
					"!effects": [
						"call !0 this=!1 !this.<i> number !this"
					],
					"!doc": "The find() method returns a value in the typed array, if an element satisfies the provided testing function. Otherwise undefined is returned. TypedArray is one of the typed array types here.\nSee also the findIndex() method, which returns the index of a found element in the typed array instead of its value.",
					"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/find"
				},
				"findIndex": {
					"!type": "fn(callback: fn(element: ?, index: number, array: +TypedArray) -> bool, thisArg?: ?) -> number",
					"!effects": [
						"call !0 this=!1 !this.<i> number !this"
					],
					"!doc": "The findIndex() method returns an index in the typed array, if an element in the typed array satisfies the provided testing function. Otherwise -1 is returned.\nSee also the find() method, which returns the value of a found element in the typed array instead of its index.",
					"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/findIndex"
				},
				"forEach": {
					"!type": "fn(callback: fn(value: ?, key: ?, array: +TypedArray), thisArg?: ?)",
					"!effects": [
						"call !0 this=!1 !this.<i> number !this"
					],
					"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/forEach"
				},
				"includes": {
					"!type": "fn(searchElement: ?, fromIndex?: number) -> bool",
					"!doc": "The includes() method determines whether a typed array includes a certain element, returning true or false as appropriate. This method has the same algorithm as Array.prototype.includes(). TypedArray is one of the typed array types here.",
					"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/includes"
				},
				"indexOf": {
					"!type": "fn(searchElement: ?, fromIndex?: number) -> number",
					"!doc": "The indexOf() method returns the first index at which a given element can be found in the typed array, or -1 if it is not present. This method has the same algorithm as Array.prototype.indexOf(). TypedArray is one of the typed array types here.",
					"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/indexOf"
				},
				"join": {
					"!type": "fn(separator?: string) -> string",
					"!doc": "The join() method joins all elements of an array into a string. This method has the same algorithm as Array.prototype.join(). TypedArray is one of the typed array types here.",
					"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/join"
				},
				"keys": {
					"!type": "fn() -> TODO_ITERATOR",
					"!doc": "The keys() method returns a new Array Iterator object that contains the keys for each index in the array.",
					"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/keys"
				},
				"lastIndexOf": {
					"!type": "fn(searchElement: ?, fromIndex?: number) -> number",
					"!doc": "The lastIndexOf() method returns the last index at which a given element can be found in the typed array, or -1 if it is not present. The typed array is searched backwards, starting at fromIndex. This method has the same algorithm as Array.prototype.lastIndexOf(). TypedArray is one of the typed array types here.",
					"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/lastIndexOf"
				},
				"length": {
					"!type": "number",
					"!doc": "Returns the number of elements hold in the typed array. Fixed at construction time and thus read only.",
					"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/length"
				},
				"map": {
					"!type": "fn(f: fn(elt: ?, i: number) -> ?, context?: ?) -> [!0.!ret]",
					"!effects": [
						"call !0 this=!1 !this.<i> number"
					],
					"!doc": "Creates a new array with the results of calling a provided function on every element in this array. See also Array.prototype.map().",
					"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/map"
				},
				"reduce": {
					"!type": "fn(combine: fn(sum: ?, elt: ?, i: number) -> ?, init?: ?) -> !0.!ret",
					"!effects": [
						"call !0 !1 !this.<i> number"
					],
					"!doc": "Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value. See also Array.prototype.reduce().",
					"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/reduce"
				},
				"reduceRight": {
					"!type": "fn(combine: fn(sum: ?, elt: ?, i: number) -> ?, init?: ?) -> !0.!ret",
					"!effects": [
						"call !0 !1 !this.<i> number"
					],
					"!doc": "Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value. See also Array.prototype.reduceRight().",
					"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/reduceRight"
				},
				"reverse": {
					"!type": "fn()",
					"!doc": "The reverse() method reverses a typed array in place. The first typed array element becomes the last and the last becomes the first. This method has the same algorithm as Array.prototype.reverse(). TypedArray is one of the typed array types here.",
					"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/reverse"
				},
				"set": {
					"!type": "fn(array: [?], offset?: ?)",
					"!doc": "The set() method stores multiple values in the typed array, reading input values from a specified array.",
					"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/set"
				},
				"slice": {
					"!type": "fn(from: number, to?: number) -> !this",
					"!doc": "Extracts a section of an array and returns a new array. See also Array.prototype.slice().",
					"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/slice"
				},
				"some": {
					"!type": "fn(test: fn(elt: ?, i: number) -> bool, context?: ?) -> bool",
					"!effects": [
						"call !0 this=!1 !this.<i> number"
					],
					"!doc": "The some() method tests whether some element in the typed array passes the test implemented by the provided function. This method has the same algorithm as Array.prototype.some(). TypedArray is one of the typed array types here.",
					"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/some"
				},
				"sort": {
					"!type": "fn(compare?: fn(a: ?, b: ?) -> number)",
					"!effects": [
						"call !0 !this.<i> !this.<i>"
					],
					"!doc": "Sorts the elements of an array in place and returns the array. See also Array.prototype.sort().",
					"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/sort"
				},
				"subarray": {
					"!type": "fn(begin?: number, end?: number) -> +TypedArray",
					"!doc": "The subarray() method returns a new TypedArray on the same ArrayBuffer store and with the same element types as for this TypedArray object. The begin offset is inclusive and the end offset is exclusive. TypedArray is one of the typed array types.",
					"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/subarray"
				},
				"values": {
					"!type": "fn() -> TODO_ITERATOR",
					"!doc": "The values() method returns a new Array Iterator object that contains the values for each index in the array.",
					"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/values"
				},
				"prototype[@@iterator]": {
					"!type": "fn()",
					"!doc": "The initial value of the @@iterator property is the same function object as the initial value of the values property.",
					"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/@@iterator"
				}
			}
		},
		"Uint16Array": {
			"!type": "fn()",
			"!doc": "The Uint16Array typed array represents an array of 16-bit unsigned integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).",
			"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
			"length": "TypedArray.length",
			"BYTES_PER_ELEMENT": "TypedArray.BYTES_PER_ELEMENT",
			"name": "TypedArray.name",
			"from": "TypedArray.from",
			"of": "TypedArray.of",
			"prototype": {
				"!proto": "TypedArray.prototype"
			}
		},
		"Uint32Array": {
			"!type": "fn()",
			"!doc": "The Uint32Array typed array represents an array of 32-bit unsigned integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).",
			"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
			"length": "TypedArray.length",
			"BYTES_PER_ELEMENT": "TypedArray.BYTES_PER_ELEMENT",
			"name": "TypedArray.name",
			"from": "TypedArray.from",
			"of": "TypedArray.of",
			"prototype": {
				"!proto": "TypedArray.prototype"
			}
		},
		"Uint8Array": {
			"!type": "fn()",
			"!doc": "The Uint8Array typed array represents an array of 8-bit unsigned integers. The contents are initialized to 0. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).",
			"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
			"length": "TypedArray.length",
			"BYTES_PER_ELEMENT": "TypedArray.BYTES_PER_ELEMENT",
			"name": "TypedArray.name",
			"from": "TypedArray.from",
			"of": "TypedArray.of",
			"prototype": {
				"!proto": "TypedArray.prototype"
			}
		},
		"Uint8ClampedArray": {
			"!type": "fn()",
			"!doc": "The Uint8ClampedArray typed array represents an array of 8-bit unsigned integers clamped to 0-255. The contents are initialized to 0. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).",
			"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
			"length": "TypedArray.length",
			"BYTES_PER_ELEMENT": "TypedArray.BYTES_PER_ELEMENT",
			"name": "TypedArray.name",
			"from": "TypedArray.from",
			"of": "TypedArray.of",
			"prototype": {
				"!proto": "TypedArray.prototype"
			}
		},
		"WeakMap": {
			"!type": "fn(iterable: [?])",
			"!doc": "The WeakMap object is a collection of key/value pairs in which the keys are objects and the values can be arbitrary values.",
			"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
			"prototype": {
				"delete": {
					"!type": "fn(key: ?) -> bool",
					"!doc": "The delete() method removes the specified element from a WeakMap object.",
					"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap/delete"
				},
				"get": {
					"!type": "fn(key: ?) !this.<i>",
					"!doc": "The get() method returns a specified element from a WeakMap object.",
					"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap/get"
				},
				"has": {
					"!type": "fn(key: ?) -> bool",
					"!doc": "The has() method returns a boolean indicating whether an element with the specified key exists in the WeakMap object or not.",
					"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap/has"
				},
				"set": {
					"!type": "fn(key: ?, value: ?)",
					"!doc": "The set() method adds a new element with a specified key and value to a WeakMap object.",
					"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap/set"
				}
			}
		},
		"WeakSet": {
			"!type": "fn(iterable: [?])",
			"!doc": "The WeakSet object lets you store weakly held objects in a collection.",
			"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
			"prototype": {
				"add": {
					"!type": "fn(value: ?)",
					"!doc": "The add() method appends a new object to the end of a WeakSet object.",
					"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet/add"
				},
				"delete": {
					"!type": "fn(value: ?) -> bool",
					"!doc": "The delete() method removes the specified element from a WeakSet object.",
					"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet/delete"
				},
				"has": {
					"!type": "fn(value: ?) -> bool",
					"!doc": "The has() method returns a boolean indicating whether an object exists in a WeakSet or not.",
					"!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet/has"
				}
			}
		}
	};

/***/ },
/* 20 */
/***/ function(module, exports) {

	module.exports = {
		"!name": "browser",
		"location": {
			"assign": {
				"!type": "fn(url: string)",
				"!url": "https://developer.mozilla.org/en/docs/DOM/window.location",
				"!doc": "Load the document at the provided URL."
			},
			"replace": {
				"!type": "fn(url: string)",
				"!url": "https://developer.mozilla.org/en/docs/DOM/window.location",
				"!doc": "Replace the current document with the one at the provided URL. The difference from the assign() method is that after using replace() the current page will not be saved in session history, meaning the user won't be able to use the Back button to navigate to it."
			},
			"reload": {
				"!type": "fn()",
				"!url": "https://developer.mozilla.org/en/docs/DOM/window.location",
				"!doc": "Reload the document from the current URL. forceget is a boolean, which, when it is true, causes the page to always be reloaded from the server. If it is false or not specified, the browser may reload the page from its cache."
			},
			"origin": {
				"!type": "string",
				"!url": "https://developer.mozilla.org/en/docs/DOM/window.location",
				"!doc": "The origin of the URL."
			},
			"hash": {
				"!type": "string",
				"!url": "https://developer.mozilla.org/en/docs/DOM/window.location",
				"!doc": "The part of the URL that follows the # symbol, including the # symbol."
			},
			"search": {
				"!type": "string",
				"!url": "https://developer.mozilla.org/en/docs/DOM/window.location",
				"!doc": "The part of the URL that follows the ? symbol, including the ? symbol."
			},
			"pathname": {
				"!type": "string",
				"!url": "https://developer.mozilla.org/en/docs/DOM/window.location",
				"!doc": "The path (relative to the host)."
			},
			"port": {
				"!type": "string",
				"!url": "https://developer.mozilla.org/en/docs/DOM/window.location",
				"!doc": "The port number of the URL."
			},
			"hostname": {
				"!type": "string",
				"!url": "https://developer.mozilla.org/en/docs/DOM/window.location",
				"!doc": "The host name (without the port number or square brackets)."
			},
			"host": {
				"!type": "string",
				"!url": "https://developer.mozilla.org/en/docs/DOM/window.location",
				"!doc": "The host name and port number."
			},
			"protocol": {
				"!type": "string",
				"!url": "https://developer.mozilla.org/en/docs/DOM/window.location",
				"!doc": "The protocol of the URL."
			},
			"href": {
				"!type": "string",
				"!url": "https://developer.mozilla.org/en/docs/DOM/window.location",
				"!doc": "The entire URL."
			},
			"!url": "https://developer.mozilla.org/en/docs/DOM/window.location",
			"!doc": "Returns a location object with information about the current location of the document. Assigning to the location property changes the current page to the new address."
		},
		"Node": {
			"!type": "fn()",
			"prototype": {
				"parentElement": {
					"!type": "+Element",
					"!url": "https://developer.mozilla.org/en/docs/DOM/Node.parentElement",
					"!doc": "Returns the DOM node's parent Element, or null if the node either has no parent, or its parent isn't a DOM Element."
				},
				"textContent": {
					"!type": "string",
					"!url": "https://developer.mozilla.org/en/docs/DOM/Node.textContent",
					"!doc": "Gets or sets the text content of a node and its descendants."
				},
				"baseURI": {
					"!type": "string",
					"!url": "https://developer.mozilla.org/en/docs/DOM/Node.baseURI",
					"!doc": "The absolute base URI of a node or null if unable to obtain an absolute URI."
				},
				"localName": {
					"!type": "string",
					"!url": "https://developer.mozilla.org/en/docs/DOM/Node.localName",
					"!doc": "Returns the local part of the qualified name of this node."
				},
				"prefix": {
					"!type": "string",
					"!url": "https://developer.mozilla.org/en/docs/DOM/Node.prefix",
					"!doc": "Returns the namespace prefix of the specified node, or null if no prefix is specified. This property is read only."
				},
				"namespaceURI": {
					"!type": "string",
					"!url": "https://developer.mozilla.org/en/docs/DOM/Node.namespaceURI",
					"!doc": "The namespace URI of the node, or null if the node is not in a namespace (read-only). When the node is a document, it returns the XML namespace for the current document."
				},
				"ownerDocument": {
					"!type": "+Document",
					"!url": "https://developer.mozilla.org/en/docs/DOM/Node.ownerDocument",
					"!doc": "The ownerDocument property returns the top-level document object for this node."
				},
				"attributes": {
					"!type": "+NamedNodeMap",
					"!url": "https://developer.mozilla.org/en/docs/DOM/Node.attributes",
					"!doc": "A collection of all attribute nodes registered to the specified node. It is a NamedNodeMap,not an Array, so it has no Array methods and the Attr nodes' indexes may differ among browsers."
				},
				"nextSibling": {
					"!type": "+Element",
					"!url": "https://developer.mozilla.org/en/docs/DOM/Node.nextSibling",
					"!doc": "Returns the node immediately following the specified one in its parent's childNodes list, or null if the specified node is the last node in that list."
				},
				"previousSibling": {
					"!type": "+Element",
					"!url": "https://developer.mozilla.org/en/docs/DOM/Node.previousSibling",
					"!doc": "Returns the node immediately preceding the specified one in its parent's childNodes list, null if the specified node is the first in that list."
				},
				"lastChild": {
					"!type": "+Element",
					"!url": "https://developer.mozilla.org/en/docs/DOM/Node.lastChild",
					"!doc": "Returns the last child of a node."
				},
				"firstChild": {
					"!type": "+Element",
					"!url": "https://developer.mozilla.org/en/docs/DOM/Node.firstChild",
					"!doc": "Returns the node's first child in the tree, or null if the node is childless. If the node is a Document, it returns the first node in the list of its direct children."
				},
				"childNodes": {
					"!type": "+NodeList",
					"!url": "https://developer.mozilla.org/en/docs/DOM/Node.childNodes",
					"!doc": "Returns a collection of child nodes of the given element."
				},
				"parentNode": {
					"!type": "+Element",
					"!url": "https://developer.mozilla.org/en/docs/DOM/Node.parentNode",
					"!doc": "Returns the parent of the specified node in the DOM tree."
				},
				"nodeType": {
					"!type": "number",
					"!url": "https://developer.mozilla.org/en/docs/DOM/Node.nodeType",
					"!doc": "Returns an integer code representing the type of the node."
				},
				"nodeValue": {
					"!type": "string",
					"!url": "https://developer.mozilla.org/en/docs/DOM/Node.nodeValue",
					"!doc": "Returns or sets the value of the current node."
				},
				"nodeName": {
					"!type": "string",
					"!url": "https://developer.mozilla.org/en/docs/DOM/Node.nodeName",
					"!doc": "Returns the name of the current node as a string."
				},
				"tagName": {
					"!type": "string",
					"!url": "https://developer.mozilla.org/en/docs/DOM/Node.nodeName",
					"!doc": "Returns the name of the current node as a string."
				},
				"insertBefore": {
					"!type": "fn(newElt: +Element, before: +Element) -> +Element",
					"!url": "https://developer.mozilla.org/en/docs/DOM/Node.insertBefore",
					"!doc": "Inserts the specified node before a reference element as a child of the current node."
				},
				"replaceChild": {
					"!type": "fn(newElt: +Element, oldElt: +Element) -> +Element",
					"!url": "https://developer.mozilla.org/en/docs/DOM/Node.replaceChild",
					"!doc": "Replaces one child node of the specified element with another."
				},
				"removeChild": {
					"!type": "fn(oldElt: +Element) -> +Element",
					"!url": "https://developer.mozilla.org/en/docs/DOM/Node.removeChild",
					"!doc": "Removes a child node from the DOM. Returns removed node."
				},
				"appendChild": {
					"!type": "fn(newElt: +Element) -> +Element",
					"!url": "https://developer.mozilla.org/en/docs/DOM/Node.appendChild",
					"!doc": "Adds a node to the end of the list of children of a specified parent node. If the node already exists it is removed from current parent node, then added to new parent node."
				},
				"hasChildNodes": {
					"!type": "fn() -> bool",
					"!url": "https://developer.mozilla.org/en/docs/DOM/Node.hasChildNodes",
					"!doc": "Returns a Boolean value indicating whether the current Node has child nodes or not."
				},
				"cloneNode": {
					"!type": "fn(deep: bool) -> +Element",
					"!url": "https://developer.mozilla.org/en/docs/DOM/Node.cloneNode",
					"!doc": "Returns a duplicate of the node on which this method was called."
				},
				"normalize": {
					"!type": "fn()",
					"!url": "https://developer.mozilla.org/en/docs/DOM/Node.normalize",
					"!doc": "Puts the specified node and all of its subtree into a \"normalized\" form. In a normalized subtree, no text nodes in the subtree are empty and there are no adjacent text nodes."
				},
				"isSupported": {
					"!type": "fn(features: string, version: number) -> bool",
					"!url": "https://developer.mozilla.org/en/docs/DOM/Node.isSupported",
					"!doc": "Tests whether the DOM implementation implements a specific feature and that feature is supported by this node."
				},
				"hasAttributes": {
					"!type": "fn() -> bool",
					"!url": "https://developer.mozilla.org/en/docs/DOM/Node.hasAttributes",
					"!doc": "Returns a boolean value of true or false, indicating if the current element has any attributes or not."
				},
				"lookupPrefix": {
					"!type": "fn(uri: string) -> string",
					"!url": "https://developer.mozilla.org/en/docs/DOM/Node.lookupPrefix",
					"!doc": "Returns the prefix for a given namespaceURI if present, and null if not. When multiple prefixes are possible, the result is implementation-dependent."
				},
				"isDefaultNamespace": {
					"!type": "fn(uri: string) -> bool",
					"!url": "https://developer.mozilla.org/en/docs/DOM/Node.isDefaultNamespace",
					"!doc": "Accepts a namespace URI as an argument and returns true if the namespace is the default namespace on the given node or false if not."
				},
				"lookupNamespaceURI": {
					"!type": "fn(uri: string) -> string",
					"!url": "https://developer.mozilla.org/en/docs/DOM/Node.lookupNamespaceURI",
					"!doc": "Takes a prefix and returns the namespaceURI associated with it on the given node if found (and null if not). Supplying null for the prefix will return the default namespace."
				},
				"addEventListener": {
					"!type": "fn(type: string, listener: fn(e: +Event), capture: bool)",
					"!url": "https://developer.mozilla.org/en/docs/DOM/EventTarget.addEventListener",
					"!doc": "Registers a single event listener on a single target. The event target may be a single element in a document, the document itself, a window, or an XMLHttpRequest."
				},
				"removeEventListener": {
					"!type": "fn(type: string, listener: fn(), capture: bool)",
					"!url": "https://developer.mozilla.org/en/docs/DOM/EventTarget.removeEventListener",
					"!doc": "Allows the removal of event listeners from the event target."
				},
				"isSameNode": {
					"!type": "fn(other: +Node) -> bool",
					"!url": "https://developer.mozilla.org/en/docs/DOM/Node.isSameNode",
					"!doc": "Tests whether two nodes are the same, that is they reference the same object."
				},
				"isEqualNode": {
					"!type": "fn(other: +Node) -> bool",
					"!url": "https://developer.mozilla.org/en/docs/DOM/Node.isEqualNode",
					"!doc": "Tests whether two nodes are equal."
				},
				"compareDocumentPosition": {
					"!type": "fn(other: +Node) -> number",
					"!url": "https://developer.mozilla.org/en/docs/DOM/Node.compareDocumentPosition",
					"!doc": "Compares the position of the current node against another node in any other document."
				},
				"contains": {
					"!type": "fn(other: +Node) -> bool",
					"!url": "https://developer.mozilla.org/en/docs/DOM/Node.contains",
					"!doc": "Indicates whether a node is a descendent of a given node."
				},
				"dispatchEvent": {
					"!type": "fn(event: +Event) -> bool",
					"!url": "https://developer.mozilla.org/en/docs/DOM/EventTarget.dispatchEvent",
					"!doc": "Dispatches an event into the event system. The event is subject to the same capturing and bubbling behavior as directly dispatched events."
				},
				"ELEMENT_NODE": "number",
				"ATTRIBUTE_NODE": "number",
				"TEXT_NODE": "number",
				"CDATA_SECTION_NODE": "number",
				"ENTITY_REFERENCE_NODE": "number",
				"ENTITY_NODE": "number",
				"PROCESSING_INSTRUCTION_NODE": "number",
				"COMMENT_NODE": "number",
				"DOCUMENT_NODE": "number",
				"DOCUMENT_TYPE_NODE": "number",
				"DOCUMENT_FRAGMENT_NODE": "number",
				"NOTATION_NODE": "number",
				"DOCUMENT_POSITION_DISCONNECTED": "number",
				"DOCUMENT_POSITION_PRECEDING": "number",
				"DOCUMENT_POSITION_FOLLOWING": "number",
				"DOCUMENT_POSITION_CONTAINS": "number",
				"DOCUMENT_POSITION_CONTAINED_BY": "number",
				"DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC": "number"
			},
			"!url": "https://developer.mozilla.org/en/docs/DOM/Node",
			"!doc": "A Node is an interface from which a number of DOM types inherit, and allows these various types to be treated (or tested) similarly."
		},
		"Element": {
			"!type": "fn()",
			"prototype": {
				"!proto": "Node.prototype",
				"getAttribute": {
					"!type": "fn(name: string) -> string",
					"!url": "https://developer.mozilla.org/en/docs/DOM/element.getAttribute",
					"!doc": "Returns the value of the named attribute on the specified element. If the named attribute does not exist, the value returned will either be null or \"\" (the empty string)."
				},
				"setAttribute": {
					"!type": "fn(name: string, value: string)",
					"!url": "https://developer.mozilla.org/en/docs/DOM/element.setAttribute",
					"!doc": "Adds a new attribute or changes the value of an existing attribute on the specified element."
				},
				"removeAttribute": {
					"!type": "fn(name: string)",
					"!url": "https://developer.mozilla.org/en/docs/DOM/element.removeAttribute",
					"!doc": "Removes an attribute from the specified element."
				},
				"getAttributeNode": {
					"!type": "fn(name: string) -> +Attr",
					"!url": "https://developer.mozilla.org/en/docs/DOM/element.getAttributeNode",
					"!doc": "Returns the specified attribute of the specified element, as an Attr node."
				},
				"getElementsByTagName": {
					"!type": "fn(tagName: string) -> +NodeList",
					"!url": "https://developer.mozilla.org/en/docs/DOM/element.getElementsByTagName",
					"!doc": "Returns a list of elements with the given tag name. The subtree underneath the specified element is searched, excluding the element itself. The returned list is live, meaning that it updates itself with the DOM tree automatically. Consequently, there is no need to call several times element.getElementsByTagName with the same element and arguments."
				},
				"getElementsByTagNameNS": {
					"!type": "fn(ns: string, tagName: string) -> +NodeList",
					"!url": "https://developer.mozilla.org/en/docs/DOM/element.getElementsByTagNameNS",
					"!doc": "Returns a list of elements with the given tag name belonging to the given namespace."
				},
				"getAttributeNS": {
					"!type": "fn(ns: string, name: string) -> string",
					"!url": "https://developer.mozilla.org/en/docs/DOM/element.getAttributeNS",
					"!doc": "Returns the string value of the attribute with the specified namespace and name. If the named attribute does not exist, the value returned will either be null or \"\" (the empty string)."
				},
				"setAttributeNS": {
					"!type": "fn(ns: string, name: string, value: string)",
					"!url": "https://developer.mozilla.org/en/docs/DOM/element.setAttributeNS",
					"!doc": "Adds a new attribute or changes the value of an attribute with the given namespace and name."
				},
				"removeAttributeNS": {
					"!type": "fn(ns: string, name: string)",
					"!url": "https://developer.mozilla.org/en/docs/DOM/element.removeAttributeNS",
					"!doc": "removeAttributeNS removes the specified attribute from an element."
				},
				"getAttributeNodeNS": {
					"!type": "fn(ns: string, name: string) -> +Attr",
					"!url": "https://developer.mozilla.org/en/docs/DOM/element.getAttributeNodeNS",
					"!doc": "Returns the Attr node for the attribute with the given namespace and name."
				},
				"hasAttribute": {
					"!type": "fn(name: string) -> bool",
					"!url": "https://developer.mozilla.org/en/docs/DOM/element.hasAttribute",
					"!doc": "hasAttribute returns a boolean value indicating whether the specified element has the specified attribute or not."
				},
				"hasAttributeNS": {
					"!type": "fn(ns: string, name: string) -> bool",
					"!url": "https://developer.mozilla.org/en/docs/DOM/element.hasAttributeNS",
					"!doc": "hasAttributeNS returns a boolean value indicating whether the current element has the specified attribute."
				},
				"focus": {
					"!type": "fn()",
					"!url": "https://developer.mozilla.org/en/docs/DOM/element.focus",
					"!doc": "Sets focus on the specified element, if it can be focused."
				},
				"blur": {
					"!type": "fn()",
					"!url": "https://developer.mozilla.org/en/docs/DOM/element.blur",
					"!doc": "The blur method removes keyboard focus from the current element."
				},
				"scrollIntoView": {
					"!type": "fn(top: bool)",
					"!url": "https://developer.mozilla.org/en/docs/DOM/element.scrollIntoView",
					"!doc": "The scrollIntoView() method scrolls the element into view."
				},
				"scrollByLines": {
					"!type": "fn(lines: number)",
					"!url": "https://developer.mozilla.org/en/docs/DOM/window.scrollByLines",
					"!doc": "Scrolls the document by the given number of lines."
				},
				"scrollByPages": {
					"!type": "fn(pages: number)",
					"!url": "https://developer.mozilla.org/en/docs/DOM/window.scrollByPages",
					"!doc": "Scrolls the current document by the specified number of pages."
				},
				"getElementsByClassName": {
					"!type": "fn(name: string) -> +NodeList",
					"!url": "https://developer.mozilla.org/en/docs/DOM/document.getElementsByClassName",
					"!doc": "Returns a set of elements which have all the given class names. When called on the document object, the complete document is searched, including the root node. You may also call getElementsByClassName on any element; it will return only elements which are descendants of the specified root element with the given class names."
				},
				"querySelector": {
					"!type": "fn(selectors: string) -> +Element",
					"!url": "https://developer.mozilla.org/en/docs/DOM/Element.querySelector",
					"!doc": "Returns the first element that is a descendent of the element on which it is invoked that matches the specified group of selectors."
				},
				"querySelectorAll": {
					"!type": "fn(selectors: string) -> +NodeList",
					"!url": "https://developer.mozilla.org/en/docs/DOM/Element.querySelectorAll",
					"!doc": "Returns a non-live NodeList of all elements descended from the element on which it is invoked that match the specified group of CSS selectors."
				},
				"getClientRects": {
					"!type": "fn() -> [+ClientRect]",
					"!url": "https://developer.mozilla.org/en/docs/DOM/element.getClientRects",
					"!doc": "Returns a collection of rectangles that indicate the bounding rectangles for each box in a client."
				},
				"getBoundingClientRect": {
					"!type": "fn() -> +ClientRect",
					"!url": "https://developer.mozilla.org/en/docs/DOM/element.getBoundingClientRect",
					"!doc": "Returns a text rectangle object that encloses a group of text rectangles."
				},
				"setAttributeNode": {
					"!type": "fn(attr: +Attr) -> +Attr",
					"!url": "https://developer.mozilla.org/en/docs/DOM/element.setAttributeNode",
					"!doc": "Adds a new Attr node to the specified element."
				},
				"removeAttributeNode": {
					"!type": "fn(attr: +Attr) -> +Attr",
					"!url": "https://developer.mozilla.org/en/docs/DOM/element.removeAttributeNode",
					"!doc": "Removes the specified attribute from the current element."
				},
				"setAttributeNodeNS": {
					"!type": "fn(attr: +Attr) -> +Attr",
					"!url": "https://developer.mozilla.org/en/docs/DOM/element.setAttributeNodeNS",
					"!doc": "Adds a new namespaced attribute node to an element."
				},
				"insertAdjacentHTML": {
					"!type": "fn(position: string, text: string)",
					"!url": "https://developer.mozilla.org/en/docs/DOM/element.insertAdjacentHTML",
					"!doc": "Parses the specified text as HTML or XML and inserts the resulting nodes into the DOM tree at a specified position. It does not reparse the element it is being used on and thus it does not corrupt the existing elements inside the element. This, and avoiding the extra step of serialization make it much faster than direct innerHTML manipulation."
				},
				"children": {
					"!type": "+HTMLCollection",
					"!url": "https://developer.mozilla.org/en/docs/DOM/Element.children",
					"!doc": "Returns a collection of child elements of the given element."
				},
				"childElementCount": {
					"!type": "number",
					"!url": "https://developer.mozilla.org/en/docs/DOM/Element.childElementCount",
					"!doc": "Returns the number of child elements of the given element."
				},
				"className": {
					"!type": "string",
					"!url": "https://developer.mozilla.org/en/docs/DOM/element.className",
					"!doc": "Gets and sets the value of the class attribute of the specified element."
				},
				"style": {
					"cssText": "string",
					"alignmentBaseline": "string",
					"background": "string",
					"backgroundAttachment": "string",
					"backgroundClip": "string",
					"backgroundColor": "string",
					"backgroundImage": "string",
					"backgroundOrigin": "string",
					"backgroundPosition": "string",
					"backgroundPositionX": "string",
					"backgroundPositionY": "string",
					"backgroundRepeat": "string",
					"backgroundRepeatX": "string",
					"backgroundRepeatY": "string",
					"backgroundSize": "string",
					"baselineShift": "string",
					"border": "string",
					"borderBottom": "string",
					"borderBottomColor": "string",
					"borderBottomLeftRadius": "string",
					"borderBottomRightRadius": "string",
					"borderBottomStyle": "string",
					"borderBottomWidth": "string",
					"borderCollapse": "string",
					"borderColor": "string",
					"borderImage": "string",
					"borderImageOutset": "string",
					"borderImageRepeat": "string",
					"borderImageSlice": "string",
					"borderImageSource": "string",
					"borderImageWidth": "string",
					"borderLeft": "string",
					"borderLeftColor": "string",
					"borderLeftStyle": "string",
					"borderLeftWidth": "string",
					"borderRadius": "string",
					"borderRight": "string",
					"borderRightColor": "string",
					"borderRightStyle": "string",
					"borderRightWidth": "string",
					"borderSpacing": "string",
					"borderStyle": "string",
					"borderTop": "string",
					"borderTopColor": "string",
					"borderTopLeftRadius": "string",
					"borderTopRightRadius": "string",
					"borderTopStyle": "string",
					"borderTopWidth": "string",
					"borderWidth": "string",
					"bottom": "string",
					"boxShadow": "string",
					"boxSizing": "string",
					"captionSide": "string",
					"clear": "string",
					"clip": "string",
					"clipPath": "string",
					"clipRule": "string",
					"color": "string",
					"colorInterpolation": "string",
					"colorInterpolationFilters": "string",
					"colorProfile": "string",
					"colorRendering": "string",
					"content": "string",
					"counterIncrement": "string",
					"counterReset": "string",
					"cursor": "string",
					"direction": "string",
					"display": "string",
					"dominantBaseline": "string",
					"emptyCells": "string",
					"enableBackground": "string",
					"fill": "string",
					"fillOpacity": "string",
					"fillRule": "string",
					"filter": "string",
					"float": "string",
					"floodColor": "string",
					"floodOpacity": "string",
					"font": "string",
					"fontFamily": "string",
					"fontSize": "string",
					"fontStretch": "string",
					"fontStyle": "string",
					"fontVariant": "string",
					"fontWeight": "string",
					"glyphOrientationHorizontal": "string",
					"glyphOrientationVertical": "string",
					"height": "string",
					"imageRendering": "string",
					"kerning": "string",
					"left": "string",
					"letterSpacing": "string",
					"lightingColor": "string",
					"lineHeight": "string",
					"listStyle": "string",
					"listStyleImage": "string",
					"listStylePosition": "string",
					"listStyleType": "string",
					"margin": "string",
					"marginBottom": "string",
					"marginLeft": "string",
					"marginRight": "string",
					"marginTop": "string",
					"marker": "string",
					"markerEnd": "string",
					"markerMid": "string",
					"markerStart": "string",
					"mask": "string",
					"maxHeight": "string",
					"maxWidth": "string",
					"minHeight": "string",
					"minWidth": "string",
					"opacity": "string",
					"orphans": "string",
					"outline": "string",
					"outlineColor": "string",
					"outlineOffset": "string",
					"outlineStyle": "string",
					"outlineWidth": "string",
					"overflow": "string",
					"overflowWrap": "string",
					"overflowX": "string",
					"overflowY": "string",
					"padding": "string",
					"paddingBottom": "string",
					"paddingLeft": "string",
					"paddingRight": "string",
					"paddingTop": "string",
					"page": "string",
					"pageBreakAfter": "string",
					"pageBreakBefore": "string",
					"pageBreakInside": "string",
					"pointerEvents": "string",
					"position": "string",
					"quotes": "string",
					"resize": "string",
					"right": "string",
					"shapeRendering": "string",
					"size": "string",
					"speak": "string",
					"src": "string",
					"stopColor": "string",
					"stopOpacity": "string",
					"stroke": "string",
					"strokeDasharray": "string",
					"strokeDashoffset": "string",
					"strokeLinecap": "string",
					"strokeLinejoin": "string",
					"strokeMiterlimit": "string",
					"strokeOpacity": "string",
					"strokeWidth": "string",
					"tabSize": "string",
					"tableLayout": "string",
					"textAlign": "string",
					"textAnchor": "string",
					"textDecoration": "string",
					"textIndent": "string",
					"textLineThrough": "string",
					"textLineThroughColor": "string",
					"textLineThroughMode": "string",
					"textLineThroughStyle": "string",
					"textLineThroughWidth": "string",
					"textOverflow": "string",
					"textOverline": "string",
					"textOverlineColor": "string",
					"textOverlineMode": "string",
					"textOverlineStyle": "string",
					"textOverlineWidth": "string",
					"textRendering": "string",
					"textShadow": "string",
					"textTransform": "string",
					"textUnderline": "string",
					"textUnderlineColor": "string",
					"textUnderlineMode": "string",
					"textUnderlineStyle": "string",
					"textUnderlineWidth": "string",
					"top": "string",
					"unicodeBidi": "string",
					"unicodeRange": "string",
					"vectorEffect": "string",
					"verticalAlign": "string",
					"visibility": "string",
					"whiteSpace": "string",
					"width": "string",
					"wordBreak": "string",
					"wordSpacing": "string",
					"wordWrap": "string",
					"writingMode": "string",
					"zIndex": "string",
					"zoom": "string",
					"!url": "https://developer.mozilla.org/en/docs/DOM/element.style",
					"!doc": "Returns an object that represents the element's style attribute."
				},
				"classList": {
					"!type": "+DOMTokenList",
					"!url": "https://developer.mozilla.org/en/docs/DOM/element.classList",
					"!doc": "Returns a token list of the class attribute of the element."
				},
				"contentEditable": {
					"!type": "bool",
					"!url": "https://developer.mozilla.org/en/docs/DOM/Element.contentEditable",
					"!doc": "Indicates whether or not the element is editable."
				},
				"firstElementChild": {
					"!type": "+Element",
					"!url": "https://developer.mozilla.org/en/docs/DOM/Element.firstElementChild",
					"!doc": "Returns the element's first child element or null if there are no child elements."
				},
				"lastElementChild": {
					"!type": "+Element",
					"!url": "https://developer.mozilla.org/en/docs/DOM/Element.lastElementChild",
					"!doc": "Returns the element's last child element or null if there are no child elements."
				},
				"nextElementSibling": {
					"!type": "+Element",
					"!url": "https://developer.mozilla.org/en/docs/DOM/Element.nextElementSibling",
					"!doc": "Returns the element immediately following the specified one in its parent's children list, or null if the specified element is the last one in the list."
				},
				"previousElementSibling": {
					"!type": "+Element",
					"!url": "https://developer.mozilla.org/en/docs/DOM/Element.previousElementSibling",
					"!doc": "Returns the element immediately prior to the specified one in its parent's children list, or null if the specified element is the first one in the list."
				},
				"tabIndex": {
					"!type": "number",
					"!url": "https://developer.mozilla.org/en/docs/DOM/element.tabIndex",
					"!doc": "Gets/sets the tab order of the current element."
				},
				"title": {
					"!type": "string",
					"!url": "https://developer.mozilla.org/en/docs/DOM/element.title",
					"!doc": "Establishes the text to be displayed in a 'tool tip' popup when the mouse is over the displayed node."
				},
				"width": {
					"!type": "number",
					"!url": "https://developer.mozilla.org/en/docs/DOM/element.offsetWidth",
					"!doc": "Returns the layout width of an element."
				},
				"height": {
					"!type": "number",
					"!url": "https://developer.mozilla.org/en/docs/DOM/element.offsetHeight",
					"!doc": "Height of an element relative to the element's offsetParent."
				},
				"getContext": {
					"!type": "fn(id: string) -> CanvasRenderingContext2D",
					"!url": "https://developer.mozilla.org/en/docs/DOM/HTMLCanvasElement",
					"!doc": "DOM canvas elements expose the HTMLCanvasElement interface, which provides properties and methods for manipulating the layout and presentation of canvas elements. The HTMLCanvasElement interface inherits the properties and methods of the element object interface."
				},
				"supportsContext": "fn(id: string) -> bool",
				"oncopy": {
					"!type": "?",
					"!url": "https://developer.mozilla.org/en/docs/DOM/element.oncopy",
					"!doc": "The oncopy property returns the onCopy event handler code on the current element."
				},
				"oncut": {
					"!type": "?",
					"!url": "https://developer.mozilla.org/en/docs/DOM/element.oncut",
					"!doc": "The oncut property returns the onCut event handler code on the current element."
				},
				"onpaste": {
					"!type": "?",
					"!url": "https://developer.mozilla.org/en/docs/DOM/element.onpaste",
					"!doc": "The onpaste property returns the onPaste event handler code on the current element."
				},
				"onbeforeunload": {
					"!type": "?",
					"!url": "https://developer.mozilla.org/en/docs/HTML/Element/body",
					"!doc": "The HTML <body> element represents the main content of an HTML document. There is only one <body> element in a document."
				},
				"onfocus": {
					"!type": "?",
					"!url": "https://developer.mozilla.org/en/docs/DOM/element.onfocus",
					"!doc": "The onfocus property returns the onFocus event handler code on the current element."
				},
				"onblur": {
					"!type": "?",
					"!url": "https://developer.mozilla.org/en/docs/DOM/element.onblur",
					"!doc": "The onblur property returns the onBlur event handler code, if any, that exists on the current element."
				},
				"onchange": {
					"!type": "?",
					"!url": "https://developer.mozilla.org/en/docs/DOM/element.onchange",
					"!doc": "The onchange property sets and returns the onChange event handler code for the current element."
				},
				"onclick": {
					"!type": "?",
					"!url": "https://developer.mozilla.org/en/docs/DOM/element.onclick",
					"!doc": "The onclick property returns the onClick event handler code on the current element."
				},
				"ondblclick": {
					"!type": "?",
					"!url": "https://developer.mozilla.org/en/docs/DOM/element.ondblclick",
					"!doc": "The ondblclick property returns the onDblClick event handler code on the current element."
				},
				"onmousedown": {
					"!type": "?",
					"!url": "https://developer.mozilla.org/en/docs/DOM/element.onmousedown",
					"!doc": "The onmousedown property returns the onMouseDown event handler code on the current element."
				},
				"onmouseup": {
					"!type": "?",
					"!url": "https://developer.mozilla.org/en/docs/DOM/element.onmouseup",
					"!doc": "The onmouseup property returns the onMouseUp event handler code on the current element."
				},
				"onmousewheel": {
					"!type": "?",
					"!url": "https://developer.mozilla.org/en/docs/DOM/Mozilla_event_reference/wheel",
					"!doc": "The wheel event is fired when a wheel button of a pointing device (usually a mouse) is rotated. This event deprecates the legacy mousewheel event."
				},
				"onmouseover": {
					"!type": "?",
					"!url": "https://developer.mozilla.org/en/docs/DOM/element.onmouseover",
					"!doc": "The onmouseover property returns the onMouseOver event handler code on the current element."
				},
				"onmouseout": {
					"!type": "?",
					"!url": "https://developer.mozilla.org/en/docs/DOM/element.onmouseout",
					"!doc": "The onmouseout property returns the onMouseOut event handler code on the current element."
				},
				"onmousemove": {
					"!type": "?",
					"!url": "https://developer.mozilla.org/en/docs/DOM/element.onmousemove",
					"!doc": "The onmousemove property returns the mousemove event handler code on the current element."
				},
				"oncontextmenu": {
					"!type": "?",
					"!url": "https://developer.mozilla.org/en/docs/DOM/window.oncontextmenu",
					"!doc": "An event handler property for right-click events on the window. Unless the default behavior is prevented, the browser context menu will activate. Note that this event will occur with any non-disabled right-click event and does not depend on an element possessing the \"contextmenu\" attribute."
				},
				"onkeydown": {
					"!type": "?",
					"!url": "https://developer.mozilla.org/en/docs/DOM/element.onkeydown",
					"!doc": "The onkeydown property returns the onKeyDown event handler code on the current element."
				},
				"onkeyup": {
					"!type": "?",
					"!url": "https://developer.mozilla.org/en/docs/DOM/element.onkeyup",
					"!doc": "The onkeyup property returns the onKeyUp event handler code for the current element."
				},
				"onkeypress": {
					"!type": "?",
					"!url": "https://developer.mozilla.org/en/docs/DOM/element.onkeypress",
					"!doc": "The onkeypress property sets and returns the onKeyPress event handler code for the current element."
				},
				"onresize": {
					"!type": "?",
					"!url": "https://developer.mozilla.org/en/docs/DOM/element.onresize",
					"!doc": "onresize returns the element's onresize event handler code. It can also be used to set the code to be executed when the resize event occurs."
				},
				"onscroll": {
					"!type": "?",
					"!url": "https://developer.mozilla.org/en/docs/DOM/element.onscroll",
					"!doc": "The onscroll property returns the onScroll event handler code on the current element."
				},
				"ondragstart": {
					"!type": "?",
					"!url": "https://developer.mozilla.org/en/docs/DragDrop/Drag_Operations",
					"!doc": "The following describes the steps that occur during a drag and drop operation."
				},
				"ondragover": {
					"!type": "?",
					"!url": "https://developer.mozilla.org/en/docs/DOM/Mozilla_event_reference/dragover",
					"!doc": "The dragover event is fired when an element or text selection is being dragged over a valid drop target (every few hundred milliseconds)."
				},
				"ondragleave": {
					"!type": "?",
					"!url": "https://developer.mozilla.org/en/docs/DOM/Mozilla_event_reference/dragleave",
					"!doc": "The dragleave event is fired when a dragged element or text selection leaves a valid drop target."
				},
				"ondragenter": {
					"!type": "?",
					"!url": "https://developer.mozilla.org/en/docs/DOM/Mozilla_event_reference/dragenter",
					"!doc": "The dragenter event is fired when a dragged element or text selection enters a valid drop target."
				},
				"ondragend": {
					"!type": "?",
					"!url": "https://developer.mozilla.org/en/docs/DOM/Mozilla_event_reference/dragend",
					"!doc": "The dragend event is fired when a drag operation is being ended (by releasing a mouse button or hitting the escape key)."
				},
				"ondrag": {
					"!type": "?",
					"!url": "https://developer.mozilla.org/en/docs/DOM/Mozilla_event_reference/drag",
					"!doc": "The drag event is fired when an element or text selection is being dragged (every few hundred milliseconds)."
				},
				"offsetTop": {
					"!type": "number",
					"!url": "https://developer.mozilla.org/en/docs/DOM/element.offsetTop",
					"!doc": "Returns the distance of the current element relative to the top of the offsetParent node."
				},
				"offsetLeft": {
					"!type": "number",
					"!url": "https://developer.mozilla.org/en/docs/DOM/element.offsetLeft",
					"!doc": "Returns the number of pixels that the upper left corner of the current element is offset to the left within the offsetParent node."
				},
				"offsetHeight": {
					"!type": "number",
					"!url": "https://developer.mozilla.org/en/docs/DOM/element.offsetHeight",
					"!doc": "Height of an element relative to the element's offsetParent."
				},
				"offsetWidth": {
					"!type": "number",
					"!url": "https://developer.mozilla.org/en/docs/DOM/element.offsetWidth",
					"!doc": "Returns the layout width of an element."
				},
				"scrollTop": {
					"!type": "number",
					"!url": "https://developer.mozilla.org/en/docs/DOM/element.scrollTop",
					"!doc": "Gets or sets the number of pixels that the content of an element is scrolled upward."
				},
				"scrollLeft": {
					"!type": "number",
					"!url": "https://developer.mozilla.org/en/docs/DOM/element.scrollLeft",
					"!doc": "Gets or sets the number of pixels that an element's content is scrolled to the left."
				},
				"scrollHeight": {
					"!type": "number",
					"!url": "https://developer.mozilla.org/en/docs/DOM/element.scrollHeight",
					"!doc": "Height of the scroll view of an element; it includes the element padding but not its margin."
				},
				"scrollWidth": {
					"!type": "number",
					"!url": "https://developer.mozilla.org/en/docs/DOM/element.scrollWidth",
					"!doc": "Read-only property that returns either the width in pixels of the content of an element or the width of the element itself, whichever is greater."
				},
				"clientTop": {
					"!type": "number",
					"!url": "https://developer.mozilla.org/en/docs/DOM/element.clientTop",
					"!doc": "The width of the top border of an element in pixels. It does not include the top margin or padding. clientTop is read-only."
				},
				"clientLeft": {
					"!type": "number",
					"!url": "https://developer.mozilla.org/en/docs/DOM/element.clientLeft",
					"!doc": "The width of the left border of an element in pixels. It includes the width of the vertical scrollbar if the text direction of the element is right-to-left and if there is an overflow causing a left vertical scrollbar to be rendered. clientLeft does not include the left margin or the left padding. clientLeft is read-only."
				},
				"clientHeight": {
					"!type": "number",
					"!url": "https://developer.mozilla.org/en/docs/DOM/element.clientHeight",
					"!doc": "Returns the inner height of an element in pixels, including padding but not the horizontal scrollbar height, border, or margin."
				},
				"clientWidth": {
					"!type": "number",
					"!url": "https://developer.mozilla.org/en/docs/DOM/element.clientWidth",
					"!doc": "The inner width of an element in pixels. It includes padding but not the vertical scrollbar (if present, if rendered), border or margin."
				},
				"innerHTML": {
					"!type": "string",
					"!url": "https://developer.mozilla.org/en/docs/DOM/element.innerHTML",
					"!doc": "Sets or gets the HTML syntax describing the element's descendants."
				},
				"createdCallback": {
					"!type": "fn()",
					"!url": "http://w3c.github.io/webcomponents/spec/custom/index.html#dfn-created-callback",
					"!doc": "This callback is invoked after custom element instance is created and its definition is registered. The actual timing of this callback is defined further in this specification."
				},
				"attachedCallback": {
					"!type": "fn()",
					"!url": "http://w3c.github.io/webcomponents/spec/custom/index.html#dfn-entered-view-callback",
					"!doc": "Unless specified otherwise, this callback must be enqueued whenever custom element is inserted into a document and this document has a browsing context."
				},
				"detachedCallback": {
					"!type": "fn()",
					"!url": "http://w3c.github.io/webcomponents/spec/custom/index.html#dfn-left-view-callback",
					"!doc": "Unless specified otherwise, this callback must be enqueued whenever custom element is removed from the document and this document has a browsing context."
				},
				"attributeChangedCallback": {
					"!type": "fn()",
					"!url": "http://w3c.github.io/webcomponents/spec/custom/index.html#dfn-attribute-changed-callback",
					"!doc": "Unless specified otherwise, this callback must be enqueued whenever custom element's attribute is added, changed or removed."
				}
			},
			"!url": "https://developer.mozilla.org/en/docs/DOM/Element",
			"!doc": "Represents an element in an HTML or XML document."
		},
		"Text": {
			"!type": "fn()",
			"prototype": {
				"!proto": "Node.prototype",
				"wholeText": {
					"!type": "string",
					"!url": "https://developer.mozilla.org/en/docs/DOM/Text.wholeText",
					"!doc": "Returns all text of all Text nodes logically adjacent to the node.  The text is concatenated in document order.  This allows you to specify any text node and obtain all adjacent text as a single string."
				},
				"splitText": {
					"!type": "fn(offset: number) -> +Text",
					"!url": "https://developer.mozilla.org/en/docs/DOM/Text.splitText",
					"!doc": "Breaks the Text node into two nodes at the specified offset, keeping both nodes in the tree as siblings."
				}
			},
			"!url": "https://developer.mozilla.org/en/docs/DOM/Text",
			"!doc": "In the DOM, the Text interface represents the textual content of an Element or Attr.  If an element has no markup within its content, it has a single child implementing Text that contains the element's text.  However, if the element contains markup, it is parsed into information items and Text nodes that form its children."
		},
		"Document": {
			"!type": "fn()",
			"prototype": {
				"!proto": "Node.prototype",
				"activeElement": {
					"!type": "+Element",
					"!url": "https://developer.mozilla.org/en/docs/DOM/document.activeElement",
					"!doc": "Returns the currently focused element, that is, the element that will get keystroke events if the user types any. This attribute is read only."
				},
				"compatMode": {
					"!type": "string",
					"!url": "https://developer.mozilla.org/en/docs/DOM/document.compatMode",
					"!doc": "Indicates whether the document is rendered in Quirks mode or Strict mode."
				},
				"designMode": {
					"!type": "string",
					"!url": "https://developer.mozilla.org/en/docs/DOM/document.designMode",
					"!doc": "Can be used to make any document editable, for example in a <iframe />:"
				},
				"dir": {
					"!type": "string",
					"!url": "https://developer.mozilla.org/en/docs/DOM/Document.dir",
					"!doc": "This property should indicate and allow the setting of the directionality of the text of the document, whether left to right (default) or right to left."
				},
				"height": {
					"!type": "number",
					"!url": "https://developer.mozilla.org/en/docs/DOM/document.height",
					"!doc": "Returns the height of the <body> element of the current document."
				},
				"width": {
					"!type": "number",
					"!url": "https://developer.mozilla.org/en/docs/DOM/document.width",
					"!doc": "Returns the width of the <body> element of the current document in pixels."
				},
				"characterSet": {
					"!type": "string",
					"!url": "https://developer.mozilla.org/en/docs/DOM/document.characterSet",
					"!doc": "Returns the character encoding of the current document."
				},
				"readyState": {
					"!type": "string",
					"!url": "https://developer.mozilla.org/en/docs/DOM/document.readyState",
					"!doc": "Returns \"loading\" while the document is loading, \"interactive\" once it is finished parsing but still loading sub-resources, and \"complete\" once it has loaded."
				},
				"location": {
					"!type": "location",
					"!url": "https://developer.mozilla.org/en/docs/DOM/document.location",
					"!doc": "Returns a Location object, which contains information about the URL of the document and provides methods for changing that URL."
				},
				"lastModified": {
					"!type": "string",
					"!url": "https://developer.mozilla.org/en/docs/DOM/document.lastModified",
					"!doc": "Returns a string containing the date and time on which the current document was last modified."
				},
				"head": {
					"!type": "+Element",
					"!url": "https://developer.mozilla.org/en/docs/DOM/document.head",
					"!doc": "Returns the <head> element of the current document. If there are more than one <head> elements, the first one is returned."
				},
				"body": {
					"!type": "+Element",
					"!url": "https://developer.mozilla.org/en/docs/DOM/document.body",
					"!doc": "Returns the <body> or <frameset> node of the current document."
				},
				"cookie": {
					"!type": "string",
					"!url": "https://developer.mozilla.org/en/docs/DOM/document.cookie",
					"!doc": "Get and set the cookies associated with the current document."
				},
				"URL": "string",
				"domain": {
					"!type": "string",
					"!url": "https://developer.mozilla.org/en/docs/DOM/document.domain",
					"!doc": "Gets/sets the domain portion of the origin of the current document, as used by the same origin policy."
				},
				"referrer": {
					"!type": "string",
					"!url": "https://developer.mozilla.org/en/docs/DOM/document.referrer",
					"!doc": "Returns the URI of the page that linked to this page."
				},
				"title": {
					"!type": "string",
					"!url": "https://developer.mozilla.org/en/docs/DOM/document.title",
					"!doc": "Gets or sets the title of the document."
				},
				"defaultView": {
					"!url": "https://developer.mozilla.org/en/docs/DOM/document.defaultView",
					"!doc": "In browsers returns the window object associated with the document or null if none available."
				},
				"documentURI": {
					"!type": "string",
					"!url": "https://developer.mozilla.org/en/docs/DOM/document.documentURI",
					"!doc": "Returns the document location as string. It is read-only per DOM4 specification."
				},
				"xmlStandalone": "bool",
				"xmlVersion": {
					"!type": "string",
					"!url": "https://developer.mozilla.org/en/docs/DOM/document.xmlVersion",
					"!doc": "Returns the version number as specified in the XML declaration (e.g., <?xml version=\"1.0\"?>) or \"1.0\" if the declaration is absent."
				},
				"xmlEncoding": {
					"!type": "string",
					"!url": "https://developer.mozilla.org/en/docs/DOM/Document.xmlEncoding",
					"!doc": "Returns the encoding as determined by the XML declaration. Should be null if unspecified or unknown."
				},
				"inputEncoding": {
					"!type": "string",
					"!url": "https://developer.mozilla.org/en/docs/DOM/document.inputEncoding",
					"!doc": "Returns a string representing the encoding under which the document was parsed (e.g. ISO-8859-1)."
				},
				"documentElement": {
					"!type": "+Element",
					"!url": "https://developer.mozilla.org/en/docs/DOM/document.documentElement",
					"!doc": "Read-only"
				},
				"implementation": {
					"hasFeature": "fn(feature: string, version: number) -> bool",
					"createDocumentType": {
						"!type": "fn(qualifiedName: string, publicId: string, systemId: string) -> +Node",
						"!url": "https://developer.mozilla.org/en/docs/DOM/DOMImplementation.createDocumentType",
						"!doc": "Returns a DocumentType object which can either be used with DOMImplementation.createDocument upon document creation or they can be put into the document via Node.insertBefore() or Node.replaceChild(): http://www.w3.org/TR/DOM-Level-3-Cor...l#ID-B63ED1A31 (less ideal due to features not likely being as accessible: http://www.w3.org/TR/DOM-Level-3-Cor...createDocument ). In any case, entity declarations and notations will not be available: http://www.w3.org/TR/DOM-Level-3-Cor...-createDocType   "
					},
					"createHTMLDocument": {
						"!type": "fn(title: string) -> +Document",
						"!url": "https://developer.mozilla.org/en/docs/DOM/DOMImplementation.createHTMLDocument",
						"!doc": "This method (available from document.implementation) creates a new HTML document."
					},
					"createDocument": {
						"!type": "fn(namespaceURI: string, qualifiedName: string, type: +Node) -> +Document",
						"!url": "https://developer.mozilla.org/en-US/docs/DOM/DOMImplementation.createHTMLDocument",
						"!doc": "This method creates a new HTML document."
					},
					"!url": "https://developer.mozilla.org/en/docs/DOM/document.implementation",
					"!doc": "Returns a DOMImplementation object associated with the current document."
				},
				"doctype": {
					"!type": "+Node",
					"!url": "https://developer.mozilla.org/en/docs/DOM/document.doctype",
					"!doc": "Returns the Document Type Declaration (DTD) associated with current document. The returned object implements the DocumentType interface. Use DOMImplementation.createDocumentType() to create a DocumentType."
				},
				"open": {
					"!type": "fn()",
					"!url": "https://developer.mozilla.org/en/docs/DOM/document.open",
					"!doc": "The document.open() method opens a document for writing."
				},
				"close": {
					"!type": "fn()",
					"!url": "https://developer.mozilla.org/en/docs/DOM/document.close",
					"!doc": "The document.close() method finishes writing to a document, opened with document.open()."
				},
				"write": {
					"!type": "fn(html: string)",
					"!url": "https://developer.mozilla.org/en/docs/DOM/document.write",
					"!doc": "Writes a string of text to a document stream opened by document.open()."
				},
				"writeln": {
					"!type": "fn(html: string)",
					"!url": "https://developer.mozilla.org/en/docs/DOM/document.writeln",
					"!doc": "Writes a string of text followed by a newline character to a document."
				},
				"clear": {
					"!type": "fn()",
					"!url": "https://developer.mozilla.org/en/docs/DOM/document.clear",
					"!doc": "In recent versions of Mozilla-based applications as well as in Internet Explorer and Netscape 4 this method does nothing."
				},
				"hasFocus": {
					"!type": "fn() -> bool",
					"!url": "https://developer.mozilla.org/en/docs/DOM/document.hasFocus",
					"!doc": "Returns a Boolean value indicating whether the document or any element inside the document has focus. This method can be used to determine whether the active element in a document has focus."
				},
				"createElement": {
					"!type": "fn(tagName: string) -> +Element",
					"!url": "https://developer.mozilla.org/en/docs/DOM/document.createElement",
					"!doc": "Creates the specified element."
				},
				"createElementNS": {
					"!type": "fn(ns: string, tagName: string) -> +Element",
					"!url": "https://developer.mozilla.org/en/docs/DOM/document.createElementNS",
					"!doc": "Creates an element with the specified namespace URI and qualified name."
				},
				"createDocumentFragment": {
					"!type": "fn() -> +DocumentFragment",
					"!url": "https://developer.mozilla.org/en/docs/DOM/document.createDocumentFragment",
					"!doc": "Creates a new empty DocumentFragment."
				},
				"createTextNode": {
					"!type": "fn(content: string) -> +Text",
					"!url": "https://developer.mozilla.org/en/docs/DOM/document.createTextNode",
					"!doc": "Creates a new Text node."
				},
				"createComment": {
					"!type": "fn(content: string) -> +Node",
					"!url": "https://developer.mozilla.org/en/docs/DOM/document.createComment",
					"!doc": "Creates a new comment node, and returns it."
				},
				"createCDATASection": {
					"!type": "fn(content: string) -> +Node",
					"!url": "https://developer.mozilla.org/en/docs/DOM/document.createCDATASection",
					"!doc": "Creates a new CDATA section node, and returns it. "
				},
				"createProcessingInstruction": {
					"!type": "fn(content: string) -> +Node",
					"!url": "https://developer.mozilla.org/en/docs/DOM/document.createProcessingInstruction",
					"!doc": "Creates a new processing instruction node, and returns it."
				},
				"createAttribute": {
					"!type": "fn(name: string) -> +Attr",
					"!url": "https://developer.mozilla.org/en/docs/DOM/document.createAttribute",
					"!doc": "Creates a new attribute node, and returns it."
				},
				"createAttributeNS": {
					"!type": "fn(ns: string, name: string) -> +Attr",
					"!url": "https://developer.mozilla.org/en/docs/DOM/Attr",
					"!doc": "This type represents a DOM element's attribute as an object. In most DOM methods, you will probably directly retrieve the attribute as a string (e.g., Element.getAttribute(), but certain functions (e.g., Element.getAttributeNode()) or means of iterating give Attr types."
				},
				"importNode": {
					"!type": "fn(node: +Node, deep: bool) -> +Element",
					"!url": "https://developer.mozilla.org/en/docs/DOM/document.importNode",
					"!doc": "Creates a copy of a node from an external document that can be inserted into the current document."
				},
				"getElementById": {
					"!type": "fn(id: string) -> +Element",
					"!url": "https://developer.mozilla.org/en/docs/DOM/document.getElementById",
					"!doc": "Returns a reference to the element by its ID."
				},
				"getElementsByTagName": {
					"!type": "fn(tagName: string) -> +NodeList",
					"!url": "https://developer.mozilla.org/en/docs/DOM/document.getElementsByTagName",
					"!doc": "Returns a NodeList of elements with the given tag name. The complete document is searched, including the root node. The returned NodeList is live, meaning that it updates itself automatically to stay in sync with the DOM tree without having to call document.getElementsByTagName again."
				},
				"getElementsByTagNameNS": {
					"!type": "fn(ns: string, tagName: string) -> +NodeList",
					"!url": "https://developer.mozilla.org/en/docs/DOM/document.getElementsByTagNameNS",
					"!doc": "Returns a list of elements with the given tag name belonging to the given namespace. The complete document is searched, including the root node."
				},
				"createEvent": {
					"!type": "fn(type: string) -> +Event",
					"!url": "https://developer.mozilla.org/en/docs/DOM/document.createEvent",
					"!doc": "Creates an event of the type specified. The returned object should be first initialized and can then be passed to element.dispatchEvent."
				},
				"createRange": {
					"!type": "fn() -> +Range",
					"!url": "https://developer.mozilla.org/en/docs/DOM/document.createRange",
					"!doc": "Returns a new Range object."
				},
				"evaluate": {
					"!type": "fn(expr: ?) -> +XPathResult",
					"!url": "https://developer.mozilla.org/en/docs/DOM/document.evaluate",
					"!doc": "Returns an XPathResult based on an XPath expression and other given parameters."
				},
				"execCommand": {
					"!type": "fn(cmd: string)",
					"!url": "https://developer.mozilla.org/en-US/docs/Rich-Text_Editing_in_Mozilla#Executing_Commands",
					"!doc": "Run command to manipulate the contents of an editable region."
				},
				"queryCommandEnabled": {
					"!type": "fn(cmd: string) -> bool",
					"!url": "https://developer.mozilla.org/en/docs/DOM/document",
					"!doc": "Returns true if the Midas command can be executed on the current range."
				},
				"queryCommandIndeterm": {
					"!type": "fn(cmd: string) -> bool",
					"!url": "https://developer.mozilla.org/en/docs/DOM/document",
					"!doc": "Returns true if the Midas command is in a indeterminate state on the current range."
				},
				"queryCommandState": {
					"!type": "fn(cmd: string) -> bool",
					"!url": "https://developer.mozilla.org/en/docs/DOM/document",
					"!doc": "Returns true if the Midas command has been executed on the current range."
				},
				"queryCommandSupported": {
					"!type": "fn(cmd: string) -> bool",
					"!url": "https://developer.mozilla.org/en/docs/DOM/document.queryCommandSupported",
					"!doc": "Reports whether or not the specified editor query command is supported by the browser."
				},
				"queryCommandValue": {
					"!type": "fn(cmd: string) -> string",
					"!url": "https://developer.mozilla.org/en/docs/DOM/document",
					"!doc": "Returns the current value of the current range for Midas command."
				},
				"getElementsByName": {
					"!type": "fn(name: string) -> +HTMLCollection",
					"!url": "https://developer.mozilla.org/en/docs/DOM/document.getElementsByName",
					"!doc": "Returns a list of elements with a given name in the HTML document."
				},
				"elementFromPoint": {
					"!type": "fn(x: number, y: number) -> +Element",
					"!url": "https://developer.mozilla.org/en/docs/DOM/document.elementFromPoint",
					"!doc": "Returns the element from the document whose elementFromPoint method is being called which is the topmost element which lies under the given point.  To get an element, specify the point via coordinates, in CSS pixels, relative to the upper-left-most point in the window or frame containing the document."
				},
				"getSelection": {
					"!type": "fn() -> +Selection",
					"!url": "https://developer.mozilla.org/en/docs/DOM/document.getSelection",
					"!doc": "The DOM getSelection() method is available on the Window and Document interfaces."
				},
				"adoptNode": {
					"!type": "fn(node: +Node) -> +Element",
					"!url": "https://developer.mozilla.org/en/docs/DOM/document.adoptNode",
					"!doc": "Adopts a node from an external document. The node and its subtree is removed from the document it's in (if any), and its ownerDocument is changed to the current document. The node can then be inserted into the current document."
				},
				"createTreeWalker": {
					"!type": "fn(root: +Node, mask: number) -> ?",
					"!url": "https://developer.mozilla.org/en/docs/DOM/document.createTreeWalker",
					"!doc": "Returns a new TreeWalker object."
				},
				"createExpression": {
					"!type": "fn(text: string) -> ?",
					"!url": "https://developer.mozilla.org/en/docs/DOM/document.createExpression",
					"!doc": "This method compiles an XPathExpression which can then be used for (repeated) evaluations."
				},
				"createNSResolver": {
					"!type": "fn(node: +Node)",
					"!url": "https://developer.mozilla.org/en/docs/DOM/document.createNSResolver",
					"!doc": "Creates an XPathNSResolver which resolves namespaces with respect to the definitions in scope for a specified node."
				},
				"scripts": {
					"!type": "+HTMLCollection",
					"!url": "https://developer.mozilla.org/en/docs/DOM/Document.scripts",
					"!doc": "Returns a list of the <script> elements in the document. The returned object is an HTMLCollection."
				},
				"plugins": {
					"!type": "+HTMLCollection",
					"!url": "https://developer.mozilla.org/en/docs/DOM/document.plugins",
					"!doc": "Returns an HTMLCollection object containing one or more HTMLEmbedElements or null which represent the <embed> elements in the current document."
				},
				"embeds": {
					"!type": "+HTMLCollection",
					"!url": "https://developer.mozilla.org/en/docs/DOM/document.embeds",
					"!doc": "Returns a list of the embedded OBJECTS within the current document."
				},
				"anchors": {
					"!type": "+HTMLCollection",
					"!url": "https://developer.mozilla.org/en/docs/DOM/document.anchors",
					"!doc": "Returns a list of all of the anchors in the document."
				},
				"links": {
					"!type": "+HTMLCollection",
					"!url": "https://developer.mozilla.org/en/docs/DOM/document.links",
					"!doc": "The links property returns a collection of all AREA elements and anchor elements in a document with a value for the href attribute. "
				},
				"forms": {
					"!type": "+HTMLCollection",
					"!url": "https://developer.mozilla.org/en/docs/DOM/document.forms",
					"!doc": "Returns a collection (an HTMLCollection) of the form elements within the current document."
				},
				"styleSheets": {
					"!type": "+HTMLCollection",
					"!url": "https://developer.mozilla.org/en/docs/DOM/document.styleSheets",
					"!doc": "Returns a list of stylesheet objects for stylesheets explicitly linked into or embedded in a document."
				},
				"currentScript": {
					"!type": "+Node",
					"!url": "https://developer.mozilla.org/en-US/docs/Web/API/document.currentScript",
					"!doc": "Returns the <script> element whose script is currently being processed."
				},
				"registerElement": {
					"!type": "fn(type: string, options?: ?)",
					"!url": "http://w3c.github.io/webcomponents/spec/custom/#extensions-to-document-interface-to-register",
					"!doc": "The registerElement method of the Document interface provides a way to register a custom element and returns its custom element constructor."
				},
				"getElementsByClassName": "Element.prototype.getElementsByClassName",
				"querySelector": "Element.prototype.querySelector",
				"querySelectorAll": "Element.prototype.querySelectorAll"
			},
			"!url": "https://developer.mozilla.org/en/docs/DOM/document",
			"!doc": "Each web page loaded in the browser has its own document object. This object serves as an entry point to the web page's content (the DOM tree, including elements such as <body> and <table>) and provides functionality global to the document (such as obtaining the page's URL and creating new elements in the document)."
		},
		"document": {
			"!type": "+Document",
			"!url": "https://developer.mozilla.org/en/docs/DOM/document",
			"!doc": "Each web page loaded in the browser has its own document object. This object serves as an entry point to the web page's content (the DOM tree, including elements such as <body> and <table>) and provides functionality global to the document (such as obtaining the page's URL and creating new elements in the document)."
		},
		"XMLDocument": {
			"!type": "fn()",
			"prototype": "Document.prototype",
			"!url": "https://developer.mozilla.org/en/docs/Parsing_and_serializing_XML",
			"!doc": "The Web platform provides the following objects for parsing and serializing XML:"
		},
		"HTMLElement": {
			"!type": "Element",
			"!url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement"
		},
		"HTMLAnchorElement": {
			"!type": "Element",
			"!url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLAnchorElement"
		},
		"HTMLAreaElement": {
			"!type": "Element",
			"!url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLAreaElement"
		},
		"HTMLAudioElement": {
			"!type": "Element",
			"!url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLAudioElement"
		},
		"HTMLBaseElement": {
			"!type": "Element",
			"!url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLBaseElement"
		},
		"HTMLBodyElement": {
			"!type": "Element",
			"!url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLBodyElement"
		},
		"HTMLBRElement": {
			"!type": "Element",
			"!url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLBRElement"
		},
		"HTMLButtonElement": {
			"!type": "Element",
			"!url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLButtonElement"
		},
		"HTMLCanvasElement": {
			"!type": "Element",
			"!url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement"
		},
		"HTMLDataElement": {
			"!type": "Element",
			"!url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLDataElement"
		},
		"HTMLDataListElement": {
			"!type": "Element",
			"!url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLDataListElement"
		},
		"HTMLDivElement": {
			"!type": "Element",
			"!url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLDivElement"
		},
		"HTMLDListElement": {
			"!type": "Element",
			"!url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLDListElement"
		},
		"HTMLDocument": {
			"!type": "Document",
			"!url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLDocument"
		},
		"HTMLEmbedElement": {
			"!type": "Element",
			"!url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLEmbedElement"
		},
		"HTMLFieldSetElement": {
			"!type": "Element",
			"!url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLFieldSetElement"
		},
		"HTMLFormControlsCollection": {
			"!type": "Element",
			"!url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormControlsCollection"
		},
		"HTMLFormElement": {
			"!type": "Element",
			"!url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement"
		},
		"HTMLHeadElement": {
			"!type": "Element",
			"!url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLHeadElement"
		},
		"HTMLHeadingElement": {
			"!type": "Element",
			"!url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLHeadingElement"
		},
		"HTMLHRElement": {
			"!type": "Element",
			"!url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLHRElement"
		},
		"HTMLHtmlElement": {
			"!type": "Element",
			"!url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLHtmlElement"
		},
		"HTMLIFrameElement": {
			"!type": "Element",
			"!url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement"
		},
		"HTMLImageElement": {
			"!type": "Element",
			"!url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement"
		},
		"HTMLInputElement": {
			"!type": "Element",
			"!url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement"
		},
		"HTMLKeygenElement": {
			"!type": "Element",
			"!url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLKeygenElement"
		},
		"HTMLLabelElement": {
			"!type": "Element",
			"!url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLLabelElement"
		},
		"HTMLLegendElement": {
			"!type": "Element",
			"!url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLLegendElement"
		},
		"HTMLLIElement": {
			"!type": "Element",
			"!url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLLIElement"
		},
		"HTMLLinkElement": {
			"!type": "Element",
			"!url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLLinkElement"
		},
		"HTMLMapElement": {
			"!type": "Element",
			"!url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMapElement"
		},
		"HTMLMediaElement": {
			"!type": "Element",
			"!url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement"
		},
		"HTMLMetaElement": {
			"!type": "Element",
			"!url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMetaElement"
		},
		"HTMLMeterElement": {
			"!type": "Element",
			"!url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMeterElement"
		},
		"HTMLModElement": {
			"!type": "Element",
			"!url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLModElement"
		},
		"HTMLObjectElement": {
			"!type": "Element",
			"!url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLObjectElement"
		},
		"HTMLOListElement": {
			"!type": "Element",
			"!url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLOListElement"
		},
		"HTMLOptGroupElement": {
			"!type": "Element",
			"!url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLOptGroupElement"
		},
		"HTMLOptionElement": {
			"!type": "Element",
			"!url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLOptionElement"
		},
		"HTMLOptionsCollection": {
			"!type": "Element",
			"!url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLOptionsCollection"
		},
		"HTMLOutputElement": {
			"!type": "Element",
			"!url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLOutputElement"
		},
		"HTMLParagraphElement": {
			"!type": "Element",
			"!url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLParagraphElement"
		},
		"HTMLParamElement": {
			"!type": "Element",
			"!url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLParamElement"
		},
		"HTMLPreElement": {
			"!type": "Element",
			"!url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLPreElement"
		},
		"HTMLProgressElement": {
			"!type": "Element",
			"!url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLProgressElement"
		},
		"HTMLQuoteElement": {
			"!type": "Element",
			"!url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLQuoteElement"
		},
		"HTMLScriptElement": {
			"!type": "Element",
			"!url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLScriptElement"
		},
		"HTMLSelectElement": {
			"!type": "Element",
			"!url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement"
		},
		"HTMLSourceElement": {
			"!type": "Element",
			"!url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLSourceElement"
		},
		"HTMLSpanElement": {
			"!type": "Element",
			"!url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLSpanElement"
		},
		"HTMLStyleElement": {
			"!type": "Element",
			"!url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLStyleElement"
		},
		"HTMLTableCaptionElement": {
			"!type": "Element",
			"!url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableCaptionElement"
		},
		"HTMLTableCellElement": {
			"!type": "Element",
			"!url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableCellElement"
		},
		"HTMLTableColElement": {
			"!type": "Element",
			"!url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableColElement"
		},
		"HTMLTableDataCellElement": {
			"!type": "Element",
			"!url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableDataCellElement"
		},
		"HTMLTableElement": {
			"!type": "Element",
			"!url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement"
		},
		"HTMLTableHeaderCellElement": {
			"!type": "Element",
			"!url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableHeaderCellElement"
		},
		"HTMLTableRowElement": {
			"!type": "Element",
			"!url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableRowElement"
		},
		"HTMLTableSectionElement": {
			"!type": "Element",
			"!url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableSectionElement"
		},
		"HTMLTextAreaElement": {
			"!type": "Element",
			"!url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLTextAreaElement"
		},
		"HTMLTimeElement": {
			"!type": "Element",
			"!url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLTimeElement"
		},
		"HTMLTitleElement": {
			"!type": "Element",
			"!url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLTitleElement"
		},
		"HTMLTrackElement": {
			"!type": "Element",
			"!url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLTrackElement"
		},
		"HTMLUListElement": {
			"!type": "Element",
			"!url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLUListElement"
		},
		"HTMLUnknownElement": {
			"!type": "Element",
			"!url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLUnknownElement"
		},
		"HTMLVideoElement": {
			"!type": "Element",
			"!url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLVideoElement"
		},
		"Attr": {
			"!type": "fn()",
			"prototype": {
				"isId": {
					"!type": "bool",
					"!url": "https://developer.mozilla.org/en/docs/DOM/Attr",
					"!doc": "This type represents a DOM element's attribute as an object. In most DOM methods, you will probably directly retrieve the attribute as a string (e.g., Element.getAttribute(), but certain functions (e.g., Element.getAttributeNode()) or means of iterating give Attr types."
				},
				"name": {
					"!type": "string",
					"!url": "https://developer.mozilla.org/en/docs/DOM/Attr",
					"!doc": "This type represents a DOM element's attribute as an object. In most DOM methods, you will probably directly retrieve the attribute as a string (e.g., Element.getAttribute(), but certain functions (e.g., Element.getAttributeNode()) or means of iterating give Attr types."
				},
				"value": {
					"!type": "string",
					"!url": "https://developer.mozilla.org/en/docs/DOM/Attr",
					"!doc": "This type represents a DOM element's attribute as an object. In most DOM methods, you will probably directly retrieve the attribute as a string (e.g., Element.getAttribute(), but certain functions (e.g., Element.getAttributeNode()) or means of iterating give Attr types."
				}
			},
			"!url": "https://developer.mozilla.org/en/docs/DOM/Attr",
			"!doc": "This type represents a DOM element's attribute as an object. In most DOM methods, you will probably directly retrieve the attribute as a string (e.g., Element.getAttribute(), but certain functions (e.g., Element.getAttributeNode()) or means of iterating give Attr types."
		},
		"NodeList": {
			"!type": "fn()",
			"prototype": {
				"length": {
					"!type": "number",
					"!url": "https://developer.mozilla.org/en/docs/DOM/element.length",
					"!doc": "Returns the number of items in a NodeList."
				},
				"item": {
					"!type": "fn(i: number) -> +Element",
					"!url": "https://developer.mozilla.org/en/docs/DOM/NodeList.item",
					"!doc": "Returns a node from a NodeList by index."
				},
				"<i>": "+Element"
			},
			"!url": "https://developer.mozilla.org/en/docs/DOM/NodeList",
			"!doc": "NodeList objects are collections of nodes returned by getElementsByTagName, getElementsByTagNameNS, Node.childNodes, querySelectorAll, getElementsByClassName, etc."
		},
		"HTMLCollection": {
			"!type": "fn()",
			"prototype": {
				"length": {
					"!type": "number",
					"!url": "https://developer.mozilla.org/en/docs/DOM/HTMLCollection",
					"!doc": "The number of items in the collection."
				},
				"item": {
					"!type": "fn(i: number) -> +Element",
					"!url": "https://developer.mozilla.org/en/docs/DOM/HTMLCollection",
					"!doc": "Returns the specific node at the given zero-based index into the list. Returns null if the index is out of range."
				},
				"namedItem": {
					"!type": "fn(name: string) -> +Element",
					"!url": "https://developer.mozilla.org/en/docs/DOM/HTMLCollection",
					"!doc": "Returns the specific node whose ID or, as a fallback, name matches the string specified by name. Matching by name is only done as a last resort, only in HTML, and only if the referenced element supports the name attribute. Returns null if no node exists by the given name."
				},
				"<i>": "+Element"
			},
			"!url": "https://developer.mozilla.org/en/docs/DOM/HTMLCollection",
			"!doc": "HTMLCollection is an interface representing a generic collection of elements (in document order) and offers methods and properties for traversing the list."
		},
		"NamedNodeMap": {
			"!type": "fn()",
			"prototype": {
				"length": {
					"!type": "number",
					"!url": "https://developer.mozilla.org/en/docs/DOM/NamedNodeMap",
					"!doc": "The number of items in the map."
				},
				"getNamedItem": {
					"!type": "fn(name: string) -> +Node",
					"!url": "https://developer.mozilla.org/en/docs/DOM/NamedNodeMap",
					"!doc": "Gets a node by name."
				},
				"setNamedItem": {
					"!type": "fn(node: +Node) -> +Node",
					"!url": "https://developer.mozilla.org/en/docs/DOM/NamedNodeMap",
					"!doc": "Adds (or replaces) a node by its nodeName."
				},
				"removeNamedItem": {
					"!type": "fn(name: string) -> +Node",
					"!url": "https://developer.mozilla.org/en/docs/DOM/NamedNodeMap",
					"!doc": "Removes a node (or if an attribute, may reveal a default if present)."
				},
				"item": {
					"!type": "fn(i: number) -> +Node",
					"!url": "https://developer.mozilla.org/en/docs/DOM/NamedNodeMap",
					"!doc": "Returns the item at the given index (or null if the index is higher or equal to the number of nodes)."
				},
				"getNamedItemNS": {
					"!type": "fn(ns: string, name: string) -> +Node",
					"!url": "https://developer.mozilla.org/en/docs/DOM/NamedNodeMap",
					"!doc": "Gets a node by namespace and localName."
				},
				"setNamedItemNS": {
					"!type": "fn(node: +Node) -> +Node",
					"!url": "https://developer.mozilla.org/en/docs/DOM/NamedNodeMap",
					"!doc": "Adds (or replaces) a node by its localName and namespaceURI."
				},
				"removeNamedItemNS": {
					"!type": "fn(ns: string, name: string) -> +Node",
					"!url": "https://developer.mozilla.org/en/docs/DOM/NamedNodeMap",
					"!doc": "Removes a node (or if an attribute, may reveal a default if present)."
				},
				"<i>": "+Node"
			},
			"!url": "https://developer.mozilla.org/en/docs/DOM/NamedNodeMap",
			"!doc": "A collection of nodes returned by Element.attributes (also potentially for DocumentType.entities, DocumentType.notations). NamedNodeMaps are not in any particular order (unlike NodeList), although they may be accessed by an index as in an array (they may also be accessed with the item() method). A NamedNodeMap object are live and will thus be auto-updated if changes are made to their contents internally or elsewhere."
		},
		"DocumentFragment": {
			"!type": "fn()",
			"prototype": {
				"!proto": "Node.prototype"
			},
			"!url": "https://developer.mozilla.org/en/docs/DOM/document.createDocumentFragment",
			"!doc": "Creates a new empty DocumentFragment."
		},
		"DOMTokenList": {
			"!type": "fn()",
			"prototype": {
				"length": {
					"!type": "number",
					"!url": "https://developer.mozilla.org/en/docs/DOM/DOMTokenList",
					"!doc": "The amount of items in the list."
				},
				"item": {
					"!type": "fn(i: number) -> string",
					"!url": "https://developer.mozilla.org/en/docs/DOM/DOMTokenList",
					"!doc": "Returns an item in the list by its index."
				},
				"contains": {
					"!type": "fn(token: string) -> bool",
					"!url": "https://developer.mozilla.org/en/docs/DOM/DOMTokenList",
					"!doc": "Return true if the underlying string contains token, otherwise false."
				},
				"add": {
					"!type": "fn(token: string)",
					"!url": "https://developer.mozilla.org/en/docs/DOM/DOMTokenList",
					"!doc": "Adds token to the underlying string."
				},
				"remove": {
					"!type": "fn(token: string)",
					"!url": "https://developer.mozilla.org/en/docs/DOM/DOMTokenList",
					"!doc": "Remove token from the underlying string."
				},
				"toggle": {
					"!type": "fn(token: string) -> bool",
					"!url": "https://developer.mozilla.org/en/docs/DOM/DOMTokenList",
					"!doc": "Removes token from string and returns false. If token doesn't exist it's added and the function returns true."
				},
				"<i>": "string"
			},
			"!url": "https://developer.mozilla.org/en/docs/DOM/DOMTokenList",
			"!doc": "This type represents a set of space-separated tokens. Commonly returned by HTMLElement.classList, HTMLLinkElement.relList, HTMLAnchorElement.relList or HTMLAreaElement.relList. It is indexed beginning with 0 as with JavaScript arrays. DOMTokenList is always case-sensitive."
		},
		"XPathResult": {
			"!type": "fn()",
			"prototype": {
				"boolValue": "bool",
				"invalidIteratorState": {
					"!type": "bool",
					"!url": "https://developer.mozilla.org/en/docs/Introduction_to_using_XPath_in_JavaScript",
					"!doc": "This document describes the interface for using XPath in JavaScript internally, in extensions, and from websites. Mozilla implements a fair amount of the DOM 3 XPath. Which means that XPath expressions can be run against both HTML and XML documents."
				},
				"numberValue": {
					"!type": "number",
					"!url": "https://developer.mozilla.org/en/docs/XPathResult",
					"!doc": "Refer to nsIDOMXPathResult for more detail."
				},
				"resultType": {
					"!type": "number",
					"!url": "https://developer.mozilla.org/en/docs/DOM/document.evaluate",
					"!doc": "Returns an XPathResult based on an XPath expression and other given parameters."
				},
				"singleNodeValue": {
					"!type": "+Element",
					"!url": "https://developer.mozilla.org/en/docs/Introduction_to_using_XPath_in_JavaScript",
					"!doc": "This document describes the interface for using XPath in JavaScript internally, in extensions, and from websites. Mozilla implements a fair amount of the DOM 3 XPath. Which means that XPath expressions can be run against both HTML and XML documents."
				},
				"snapshotLength": {
					"!type": "number",
					"!url": "https://developer.mozilla.org/en/docs/XPathResult",
					"!doc": "Refer to nsIDOMXPathResult for more detail."
				},
				"stringValue": {
					"!type": "string",
					"!url": "https://developer.mozilla.org/en/docs/Introduction_to_using_XPath_in_JavaScript",
					"!doc": "This document describes the interface for using XPath in JavaScript internally, in extensions, and from websites. Mozilla implements a fair amount of the DOM 3 XPath. Which means that XPath expressions can be run against both HTML and XML documents."
				},
				"iterateNext": {
					"!type": "fn()",
					"!url": "https://developer.mozilla.org/en/docs/Introduction_to_using_XPath_in_JavaScript",
					"!doc": "This document describes the interface for using XPath in JavaScript internally, in extensions, and from websites. Mozilla implements a fair amount of the DOM 3 XPath. Which means that XPath expressions can be run against both HTML and XML documents."
				},
				"snapshotItem": {
					"!type": "fn()",
					"!url": "https://developer.mozilla.org/en-US/docs/XPathResult#snapshotItem()"
				},
				"ANY_TYPE": "number",
				"NUMBER_TYPE": "number",
				"STRING_TYPE": "number",
				"BOOL_TYPE": "number",
				"UNORDERED_NODE_ITERATOR_TYPE": "number",
				"ORDERED_NODE_ITERATOR_TYPE": "number",
				"UNORDERED_NODE_SNAPSHOT_TYPE": "number",
				"ORDERED_NODE_SNAPSHOT_TYPE": "number",
				"ANY_UNORDERED_NODE_TYPE": "number",
				"FIRST_ORDERED_NODE_TYPE": "number"
			},
			"!url": "https://developer.mozilla.org/en/docs/XPathResult",
			"!doc": "Refer to nsIDOMXPathResult for more detail."
		},
		"ClientRect": {
			"!type": "fn()",
			"prototype": {
				"top": {
					"!type": "number",
					"!url": "https://developer.mozilla.org/en/docs/DOM/element.getClientRects",
					"!doc": "Top of the box, in pixels, relative to the viewport."
				},
				"left": {
					"!type": "number",
					"!url": "https://developer.mozilla.org/en/docs/DOM/element.getClientRects",
					"!doc": "Left of the box, in pixels, relative to the viewport."
				},
				"bottom": {
					"!type": "number",
					"!url": "https://developer.mozilla.org/en/docs/DOM/element.getClientRects",
					"!doc": "Bottom of the box, in pixels, relative to the viewport."
				},
				"right": {
					"!type": "number",
					"!url": "https://developer.mozilla.org/en/docs/DOM/element.getClientRects",
					"!doc": "Right of the box, in pixels, relative to the viewport."
				}
			},
			"!url": "https://developer.mozilla.org/en/docs/DOM/element.getClientRects",
			"!doc": "Returns a collection of rectangles that indicate the bounding rectangles for each box in a client."
		},
		"Event": {
			"!type": "fn()",
			"prototype": {
				"stopPropagation": {
					"!type": "fn()",
					"!url": "https://developer.mozilla.org/en/docs/DOM/event.stopPropagation",
					"!doc": "Prevents further propagation of the current event."
				},
				"preventDefault": {
					"!type": "fn()",
					"!url": "https://developer.mozilla.org/en/docs/DOM/event.preventDefault",
					"!doc": "Cancels the event if it is cancelable, without stopping further propagation of the event."
				},
				"initEvent": {
					"!type": "fn(type: string, bubbles: bool, cancelable: bool)",
					"!url": "https://developer.mozilla.org/en/docs/DOM/event.initEvent",
					"!doc": "The initEvent method is used to initialize the value of an event created using document.createEvent."
				},
				"stopImmediatePropagation": {
					"!type": "fn()",
					"!url": "https://developer.mozilla.org/en/docs/DOM/event.stopImmediatePropagation",
					"!doc": "Prevents other listeners of the same event to be called."
				},
				"type": {
					"!type": "string",
					"!url": "https://developer.mozilla.org/en-US/docs/Web/API/event.type",
					"!doc": "Returns a string containing the type of event."
				},
				"NONE": "number",
				"CAPTURING_PHASE": "number",
				"AT_TARGET": "number",
				"BUBBLING_PHASE": "number",
				"MOUSEDOWN": "number",
				"MOUSEUP": "number",
				"MOUSEOVER": "number",
				"MOUSEOUT": "number",
				"MOUSEMOVE": "number",
				"MOUSEDRAG": "number",
				"CLICK": "number",
				"DBLCLICK": "number",
				"KEYDOWN": "number",
				"KEYUP": "number",
				"KEYPRESS": "number",
				"DRAGDROP": "number",
				"FOCUS": "number",
				"BLUR": "number",
				"SELECT": "number",
				"CHANGE": "number",
				"target": {
					"!type": "+Element",
					"!url": "https://developer.mozilla.org/en/docs/DOM/EventTarget",
					"!doc": "An EventTarget is a DOM interface implemented by objects that can receive DOM events and have listeners for them. The most common EventTargets are DOM elements, although other objects can be EventTargets too, for example document, window, XMLHttpRequest, and others."
				},
				"relatedTarget": {
					"!type": "+Element",
					"!url": "https://developer.mozilla.org/en/docs/DOM/event.relatedTarget",
					"!doc": "Identifies a secondary target for the event."
				},
				"pageX": {
					"!type": "number",
					"!url": "https://developer.mozilla.org/en/docs/DOM/event.pageX",
					"!doc": "Returns the horizontal coordinate of the event relative to whole document."
				},
				"pageY": {
					"!type": "number",
					"!url": "https://developer.mozilla.org/en/docs/DOM/event.pageY",
					"!doc": "Returns the vertical coordinate of the event relative to the whole document."
				},
				"clientX": {
					"!type": "number",
					"!url": "https://developer.mozilla.org/en/docs/DOM/event.clientX",
					"!doc": "Returns the horizontal coordinate within the application's client area at which the event occurred (as opposed to the coordinates within the page). For example, clicking in the top-left corner of the client area will always result in a mouse event with a clientX value of 0, regardless of whether the page is scrolled horizontally."
				},
				"clientY": {
					"!type": "number",
					"!url": "https://developer.mozilla.org/en/docs/DOM/event.clientY",
					"!doc": "Returns the vertical coordinate within the application's client area at which the event occurred (as opposed to the coordinates within the page). For example, clicking in the top-left corner of the client area will always result in a mouse event with a clientY value of 0, regardless of whether the page is scrolled vertically."
				},
				"keyCode": {
					"!type": "number",
					"!url": "https://developer.mozilla.org/en/docs/DOM/event.keyCode",
					"!doc": "Returns the Unicode value of a non-character key in a keypress event or any key in any other type of keyboard event."
				},
				"charCode": {
					"!type": "number",
					"!url": "https://developer.mozilla.org/en/docs/DOM/event.charCode",
					"!doc": "Returns the Unicode value of a character key pressed during a keypress event."
				},
				"which": {
					"!type": "number",
					"!url": "https://developer.mozilla.org/en/docs/DOM/event.which",
					"!doc": "Returns the numeric keyCode of the key pressed, or the character code (charCode) for an alphanumeric key pressed."
				},
				"button": {
					"!type": "number",
					"!url": "https://developer.mozilla.org/en/docs/DOM/event.button",
					"!doc": "Indicates which mouse button caused the event."
				},
				"shiftKey": {
					"!type": "bool",
					"!url": "https://developer.mozilla.org/en/docs/DOM/event.shiftKey",
					"!doc": "Indicates whether the SHIFT key was pressed when the event fired."
				},
				"ctrlKey": {
					"!type": "bool",
					"!url": "https://developer.mozilla.org/en/docs/DOM/event.ctrlKey",
					"!doc": "Indicates whether the CTRL key was pressed when the event fired."
				},
				"altKey": {
					"!type": "bool",
					"!url": "https://developer.mozilla.org/en/docs/DOM/event.altKey",
					"!doc": "Indicates whether the ALT key was pressed when the event fired."
				},
				"metaKey": {
					"!type": "bool",
					"!url": "https://developer.mozilla.org/en/docs/DOM/event.metaKey",
					"!doc": "Indicates whether the META key was pressed when the event fired."
				},
				"returnValue": {
					"!type": "bool",
					"!url": "https://developer.mozilla.org/en/docs/DOM/window.onbeforeunload",
					"!doc": "An event that fires when a window is about to unload its resources. The document is still visible and the event is still cancelable."
				},
				"cancelBubble": {
					"!type": "bool",
					"!url": "https://developer.mozilla.org/en/docs/DOM/event.cancelBubble",
					"!doc": "bool is the boolean value of true or false."
				},
				"dataTransfer": {
					"dropEffect": {
						"!type": "string",
						"!url": "https://developer.mozilla.org/en/docs/DragDrop/DataTransfer",
						"!doc": "The actual effect that will be used, and should always be one of the possible values of effectAllowed."
					},
					"effectAllowed": {
						"!type": "string",
						"!url": "https://developer.mozilla.org/en/docs/DragDrop/Drag_Operations",
						"!doc": "Specifies the effects that are allowed for this drag."
					},
					"files": {
						"!type": "+FileList",
						"!url": "https://developer.mozilla.org/en/docs/DragDrop/DataTransfer",
						"!doc": "Contains a list of all the local files available on the data transfer."
					},
					"types": {
						"!type": "[string]",
						"!url": "https://developer.mozilla.org/en-US/docs/DragDrop/DataTransfer",
						"!doc": "Holds a list of the format types of the data that is stored for the first item, in the same order the data was added. An empty list will be returned if no data was added."
					},
					"addElement": {
						"!type": "fn(element: +Element)",
						"!url": "https://developer.mozilla.org/en/docs/DragDrop/DataTransfer",
						"!doc": "Set the drag source."
					},
					"clearData": {
						"!type": "fn(type?: string)",
						"!url": "https://developer.mozilla.org/en/docs/DragDrop/Drag_Operations",
						"!doc": "Remove the data associated with a given type."
					},
					"getData": {
						"!type": "fn(type: string) -> string",
						"!url": "https://developer.mozilla.org/en/docs/DragDrop/Drag_Operations",
						"!doc": "Retrieves the data for a given type, or an empty string if data for that type does not exist or the data transfer contains no data."
					},
					"setData": {
						"!type": "fn(type: string, data: string)",
						"!url": "https://developer.mozilla.org/en/docs/DragDrop/Drag_Operations",
						"!doc": "Set the data for a given type."
					},
					"setDragImage": {
						"!type": "fn(image: +Element)",
						"!url": "https://developer.mozilla.org/en/docs/DragDrop/Drag_Operations",
						"!doc": "Set the image to be used for dragging if a custom one is desired."
					},
					"!url": "https://developer.mozilla.org/en/docs/DragDrop/DataTransfer",
					"!doc": "This object is available from the dataTransfer property of all drag events. It cannot be created separately."
				}
			},
			"!url": "https://developer.mozilla.org/en-US/docs/DOM/event",
			"!doc": "The DOM Event interface is accessible from within the handler function, via the event object passed as the first argument."
		},
		"TouchEvent": {
			"!type": "fn()",
			"prototype": "Event.prototype",
			"!url": "https://developer.mozilla.org/en/docs/DOM/Touch_events",
			"!doc": "In order to provide quality support for touch-based user interfaces, touch events offer the ability to interpret finger activity on touch screens or trackpads."
		},
		"WheelEvent": {
			"!type": "fn()",
			"prototype": "Event.prototype",
			"!url": "https://developer.mozilla.org/en/docs/DOM/WheelEvent",
			"!doc": "The DOM WheelEvent represents events that occur due to the user moving a mouse wheel or similar input device."
		},
		"MouseEvent": {
			"!type": "fn()",
			"prototype": "Event.prototype",
			"!url": "https://developer.mozilla.org/en/docs/DOM/MouseEvent",
			"!doc": "The DOM MouseEvent represents events that occur due to the user interacting with a pointing device (such as a mouse). It's represented by the nsINSDOMMouseEvent interface, which extends the nsIDOMMouseEvent interface."
		},
		"KeyboardEvent": {
			"!type": "fn()",
			"prototype": "Event.prototype",
			"!url": "https://developer.mozilla.org/en/docs/DOM/KeyboardEvent",
			"!doc": "KeyboardEvent objects describe a user interaction with the keyboard. Each event describes a key; the event type (keydown, keypress, or keyup) identifies what kind of activity was performed."
		},
		"HashChangeEvent": {
			"!type": "fn()",
			"prototype": "Event.prototype",
			"!url": "https://developer.mozilla.org/en/docs/DOM/window.onhashchange",
			"!doc": "The hashchange event fires when a window's hash changes."
		},
		"ErrorEvent": {
			"!type": "fn()",
			"prototype": "Event.prototype",
			"!url": "https://developer.mozilla.org/en/docs/DOM/DOM_event_reference/error",
			"!doc": "The error event is fired whenever a resource fails to load."
		},
		"CustomEvent": {
			"!type": "fn()",
			"prototype": "Event.prototype",
			"!url": "https://developer.mozilla.org/en/docs/DOM/Event/CustomEvent",
			"!doc": "The DOM CustomEvent are events initialized by an application for any purpose."
		},
		"BeforeLoadEvent": {
			"!type": "fn()",
			"prototype": "Event.prototype",
			"!url": "https://developer.mozilla.org/en/docs/DOM/window",
			"!doc": "This section provides a brief reference for all of the methods, properties, and events available through the DOM window object. The window object implements the Window interface, which in turn inherits from the AbstractView interface. Some additional global functions, namespaces objects, and constructors, not typically associated with the window, but available on it, are listed in the JavaScript Reference."
		},
		"WebSocket": {
			"!type": "fn(url: string)",
			"prototype": {
				"close": {
					"!type": "fn()",
					"!url": "https://developer.mozilla.org/en/docs/WebSockets/WebSockets_reference/CloseEvent",
					"!doc": "A CloseEvent is sent to clients using WebSockets when the connection is closed. This is delivered to the listener indicated by the WebSocket object's onclose attribute."
				},
				"send": {
					"!type": "fn(data: string)",
					"!url": "https://developer.mozilla.org/en/docs/WebSockets/WebSockets_reference/WebSocket",
					"!doc": "The WebSocket object provides the API for creating and managing a WebSocket connection to a server, as well as for sending and receiving data on the connection."
				},
				"binaryType": {
					"!type": "string",
					"!url": "https://developer.mozilla.org/en/docs/WebSockets/WebSockets_reference/WebSocket",
					"!doc": "The WebSocket object provides the API for creating and managing a WebSocket connection to a server, as well as for sending and receiving data on the connection."
				},
				"bufferedAmount": {
					"!type": "number",
					"!url": "https://developer.mozilla.org/en/docs/WebSockets/Writing_WebSocket_client_applications",
					"!doc": "WebSockets is a technology that makes it possible to open an interactive communication session between the user's browser and a server. Using a WebSocket connection, Web applications can perform real-time communication instead of having to poll for changes back and forth."
				},
				"extensions": {
					"!type": "string",
					"!url": "https://developer.mozilla.org/en/docs/WebSockets/WebSockets_reference/WebSocket",
					"!doc": "The WebSocket object provides the API for creating and managing a WebSocket connection to a server, as well as for sending and receiving data on the connection."
				},
				"onclose": {
					"!type": "?",
					"!url": "https://developer.mozilla.org/en/docs/WebSockets/WebSockets_reference/CloseEvent",
					"!doc": "A CloseEvent is sent to clients using WebSockets when the connection is closed. This is delivered to the listener indicated by the WebSocket object's onclose attribute."
				},
				"onerror": {
					"!type": "?",
					"!url": "https://developer.mozilla.org/en/docs/WebSockets/Writing_WebSocket_client_applications",
					"!doc": "WebSockets is a technology that makes it possible to open an interactive communication session between the user's browser and a server. Using a WebSocket connection, Web applications can perform real-time communication instead of having to poll for changes back and forth."
				},
				"onmessage": {
					"!type": "?",
					"!url": "https://developer.mozilla.org/en/docs/WebSockets/WebSockets_reference/WebSocket",
					"!doc": "The WebSocket object provides the API for creating and managing a WebSocket connection to a server, as well as for sending and receiving data on the connection."
				},
				"onopen": {
					"!type": "?",
					"!url": "https://developer.mozilla.org/en/docs/WebSockets/WebSockets_reference/WebSocket",
					"!doc": "The WebSocket object provides the API for creating and managing a WebSocket connection to a server, as well as for sending and receiving data on the connection."
				},
				"protocol": {
					"!type": "string",
					"!url": "https://developer.mozilla.org/en/docs/WebSockets",
					"!doc": "WebSockets is an advanced technology that makes it possible to open an interactive communication session between the user's browser and a server. With this API, you can send messages to a server and receive event-driven responses without having to poll the server for a reply."
				},
				"url": {
					"!type": "string",
					"!url": "https://developer.mozilla.org/en/docs/WebSockets/Writing_WebSocket_client_applications",
					"!doc": "WebSockets is a technology that makes it possible to open an interactive communication session between the user's browser and a server. Using a WebSocket connection, Web applications can perform real-time communication instead of having to poll for changes back and forth."
				},
				"CONNECTING": "number",
				"OPEN": "number",
				"CLOSING": "number",
				"CLOSED": "number"
			},
			"!url": "https://developer.mozilla.org/en/docs/WebSockets",
			"!doc": "WebSockets is an advanced technology that makes it possible to open an interactive communication session between the user's browser and a server. With this API, you can send messages to a server and receive event-driven responses without having to poll the server for a reply."
		},
		"Worker": {
			"!type": "fn(scriptURL: string)",
			"prototype": {
				"postMessage": {
					"!type": "fn(message: ?)",
					"!url": "https://developer.mozilla.org/en/docs/DOM/Worker",
					"!doc": "Sends a message to the worker's inner scope. This accepts a single parameter, which is the data to send to the worker. The data may be any value or JavaScript object handled by the structured clone algorithm, which includes cyclical references."
				},
				"terminate": {
					"!type": "fn()",
					"!url": "https://developer.mozilla.org/en/docs/DOM/Worker",
					"!doc": "Immediately terminates the worker. This does not offer the worker an opportunity to finish its operations; it is simply stopped at once."
				},
				"onmessage": {
					"!type": "?",
					"!url": "https://developer.mozilla.org/en/docs/DOM/Worker",
					"!doc": "An event listener that is called whenever a MessageEvent with type message bubbles through the worker. The message is stored in the event's data member."
				},
				"onerror": {
					"!type": "?",
					"!url": "https://developer.mozilla.org/en/docs/DOM/Worker",
					"!doc": "An event listener that is called whenever an ErrorEvent with type error bubbles through the worker."
				}
			},
			"!url": "https://developer.mozilla.org/en/docs/DOM/Worker",
			"!doc": "Workers are background tasks that can be easily created and can send messages back to their creators. Creating a worker is as simple as calling the Worker() constructor, specifying a script to be run in the worker thread."
		},
		"localStorage": {
			"setItem": {
				"!type": "fn(name: string, value: string)",
				"!url": "https://developer.mozilla.org/en/docs/DOM/Storage",
				"!doc": "Store an item in storage."
			},
			"getItem": {
				"!type": "fn(name: string) -> string",
				"!url": "https://developer.mozilla.org/en/docs/DOM/Storage",
				"!doc": "Retrieve an item from storage."
			},
			"!url": "https://developer.mozilla.org/en/docs/DOM/Storage",
			"!doc": "The DOM Storage mechanism is a means through which string key/value pairs can be securely stored and later retrieved for use."
		},
		"sessionStorage": {
			"setItem": {
				"!type": "fn(name: string, value: string)",
				"!url": "https://developer.mozilla.org/en/docs/DOM/Storage",
				"!doc": "Store an item in storage."
			},
			"getItem": {
				"!type": "fn(name: string) -> string",
				"!url": "https://developer.mozilla.org/en/docs/DOM/Storage",
				"!doc": "Retrieve an item from storage."
			},
			"!url": "https://developer.mozilla.org/en/docs/DOM/Storage",
			"!doc": "This is a global object (sessionStorage) that maintains a storage area that's available for the duration of the page session. A page session lasts for as long as the browser is open and survives over page reloads and restores. Opening a page in a new tab or window will cause a new session to be initiated."
		},
		"FileList": {
			"!type": "fn()",
			"prototype": {
				"length": {
					"!type": "number",
					"!url": "https://developer.mozilla.org/en/docs/DOM/FileList",
					"!doc": "A read-only value indicating the number of files in the list."
				},
				"item": {
					"!type": "fn(i: number) -> +File",
					"!url": "https://developer.mozilla.org/en/docs/DOM/FileList",
					"!doc": "Returns a File object representing the file at the specified index in the file list."
				},
				"<i>": "+File"
			},
			"!url": "https://developer.mozilla.org/en/docs/DOM/FileList",
			"!doc": "An object of this type is returned by the files property of the HTML input element; this lets you access the list of files selected with the <input type=\"file\"> element. It's also used for a list of files dropped into web content when using the drag and drop API."
		},
		"File": {
			"!type": "fn()",
			"prototype": {
				"!proto": "Blob.prototype",
				"fileName": {
					"!type": "string",
					"!url": "https://developer.mozilla.org/en/docs/DOM/File.fileName",
					"!doc": "Returns the name of the file. For security reasons the path is excluded from this property."
				},
				"fileSize": {
					"!type": "number",
					"!url": "https://developer.mozilla.org/en/docs/DOM/File.fileSize",
					"!doc": "Returns the size of a file in bytes."
				},
				"lastModifiedDate": {
					"!type": "?",
					"!url": "https://developer.mozilla.org/en/docs/DOM/File.lastModifiedDate",
					"!doc": "Returns the last modified date of the file. Files without a known last modified date use the current date instead."
				},
				"name": {
					"!type": "string",
					"!url": "https://developer.mozilla.org/en/docs/DOM/File.name",
					"!doc": "Returns the name of the file. For security reasons, the path is excluded from this property."
				}
			},
			"!url": "https://developer.mozilla.org/en/docs/DOM/File",
			"!doc": "The File object provides information about -- and access to the contents of -- files. These are generally retrieved from a FileList object returned as a result of a user selecting files using the input element, or from a drag and drop operation's DataTransfer object."
		},
		"Blob": {
			"!type": "fn(parts: [?], properties?: ?)",
			"prototype": {
				"size": {
					"!type": "number",
					"!url": "https://developer.mozilla.org/en/docs/DOM/Blob",
					"!doc": "The size, in bytes, of the data contained in the Blob object. Read only."
				},
				"type": {
					"!type": "string",
					"!url": "https://developer.mozilla.org/en/docs/DOM/Blob",
					"!doc": "An ASCII-encoded string, in all lower case, indicating the MIME type of the data contained in the Blob. If the type is unknown, this string is empty. Read only."
				},
				"slice": {
					"!type": "fn(start: number, end?: number, type?: string) -> +Blob",
					"!url": "https://developer.mozilla.org/en/docs/DOM/Blob",
					"!doc": "Returns a new Blob object containing the data in the specified range of bytes of the source Blob."
				}
			},
			"!url": "https://developer.mozilla.org/en/docs/DOM/Blob",
			"!doc": "A Blob object represents a file-like object of immutable, raw data. Blobs represent data that isn't necessarily in a JavaScript-native format. The File interface is based on Blob, inheriting blob functionality and expanding it to support files on the user's system."
		},
		"FileReader": {
			"!type": "fn()",
			"prototype": {
				"abort": {
					"!type": "fn()",
					"!url": "https://developer.mozilla.org/en/docs/DOM/FileReader",
					"!doc": "Aborts the read operation. Upon return, the readyState will be DONE."
				},
				"readAsArrayBuffer": {
					"!type": "fn(blob: +Blob)",
					"!url": "https://developer.mozilla.org/en/docs/DOM/FileReader",
					"!doc": "Starts reading the contents of the specified Blob, producing an ArrayBuffer."
				},
				"readAsBinaryString": {
					"!type": "fn(blob: +Blob)",
					"!url": "https://developer.mozilla.org/en/docs/DOM/FileReader",
					"!doc": "Starts reading the contents of the specified Blob, producing raw binary data."
				},
				"readAsDataURL": {
					"!type": "fn(blob: +Blob)",
					"!url": "https://developer.mozilla.org/en/docs/DOM/FileReader",
					"!doc": "Starts reading the contents of the specified Blob, producing a data: url."
				},
				"readAsText": {
					"!type": "fn(blob: +Blob, encoding?: string)",
					"!url": "https://developer.mozilla.org/en/docs/DOM/FileReader",
					"!doc": "Starts reading the contents of the specified Blob, producing a string."
				},
				"EMPTY": "number",
				"LOADING": "number",
				"DONE": "number",
				"error": {
					"!type": "?",
					"!url": "https://developer.mozilla.org/en/docs/DOM/FileReader",
					"!doc": "The error that occurred while reading the file. Read only."
				},
				"readyState": {
					"!type": "number",
					"!url": "https://developer.mozilla.org/en/docs/DOM/FileReader",
					"!doc": "Indicates the state of the FileReader. This will be one of the State constants. Read only."
				},
				"result": {
					"!type": "?",
					"!url": "https://developer.mozilla.org/en/docs/DOM/FileReader",
					"!doc": "The file's contents. This property is only valid after the read operation is complete, and the format of the data depends on which of the methods was used to initiate the read operation. Read only."
				},
				"onabort": {
					"!type": "?",
					"!url": "https://developer.mozilla.org/en/docs/DOM/FileReader",
					"!doc": "Called when the read operation is aborted."
				},
				"onerror": {
					"!type": "?",
					"!url": "https://developer.mozilla.org/en/docs/DOM/FileReader",
					"!doc": "Called when an error occurs."
				},
				"onload": {
					"!type": "?",
					"!url": "https://developer.mozilla.org/en/docs/DOM/FileReader",
					"!doc": "Called when the read operation is successfully completed."
				},
				"onloadend": {
					"!type": "?",
					"!url": "https://developer.mozilla.org/en/docs/DOM/FileReader",
					"!doc": "Called when the read is completed, whether successful or not. This is called after either onload or onerror."
				},
				"onloadstart": {
					"!type": "?",
					"!url": "https://developer.mozilla.org/en/docs/DOM/FileReader",
					"!doc": "Called when reading the data is about to begin."
				},
				"onprogress": {
					"!type": "?",
					"!url": "https://developer.mozilla.org/en/docs/DOM/FileReader",
					"!doc": "Called periodically while the data is being read."
				}
			},
			"!url": "https://developer.mozilla.org/en/docs/DOM/FileReader",
			"!doc": "The FileReader object lets web applications asynchronously read the contents of files (or raw data buffers) stored on the user's computer, using File or Blob objects to specify the file or data to read. File objects may be obtained from a FileList object returned as a result of a user selecting files using the <input> element, from a drag and drop operation's DataTransfer object, or from the mozGetAsFile() API on an HTMLCanvasElement."
		},
		"URL": {
			"createObjectURL": {
				"!type": "fn(blob: +Blob) -> string",
				"!url": "https://developer.mozilla.org/en-US/docs/Web/API/URL.createObjectURL",
				"!doc": "The URL.createObjectURL() static method creates a DOMString containing an URL representing the object given in parameter."
			},
			"revokeObjectURL": {
				"!type": "fn(string)",
				"!url": "https://developer.mozilla.org/en-US/docs/Web/API/URL.revokeObjectURL",
				"!doc": "The URL.revokeObjectURL() static method releases an existing object URL which was previously created by calling window.URL.createObjectURL()."
			}
		},
		"Range": {
			"!type": "fn()",
			"prototype": {
				"collapsed": {
					"!type": "bool",
					"!url": "https://developer.mozilla.org/en/docs/DOM/range.collapsed",
					"!doc": "Returns a boolean indicating whether the range's start and end points are at the same position."
				},
				"commonAncestorContainer": {
					"!type": "+Element",
					"!url": "https://developer.mozilla.org/en/docs/DOM/range.commonAncestorContainer",
					"!doc": "Returns the deepest Node that contains the  startContainer and  endContainer Nodes."
				},
				"endContainer": {
					"!type": "+Element",
					"!url": "https://developer.mozilla.org/en/docs/DOM/range.endContainer",
					"!doc": "Returns the Node within which the Range ends."
				},
				"endOffset": {
					"!type": "number",
					"!url": "https://developer.mozilla.org/en/docs/DOM/range.endOffset",
					"!doc": "Returns a number representing where in the  endContainer the Range ends."
				},
				"startContainer": {
					"!type": "+Element",
					"!url": "https://developer.mozilla.org/en/docs/DOM/range.startContainer",
					"!doc": "Returns the Node within which the Range starts."
				},
				"startOffset": {
					"!type": "number",
					"!url": "https://developer.mozilla.org/en/docs/DOM/range.startOffset",
					"!doc": "Returns a number representing where in the startContainer the Range starts."
				},
				"setStart": {
					"!type": "fn(node: +Element, offset: number)",
					"!url": "https://developer.mozilla.org/en/docs/DOM/range.setStart",
					"!doc": "Sets the start position of a Range."
				},
				"setEnd": {
					"!type": "fn(node: +Element, offset: number)",
					"!url": "https://developer.mozilla.org/en/docs/DOM/range.setEnd",
					"!doc": "Sets the end position of a Range."
				},
				"setStartBefore": {
					"!type": "fn(node: +Element)",
					"!url": "https://developer.mozilla.org/en/docs/DOM/range.setStartBefore",
					"!doc": "Sets the start position of a Range relative to another Node."
				},
				"setStartAfter": {
					"!type": "fn(node: +Element)",
					"!url": "https://developer.mozilla.org/en/docs/DOM/range.setStartAfter",
					"!doc": "Sets the start position of a Range relative to a Node."
				},
				"setEndBefore": {
					"!type": "fn(node: +Element)",
					"!url": "https://developer.mozilla.org/en/docs/DOM/range.setEndBefore",
					"!doc": "Sets the end position of a Range relative to another Node."
				},
				"setEndAfter": {
					"!type": "fn(node: +Element)",
					"!url": "https://developer.mozilla.org/en/docs/DOM/range.setEndAfter",
					"!doc": "Sets the end position of a Range relative to another Node."
				},
				"selectNode": {
					"!type": "fn(node: +Element)",
					"!url": "https://developer.mozilla.org/en/docs/DOM/range.selectNode",
					"!doc": "Sets the Range to contain the Node and its contents."
				},
				"selectNodeContents": {
					"!type": "fn(node: +Element)",
					"!url": "https://developer.mozilla.org/en/docs/DOM/range.selectNodeContents",
					"!doc": "Sets the Range to contain the contents of a Node."
				},
				"collapse": {
					"!type": "fn(toStart: bool)",
					"!url": "https://developer.mozilla.org/en/docs/DOM/range.collapse",
					"!doc": "Collapses the Range to one of its boundary points."
				},
				"cloneContents": {
					"!type": "fn() -> +DocumentFragment",
					"!url": "https://developer.mozilla.org/en/docs/DOM/range.cloneContents",
					"!doc": "Returns a DocumentFragment copying the Nodes of a Range."
				},
				"deleteContents": {
					"!type": "fn()",
					"!url": "https://developer.mozilla.org/en/docs/DOM/range.deleteContents",
					"!doc": "Removes the contents of a Range from the Document."
				},
				"extractContents": {
					"!type": "fn() -> +DocumentFragment",
					"!url": "https://developer.mozilla.org/en/docs/DOM/range.extractContents",
					"!doc": "Moves contents of a Range from the document tree into a DocumentFragment."
				},
				"insertNode": {
					"!type": "fn(node: +Element)",
					"!url": "https://developer.mozilla.org/en/docs/DOM/range.insertNode",
					"!doc": "Insert a node at the start of a Range."
				},
				"surroundContents": {
					"!type": "fn(node: +Element)",
					"!url": "https://developer.mozilla.org/en/docs/DOM/range.surroundContents",
					"!doc": "Moves content of a Range into a new node, placing the new node at the start of the specified range."
				},
				"compareBoundaryPoints": {
					"!type": "fn(how: number, other: +Range) -> number",
					"!url": "https://developer.mozilla.org/en/docs/DOM/range.compareBoundaryPoints",
					"!doc": "Compares the boundary points of two Ranges."
				},
				"cloneRange": {
					"!type": "fn() -> +Range",
					"!url": "https://developer.mozilla.org/en/docs/DOM/range.cloneRange",
					"!doc": "Returns a Range object with boundary points identical to the cloned Range."
				},
				"detach": {
					"!type": "fn()",
					"!url": "https://developer.mozilla.org/en/docs/DOM/range.detach",
					"!doc": "Releases a Range from use to improve performance. This lets the browser choose to release resources associated with this Range. Subsequent attempts to use the detached range will result in a DOMException being thrown with an error code of INVALID_STATE_ERR."
				},
				"END_TO_END": "number",
				"END_TO_START": "number",
				"START_TO_END": "number",
				"START_TO_START": "number"
			},
			"!url": "https://developer.mozilla.org/en/docs/DOM/range.detach",
			"!doc": "Releases a Range from use to improve performance. This lets the browser choose to release resources associated with this Range. Subsequent attempts to use the detached range will result in a DOMException being thrown with an error code of INVALID_STATE_ERR."
		},
		"XMLHttpRequest": {
			"!type": "fn()",
			"prototype": {
				"abort": {
					"!type": "fn()",
					"!url": "https://developer.mozilla.org/en/docs/DOM/XMLHttpRequest",
					"!doc": "Aborts the request if it has already been sent."
				},
				"getAllResponseHeaders": {
					"!type": "fn() -> string",
					"!url": "https://developer.mozilla.org/en/docs/DOM/XMLHttpRequest",
					"!doc": "Returns all the response headers as a string, or null if no response has been received. Note: For multipart requests, this returns the headers from the current part of the request, not from the original channel."
				},
				"getResponseHeader": {
					"!type": "fn(header: string) -> string",
					"!url": "https://developer.mozilla.org/en/docs/DOM/XMLHttpRequest",
					"!doc": "Returns the string containing the text of the specified header, or null if either the response has not yet been received or the header doesn't exist in the response."
				},
				"open": {
					"!type": "fn(method: string, url: string, async?: bool, user?: string, password?: string)",
					"!url": "https://developer.mozilla.org/en/docs/DOM/XMLHttpRequest",
					"!doc": "Initializes a request."
				},
				"overrideMimeType": {
					"!type": "fn(type: string)",
					"!url": "https://developer.mozilla.org/en/docs/DOM/XMLHttpRequest",
					"!doc": "Overrides the MIME type returned by the server."
				},
				"send": {
					"!type": "fn(data?: string)",
					"!url": "https://developer.mozilla.org/en/docs/DOM/XMLHttpRequest",
					"!doc": "Sends the request. If the request is asynchronous (which is the default), this method returns as soon as the request is sent. If the request is synchronous, this method doesn't return until the response has arrived."
				},
				"setRequestHeader": {
					"!type": "fn(header: string, value: string)",
					"!url": "https://developer.mozilla.org/en/docs/DOM/XMLHttpRequest",
					"!doc": "Sets the value of an HTTP request header.You must call setRequestHeader() after open(), but before send()."
				},
				"onreadystatechange": {
					"!type": "fn()",
					"!url": "https://developer.mozilla.org/en/docs/DOM/XMLHttpRequest",
					"!doc": "A JavaScript function object that is called whenever the readyState attribute changes."
				},
				"readyState": {
					"!type": "number",
					"!url": "https://developer.mozilla.org/en/docs/DOM/XMLHttpRequest",
					"!doc": "The state of the request. (0=unsent, 1=opened, 2=headers_received, 3=loading, 4=done)"
				},
				"response": {
					"!type": "+Document",
					"!url": "https://developer.mozilla.org/en/docs/DOM/XMLHttpRequest",
					"!doc": "The response entity body according to responseType, as an ArrayBuffer, Blob, Document, JavaScript object (for \"json\"), or string. This is null if the request is not complete or was not successful."
				},
				"responseText": {
					"!type": "string",
					"!url": "https://developer.mozilla.org/en/docs/DOM/XMLHttpRequest",
					"!doc": "The response to the request as text, or null if the request was unsuccessful or has not yet been sent."
				},
				"responseType": {
					"!type": "string",
					"!url": "https://developer.mozilla.org/en/docs/DOM/XMLHttpRequest",
					"!doc": "Can be set to change the response type."
				},
				"responseXML": {
					"!type": "+Document",
					"!url": "https://developer.mozilla.org/en/docs/DOM/XMLHttpRequest",
					"!doc": "The response to the request as a DOM Document object, or null if the request was unsuccessful, has not yet been sent, or cannot be parsed as XML or HTML."
				},
				"status": {
					"!type": "number",
					"!url": "https://developer.mozilla.org/en/docs/DOM/XMLHttpRequest",
					"!doc": "The status of the response to the request. This is the HTTP result code"
				},
				"statusText": {
					"!type": "string",
					"!url": "https://developer.mozilla.org/en/docs/DOM/XMLHttpRequest",
					"!doc": "The response string returned by the HTTP server. Unlike status, this includes the entire text of the response message (\"200 OK\", for example)."
				},
				"timeout": {
					"!type": "number",
					"!url": "https://developer.mozilla.org/en/docs/DOM/XMLHttpRequest/Synchronous_and_Asynchronous_Requests",
					"!doc": "The number of milliseconds a request can take before automatically being terminated. A value of 0 (which is the default) means there is no timeout."
				},
				"UNSENT": "number",
				"OPENED": "number",
				"HEADERS_RECEIVED": "number",
				"LOADING": "number",
				"DONE": "number"
			},
			"!url": "https://developer.mozilla.org/en/docs/DOM/XMLHttpRequest",
			"!doc": "XMLHttpRequest is a JavaScript object that was designed by Microsoft and adopted by Mozilla, Apple, and Google. It's now being standardized in the W3C. It provides an easy way to retrieve data at a URL. Despite its name, XMLHttpRequest can be used to retrieve any type of data, not just XML, and it supports protocols other than HTTP (including file and ftp)."
		},
		"DOMParser": {
			"!type": "fn()",
			"prototype": {
				"parseFromString": {
					"!type": "fn(data: string, mime: string) -> +Document",
					"!url": "https://developer.mozilla.org/en/docs/DOM/DOMParser",
					"!doc": "DOMParser can parse XML or HTML source stored in a string into a DOM Document. DOMParser is specified in DOM Parsing and Serialization."
				}
			},
			"!url": "https://developer.mozilla.org/en/docs/DOM/DOMParser",
			"!doc": "DOMParser can parse XML or HTML source stored in a string into a DOM Document. DOMParser is specified in DOM Parsing and Serialization."
		},
		"FormData": {
			"!type": "fn()",
			"!url": "https://developer.mozilla.org/en-US/docs/Web/API/FormData",
			"prototype": {
				"append": {
					"!type": "fn(name: string, value: ?, filename: string)",
					"!url": "https://developer.mozilla.org/en-US/docs/Web/API/FormData/append",
					"!doc": "Appends a new value onto an existing key inside a FormData object, or adds the key if it does not already exist."
				},
				"delete": {
					"!type": "fn(name: string)",
					"!url": "https://developer.mozilla.org/en-US/docs/Web/API/FormData/delete",
					"!doc": "Deletes a key/value pair from a FormData object."
				},
				"get": {
					"!type": "fn(name: string)",
					"!url": "https://developer.mozilla.org/en-US/docs/Web/API/FormData/get",
					"!doc": "Returns the first value associated with a given key from within a FormData object."
				},
				"getAll": {
					"!type": "fn(name: string)",
					"!url": "https://developer.mozilla.org/en-US/docs/Web/API/FormData/getAll",
					"!doc": "Returns an array of all the values associated with a given key from within a FormData."
				},
				"has": {
					"!type": "fn(name: string)",
					"!url": "https://developer.mozilla.org/en-US/docs/Web/API/FormData/has",
					"!doc": "Returns a boolean stating whether a FormData object contains a certain key/value pair."
				},
				"set": {
					"!type": "fn(name: string, value: ?, filename: string)",
					"!url": "https://developer.mozilla.org/en-US/docs/Web/API/FormData/set",
					"!doc": "Sets a new value for an existing key inside a FormData object, or adds the key/value if it does not already exist."
				}
			}
		},
		"Selection": {
			"!type": "fn()",
			"prototype": {
				"anchorNode": {
					"!type": "+Element",
					"!url": "https://developer.mozilla.org/en/docs/DOM/Selection/anchorNode",
					"!doc": "Returns the node in which the selection begins."
				},
				"anchorOffset": {
					"!type": "number",
					"!url": "https://developer.mozilla.org/en/docs/DOM/Selection/anchorOffset",
					"!doc": "Returns the number of characters that the selection's anchor is offset within the anchorNode."
				},
				"focusNode": {
					"!type": "+Element",
					"!url": "https://developer.mozilla.org/en/docs/DOM/Selection/focusNode",
					"!doc": "Returns the node in which the selection ends."
				},
				"focusOffset": {
					"!type": "number",
					"!url": "https://developer.mozilla.org/en/docs/DOM/Selection/focusOffset",
					"!doc": "Returns the number of characters that the selection's focus is offset within the focusNode. "
				},
				"isCollapsed": {
					"!type": "bool",
					"!url": "https://developer.mozilla.org/en/docs/DOM/Selection/isCollapsed",
					"!doc": "Returns a boolean indicating whether the selection's start and end points are at the same position."
				},
				"rangeCount": {
					"!type": "number",
					"!url": "https://developer.mozilla.org/en/docs/DOM/Selection/rangeCount",
					"!doc": "Returns the number of ranges in the selection."
				},
				"getRangeAt": {
					"!type": "fn(i: number) -> +Range",
					"!url": "https://developer.mozilla.org/en/docs/DOM/Selection/getRangeAt",
					"!doc": "Returns a range object representing one of the ranges currently selected."
				},
				"collapse": {
					"!type": "fn()",
					"!url": "https://developer.mozilla.org/en/docs/DOM/Selection/collapse",
					"!doc": "Collapses the current selection to a single point. The document is not modified. If the content is focused and editable, the caret will blink there."
				},
				"extend": {
					"!type": "fn(node: +Element, offset: number)",
					"!url": "https://developer.mozilla.org/en/docs/DOM/Selection/extend",
					"!doc": "Moves the focus of the selection to a specified point. The anchor of the selection does not move. The selection will be from the anchor to the new focus regardless of direction."
				},
				"collapseToStart": {
					"!type": "fn()",
					"!url": "https://developer.mozilla.org/en/docs/DOM/Selection/collapseToStart",
					"!doc": "Collapses the selection to the start of the first range in the selection.  If the content of the selection is focused and editable, the caret will blink there."
				},
				"collapseToEnd": {
					"!type": "fn()",
					"!url": "https://developer.mozilla.org/en/docs/DOM/Selection/collapseToEnd",
					"!doc": "Collapses the selection to the end of the last range in the selection.  If the content the selection is in is focused and editable, the caret will blink there."
				},
				"selectAllChildren": {
					"!type": "fn(node: +Element)",
					"!url": "https://developer.mozilla.org/en/docs/DOM/Selection/selectAllChildren",
					"!doc": "Adds all the children of the specified node to the selection. Previous selection is lost."
				},
				"addRange": {
					"!type": "fn(range: +Range)",
					"!url": "https://developer.mozilla.org/en/docs/DOM/Selection/addRange",
					"!doc": "Adds a Range to a Selection."
				},
				"removeRange": {
					"!type": "fn(range: +Range)",
					"!url": "https://developer.mozilla.org/en/docs/DOM/Selection/removeRange",
					"!doc": "Removes a range from the selection."
				},
				"removeAllRanges": {
					"!type": "fn()",
					"!url": "https://developer.mozilla.org/en/docs/DOM/Selection/removeAllRanges",
					"!doc": "Removes all ranges from the selection, leaving the anchorNode and focusNode properties equal to null and leaving nothing selected. "
				},
				"deleteFromDocument": {
					"!type": "fn()",
					"!url": "https://developer.mozilla.org/en/docs/DOM/Selection/deleteFromDocument",
					"!doc": "Deletes the actual text being represented by a selection object from the document's DOM."
				},
				"containsNode": {
					"!type": "fn(node: +Element) -> bool",
					"!url": "https://developer.mozilla.org/en/docs/DOM/Selection/containsNode",
					"!doc": "Indicates if the node is part of the selection."
				}
			},
			"!url": "https://developer.mozilla.org/en/docs/DOM/Selection",
			"!doc": "Selection is the class of the object returned by window.getSelection() and other methods. It represents the text selection in the greater page, possibly spanning multiple elements, when the user drags over static text and other parts of the page. For information about text selection in an individual text editing element."
		},
		"console": {
			"error": {
				"!type": "fn(text: string)",
				"!url": "https://developer.mozilla.org/en/docs/DOM/console.error",
				"!doc": "Outputs an error message to the Web Console."
			},
			"info": {
				"!type": "fn(text: string)",
				"!url": "https://developer.mozilla.org/en/docs/DOM/console.info",
				"!doc": "Outputs an informational message to the Web Console."
			},
			"log": {
				"!type": "fn(text: string)",
				"!url": "https://developer.mozilla.org/en/docs/DOM/console.log",
				"!doc": "Outputs a message to the Web Console."
			},
			"warn": {
				"!type": "fn(text: string)",
				"!url": "https://developer.mozilla.org/en/docs/DOM/console.warn",
				"!doc": "Outputs a warning message to the Web Console."
			},
			"!url": "https://developer.mozilla.org/en/docs/DOM/console",
			"!doc": "The console object provides access to the browser's debugging console. The specifics of how it works vary from browser to browser, but there is a de facto set of features that are typically provided."
		},
		"top": {
			"!type": "<top>",
			"!url": "https://developer.mozilla.org/en/docs/DOM/window.top",
			"!doc": "Returns a reference to the topmost window in the window hierarchy."
		},
		"parent": {
			"!type": "<top>",
			"!url": "https://developer.mozilla.org/en/docs/DOM/window.parent",
			"!doc": "A reference to the parent of the current window or subframe."
		},
		"window": {
			"!type": "<top>",
			"!url": "https://developer.mozilla.org/en/docs/DOM/window",
			"!doc": "The window object represents a window containing a DOM document."
		},
		"opener": {
			"!type": "<top>",
			"!url": "https://developer.mozilla.org/en/docs/DOM/window.opener",
			"!doc": "Returns a reference to the window that opened this current window."
		},
		"self": {
			"!type": "<top>",
			"!url": "https://developer.mozilla.org/en/docs/DOM/window.self",
			"!doc": "Returns an object reference to the window object. "
		},
		"devicePixelRatio": "number",
		"name": {
			"!type": "string",
			"!url": "https://developer.mozilla.org/en/docs/JavaScript/Reference/Global_Objects/Function/name",
			"!doc": "The name of the function."
		},
		"closed": {
			"!type": "bool",
			"!url": "https://developer.mozilla.org/en/docs/DOM/window.closed",
			"!doc": "This property indicates whether the referenced window is closed or not."
		},
		"pageYOffset": {
			"!type": "number",
			"!url": "https://developer.mozilla.org/en/docs/DOM/window.scrollY",
			"!doc": "Returns the number of pixels that the document has already been scrolled vertically."
		},
		"pageXOffset": {
			"!type": "number",
			"!url": "https://developer.mozilla.org/en/docs/DOM/window.scrollX",
			"!doc": "Returns the number of pixels that the document has already been scrolled vertically."
		},
		"scrollY": {
			"!type": "number",
			"!url": "https://developer.mozilla.org/en/docs/DOM/window.scrollY",
			"!doc": "Returns the number of pixels that the document has already been scrolled vertically."
		},
		"scrollX": {
			"!type": "number",
			"!url": "https://developer.mozilla.org/en/docs/DOM/window.scrollX",
			"!doc": "Returns the number of pixels that the document has already been scrolled vertically."
		},
		"screenTop": {
			"!type": "number",
			"!url": "https://developer.mozilla.org/en/docs/DOM/window.screen.top",
			"!doc": "Returns the distance in pixels from the top side of the current screen."
		},
		"screenLeft": {
			"!type": "number",
			"!url": "https://developer.mozilla.org/en/docs/DOM/window.screen.left",
			"!doc": "Returns the distance in pixels from the left side of the main screen to the left side of the current screen."
		},
		"screenY": {
			"!type": "number",
			"!url": "https://developer.mozilla.org/en/docs/DOM/event.screenY",
			"!doc": "Returns the vertical coordinate of the event within the screen as a whole."
		},
		"screenX": {
			"!type": "number",
			"!url": "https://developer.mozilla.org/en/docs/DOM/event.screenX",
			"!doc": "Returns the horizontal coordinate of the event within the screen as a whole."
		},
		"innerWidth": {
			"!type": "number",
			"!url": "https://developer.mozilla.org/en/docs/DOM/window.innerWidth",
			"!doc": "Width (in pixels) of the browser window viewport including, if rendered, the vertical scrollbar."
		},
		"innerHeight": {
			"!type": "number",
			"!url": "https://developer.mozilla.org/en/docs/DOM/window.innerHeight",
			"!doc": "Height (in pixels) of the browser window viewport including, if rendered, the horizontal scrollbar."
		},
		"outerWidth": {
			"!type": "number",
			"!url": "https://developer.mozilla.org/en/docs/DOM/window.outerWidth",
			"!doc": "window.outerWidth gets the width of the outside of the browser window. It represents the width of the whole browser window including sidebar (if expanded), window chrome and window resizing borders/handles."
		},
		"outerHeight": {
			"!type": "number",
			"!url": "https://developer.mozilla.org/en/docs/DOM/window.outerHeight",
			"!doc": "window.outerHeight gets the height in pixels of the whole browser window."
		},
		"frameElement": {
			"!type": "+Element",
			"!url": "https://developer.mozilla.org/en/docs/DOM/window.frameElement",
			"!doc": "Returns the element (such as <iframe> or <object>) in which the window is embedded, or null if the window is top-level."
		},
		"crypto": {
			"getRandomValues": {
				"!type": "fn([number])",
				"!url": "https://developer.mozilla.org/en/docs/DOM/window.crypto.getRandomValues",
				"!doc": "This methods lets you get cryptographically random values."
			},
			"!url": "https://developer.mozilla.org/en/docs/DOM/window.crypto.getRandomValues",
			"!doc": "This methods lets you get cryptographically random values."
		},
		"navigator": {
			"appName": {
				"!type": "string",
				"!url": "https://developer.mozilla.org/en/docs/DOM/window.navigator.appName",
				"!doc": "Returns the name of the browser. The HTML5 specification also allows any browser to return \"Netscape\" here, for compatibility reasons."
			},
			"appVersion": {
				"!type": "string",
				"!url": "https://developer.mozilla.org/en/docs/DOM/window.navigator.appVersion",
				"!doc": "Returns the version of the browser as a string. It may be either a plain version number, like \"5.0\", or a version number followed by more detailed information. The HTML5 specification also allows any browser to return \"4.0\" here, for compatibility reasons."
			},
			"language": {
				"!type": "string",
				"!url": "https://developer.mozilla.org/en/docs/DOM/window.navigator.language",
				"!doc": "Returns a string representing the language version of the browser."
			},
			"platform": {
				"!type": "string",
				"!url": "https://developer.mozilla.org/en/docs/DOM/window.navigator.platform",
				"!doc": "Returns a string representing the platform of the browser."
			},
			"plugins": {
				"!type": "[?]",
				"!url": "https://developer.mozilla.org/en/docs/DOM/window.navigator.plugins",
				"!doc": "Returns a PluginArray object, listing the plugins installed in the application."
			},
			"userAgent": {
				"!type": "string",
				"!url": "https://developer.mozilla.org/en/docs/DOM/window.navigator.userAgent",
				"!doc": "Returns the user agent string for the current browser."
			},
			"vendor": {
				"!type": "string",
				"!url": "https://developer.mozilla.org/en/docs/DOM/window.navigator.vendor",
				"!doc": "Returns the name of the browser vendor for the current browser."
			},
			"javaEnabled": {
				"!type": "bool",
				"!url": "https://developer.mozilla.org/en/docs/DOM/window.navigator.javaEnabled",
				"!doc": "This method indicates whether the current browser is Java-enabled or not."
			},
			"!url": "https://developer.mozilla.org/en/docs/DOM/window.navigator",
			"!doc": "Returns a reference to the navigator object, which can be queried for information about the application running the script."
		},
		"history": {
			"state": {
				"!type": "?",
				"!url": "https://developer.mozilla.org/en/docs/DOM/Manipulating_the_browser_history",
				"!doc": "The DOM window object provides access to the browser's history through the history object. It exposes useful methods and properties that let you move back and forth through the user's history, as well as -- starting with HTML5 -- manipulate the contents of the history stack."
			},
			"length": {
				"!type": "number",
				"!url": "https://developer.mozilla.org/en/docs/DOM/Manipulating_the_browser_history",
				"!doc": "The DOM window object provides access to the browser's history through the history object. It exposes useful methods and properties that let you move back and forth through the user's history, as well as -- starting with HTML5 -- manipulate the contents of the history stack."
			},
			"go": {
				"!type": "fn(delta: number)",
				"!url": "https://developer.mozilla.org/en/docs/DOM/window.history",
				"!doc": "Returns a reference to the History object, which provides an interface for manipulating the browser session history (pages visited in the tab or frame that the current page is loaded in)."
			},
			"forward": {
				"!type": "fn()",
				"!url": "https://developer.mozilla.org/en/docs/DOM/Manipulating_the_browser_history",
				"!doc": "The DOM window object provides access to the browser's history through the history object. It exposes useful methods and properties that let you move back and forth through the user's history, as well as -- starting with HTML5 -- manipulate the contents of the history stack."
			},
			"back": {
				"!type": "fn()",
				"!url": "https://developer.mozilla.org/en/docs/DOM/Manipulating_the_browser_history",
				"!doc": "The DOM window object provides access to the browser's history through the history object. It exposes useful methods and properties that let you move back and forth through the user's history, as well as -- starting with HTML5 -- manipulate the contents of the history stack."
			},
			"pushState": {
				"!type": "fn(data: ?, title: string, url?: string)",
				"!url": "https://developer.mozilla.org/en/docs/DOM/Manipulating_the_browser_history",
				"!doc": "The DOM window object provides access to the browser's history through the history object. It exposes useful methods and properties that let you move back and forth through the user's history, as well as -- starting with HTML5 -- manipulate the contents of the history stack."
			},
			"replaceState": {
				"!type": "fn(data: ?, title: string, url?: string)",
				"!url": "https://developer.mozilla.org/en/docs/DOM/Manipulating_the_browser_history",
				"!doc": "The DOM window object provides access to the browser's history through the history object. It exposes useful methods and properties that let you move back and forth through the user's history, as well as -- starting with HTML5 -- manipulate the contents of the history stack."
			},
			"!url": "https://developer.mozilla.org/en/docs/DOM/Manipulating_the_browser_history",
			"!doc": "The DOM window object provides access to the browser's history through the history object. It exposes useful methods and properties that let you move back and forth through the user's history, as well as -- starting with HTML5 -- manipulate the contents of the history stack."
		},
		"screen": {
			"availWidth": {
				"!type": "number",
				"!url": "https://developer.mozilla.org/en/docs/DOM/window.screen.availWidth",
				"!doc": "Returns the amount of horizontal space in pixels available to the window."
			},
			"availHeight": {
				"!type": "number",
				"!url": "https://developer.mozilla.org/en/docs/DOM/window.screen.availHeight",
				"!doc": "Returns the amount of vertical space available to the window on the screen."
			},
			"availTop": {
				"!type": "number",
				"!url": "https://developer.mozilla.org/en/docs/DOM/window.screen.availTop",
				"!doc": "Specifies the y-coordinate of the first pixel that is not allocated to permanent or semipermanent user interface features."
			},
			"availLeft": {
				"!type": "number",
				"!url": "https://developer.mozilla.org/en/docs/DOM/window.screen.availLeft",
				"!doc": "Returns the first available pixel available from the left side of the screen."
			},
			"pixelDepth": {
				"!type": "number",
				"!url": "https://developer.mozilla.org/en/docs/DOM/window.screen.pixelDepth",
				"!doc": "Returns the bit depth of the screen."
			},
			"colorDepth": {
				"!type": "number",
				"!url": "https://developer.mozilla.org/en/docs/DOM/window.screen.colorDepth",
				"!doc": "Returns the color depth of the screen."
			},
			"width": {
				"!type": "number",
				"!url": "https://developer.mozilla.org/en/docs/DOM/window.screen.width",
				"!doc": "Returns the width of the screen."
			},
			"height": {
				"!type": "number",
				"!url": "https://developer.mozilla.org/en/docs/DOM/window.screen.height",
				"!doc": "Returns the height of the screen in pixels."
			},
			"!url": "https://developer.mozilla.org/en/docs/DOM/window.screen",
			"!doc": "Returns a reference to the screen object associated with the window."
		},
		"postMessage": {
			"!type": "fn(message: string, targetOrigin: string)",
			"!url": "https://developer.mozilla.org/en/docs/DOM/window.postMessage",
			"!doc": "window.postMessage, when called, causes a MessageEvent to be dispatched at the target window when any pending script that must be executed completes (e.g. remaining event handlers if window.postMessage is called from an event handler, previously-set pending timeouts, etc.). The MessageEvent has the type message, a data property which is set to the value of the first argument provided to window.postMessage, an origin property corresponding to the origin of the main document in the window calling window.postMessage at the time window.postMessage was called, and a source property which is the window from which window.postMessage is called. (Other standard properties of events are present with their expected values.)"
		},
		"close": {
			"!type": "fn()",
			"!url": "https://developer.mozilla.org/en/docs/DOM/window.close",
			"!doc": "Closes the current window, or a referenced window."
		},
		"blur": {
			"!type": "fn()",
			"!url": "https://developer.mozilla.org/en/docs/DOM/element.blur",
			"!doc": "The blur method removes keyboard focus from the current element."
		},
		"focus": {
			"!type": "fn()",
			"!url": "https://developer.mozilla.org/en/docs/DOM/element.focus",
			"!doc": "Sets focus on the specified element, if it can be focused."
		},
		"onload": {
			"!type": "?",
			"!url": "https://developer.mozilla.org/en/docs/DOM/window.onload",
			"!doc": "An event handler for the load event of a window."
		},
		"onunload": {
			"!type": "?",
			"!url": "https://developer.mozilla.org/en/docs/DOM/window.onunload",
			"!doc": "The unload event is raised when the window is unloading its content and resources. The resources removal is processed after the unload event occurs."
		},
		"onscroll": {
			"!type": "?",
			"!url": "https://developer.mozilla.org/en/docs/DOM/window.onscroll",
			"!doc": "Specifies the function to be called when the window is scrolled."
		},
		"onresize": {
			"!type": "?",
			"!url": "https://developer.mozilla.org/en/docs/DOM/window.onresize",
			"!doc": "An event handler for the resize event on the window."
		},
		"ononline": {
			"!type": "?",
			"!url": "https://developer.mozilla.org/en/docs/DOM/document.ononline",
			"!doc": "\"online\" event is fired when the browser switches between online and offline mode."
		},
		"onoffline": {
			"!type": "?",
			"!url": "https://developer.mozilla.org/en/docs/Online_and_offline_events",
			"!doc": "Some browsers implement Online/Offline events from the WHATWG Web Applications 1.0 specification."
		},
		"onmousewheel": {
			"!type": "?",
			"!url": "https://developer.mozilla.org/en/docs/DOM/DOM_event_reference/mousewheel",
			"!doc": "The DOM mousewheel event is fired asynchronously when mouse wheel or similar device is operated. It's represented by the MouseWheelEvent interface."
		},
		"onmouseup": {
			"!type": "?",
			"!url": "https://developer.mozilla.org/en/docs/DOM/window.onmouseup",
			"!doc": "An event handler for the mouseup event on the window."
		},
		"onmouseover": {
			"!type": "?",
			"!url": "https://developer.mozilla.org/en/docs/DOM/element.onmouseover",
			"!doc": "The onmouseover property returns the onMouseOver event handler code on the current element."
		},
		"onmouseout": {
			"!type": "?",
			"!url": "https://developer.mozilla.org/en/docs/DOM/element.onmouseout",
			"!doc": "The onmouseout property returns the onMouseOut event handler code on the current element."
		},
		"onmousemove": {
			"!type": "?",
			"!url": "https://developer.mozilla.org/en/docs/DOM/element.onmousemove",
			"!doc": "The onmousemove property returns the mousemove event handler code on the current element."
		},
		"onmousedown": {
			"!type": "?",
			"!url": "https://developer.mozilla.org/en/docs/DOM/window.onmousedown",
			"!doc": "An event handler for the mousedown event on the window."
		},
		"onclick": {
			"!type": "?",
			"!url": "https://developer.mozilla.org/en/docs/DOM/element.onclick",
			"!doc": "The onclick property returns the onClick event handler code on the current element."
		},
		"ondblclick": {
			"!type": "?",
			"!url": "https://developer.mozilla.org/en/docs/DOM/element.ondblclick",
			"!doc": "The ondblclick property returns the onDblClick event handler code on the current element."
		},
		"onmessage": {
			"!type": "?",
			"!url": "https://developer.mozilla.org/en/docs/DOM/Worker",
			"!doc": "Dedicated Web Workers provide a simple means for web content to run scripts in background threads.  Once created, a worker can send messages to the spawning task by posting messages to an event handler specified by the creator."
		},
		"onkeyup": {
			"!type": "?",
			"!url": "https://developer.mozilla.org/en/docs/DOM/element.onkeyup",
			"!doc": "The onkeyup property returns the onKeyUp event handler code for the current element."
		},
		"onkeypress": {
			"!type": "?",
			"!url": "https://developer.mozilla.org/en/docs/DOM/element.onkeypress",
			"!doc": "The onkeypress property sets and returns the onKeyPress event handler code for the current element."
		},
		"onkeydown": {
			"!type": "?",
			"!url": "https://developer.mozilla.org/en/docs/DOM/window.onkeydown",
			"!doc": "An event handler for the keydown event on the window."
		},
		"oninput": {
			"!type": "?",
			"!url": "https://developer.mozilla.org/en/docs/DOM/DOM_event_reference/input",
			"!doc": "The DOM input event is fired synchronously when the value of an <input> or <textarea> element is changed. Additionally, it's also fired on contenteditable editors when its contents are changed. In this case, the event target is the editing host element. If there are two or more elements which have contenteditable as true, \"editing host\" is the nearest ancestor element whose parent isn't editable. Similarly, it's also fired on root element of designMode editors."
		},
		"onpopstate": {
			"!type": "?",
			"!url": "https://developer.mozilla.org/en/docs/DOM/window.onpopstate",
			"!doc": "An event handler for the popstate event on the window."
		},
		"onhashchange": {
			"!type": "?",
			"!url": "https://developer.mozilla.org/en/docs/DOM/window.onhashchange",
			"!doc": "The hashchange event fires when a window's hash changes."
		},
		"onfocus": {
			"!type": "?",
			"!url": "https://developer.mozilla.org/en/docs/DOM/element.onfocus",
			"!doc": "The onfocus property returns the onFocus event handler code on the current element."
		},
		"onblur": {
			"!type": "?",
			"!url": "https://developer.mozilla.org/en/docs/DOM/element.onblur",
			"!doc": "The onblur property returns the onBlur event handler code, if any, that exists on the current element."
		},
		"onerror": {
			"!type": "?",
			"!url": "https://developer.mozilla.org/en/docs/DOM/window.onerror",
			"!doc": "An event handler for runtime script errors."
		},
		"ondrop": {
			"!type": "?",
			"!url": "https://developer.mozilla.org/en-US/docs/DOM/Mozilla_event_reference/drop",
			"!doc": "The drop event is fired when an element or text selection is dropped on a valid drop target."
		},
		"ondragstart": {
			"!type": "?",
			"!url": "https://developer.mozilla.org/en-US/docs/DOM/Mozilla_event_reference/dragstart",
			"!doc": "The dragstart event is fired when the user starts dragging an element or text selection."
		},
		"ondragover": {
			"!type": "?",
			"!url": "https://developer.mozilla.org/en-US/docs/DOM/Mozilla_event_reference/dragover",
			"!doc": "The dragover event is fired when an element or text selection is being dragged over a valid drop target (every few hundred milliseconds)."
		},
		"ondragleave": {
			"!type": "?",
			"!url": "https://developer.mozilla.org/en-US/docs/DOM/Mozilla_event_reference/dragleave",
			"!doc": "The dragleave event is fired when a dragged element or text selection leaves a valid drop target."
		},
		"ondragenter": {
			"!type": "?",
			"!url": "https://developer.mozilla.org/en-US/docs/DOM/Mozilla_event_reference/dragenter",
			"!doc": "The dragenter event is fired when a dragged element or text selection enters a valid drop target."
		},
		"ondragend": {
			"!type": "?",
			"!url": "https://developer.mozilla.org/en-US/docs/DOM/Mozilla_event_reference/dragend",
			"!doc": "The dragend event is fired when a drag operation is being ended (by releasing a mouse button or hitting the escape key)."
		},
		"ondrag": {
			"!type": "?",
			"!url": "https://developer.mozilla.org/en-US/docs/DOM/Mozilla_event_reference/drag",
			"!doc": "The drag event is fired when an element or text selection is being dragged (every few hundred milliseconds)."
		},
		"oncontextmenu": {
			"!type": "?",
			"!url": "https://developer.mozilla.org/en/docs/DOM/window.oncontextmenu",
			"!doc": "An event handler property for right-click events on the window. Unless the default behavior is prevented, the browser context menu will activate (though IE8 has a bug with this and will not activate the context menu if a contextmenu event handler is defined). Note that this event will occur with any non-disabled right-click event and does not depend on an element possessing the \"contextmenu\" attribute."
		},
		"onchange": {
			"!type": "?",
			"!url": "https://developer.mozilla.org/en/docs/DOM/element.onchange",
			"!doc": "The onchange property sets and returns the onChange event handler code for the current element."
		},
		"onbeforeunload": {
			"!type": "?",
			"!url": "https://developer.mozilla.org/en/docs/DOM/window.onbeforeunload",
			"!doc": "An event that fires when a window is about to unload its resources. The document is still visible and the event is still cancelable."
		},
		"onabort": {
			"!type": "?",
			"!url": "https://developer.mozilla.org/en/docs/DOM/window.onabort",
			"!doc": "An event handler for abort events sent to the window."
		},
		"getSelection": {
			"!type": "fn() -> +Selection",
			"!url": "https://developer.mozilla.org/en/docs/DOM/window.getSelection",
			"!doc": "Returns a selection object representing the range of text selected by the user. "
		},
		"alert": {
			"!type": "fn(message: string)",
			"!url": "https://developer.mozilla.org/en/docs/DOM/window.alert",
			"!doc": "Display an alert dialog with the specified content and an OK button."
		},
		"confirm": {
			"!type": "fn(message: string) -> bool",
			"!url": "https://developer.mozilla.org/en/docs/DOM/window.confirm",
			"!doc": "Displays a modal dialog with a message and two buttons, OK and Cancel."
		},
		"prompt": {
			"!type": "fn(message: string, value: string) -> string",
			"!url": "https://developer.mozilla.org/en/docs/DOM/window.prompt",
			"!doc": "Displays a dialog with a message prompting the user to input some text."
		},
		"scrollBy": {
			"!type": "fn(x: number, y: number)",
			"!url": "https://developer.mozilla.org/en/docs/DOM/window.scrollBy",
			"!doc": "Scrolls the document in the window by the given amount."
		},
		"scrollTo": {
			"!type": "fn(x: number, y: number)",
			"!url": "https://developer.mozilla.org/en/docs/DOM/window.scrollTo",
			"!doc": "Scrolls to a particular set of coordinates in the document."
		},
		"scroll": {
			"!type": "fn(x: number, y: number)",
			"!url": "https://developer.mozilla.org/en/docs/DOM/window.scroll",
			"!doc": "Scrolls the window to a particular place in the document."
		},
		"setTimeout": {
			"!type": "fn(f: fn(), ms: number) -> number",
			"!url": "https://developer.mozilla.org/en/docs/DOM/window.setTimeout",
			"!doc": "Calls a function or executes a code snippet after specified delay."
		},
		"clearTimeout": {
			"!type": "fn(timeout: number)",
			"!url": "https://developer.mozilla.org/en/docs/DOM/window.clearTimeout",
			"!doc": "Clears the delay set by window.setTimeout()."
		},
		"setInterval": {
			"!type": "fn(f: fn(), ms: number) -> number",
			"!url": "https://developer.mozilla.org/en/docs/DOM/window.setInterval",
			"!doc": "Calls a function or executes a code snippet repeatedly, with a fixed time delay between each call to that function."
		},
		"clearInterval": {
			"!type": "fn(interval: number)",
			"!url": "https://developer.mozilla.org/en/docs/DOM/window.clearInterval",
			"!doc": "Cancels repeated action which was set up using setInterval."
		},
		"atob": {
			"!type": "fn(encoded: string) -> string",
			"!url": "https://developer.mozilla.org/en/docs/DOM/window.atob",
			"!doc": "Decodes a string of data which has been encoded using base-64 encoding."
		},
		"btoa": {
			"!type": "fn(data: string) -> string",
			"!url": "https://developer.mozilla.org/en/docs/DOM/window.btoa",
			"!doc": "Creates a base-64 encoded ASCII string from a string of binary data."
		},
		"addEventListener": {
			"!type": "fn(type: string, listener: fn(e: +Event), capture: bool)",
			"!url": "https://developer.mozilla.org/en/docs/DOM/EventTarget.addEventListener",
			"!doc": "Registers a single event listener on a single target. The event target may be a single element in a document, the document itself, a window, or an XMLHttpRequest."
		},
		"removeEventListener": {
			"!type": "fn(type: string, listener: fn(), capture: bool)",
			"!url": "https://developer.mozilla.org/en/docs/DOM/EventTarget.removeEventListener",
			"!doc": "Allows the removal of event listeners from the event target."
		},
		"dispatchEvent": {
			"!type": "fn(event: +Event) -> bool",
			"!url": "https://developer.mozilla.org/en/docs/DOM/EventTarget.dispatchEvent",
			"!doc": "Dispatches an event into the event system. The event is subject to the same capturing and bubbling behavior as directly dispatched events."
		},
		"getComputedStyle": {
			"!type": "fn(node: +Element, pseudo?: string) -> Element.prototype.style",
			"!url": "https://developer.mozilla.org/en/docs/DOM/window.getComputedStyle",
			"!doc": "Gives the final used values of all the CSS properties of an element."
		},
		"CanvasRenderingContext2D": {
			"canvas": "+Element",
			"width": "number",
			"height": "number",
			"commit": "fn()",
			"save": "fn()",
			"restore": "fn()",
			"currentTransform": "?",
			"scale": "fn(x: number, y: number)",
			"rotate": "fn(angle: number)",
			"translate": "fn(x: number, y: number)",
			"transform": "fn(a: number, b: number, c: number, d: number, e: number, f: number)",
			"setTransform": "fn(a: number, b: number, c: number, d: number, e: number, f: number)",
			"resetTransform": "fn()",
			"globalAlpha": "number",
			"globalCompositeOperation": "string",
			"imageSmoothingEnabled": "bool",
			"strokeStyle": "string",
			"fillStyle": "string",
			"createLinearGradient": "fn(x0: number, y0: number, x1: number, y1: number) -> ?",
			"createPattern": "fn(image: ?, repetition: string) -> ?",
			"shadowOffsetX": "number",
			"shadowOffsetY": "number",
			"shadowBlur": "number",
			"shadowColor": "string",
			"clearRect": "fn(x: number, y: number, w: number, h: number)",
			"fillRect": "fn(x: number, y: number, w: number, h: number)",
			"strokeRect": "fn(x: number, y: number, w: number, h: number)",
			"fillRule": "string",
			"fill": "fn()",
			"beginPath": "fn()",
			"stroke": "fn()",
			"clip": "fn()",
			"resetClip": "fn()",
			"fillText": "fn(text: string, x: number, y: number, maxWidth: number)",
			"strokeText": "fn(text: string, x: number, y: number, maxWidth: number)",
			"measureText": "fn(text: string) -> ?",
			"drawImage": "fn(image: ?, dx: number, dy: number)",
			"createImageData": "fn(sw: number, sh: number) -> ?",
			"getImageData": "fn(sx: number, sy: number, sw: number, sh: number) -> ?",
			"putImageData": "fn(imagedata: ?, dx: number, dy: number)",
			"lineWidth": "number",
			"lineCap": "string",
			"lineJoin": "string",
			"miterLimit": "number",
			"setLineDash": "fn(segments: [number])",
			"getLineDash": "fn() -> [number]",
			"lineDashOffset": "number",
			"font": "string",
			"textAlign": "string",
			"textBaseline": "string",
			"direction": "string",
			"closePath": "fn()",
			"moveTo": "fn(x: number, y: number)",
			"lineTo": "fn(x: number, y: number)",
			"quadraticCurveTo": "fn(cpx: number, cpy: number, x: number, y: number)",
			"bezierCurveTo": "fn(cp1x: number, cp1y: number, cp2x: number, cp2y: number, x: number, y: number)",
			"arcTo": "fn(x1: number, y1: number, x2: number, y2: number, radius: number)",
			"rect": "fn(x: number, y: number, w: number, h: number)",
			"arc": "fn(x: number, y: number, radius: number, startAngle: number, endAngle: number, anticlockwise?: bool)",
			"ellipse": "fn(x: number, y: number, radiusX: number, radiusY: number, rotation: number, startAngle: number, endAngle: number, anticlockwise: bool)"
		}
	};

/***/ },
/* 21 */
/***/ function(module, exports) {

	module.exports = {
		"!name": "chai",
		"chai": {
			"should": {
				"Language": {
					"!doc": "Language Chains\n\n\n\nThe following are provided as chainable getters to\nimprove the readability of your assertions. They\ndo not provide an testing capability unless they\nhave been overwritten by a plugin.Chains\n\n",
					"!url": "http://chaijs.com/api/bdd/#Language",
					"!type": "fn() -> bool"
				},
				"not": {
					"!doc": ".not\n\n\n\nNegates any of assertions following in the chain.\n\nexpect(foo).to.not.equal('bar');\nexpect(goodFn).to.not.throw(Error);\nexpect({ foo: 'baz' }).to.have.property('foo')\n  .and.not.equal('bar');",
					"!url": "http://chaijs.com/api/bdd/#not",
					"!type": "fn() -> bool"
				},
				"deep": {
					"!doc": ".deep\n\n\n\nSets the deep flag, later used by the equal and\nproperty assertions.\n\nexpect(foo).to.deep.equal({ bar: 'baz' });\nexpect({ foo: { bar: { baz: 'quux' } } })\n  .to.have.deep.property('foo.bar.baz', 'quux');",
					"!url": "http://chaijs.com/api/bdd/#deep",
					"!type": "fn() -> bool"
				},
				"a": {
					"!doc": ".a(type)\n\n  * @param { String } type\n  * @param { String } message_optional_\n\nThe a and an assertions are aliases that can be\nused either as language chains or to assert a value's\ntype.\n\n// typeof\nexpect('test').to.be.a('string');\nexpect({ foo: 'bar' }).to.be.an('object');\nexpect(null).to.be.a('null');\nexpect(undefined).to.be.an('undefined');\n\n// language chain\nexpect(foo).to.be.an.instanceof(Foo);",
					"!url": "http://chaijs.com/api/bdd/#a",
					"!type": "fn(type: string, message: string) -> bool"
				},
				"include": {
					"!doc": ".include(value)\n\n  * @param { Object | String | Number } obj\n  * @param { String } message_optional_\n\nThe include and contain assertions can be used as either property\nbased language chains or as methods to assert the inclusion of an object\nin an array or a substring in a string. When used as language chains,\nthey toggle the contain flag for the keys assertion.\n\nexpect([1,2,3]).to.include(2);\nexpect('foobar').to.contain('foo');\nexpect({ foo: 'bar', hello: 'universe' }).to.include.keys('foo');",
					"!url": "http://chaijs.com/api/bdd/#include",
					"!type": "fn(obj: object, message: string) -> bool"
				},
				"ok": {
					"!doc": ".ok\n\n\n\nAsserts that the target is truthy.\n\nexpect('everthing').to.be.ok;\nexpect(1).to.be.ok;\nexpect(false).to.not.be.ok;\nexpect(undefined).to.not.be.ok;\nexpect(null).to.not.be.ok;",
					"!url": "http://chaijs.com/api/bdd/#ok",
					"!type": "fn() -> bool"
				},
				"true": {
					"!doc": ".true\n\n\n\nAsserts that the target is true.\n\nexpect(true).to.be.true;\nexpect(1).to.not.be.true;",
					"!url": "http://chaijs.com/api/bdd/#true",
					"!type": "fn() -> bool"
				},
				"false": {
					"!doc": ".false\n\n\n\nAsserts that the target is false.\n\nexpect(false).to.be.false;\nexpect(0).to.not.be.false;",
					"!url": "http://chaijs.com/api/bdd/#false",
					"!type": "fn() -> bool"
				},
				"null": {
					"!doc": ".null\n\n\n\nAsserts that the target is null.\n\nexpect(null).to.be.null;\nexpect(undefined).not.to.be.null;",
					"!url": "http://chaijs.com/api/bdd/#null",
					"!type": "fn() -> bool"
				},
				"undefined": {
					"!doc": ".undefined\n\n\n\nAsserts that the target is undefined.\n\nexpect(undefined).to.be.undefined;\nexpect(null).to.not.be.undefined;",
					"!url": "http://chaijs.com/api/bdd/#undefined",
					"!type": "fn() -> bool"
				},
				"exist": {
					"!doc": ".exist\n\n\n\nAsserts that the target is neither null nor undefined.\n\nvar foo = 'hi'\n  , bar = null\n  , baz;\n\nexpect(foo).to.exist;\nexpect(bar).to.not.exist;\nexpect(baz).to.not.exist;",
					"!url": "http://chaijs.com/api/bdd/#exist",
					"!type": "fn() -> bool"
				},
				"empty": {
					"!doc": ".empty\n\n\n\nAsserts that the target's length is 0. For arrays, it checks\nthe length property. For objects, it gets the count of\nenumerable keys.\n\nexpect([]).to.be.empty;\nexpect('').to.be.empty;\nexpect({}).to.be.empty;",
					"!url": "http://chaijs.com/api/bdd/#empty",
					"!type": "fn() -> bool"
				},
				"arguments": {
					"!doc": ".arguments\n\n\n\nAsserts that the target is an arguments object.\n\nfunction test () {\n  expect(arguments).to.be.arguments;\n}",
					"!url": "http://chaijs.com/api/bdd/#arguments",
					"!type": "fn() -> bool"
				},
				"equal": {
					"!doc": ".equal(value)\n\n  * @param { Mixed } value\n  * @param { String } message_optional_\n\nAsserts that the target is strictly equal (===) to value.\nAlternately, if the deep flag is set, asserts that\nthe target is deeply equal to value.\n\nexpect('hello').to.equal('hello');\nexpect(42).to.equal(42);\nexpect(1).to.not.equal(true);\nexpect({ foo: 'bar' }).to.not.equal({ foo: 'bar' });\nexpect({ foo: 'bar' }).to.deep.equal({ foo: 'bar' });",
					"!url": "http://chaijs.com/api/bdd/#equal",
					"!type": "fn(value: mixed, message: string) -> bool"
				},
				"eql": {
					"!doc": ".eql(value)\n\n  * @param { Mixed } value\n  * @param { String } message_optional_\n\nAsserts that the target is deeply equal to value.\n\nexpect({ foo: 'bar' }).to.eql({ foo: 'bar' });\nexpect([ 1, 2, 3 ]).to.eql([ 1, 2, 3 ]);",
					"!url": "http://chaijs.com/api/bdd/#eql",
					"!type": "fn(value: mixed, message: string) -> bool"
				},
				"above": {
					"!doc": ".above(value)\n\n  * @param { Number } value\n  * @param { String } message_optional_\n\nAsserts that the target is greater than value.Can also be used in conjunction with length to\nassert a minimum length. The benefit being a\nmore informative error message than if the length\nwas supplied directly.\n\nexpect(10).to.be.above(5);expect('foo').to.have.length.above(2);\nexpect([ 1, 2, 3 ]).to.have.length.above(2);",
					"!url": "http://chaijs.com/api/bdd/#above",
					"!type": "fn(value: number, message: string) -> bool"
				},
				"least": {
					"!doc": ".least(value)\n\n  * @param { Number } value\n  * @param { String } message_optional_\n\nAsserts that the target is greater than or equal to value.Can also be used in conjunction with length to\nassert a minimum length. The benefit being a\nmore informative error message than if the length\nwas supplied directly.\n\nexpect(10).to.be.at.least(10);expect('foo').to.have.length.of.at.least(2);\nexpect([ 1, 2, 3 ]).to.have.length.of.at.least(3);",
					"!url": "http://chaijs.com/api/bdd/#least",
					"!type": "fn(value: number, message: string) -> bool"
				},
				"below": {
					"!doc": ".below(value)\n\n  * @param { Number } value\n  * @param { String } message_optional_\n\nAsserts that the target is less than value.Can also be used in conjunction with length to\nassert a maximum length. The benefit being a\nmore informative error message than if the length\nwas supplied directly.\n\nexpect(5).to.be.below(10);expect('foo').to.have.length.below(4);\nexpect([ 1, 2, 3 ]).to.have.length.below(4);",
					"!url": "http://chaijs.com/api/bdd/#below",
					"!type": "fn(value: number, message: string) -> bool"
				},
				"most": {
					"!doc": ".most(value)\n\n  * @param { Number } value\n  * @param { String } message_optional_\n\nAsserts that the target is less than or equal to value.Can also be used in conjunction with length to\nassert a maximum length. The benefit being a\nmore informative error message than if the length\nwas supplied directly.\n\nexpect(5).to.be.at.most(5);expect('foo').to.have.length.of.at.most(4);\nexpect([ 1, 2, 3 ]).to.have.length.of.at.most(3);",
					"!url": "http://chaijs.com/api/bdd/#most",
					"!type": "fn(value: number, message: string) -> bool"
				},
				"within": {
					"!doc": ".within(start, finish)\n\n  * @param { Number } startlowerbound inclusive\n  * @param { Number } finishupperbound inclusive\n  * @param { String } message_optional_\n\nAsserts that the target is within a range.Can also be used in conjunction with length to\nassert a length range. The benefit being a\nmore informative error message than if the length\nwas supplied directly.\n\nexpect(7).to.be.within(5,10);expect('foo').to.have.length.within(2,4);\nexpect([ 1, 2, 3 ]).to.have.length.within(2,4);",
					"!url": "http://chaijs.com/api/bdd/#within",
					"!type": "fn(start: number, finish: number, message: string) -> bool"
				},
				"instanceof": {
					"!doc": ".instanceof(constructor)\n\n  * @param { Constructor } constructor\n  * @param { String } message_optional_\n\nAsserts that the target is an instance of constructor.\n\nvar Tea = function (name) { this.name = name; }\n  , Chai = new Tea('chai');\n\nexpect(Chai).to.be.an.instanceof(Tea);\nexpect([ 1, 2, 3 ]).to.be.instanceof(Array);",
					"!url": "http://chaijs.com/api/bdd/#instanceof",
					"!type": "fn(constructor: constructor, message: string) -> bool"
				},
				"property": {
					"!doc": ".property(name, [value])\n\n  * @param { String } name\n  * @param { Mixed } value(optional)\n  * @param { String } message_optional_\n\nAsserts that the target has a property name, optionally asserting that\nthe value of that property is strictly equal to  value.\nIf the deep flag is set, you can use dot- and bracket-notation for deep\nreferences into objects and arrays.You can also use an array as the starting point of a deep.property\nassertion, or traverse nested arrays.Furthermore, property changes the subject of the assertion\nto be the value of that property from the original object. This\npermits for further chainable assertions on that property.\n\n// simple referencing\nvar obj = { foo: 'bar' };\nexpect(obj).to.have.property('foo');\nexpect(obj).to.have.property('foo', 'bar');\n\n// deep referencing\nvar deepObj = {\n    green: { tea: 'matcha' }\n  , teas: [ 'chai', 'matcha', { tea: 'konacha' } ]\n};\n\nexpect(deepObj).to.have.deep.property('green.tea', 'matcha');\nexpect(deepObj).to.have.deep.property('teas[1]', 'matcha');\nexpect(deepObj).to.have.deep.property('teas[2].tea', 'konacha');var arr = [\n    [ 'chai', 'matcha', 'konacha' ]\n  , [ { tea: 'chai' }\n    , { tea: 'matcha' }\n    , { tea: 'konacha' } ]\n];\n\nexpect(arr).to.have.deep.property('[0][1]', 'matcha');\nexpect(arr).to.have.deep.property('[1][2].tea', 'konacha');expect(obj).to.have.property('foo')\n  .that.is.a('string');\nexpect(deepObj).to.have.property('green')\n  .that.is.an('object')\n  .that.deep.equals({ tea: 'matcha' });\nexpect(deepObj).to.have.property('teas')\n  .that.is.an('array')\n  .with.deep.property('[2]')\n    .that.deep.equals({ tea: 'konacha' });",
					"!url": "http://chaijs.com/api/bdd/#property",
					"!type": "fn(name: string, value: [mixed], message: string) -> bool"
				},
				"ownProperty": {
					"!doc": ".ownProperty(name)\n\n  * @param { String } name\n  * @param { String } message_optional_\n\nAsserts that the target has an own property name.\n\nexpect('test').to.have.ownProperty('length');",
					"!url": "http://chaijs.com/api/bdd/#ownProperty",
					"!type": "fn(name: string, message: string) -> bool"
				},
				"length": {
					"!doc": ".length(value)\n\n  * @param { Number } length\n  * @param { String } message_optional_\n\nAsserts that the target's length property has\nthe expected value.Can also be used as a chain precursor to a value\ncomparison for the length property.\n\nexpect([ 1, 2, 3]).to.have.length(3);\nexpect('foobar').to.have.length(6);expect('foo').to.have.length.above(2);\nexpect([ 1, 2, 3 ]).to.have.length.above(2);\nexpect('foo').to.have.length.below(4);\nexpect([ 1, 2, 3 ]).to.have.length.below(4);\nexpect('foo').to.have.length.within(2,4);\nexpect([ 1, 2, 3 ]).to.have.length.within(2,4);",
					"!url": "http://chaijs.com/api/bdd/#length",
					"!type": "fn(length: number, message: string) -> bool"
				},
				"match": {
					"!doc": ".match(regexp)\n\n  * @param { RegExp } RegularExpression\n  * @param { String } message_optional_\n\nAsserts that the target matches a regular expression.\n\nexpect('foobar').to.match(/^foo/);",
					"!url": "http://chaijs.com/api/bdd/#match",
					"!type": "fn(RegularExpression: regexp, message: string) -> bool"
				},
				"string": {
					"!doc": ".string(string)\n\n  * @param { String } string\n  * @param { String } message_optional_\n\nAsserts that the string target contains another string.\n\nexpect('foobar').to.have.string('bar');",
					"!url": "http://chaijs.com/api/bdd/#string",
					"!type": "fn(string: string, message: string) -> bool"
				},
				"keys": {
					"!doc": ".keys(key1, [key2], [...])\n\n  * @param { String... | Array } keys\n\nAsserts that the target has exactly the given keys, or\nasserts the inclusion of some keys when using the\ninclude or contain modifiers.\n\nexpect({ foo: 1, bar: 2 }).to.have.keys(['foo', 'bar']);\nexpect({ foo: 1, bar: 2, baz: 3 }).to.contain.keys('foo', 'bar');",
					"!url": "http://chaijs.com/api/bdd/#keys",
					"!type": "fn(keys: string) -> bool"
				},
				"throw": {
					"!doc": ".throw(constructor)\n\n  * @param { ErrorConstructor } constructor\n  * @param { String | RegExp } expectederror message\n  * @param { String } message_optional_\n  * @seehttps://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types  \n\nAsserts that the function target will throw a specific error, or specific type of error\n(as determined using instanceof), optionally with a RegExp or string inclusion test\nfor the error's message.Please note that when a throw expectation is negated, it will check each\nparameter independently, starting with error constructor type. The appropriate way\nto check for the existence of a type of error but for a message that does not match\nis to use and.\n\nvar err = new ReferenceError('This is a bad function.');\nvar fn = function () { throw err; }\nexpect(fn).to.throw(ReferenceError);\nexpect(fn).to.throw(Error);\nexpect(fn).to.throw(/bad function/);\nexpect(fn).to.not.throw('good function');\nexpect(fn).to.throw(ReferenceError, /bad function/);\nexpect(fn).to.throw(err);\nexpect(fn).to.not.throw(new RangeError('Out of range.'));expect(fn).to.throw(ReferenceError)\n   .and.not.throw(/good function/);",
					"!url": "http://chaijs.com/api/bdd/#throw",
					"!type": "fn(constructor: errorconstructor, expected: string, message: string) -> bool"
				},
				"respondTo": {
					"!doc": ".respondTo(method)\n\n  * @param { String } method\n  * @param { String } message_optional_\n\nAsserts that the object or class target will respond to a method.To check if a constructor will respond to a static function,\nset the itself flag.\n\nKlass.prototype.bar = function(){};\nexpect(Klass).to.respondTo('bar');\nexpect(obj).to.respondTo('bar');Klass.baz = function(){};\nexpect(Klass).itself.to.respondTo('baz');",
					"!url": "http://chaijs.com/api/bdd/#respondTo",
					"!type": "fn(method: string, message: string) -> bool"
				},
				"itself": {
					"!doc": ".itself\n\n\n\nSets the itself flag, later used by the respondTo assertion.\n\nfunction Foo() {}\nFoo.bar = function() {}\nFoo.prototype.baz = function() {}\n\nexpect(Foo).itself.to.respondTo('bar');\nexpect(Foo).itself.not.to.respondTo('baz');",
					"!url": "http://chaijs.com/api/bdd/#itself",
					"!type": "fn() -> bool"
				},
				"satisfy": {
					"!doc": ".satisfy(method)\n\n  * @param { Function } matcher\n  * @param { String } message_optional_\n\nAsserts that the target passes a given truth test.\n\nexpect(1).to.satisfy(function(num) { return num > 0; });",
					"!url": "http://chaijs.com/api/bdd/#satisfy",
					"!type": "fn(matcher: function, message: string) -> bool"
				},
				"closeTo": {
					"!doc": ".closeTo(expected, delta)\n\n  * @param { Number } expected\n  * @param { Number } delta\n  * @param { String } message_optional_\n\nAsserts that the target is equal expected, to within a +/- delta range.\n\nexpect(1.5).to.be.closeTo(1, 0.5);",
					"!url": "http://chaijs.com/api/bdd/#closeTo",
					"!type": "fn(expected: number, delta: number, message: string) -> bool"
				},
				"members": {
					"!doc": ".members(set)\n\n  * @param { Array } set\n  * @param { String } message_optional_\n\nAsserts that the target is a superset of set,\nor that the target and set have the same members.\n\nexpect([1, 2, 3]).to.include.members([3, 2]);\nexpect([1, 2, 3]).to.not.include.members([3, 2, 8]);\n\nexpect([4, 2]).to.have.members([2, 4]);\nexpect([5, 2]).to.not.have.members([5, 2, 1]);",
					"!url": "http://chaijs.com/api/bdd/#members",
					"!type": "fn(set: array, message: string) -> bool"
				}
			},
			"assert": {
				"assert": {
					"!doc": "assert(expression, message)\n\n  * @param { Mixed } expressionto test for truthiness\n  * @param { String } messageto display on error\n\nWrite your own test expressions.\n\nassert('foo' !== 'bar', 'foo is not bar');\nassert(Array.isArray([]), 'empty arrays are arrays');",
					"!url": "http://chaijs.com/api/assert/#assert",
					"!type": "fn(expression: mixed, message: string) -> bool"
				},
				"fail": {
					"!doc": ".fail(actual, expected, [message], [operator])\n\n  * @param { Mixed } actual\n  * @param { Mixed } expected\n  * @param { String } message\n  * @param { String } operator\n\nThrow a failure. Node.js assert module-compatible.\n\n",
					"!url": "http://chaijs.com/api/assert/#fail",
					"!type": "fn(actual: mixed, expected: mixed, message: [string], operator: [string]) -> bool"
				},
				"ok": {
					"!doc": ".ok(object, [message])\n\n  * @param { Mixed } objectto test\n  * @param { String } message\n\nAsserts that object is truthy.\n\nassert.ok('everything', 'everything is ok');\nassert.ok(false, 'this will fail');",
					"!url": "http://chaijs.com/api/assert/#ok",
					"!type": "fn(object: mixed, message: [string]) -> bool"
				},
				"notOk": {
					"!doc": ".notOk(object, [message])\n\n  * @param { Mixed } objectto test\n  * @param { String } message\n\nAsserts that object is falsy.\n\nassert.notOk('everything', 'this will fail');\nassert.notOk(false, 'this will pass');",
					"!url": "http://chaijs.com/api/assert/#notOk",
					"!type": "fn(object: mixed, message: [string]) -> bool"
				},
				"equal": {
					"!doc": ".equal(actual, expected, [message])\n\n  * @param { Mixed } actual\n  * @param { Mixed } expected\n  * @param { String } message\n\nAsserts non-strict equality (==) of actual and expected.\n\nassert.equal(3, '3', '== coerces values to strings');",
					"!url": "http://chaijs.com/api/assert/#equal",
					"!type": "fn(actual: mixed, expected: mixed, message: [string]) -> bool"
				},
				"notEqual": {
					"!doc": ".notEqual(actual, expected, [message])\n\n  * @param { Mixed } actual\n  * @param { Mixed } expected\n  * @param { String } message\n\nAsserts non-strict inequality (!=) of actual and expected.\n\nassert.notEqual(3, 4, 'these numbers are not equal');",
					"!url": "http://chaijs.com/api/assert/#notEqual",
					"!type": "fn(actual: mixed, expected: mixed, message: [string]) -> bool"
				},
				"strictEqual": {
					"!doc": ".strictEqual(actual, expected, [message])\n\n  * @param { Mixed } actual\n  * @param { Mixed } expected\n  * @param { String } message\n\nAsserts strict equality (===) of actual and expected.\n\nassert.strictEqual(true, true, 'these booleans are strictly equal');",
					"!url": "http://chaijs.com/api/assert/#strictEqual",
					"!type": "fn(actual: mixed, expected: mixed, message: [string]) -> bool"
				},
				"notStrictEqual": {
					"!doc": ".notStrictEqual(actual, expected, [message])\n\n  * @param { Mixed } actual\n  * @param { Mixed } expected\n  * @param { String } message\n\nAsserts strict inequality (!==) of actual and expected.\n\nassert.notStrictEqual(3, '3', 'no coercion for strict equality');",
					"!url": "http://chaijs.com/api/assert/#notStrictEqual",
					"!type": "fn(actual: mixed, expected: mixed, message: [string]) -> bool"
				},
				"deepEqual": {
					"!doc": ".deepEqual(actual, expected, [message])\n\n  * @param { Mixed } actual\n  * @param { Mixed } expected\n  * @param { String } message\n\nAsserts that actual is deeply equal to expected.\n\nassert.deepEqual({ tea: 'green' }, { tea: 'green' });",
					"!url": "http://chaijs.com/api/assert/#deepEqual",
					"!type": "fn(actual: mixed, expected: mixed, message: [string]) -> bool"
				},
				"notDeepEqual": {
					"!doc": ".notDeepEqual(actual, expected, [message])\n\n  * @param { Mixed } actual\n  * @param { Mixed } expected\n  * @param { String } message\n\nAssert that actual is not deeply equal to expected.\n\nassert.notDeepEqual({ tea: 'green' }, { tea: 'jasmine' });",
					"!url": "http://chaijs.com/api/assert/#notDeepEqual",
					"!type": "fn(actual: mixed, expected: mixed, message: [string]) -> bool"
				},
				"isTrue": {
					"!doc": ".isTrue(value, [message])\n\n  * @param { Mixed } value\n  * @param { String } message\n\nAsserts that value is true.\n\nvar teaServed = true;\nassert.isTrue(teaServed, 'the tea has been served');",
					"!url": "http://chaijs.com/api/assert/#isTrue",
					"!type": "fn(value: mixed, message: [string]) -> bool"
				},
				"isFalse": {
					"!doc": ".isFalse(value, [message])\n\n  * @param { Mixed } value\n  * @param { String } message\n\nAsserts that value is false.\n\nvar teaServed = false;\nassert.isFalse(teaServed, 'no tea yet? hmm...');",
					"!url": "http://chaijs.com/api/assert/#isFalse",
					"!type": "fn(value: mixed, message: [string]) -> bool"
				},
				"isNull": {
					"!doc": ".isNull(value, [message])\n\n  * @param { Mixed } value\n  * @param { String } message\n\nAsserts that value is null.\n\nassert.isNull(err, 'there was no error');",
					"!url": "http://chaijs.com/api/assert/#isNull",
					"!type": "fn(value: mixed, message: [string]) -> bool"
				},
				"isNotNull": {
					"!doc": ".isNotNull(value, [message])\n\n  * @param { Mixed } value\n  * @param { String } message\n\nAsserts that value is not null.\n\nvar tea = 'tasty chai';\nassert.isNotNull(tea, 'great, time for tea!');",
					"!url": "http://chaijs.com/api/assert/#isNotNull",
					"!type": "fn(value: mixed, message: [string]) -> bool"
				},
				"isUndefined": {
					"!doc": ".isUndefined(value, [message])\n\n  * @param { Mixed } value\n  * @param { String } message\n\nAsserts that value is undefined.\n\nvar tea;\nassert.isUndefined(tea, 'no tea defined');",
					"!url": "http://chaijs.com/api/assert/#isUndefined",
					"!type": "fn(value: mixed, message: [string]) -> bool"
				},
				"isDefined": {
					"!doc": ".isDefined(value, [message])\n\n  * @param { Mixed } value\n  * @param { String } message\n\nAsserts that value is not undefined.\n\nvar tea = 'cup of chai';\nassert.isDefined(tea, 'tea has been defined');",
					"!url": "http://chaijs.com/api/assert/#isDefined",
					"!type": "fn(value: mixed, message: [string]) -> bool"
				},
				"isFunction": {
					"!doc": ".isFunction(value, [message])\n\n  * @param { Mixed } value\n  * @param { String } message\n\nAsserts that value is a function.\n\nfunction serveTea() { return 'cup of tea'; };\nassert.isFunction(serveTea, 'great, we can have tea now');",
					"!url": "http://chaijs.com/api/assert/#isFunction",
					"!type": "fn(value: mixed, message: [string]) -> bool"
				},
				"isNotFunction": {
					"!doc": ".isNotFunction(value, [message])\n\n  * @param { Mixed } value\n  * @param { String } message\n\nAsserts that value is not a function.\n\nvar serveTea = [ 'heat', 'pour', 'sip' ];\nassert.isNotFunction(serveTea, 'great, we have listed the steps');",
					"!url": "http://chaijs.com/api/assert/#isNotFunction",
					"!type": "fn(value: mixed, message: [string]) -> bool"
				},
				"isObject": {
					"!doc": ".isObject(value, [message])\n\n  * @param { Mixed } value\n  * @param { String } message\n\nAsserts that value is an object (as revealed by\nObject.prototype.toString).\n\nvar selection = { name: 'Chai', serve: 'with spices' };\nassert.isObject(selection, 'tea selection is an object');",
					"!url": "http://chaijs.com/api/assert/#isObject",
					"!type": "fn(value: mixed, message: [string]) -> bool"
				},
				"isNotObject": {
					"!doc": ".isNotObject(value, [message])\n\n  * @param { Mixed } value\n  * @param { String } message\n\nAsserts that value is not an object.\n\nvar selection = 'chai'\nassert.isObject(selection, 'tea selection is not an object');\nassert.isObject(null, 'null is not an object');",
					"!url": "http://chaijs.com/api/assert/#isNotObject",
					"!type": "fn(value: mixed, message: [string]) -> bool"
				},
				"isArray": {
					"!doc": ".isArray(value, [message])\n\n  * @param { Mixed } value\n  * @param { String } message\n\nAsserts that value is an array.\n\nvar menu = [ 'green', 'chai', 'oolong' ];\nassert.isArray(menu, 'what kind of tea do we want?');",
					"!url": "http://chaijs.com/api/assert/#isArray",
					"!type": "fn(value: mixed, message: [string]) -> bool"
				},
				"isNotArray": {
					"!doc": ".isNotArray(value, [message])\n\n  * @param { Mixed } value\n  * @param { String } message\n\nAsserts that value is not an array.\n\nvar menu = 'green|chai|oolong';\nassert.isNotArray(menu, 'what kind of tea do we want?');",
					"!url": "http://chaijs.com/api/assert/#isNotArray",
					"!type": "fn(value: mixed, message: [string]) -> bool"
				},
				"isString": {
					"!doc": ".isString(value, [message])\n\n  * @param { Mixed } value\n  * @param { String } message\n\nAsserts that value is a string.\n\nvar teaOrder = 'chai';\nassert.isString(teaOrder, 'order placed');",
					"!url": "http://chaijs.com/api/assert/#isString",
					"!type": "fn(value: mixed, message: [string]) -> bool"
				},
				"isNotString": {
					"!doc": ".isNotString(value, [message])\n\n  * @param { Mixed } value\n  * @param { String } message\n\nAsserts that value is not a string.\n\nvar teaOrder = 4;\nassert.isNotString(teaOrder, 'order placed');",
					"!url": "http://chaijs.com/api/assert/#isNotString",
					"!type": "fn(value: mixed, message: [string]) -> bool"
				},
				"isNumber": {
					"!doc": ".isNumber(value, [message])\n\n  * @param { Number } value\n  * @param { String } message\n\nAsserts that value is a number.\n\nvar cups = 2;\nassert.isNumber(cups, 'how many cups');",
					"!url": "http://chaijs.com/api/assert/#isNumber",
					"!type": "fn(value: number, message: [string]) -> bool"
				},
				"isNotNumber": {
					"!doc": ".isNotNumber(value, [message])\n\n  * @param { Mixed } value\n  * @param { String } message\n\nAsserts that value is not a number.\n\nvar cups = '2 cups please';\nassert.isNotNumber(cups, 'how many cups');",
					"!url": "http://chaijs.com/api/assert/#isNotNumber",
					"!type": "fn(value: mixed, message: [string]) -> bool"
				},
				"isBoolean": {
					"!doc": ".isBoolean(value, [message])\n\n  * @param { Mixed } value\n  * @param { String } message\n\nAsserts that value is a boolean.\n\nvar teaReady = true\n  , teaServed = false;\n\nassert.isBoolean(teaReady, 'is the tea ready');\nassert.isBoolean(teaServed, 'has tea been served');",
					"!url": "http://chaijs.com/api/assert/#isBoolean",
					"!type": "fn(value: mixed, message: [string]) -> bool"
				},
				"isNotBoolean": {
					"!doc": ".isNotBoolean(value, [message])\n\n  * @param { Mixed } value\n  * @param { String } message\n\nAsserts that value is not a boolean.\n\nvar teaReady = 'yep'\n  , teaServed = 'nope';\n\nassert.isNotBoolean(teaReady, 'is the tea ready');\nassert.isNotBoolean(teaServed, 'has tea been served');",
					"!url": "http://chaijs.com/api/assert/#isNotBoolean",
					"!type": "fn(value: mixed, message: [string]) -> bool"
				},
				"typeOf": {
					"!doc": ".typeOf(value, name, [message])\n\n  * @param { Mixed } value\n  * @param { String } name\n  * @param { String } message\n\nAsserts that value's type is name, as determined by\nObject.prototype.toString.\n\nassert.typeOf({ tea: 'chai' }, 'object', 'we have an object');\nassert.typeOf(['chai', 'jasmine'], 'array', 'we have an array');\nassert.typeOf('tea', 'string', 'we have a string');\nassert.typeOf(/tea/, 'regexp', 'we have a regular expression');\nassert.typeOf(null, 'null', 'we have a null');\nassert.typeOf(undefined, 'undefined', 'we have an undefined');",
					"!url": "http://chaijs.com/api/assert/#typeOf",
					"!type": "fn(value: mixed, name: string, message: [string]) -> bool"
				},
				"notTypeOf": {
					"!doc": ".notTypeOf(value, name, [message])\n\n  * @param { Mixed } value\n  * @param { String } typeofname\n  * @param { String } message\n\nAsserts that value's type is not name, as determined by\nObject.prototype.toString.\n\nassert.notTypeOf('tea', 'number', 'strings are not numbers');",
					"!url": "http://chaijs.com/api/assert/#notTypeOf",
					"!type": "fn(value: mixed, typeof: string, message: [string]) -> bool"
				},
				"instanceOf": {
					"!doc": ".instanceOf(object, constructor, [message])\n\n  * @param { Object } object\n  * @param { Constructor } constructor\n  * @param { String } message\n\nAsserts that value is an instance of constructor.\n\nvar Tea = function (name) { this.name = name; }\n  , chai = new Tea('chai');\n\nassert.instanceOf(chai, Tea, 'chai is an instance of tea');",
					"!url": "http://chaijs.com/api/assert/#instanceOf",
					"!type": "fn(object: object, constructor: constructor, message: [string]) -> bool"
				},
				"notInstanceOf": {
					"!doc": ".notInstanceOf(object, constructor, [message])\n\n  * @param { Object } object\n  * @param { Constructor } constructor\n  * @param { String } message\n\nAsserts value is not an instance of constructor.\n\nvar Tea = function (name) { this.name = name; }\n  , chai = new String('chai');\n\nassert.notInstanceOf(chai, Tea, 'chai is not an instance of tea');",
					"!url": "http://chaijs.com/api/assert/#notInstanceOf",
					"!type": "fn(object: object, constructor: constructor, message: [string]) -> bool"
				},
				"include": {
					"!doc": ".include(haystack, needle, [message])\n\n  * @param { Array | String } haystack\n  * @param { Mixed } needle\n  * @param { String } message\n\nAsserts that haystack includes needle. Works\nfor strings and arrays.\n\nassert.include('foobar', 'bar', 'foobar contains string \"bar\"');\nassert.include([ 1, 2, 3 ], 3, 'array contains value');",
					"!url": "http://chaijs.com/api/assert/#include",
					"!type": "fn(haystack: array, needle: mixed, message: [string]) -> bool"
				},
				"notInclude": {
					"!doc": ".notInclude(haystack, needle, [message])\n\n  * @param { Array | String } haystack\n  * @param { Mixed } needle\n  * @param { String } message\n\nAsserts that haystack does not include needle. Works\nfor strings and arrays.\ni\n    assert.notInclude('foobar', 'baz', 'string not include substring');\n    assert.notInclude([ 1, 2, 3 ], 4, 'array not include contain value');\n\n",
					"!url": "http://chaijs.com/api/assert/#notInclude",
					"!type": "fn(haystack: array, needle: mixed, message: [string]) -> bool"
				},
				"match": {
					"!doc": ".match(value, regexp, [message])\n\n  * @param { Mixed } value\n  * @param { RegExp } regexp\n  * @param { String } message\n\nAsserts that value matches the regular expression regexp.\n\nassert.match('foobar', /^foo/, 'regexp matches');",
					"!url": "http://chaijs.com/api/assert/#match",
					"!type": "fn(value: mixed, regexp: regexp, message: [string]) -> bool"
				},
				"notMatch": {
					"!doc": ".notMatch(value, regexp, [message])\n\n  * @param { Mixed } value\n  * @param { RegExp } regexp\n  * @param { String } message\n\nAsserts that value does not match the regular expression regexp.\n\nassert.notMatch('foobar', /^foo/, 'regexp does not match');",
					"!url": "http://chaijs.com/api/assert/#notMatch",
					"!type": "fn(value: mixed, regexp: regexp, message: [string]) -> bool"
				},
				"property": {
					"!doc": ".property(object, property, [message])\n\n  * @param { Object } object\n  * @param { String } property\n  * @param { String } message\n\nAsserts that object has a property named by property.\n\nassert.property({ tea: { green: 'matcha' }}, 'tea');",
					"!url": "http://chaijs.com/api/assert/#property",
					"!type": "fn(object: object, property: string, message: [string]) -> bool"
				},
				"notProperty": {
					"!doc": ".notProperty(object, property, [message])\n\n  * @param { Object } object\n  * @param { String } property\n  * @param { String } message\n\nAsserts that object does not have a property named by property.\n\nassert.notProperty({ tea: { green: 'matcha' }}, 'coffee');",
					"!url": "http://chaijs.com/api/assert/#notProperty",
					"!type": "fn(object: object, property: string, message: [string]) -> bool"
				},
				"deepProperty": {
					"!doc": ".deepProperty(object, property, [message])\n\n  * @param { Object } object\n  * @param { String } property\n  * @param { String } message\n\nAsserts that object has a property named by property, which can be a\nstring using dot- and bracket-notation for deep reference.\n\nassert.deepProperty({ tea: { green: 'matcha' }}, 'tea.green');",
					"!url": "http://chaijs.com/api/assert/#deepProperty",
					"!type": "fn(object: object, property: string, message: [string]) -> bool"
				},
				"notDeepProperty": {
					"!doc": ".notDeepProperty(object, property, [message])\n\n  * @param { Object } object\n  * @param { String } property\n  * @param { String } message\n\nAsserts that object does not have a property named by property, which\ncan be a string using dot- and bracket-notation for deep reference.\n\nassert.notDeepProperty({ tea: { green: 'matcha' }}, 'tea.oolong');",
					"!url": "http://chaijs.com/api/assert/#notDeepProperty",
					"!type": "fn(object: object, property: string, message: [string]) -> bool"
				},
				"propertyVal": {
					"!doc": ".propertyVal(object, property, value, [message])\n\n  * @param { Object } object\n  * @param { String } property\n  * @param { Mixed } value\n  * @param { String } message\n\nAsserts that object has a property named by property with value given\nby value.\n\nassert.propertyVal({ tea: 'is good' }, 'tea', 'is good');",
					"!url": "http://chaijs.com/api/assert/#propertyVal",
					"!type": "fn(object: object, property: string, value: mixed, message: [string]) -> bool"
				},
				"propertyNotVal": {
					"!doc": ".propertyNotVal(object, property, value, [message])\n\n  * @param { Object } object\n  * @param { String } property\n  * @param { Mixed } value\n  * @param { String } message\n\nAsserts that object has a property named by property, but with a value\ndifferent from that given by value.\n\nassert.propertyNotVal({ tea: 'is good' }, 'tea', 'is bad');",
					"!url": "http://chaijs.com/api/assert/#propertyNotVal",
					"!type": "fn(object: object, property: string, value: mixed, message: [string]) -> bool"
				},
				"deepPropertyVal": {
					"!doc": ".deepPropertyVal(object, property, value, [message])\n\n  * @param { Object } object\n  * @param { String } property\n  * @param { Mixed } value\n  * @param { String } message\n\nAsserts that object has a property named by property with value given\nby value. property can use dot- and bracket-notation for deep\nreference.\n\nassert.deepPropertyVal({ tea: { green: 'matcha' }}, 'tea.green', 'matcha');",
					"!url": "http://chaijs.com/api/assert/#deepPropertyVal",
					"!type": "fn(object: object, property: string, value: mixed, message: [string]) -> bool"
				},
				"deepPropertyNotVal": {
					"!doc": ".deepPropertyNotVal(object, property, value, [message])\n\n  * @param { Object } object\n  * @param { String } property\n  * @param { Mixed } value\n  * @param { String } message\n\nAsserts that object has a property named by property, but with a value\ndifferent from that given by value. property can use dot- and\nbracket-notation for deep reference.\n\nassert.deepPropertyNotVal({ tea: { green: 'matcha' }}, 'tea.green', 'konacha');",
					"!url": "http://chaijs.com/api/assert/#deepPropertyNotVal",
					"!type": "fn(object: object, property: string, value: mixed, message: [string]) -> bool"
				},
				"lengthOf": {
					"!doc": ".lengthOf(object, length, [message])\n\n  * @param { Mixed } object\n  * @param { Number } length\n  * @param { String } message\n\nAsserts that object has a length property with the expected value.\n\nassert.lengthOf([1,2,3], 3, 'array has length of 3');\nassert.lengthOf('foobar', 5, 'string has length of 6');",
					"!url": "http://chaijs.com/api/assert/#lengthOf",
					"!type": "fn(object: mixed, length: number, message: [string]) -> bool"
				},
				"throws": {
					"!doc": ".throws(function, [constructor/string/regexp], [string/regexp], [message])\n\n  * @param { Function } function\n  * @param { ErrorConstructor } constructor\n  * @param { RegExp } regexp\n  * @param { String } message\n  * @seehttps://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types  \n\nAsserts that function will throw an error that is an instance of\nconstructor, or alternately that it will throw an error with message\nmatching regexp.\n\nassert.throw(fn, 'function throws a reference error');\nassert.throw(fn, /function throws a reference error/);\nassert.throw(fn, ReferenceError);\nassert.throw(fn, ReferenceError, 'function throws a reference error');\nassert.throw(fn, ReferenceError, /function throws a reference error/);",
					"!url": "http://chaijs.com/api/assert/#throws",
					"!type": "fn(function: function, constructor: [errorconstructor], regexp: [regexp], message: [string]) -> bool"
				},
				"doesNotThrow": {
					"!doc": ".doesNotThrow(function, [constructor/regexp], [message])\n\n  * @param { Function } function\n  * @param { ErrorConstructor } constructor\n  * @param { RegExp } regexp\n  * @param { String } message\n  * @seehttps://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types  \n\nAsserts that function will not throw an error that is an instance of\nconstructor, or alternately that it will not throw an error with message\nmatching regexp.\n\nassert.doesNotThrow(fn, Error, 'function does not throw');",
					"!url": "http://chaijs.com/api/assert/#doesNotThrow",
					"!type": "fn(function: function, constructor: [errorconstructor], regexp: [regexp], message: string) -> bool"
				},
				"operator": {
					"!doc": ".operator(val1, operator, val2, [message])\n\n  * @param { Mixed } val1\n  * @param { String } operator\n  * @param { Mixed } val2\n  * @param { String } message\n\nCompares two values using operator.\n\nassert.operator(1, '<', 2, 'everything is ok');\nassert.operator(1, '>', 2, 'this will fail');",
					"!url": "http://chaijs.com/api/assert/#operator",
					"!type": "fn(val1: mixed, operator: string, val2: mixed, message: [string]) -> bool"
				},
				"closeTo": {
					"!doc": ".closeTo(actual, expected, delta, [message])\n\n  * @param { Number } actual\n  * @param { Number } expected\n  * @param { Number } delta\n  * @param { String } message\n\nAsserts that the target is equal expected, to within a +/- delta range.\n\nassert.closeTo(1.5, 1, 0.5, 'numbers are close');",
					"!url": "http://chaijs.com/api/assert/#closeTo",
					"!type": "fn(actual: number, expected: number, delta: number, message: [string]) -> bool"
				},
				"sameMembers": {
					"!doc": ".sameMembers(set1, set2, [message])\n\n  * @param { Array } superset\n  * @param { Array } subset\n  * @param { String } message\n\nAsserts that set1 and set2 have the same members.\nOrder is not taken into account.\n\nassert.sameMembers([ 1, 2, 3 ], [ 2, 1, 3 ], 'same members');",
					"!url": "http://chaijs.com/api/assert/#sameMembers",
					"!type": "fn(superset: array, subset: array, message: [string]) -> bool"
				},
				"includeMembers": {
					"!doc": ".includeMembers(superset, subset, [message])\n\n  * @param { Array } superset\n  * @param { Array } subset\n  * @param { String } message\n\nAsserts that subset is included in superset.\nOrder is not taken into account.\n\nassert.includeMembers([ 1, 2, 3 ], [ 2, 1 ], 'include members');",
					"!url": "http://chaijs.com/api/assert/#includeMembers",
					"!type": "fn(superset: array, subset: array, message: [string]) -> bool"
				}
			},
			"expect": {
				"Language": {
					"!doc": "Language Chains\n\n\n\nThe following are provided as chainable getters to\nimprove the readability of your assertions. They\ndo not provide an testing capability unless they\nhave been overwritten by a plugin.Chains\n\n",
					"!url": "http://chaijs.com/api/bdd/#Language",
					"!type": "fn() -> bool"
				},
				"not": {
					"!doc": ".not\n\n\n\nNegates any of assertions following in the chain.\n\nexpect(foo).to.not.equal('bar');\nexpect(goodFn).to.not.throw(Error);\nexpect({ foo: 'baz' }).to.have.property('foo')\n  .and.not.equal('bar');",
					"!url": "http://chaijs.com/api/bdd/#not",
					"!type": "fn() -> bool"
				},
				"deep": {
					"!doc": ".deep\n\n\n\nSets the deep flag, later used by the equal and\nproperty assertions.\n\nexpect(foo).to.deep.equal({ bar: 'baz' });\nexpect({ foo: { bar: { baz: 'quux' } } })\n  .to.have.deep.property('foo.bar.baz', 'quux');",
					"!url": "http://chaijs.com/api/bdd/#deep",
					"!type": "fn() -> bool"
				},
				"a": {
					"!doc": ".a(type)\n\n  * @param { String } type\n  * @param { String } message_optional_\n\nThe a and an assertions are aliases that can be\nused either as language chains or to assert a value's\ntype.\n\n// typeof\nexpect('test').to.be.a('string');\nexpect({ foo: 'bar' }).to.be.an('object');\nexpect(null).to.be.a('null');\nexpect(undefined).to.be.an('undefined');\n\n// language chain\nexpect(foo).to.be.an.instanceof(Foo);",
					"!url": "http://chaijs.com/api/bdd/#a",
					"!type": "fn(type: string, message: string) -> bool"
				},
				"include": {
					"!doc": ".include(value)\n\n  * @param { Object | String | Number } obj\n  * @param { String } message_optional_\n\nThe include and contain assertions can be used as either property\nbased language chains or as methods to assert the inclusion of an object\nin an array or a substring in a string. When used as language chains,\nthey toggle the contain flag for the keys assertion.\n\nexpect([1,2,3]).to.include(2);\nexpect('foobar').to.contain('foo');\nexpect({ foo: 'bar', hello: 'universe' }).to.include.keys('foo');",
					"!url": "http://chaijs.com/api/bdd/#include",
					"!type": "fn(obj: object, message: string) -> bool"
				},
				"ok": {
					"!doc": ".ok\n\n\n\nAsserts that the target is truthy.\n\nexpect('everthing').to.be.ok;\nexpect(1).to.be.ok;\nexpect(false).to.not.be.ok;\nexpect(undefined).to.not.be.ok;\nexpect(null).to.not.be.ok;",
					"!url": "http://chaijs.com/api/bdd/#ok",
					"!type": "fn() -> bool"
				},
				"true": {
					"!doc": ".true\n\n\n\nAsserts that the target is true.\n\nexpect(true).to.be.true;\nexpect(1).to.not.be.true;",
					"!url": "http://chaijs.com/api/bdd/#true",
					"!type": "fn() -> bool"
				},
				"false": {
					"!doc": ".false\n\n\n\nAsserts that the target is false.\n\nexpect(false).to.be.false;\nexpect(0).to.not.be.false;",
					"!url": "http://chaijs.com/api/bdd/#false",
					"!type": "fn() -> bool"
				},
				"null": {
					"!doc": ".null\n\n\n\nAsserts that the target is null.\n\nexpect(null).to.be.null;\nexpect(undefined).not.to.be.null;",
					"!url": "http://chaijs.com/api/bdd/#null",
					"!type": "fn() -> bool"
				},
				"undefined": {
					"!doc": ".undefined\n\n\n\nAsserts that the target is undefined.\n\nexpect(undefined).to.be.undefined;\nexpect(null).to.not.be.undefined;",
					"!url": "http://chaijs.com/api/bdd/#undefined",
					"!type": "fn() -> bool"
				},
				"exist": {
					"!doc": ".exist\n\n\n\nAsserts that the target is neither null nor undefined.\n\nvar foo = 'hi'\n  , bar = null\n  , baz;\n\nexpect(foo).to.exist;\nexpect(bar).to.not.exist;\nexpect(baz).to.not.exist;",
					"!url": "http://chaijs.com/api/bdd/#exist",
					"!type": "fn() -> bool"
				},
				"empty": {
					"!doc": ".empty\n\n\n\nAsserts that the target's length is 0. For arrays, it checks\nthe length property. For objects, it gets the count of\nenumerable keys.\n\nexpect([]).to.be.empty;\nexpect('').to.be.empty;\nexpect({}).to.be.empty;",
					"!url": "http://chaijs.com/api/bdd/#empty",
					"!type": "fn() -> bool"
				},
				"arguments": {
					"!doc": ".arguments\n\n\n\nAsserts that the target is an arguments object.\n\nfunction test () {\n  expect(arguments).to.be.arguments;\n}",
					"!url": "http://chaijs.com/api/bdd/#arguments",
					"!type": "fn() -> bool"
				},
				"equal": {
					"!doc": ".equal(value)\n\n  * @param { Mixed } value\n  * @param { String } message_optional_\n\nAsserts that the target is strictly equal (===) to value.\nAlternately, if the deep flag is set, asserts that\nthe target is deeply equal to value.\n\nexpect('hello').to.equal('hello');\nexpect(42).to.equal(42);\nexpect(1).to.not.equal(true);\nexpect({ foo: 'bar' }).to.not.equal({ foo: 'bar' });\nexpect({ foo: 'bar' }).to.deep.equal({ foo: 'bar' });",
					"!url": "http://chaijs.com/api/bdd/#equal",
					"!type": "fn(value: mixed, message: string) -> bool"
				},
				"eql": {
					"!doc": ".eql(value)\n\n  * @param { Mixed } value\n  * @param { String } message_optional_\n\nAsserts that the target is deeply equal to value.\n\nexpect({ foo: 'bar' }).to.eql({ foo: 'bar' });\nexpect([ 1, 2, 3 ]).to.eql([ 1, 2, 3 ]);",
					"!url": "http://chaijs.com/api/bdd/#eql",
					"!type": "fn(value: mixed, message: string) -> bool"
				},
				"above": {
					"!doc": ".above(value)\n\n  * @param { Number } value\n  * @param { String } message_optional_\n\nAsserts that the target is greater than value.Can also be used in conjunction with length to\nassert a minimum length. The benefit being a\nmore informative error message than if the length\nwas supplied directly.\n\nexpect(10).to.be.above(5);expect('foo').to.have.length.above(2);\nexpect([ 1, 2, 3 ]).to.have.length.above(2);",
					"!url": "http://chaijs.com/api/bdd/#above",
					"!type": "fn(value: number, message: string) -> bool"
				},
				"least": {
					"!doc": ".least(value)\n\n  * @param { Number } value\n  * @param { String } message_optional_\n\nAsserts that the target is greater than or equal to value.Can also be used in conjunction with length to\nassert a minimum length. The benefit being a\nmore informative error message than if the length\nwas supplied directly.\n\nexpect(10).to.be.at.least(10);expect('foo').to.have.length.of.at.least(2);\nexpect([ 1, 2, 3 ]).to.have.length.of.at.least(3);",
					"!url": "http://chaijs.com/api/bdd/#least",
					"!type": "fn(value: number, message: string) -> bool"
				},
				"below": {
					"!doc": ".below(value)\n\n  * @param { Number } value\n  * @param { String } message_optional_\n\nAsserts that the target is less than value.Can also be used in conjunction with length to\nassert a maximum length. The benefit being a\nmore informative error message than if the length\nwas supplied directly.\n\nexpect(5).to.be.below(10);expect('foo').to.have.length.below(4);\nexpect([ 1, 2, 3 ]).to.have.length.below(4);",
					"!url": "http://chaijs.com/api/bdd/#below",
					"!type": "fn(value: number, message: string) -> bool"
				},
				"most": {
					"!doc": ".most(value)\n\n  * @param { Number } value\n  * @param { String } message_optional_\n\nAsserts that the target is less than or equal to value.Can also be used in conjunction with length to\nassert a maximum length. The benefit being a\nmore informative error message than if the length\nwas supplied directly.\n\nexpect(5).to.be.at.most(5);expect('foo').to.have.length.of.at.most(4);\nexpect([ 1, 2, 3 ]).to.have.length.of.at.most(3);",
					"!url": "http://chaijs.com/api/bdd/#most",
					"!type": "fn(value: number, message: string) -> bool"
				},
				"within": {
					"!doc": ".within(start, finish)\n\n  * @param { Number } startlowerbound inclusive\n  * @param { Number } finishupperbound inclusive\n  * @param { String } message_optional_\n\nAsserts that the target is within a range.Can also be used in conjunction with length to\nassert a length range. The benefit being a\nmore informative error message than if the length\nwas supplied directly.\n\nexpect(7).to.be.within(5,10);expect('foo').to.have.length.within(2,4);\nexpect([ 1, 2, 3 ]).to.have.length.within(2,4);",
					"!url": "http://chaijs.com/api/bdd/#within",
					"!type": "fn(start: number, finish: number, message: string) -> bool"
				},
				"instanceof": {
					"!doc": ".instanceof(constructor)\n\n  * @param { Constructor } constructor\n  * @param { String } message_optional_\n\nAsserts that the target is an instance of constructor.\n\nvar Tea = function (name) { this.name = name; }\n  , Chai = new Tea('chai');\n\nexpect(Chai).to.be.an.instanceof(Tea);\nexpect([ 1, 2, 3 ]).to.be.instanceof(Array);",
					"!url": "http://chaijs.com/api/bdd/#instanceof",
					"!type": "fn(constructor: constructor, message: string) -> bool"
				},
				"property": {
					"!doc": ".property(name, [value])\n\n  * @param { String } name\n  * @param { Mixed } value(optional)\n  * @param { String } message_optional_\n\nAsserts that the target has a property name, optionally asserting that\nthe value of that property is strictly equal to  value.\nIf the deep flag is set, you can use dot- and bracket-notation for deep\nreferences into objects and arrays.You can also use an array as the starting point of a deep.property\nassertion, or traverse nested arrays.Furthermore, property changes the subject of the assertion\nto be the value of that property from the original object. This\npermits for further chainable assertions on that property.\n\n// simple referencing\nvar obj = { foo: 'bar' };\nexpect(obj).to.have.property('foo');\nexpect(obj).to.have.property('foo', 'bar');\n\n// deep referencing\nvar deepObj = {\n    green: { tea: 'matcha' }\n  , teas: [ 'chai', 'matcha', { tea: 'konacha' } ]\n};\n\nexpect(deepObj).to.have.deep.property('green.tea', 'matcha');\nexpect(deepObj).to.have.deep.property('teas[1]', 'matcha');\nexpect(deepObj).to.have.deep.property('teas[2].tea', 'konacha');var arr = [\n    [ 'chai', 'matcha', 'konacha' ]\n  , [ { tea: 'chai' }\n    , { tea: 'matcha' }\n    , { tea: 'konacha' } ]\n];\n\nexpect(arr).to.have.deep.property('[0][1]', 'matcha');\nexpect(arr).to.have.deep.property('[1][2].tea', 'konacha');expect(obj).to.have.property('foo')\n  .that.is.a('string');\nexpect(deepObj).to.have.property('green')\n  .that.is.an('object')\n  .that.deep.equals({ tea: 'matcha' });\nexpect(deepObj).to.have.property('teas')\n  .that.is.an('array')\n  .with.deep.property('[2]')\n    .that.deep.equals({ tea: 'konacha' });",
					"!url": "http://chaijs.com/api/bdd/#property",
					"!type": "fn(name: string, value: [mixed], message: string) -> bool"
				},
				"ownProperty": {
					"!doc": ".ownProperty(name)\n\n  * @param { String } name\n  * @param { String } message_optional_\n\nAsserts that the target has an own property name.\n\nexpect('test').to.have.ownProperty('length');",
					"!url": "http://chaijs.com/api/bdd/#ownProperty",
					"!type": "fn(name: string, message: string) -> bool"
				},
				"length": {
					"!doc": ".length(value)\n\n  * @param { Number } length\n  * @param { String } message_optional_\n\nAsserts that the target's length property has\nthe expected value.Can also be used as a chain precursor to a value\ncomparison for the length property.\n\nexpect([ 1, 2, 3]).to.have.length(3);\nexpect('foobar').to.have.length(6);expect('foo').to.have.length.above(2);\nexpect([ 1, 2, 3 ]).to.have.length.above(2);\nexpect('foo').to.have.length.below(4);\nexpect([ 1, 2, 3 ]).to.have.length.below(4);\nexpect('foo').to.have.length.within(2,4);\nexpect([ 1, 2, 3 ]).to.have.length.within(2,4);",
					"!url": "http://chaijs.com/api/bdd/#length",
					"!type": "fn(length: number, message: string) -> bool"
				},
				"match": {
					"!doc": ".match(regexp)\n\n  * @param { RegExp } RegularExpression\n  * @param { String } message_optional_\n\nAsserts that the target matches a regular expression.\n\nexpect('foobar').to.match(/^foo/);",
					"!url": "http://chaijs.com/api/bdd/#match",
					"!type": "fn(RegularExpression: regexp, message: string) -> bool"
				},
				"string": {
					"!doc": ".string(string)\n\n  * @param { String } string\n  * @param { String } message_optional_\n\nAsserts that the string target contains another string.\n\nexpect('foobar').to.have.string('bar');",
					"!url": "http://chaijs.com/api/bdd/#string",
					"!type": "fn(string: string, message: string) -> bool"
				},
				"keys": {
					"!doc": ".keys(key1, [key2], [...])\n\n  * @param { String... | Array } keys\n\nAsserts that the target has exactly the given keys, or\nasserts the inclusion of some keys when using the\ninclude or contain modifiers.\n\nexpect({ foo: 1, bar: 2 }).to.have.keys(['foo', 'bar']);\nexpect({ foo: 1, bar: 2, baz: 3 }).to.contain.keys('foo', 'bar');",
					"!url": "http://chaijs.com/api/bdd/#keys",
					"!type": "fn(keys: string) -> bool"
				},
				"throw": {
					"!doc": ".throw(constructor)\n\n  * @param { ErrorConstructor } constructor\n  * @param { String | RegExp } expectederror message\n  * @param { String } message_optional_\n  * @seehttps://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types  \n\nAsserts that the function target will throw a specific error, or specific type of error\n(as determined using instanceof), optionally with a RegExp or string inclusion test\nfor the error's message.Please note that when a throw expectation is negated, it will check each\nparameter independently, starting with error constructor type. The appropriate way\nto check for the existence of a type of error but for a message that does not match\nis to use and.\n\nvar err = new ReferenceError('This is a bad function.');\nvar fn = function () { throw err; }\nexpect(fn).to.throw(ReferenceError);\nexpect(fn).to.throw(Error);\nexpect(fn).to.throw(/bad function/);\nexpect(fn).to.not.throw('good function');\nexpect(fn).to.throw(ReferenceError, /bad function/);\nexpect(fn).to.throw(err);\nexpect(fn).to.not.throw(new RangeError('Out of range.'));expect(fn).to.throw(ReferenceError)\n   .and.not.throw(/good function/);",
					"!url": "http://chaijs.com/api/bdd/#throw",
					"!type": "fn(constructor: errorconstructor, expected: string, message: string) -> bool"
				},
				"respondTo": {
					"!doc": ".respondTo(method)\n\n  * @param { String } method\n  * @param { String } message_optional_\n\nAsserts that the object or class target will respond to a method.To check if a constructor will respond to a static function,\nset the itself flag.\n\nKlass.prototype.bar = function(){};\nexpect(Klass).to.respondTo('bar');\nexpect(obj).to.respondTo('bar');Klass.baz = function(){};\nexpect(Klass).itself.to.respondTo('baz');",
					"!url": "http://chaijs.com/api/bdd/#respondTo",
					"!type": "fn(method: string, message: string) -> bool"
				},
				"itself": {
					"!doc": ".itself\n\n\n\nSets the itself flag, later used by the respondTo assertion.\n\nfunction Foo() {}\nFoo.bar = function() {}\nFoo.prototype.baz = function() {}\n\nexpect(Foo).itself.to.respondTo('bar');\nexpect(Foo).itself.not.to.respondTo('baz');",
					"!url": "http://chaijs.com/api/bdd/#itself",
					"!type": "fn() -> bool"
				},
				"satisfy": {
					"!doc": ".satisfy(method)\n\n  * @param { Function } matcher\n  * @param { String } message_optional_\n\nAsserts that the target passes a given truth test.\n\nexpect(1).to.satisfy(function(num) { return num > 0; });",
					"!url": "http://chaijs.com/api/bdd/#satisfy",
					"!type": "fn(matcher: function, message: string) -> bool"
				},
				"closeTo": {
					"!doc": ".closeTo(expected, delta)\n\n  * @param { Number } expected\n  * @param { Number } delta\n  * @param { String } message_optional_\n\nAsserts that the target is equal expected, to within a +/- delta range.\n\nexpect(1.5).to.be.closeTo(1, 0.5);",
					"!url": "http://chaijs.com/api/bdd/#closeTo",
					"!type": "fn(expected: number, delta: number, message: string) -> bool"
				},
				"members": {
					"!doc": ".members(set)\n\n  * @param { Array } set\n  * @param { String } message_optional_\n\nAsserts that the target is a superset of set,\nor that the target and set have the same members.\n\nexpect([1, 2, 3]).to.include.members([3, 2]);\nexpect([1, 2, 3]).to.not.include.members([3, 2, 8]);\n\nexpect([4, 2]).to.have.members([2, 4]);\nexpect([5, 2]).to.not.have.members([5, 2, 1]);",
					"!url": "http://chaijs.com/api/bdd/#members",
					"!type": "fn(set: array, message: string) -> bool"
				}
			}
		}
	};

/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(mod) {
	  if (true) // CommonJS
	    return mod(__webpack_require__(3), __webpack_require__(9), __webpack_require__(23),
	               __webpack_require__(5));
	  if (true) // AMD
	    return !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(3), __webpack_require__(9), __webpack_require__(23), __webpack_require__(5)], __WEBPACK_AMD_DEFINE_FACTORY__ = (mod), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  mod(tern, tern, tern.comment, acorn.walk);
	})(function(infer, tern, comment, walk) {
	  "use strict";
	
	  var SetDoc = infer.constraint({
	    construct: function(doc) { this.doc = doc; },
	    addType: function(type) {
	      if (!type.doc) type.doc = this.doc;
	    }
	  });
	
	  function Injector() {
	    this.fields = Object.create(null);
	    this.forward = [];
	  }
	
	  Injector.prototype.get = function(name) {
	    if (name == "$scope") return new infer.Obj(globalInclude("$rootScope").getType(), "$scope");
	    if (name in this.fields) return this.fields[name];
	    var field = this.fields[name] = new infer.AVal;
	    return field;
	  };
	  Injector.prototype.set = function(name, val, doc, node, depth) {
	    if (name == "$scope" || depth && depth > 10) return;
	    var field = this.fields[name] || (this.fields[name] = new infer.AVal);
	    if (!depth) field.local = true;
	    if (!field.origin) field.origin = infer.cx().curOrigin;
	    if (typeof node == "string" && !field.span) field.span = node;
	    else if (node && typeof node == "object" && !field.originNode) field.originNode = node;
	    if (doc) { field.doc = doc; field.propagate(new SetDoc(doc)); }
	    val.propagate(field);
	    for (var i = 0; i < this.forward.length; ++i)
	      this.forward[i].set(name, val, doc, node, (depth || 0) + 1);
	  };
	  Injector.prototype.forwardTo = function(injector) {
	    this.forward.push(injector);
	    for (var field in this.fields) {
	      var val = this.fields[field];
	      injector.set(field, val, val.doc, val.span || val.originNode, 1);
	    }
	  };
	
	  function globalInclude(name) {
	    var service = infer.cx().definitions.angular.service;
	    if (service.hasProp(name)) return service.getProp(name);
	  }
	
	  function getInclude(mod, name) {
	    var glob = globalInclude(name);
	    if (glob) return glob;
	    if (!mod.injector) return infer.ANull;
	    return mod.injector ? mod.injector.get(name) : infer.ANull;
	  }
	
	  function applyWithInjection(mod, fnType, node, asNew) {
	    var deps = [];
	    if (node.type == "FunctionExpression") {
	      for (var i = 0; i < node.params.length; ++i)
	        deps.push(getInclude(mod, node.params[i].name));
	    } else if (node.type == "ArrayExpression") {
	      for (var i = 0; i < node.elements.length - 1; ++i) {
	        var elt = node.elements[i];
	        if (elt.type == "Literal" && typeof elt.value == "string")
	          deps.push(getInclude(mod, elt.value));
	        else
	          deps.push(infer.ANull);
	      }
	      var last = node.elements[node.elements.length - 1];
	      if (last && last.type == "FunctionExpression")
	        fnType = last.body.scope.fnType;
	    }
	    var result = new infer.AVal;
	    if (asNew) {
	      var self = new infer.AVal;
	      fnType.propagate(new infer.IsCtor(self));
	      self.propagate(result, 90);
	      fnType.propagate(new infer.IsCallee(self, deps, null, new infer.IfObj(result)));
	    } else {
	      fnType.propagate(new infer.IsCallee(infer.cx().topScope, deps, null, result));
	    }
	    return result;
	  }
	
	  infer.registerFunction("angular_callInject", function(argN) {
	    return function(self, args, argNodes) {
	      var mod = self.getType();
	      if (mod && argNodes && argNodes[argN])
	        applyWithInjection(mod, args[argN], argNodes[argN]);
	    };
	  });
	
	  infer.registerFunction("angular_regFieldCall", function(self, args, argNodes) {
	    var mod = self.getType();
	    if (mod && argNodes && argNodes.length > 1) {
	      var result = applyWithInjection(mod, args[1], argNodes[1]);
	      if (mod.injector && argNodes[0].type == "Literal")
	        mod.injector.set(argNodes[0].value, result, argNodes[0].angularDoc, argNodes[0]);
	    }
	  });
	
	  infer.registerFunction("angular_regFieldNew", function(self, args, argNodes) {
	    var mod = self.getType();
	    if (mod && argNodes && argNodes.length > 1) {
	      var result = applyWithInjection(mod, args[1], argNodes[1], true);
	      if (mod.injector && argNodes[0].type == "Literal")
	        mod.injector.set(argNodes[0].value, result, argNodes[0].angularDoc, argNodes[0]);
	    }
	  });
	
	  infer.registerFunction("angular_regField", function(self, args, argNodes) {
	    var mod = self.getType();
	    if (mod && mod.injector && argNodes && argNodes[0] && argNodes[0].type == "Literal" && args[1])
	      mod.injector.set(argNodes[0].value, args[1], argNodes[0].angularDoc, argNodes[0]);
	  });
	
	  function arrayNodeToStrings(node) {
	    var strings = [];
	    if (node && node.type == "ArrayExpression")
	      for (var i = 0; i < node.elements.length; ++i) {
	        var elt = node.elements[i];
	        if (elt.type == "Literal" && typeof elt.value == "string")
	          strings.push(elt.value);
	      }
	    return strings;
	  }
	
	  function moduleProto(cx) {
	    var ngDefs = cx.definitions.angular;
	    return ngDefs && ngDefs.Module.getProp("prototype").getType();
	  }
	
	  function declareMod(name, includes) {
	    var cx = infer.cx(), data = cx.parent._angular;
	    var proto = moduleProto(cx);
	    var mod = new infer.Obj(proto || true);
	    if (!proto) data.nakedModules.push(mod);
	    mod.origin = cx.curOrigin;
	    mod.injector = new Injector();
	    mod.metaData = {includes: includes};
	    for (var i = 0; i < includes.length; ++i) {
	      var depMod = data.modules[includes[i]];
	      if (!depMod)
	        (data.pendingImports[includes[i]] || (data.pendingImports[includes[i]] = [])).push(mod.injector);
	      else if (depMod.injector)
	        depMod.injector.forwardTo(mod.injector);
	    }
	    if (typeof name == "string") {
	      data.modules[name] = mod;
	      var pending = data.pendingImports[name];
	      if (pending) {
	        delete data.pendingImports[name];
	        for (var i = 0; i < pending.length; ++i)
	          mod.injector.forwardTo(pending[i]);
	      }
	    }
	    return mod;
	  }
	
	  infer.registerFunction("angular_module", function(_self, _args, argNodes) {
	    var mod, name = argNodes && argNodes[0] && argNodes[0].type == "Literal" && argNodes[0].value;
	    if (typeof name == "string")
	      mod = infer.cx().parent._angular.modules[name];
	    if (!mod)
	      mod = declareMod(name, arrayNodeToStrings(argNodes && argNodes[1]));
	    return mod;
	  });
	
	  var IsBound = infer.constraint({
	    construct: function(self, args, target) {
	      this.self = self; this.args = args; this.target = target;
	    },
	    addType: function(tp) {
	      if (!(tp instanceof infer.Fn)) return;
	      this.target.addType(new infer.Fn(tp.name, tp.self, tp.args.slice(this.args.length),
	                                       tp.argNames.slice(this.args.length), tp.retval));
	      this.self.propagate(tp.self);
	      for (var i = 0; i < Math.min(tp.args.length, this.args.length); ++i)
	        this.args[i].propagate(tp.args[i]);
	    }
	  });
	
	  infer.registerFunction("angular_bind", function(_self, args) {
	    if (args.length < 2) return infer.ANull;
	    var result = new infer.AVal;
	    args[1].propagate(new IsBound(args[0], args.slice(2), result));
	    return result;
	  });
	
	  function postParse(ast, text) {
	    walk.simple(ast, {
	      CallExpression: function(node) {
	        if (node.callee.type == "MemberExpression" &&
	            !node.callee.computed && node.arguments.length &&
	            /^(value|constant|controller|factory|provider)$/.test(node.callee.property.name)) {
	          var before = comment.commentsBefore(text, node.callee.property.start - 1);
	          if (before) {
	            var first = before[0], dot = first.search(/\.\s/);
	            if (dot > 5) first = first.slice(0, dot + 1);
	            first = first.trim().replace(/\s*\n\s*\*\s*|\s{1,}/g, " ");
	            node.arguments[0].angularDoc = first;
	          }
	        }
	      }
	    });
	  }
	
	  function postLoadDef(json) {
	    var cx = infer.cx(), defName = json["!name"], defs = cx.definitions[defName];
	    if (defName == "angular") {
	      var proto = moduleProto(cx), naked = cx.parent._angular.nakedModules;
	      if (proto) for (var i = 0; i < naked.length; ++i) naked[i].proto = proto;
	      return;
	    }
	    var mods = defs && defs["!ng"];
	    if (mods) for (var name in mods.props) {
	      var obj = mods.props[name].getType();
	      var mod = declareMod(name.replace(/`/g, "."), obj.metaData && obj.metaData.includes || []);
	      mod.origin = defName;
	      for (var prop in obj.props) {
	        var val = obj.props[prop], tp = val.getType();
	        if (!tp) continue;
	        if (/^_inject_/.test(prop)) {
	          if (!tp.name) tp.name = prop.slice(8);
	          mod.injector.set(prop.slice(8), tp, val.doc, val.span);
	        } else {
	          obj.props[prop].propagate(mod.defProp(prop));
	        }
	      }
	    }
	  }
	
	  function preCondenseReach(state) {
	    var mods = infer.cx().parent._angular.modules;
	    var modObj = new infer.Obj(null), found = 0;
	    for (var name in mods) {
	      var mod = mods[name];
	      if (state.origins.indexOf(mod.origin) > -1) {
	        var propName = name.replace(/\./g, "`");
	        modObj.defProp(propName).addType(mod);
	        mod.condenseForceInclude = true;
	        ++found;
	        if (mod.injector) for (var inj in mod.injector.fields) {
	          var field = mod.injector.fields[inj];
	          if (field.local) state.roots["!ng." + propName + "._inject_" + inj] = field;
	        }
	      }
	    }
	    if (found) state.roots["!ng"] = modObj;
	  }
	
	  function postCondenseReach(state) {
	    var mods = infer.cx().parent._angular.modules;
	    for (var path in state.types) {
	      var m;
	      if (m = path.match(/^!ng\.([^\.]+)\._inject_([^\.]+)^/)) {
	        var mod = mods[m[1].replace(/`/g, ".")];
	        var field = mod.injector.fields[m[2]];
	        var data = state.types[path];
	        if (field.span) data.span = field.span;
	        if (field.doc) data.doc = field.doc;
	      }
	    }
	  }
	
	  function initServer(server) {
	    server._angular = {
	      modules: Object.create(null),
	      pendingImports: Object.create(null),
	      nakedModules: []
	    };
	  }
	
	  tern.registerPlugin("angular", function(server) {
	    initServer(server);
	    server.on("reset", function() { initServer(server); });
	    return {defs: defs,
	            passes: {postParse: postParse,
	                     postLoadDef: postLoadDef,
	                     preCondenseReach: preCondenseReach,
	                     postCondenseReach: postCondenseReach},
	            loadFirst: true};
	  });
	
	  var defs = {
	    "!name": "angular",
	    "!define": {
	      cacheObj: {
	        info: "fn() -> ?",
	        put: "fn(key: string, value: ?) -> !1",
	        get: "fn(key: string) -> ?",
	        remove: "fn(key: string)",
	        removeAll: "fn()",
	        destroy: "fn()"
	      },
	      eventObj: {
	        targetScope: "service.$rootScope",
	        currentScope: "service.$rootScope",
	        name: "string",
	        stopPropagation: "fn()",
	        preventDefault: "fn()",
	        defaultPrevented: "bool"
	      },
	      directiveObj: {
	        multiElement: {
	          "!type": "bool",
	          "!url": "https://docs.angularjs.org/api/ng/service/$compile#-multielement-",
	          "!doc": "When this property is set to true, the HTML compiler will collect DOM nodes between nodes with the attributes directive-name-start and directive-name-end, and group them together as the directive elements. It is recommended that this feature be used on directives which are not strictly behavioural (such as ngClick), and which do not manipulate or replace child nodes (such as ngInclude)."
	        },
	        priority: {
	          "!type": "number",
	          "!url": "https://docs.angularjs.org/api/ng/service/$compile#-priority-",
	          "!doc": "When there are multiple directives defined on a single DOM element, sometimes it is necessary to specify the order in which the directives are applied. The priority is used to sort the directives before their compile functions get called. Priority is defined as a number. Directives with greater numerical priority are compiled first. Pre-link functions are also run in priority order, but post-link functions are run in reverse order. The order of directives with the same priority is undefined. The default priority is 0."
	        },
	        terminal: {
	          "!type": "bool",
	          "!url": "https://docs.angularjs.org/api/ng/service/$compile#-terminal-",
	          "!doc": "If set to true then the current priority will be the last set of directives which will execute (any directives at the current priority will still execute as the order of execution on same priority is undefined). Note that expressions and other directives used in the directive's template will also be excluded from execution."
	        },
	        scope: {
	          "!type": "?",
	          "!url": "https://docs.angularjs.org/api/ng/service/$compile#-scope-",
	          "!doc": "If set to true, then a new scope will be created for this directive. If multiple directives on the same element request a new scope, only one new scope is created. The new scope rule does not apply for the root of the template since the root of the template always gets a new scope. If set to {} (object hash), then a new 'isolate' scope is created. The 'isolate' scope differs from normal scope in that it does not prototypically inherit from the parent scope. This is useful when creating reusable components, which should not accidentally read or modify data in the parent scope."
	        },
	        bindToController: {
	          "!type": "bool",
	          "!url": "https://docs.angularjs.org/api/ng/service/$compile#-bindtocontroller-",
	          "!doc": "When an isolate scope is used for a component (see above), and controllerAs is used, bindToController: true will allow a component to have its properties bound to the controller, rather than to scope. When the controller is instantiated, the initial values of the isolate scope bindings are already available."
	        },
	        controller: {
	          "!type": "fn()",
	          "!url": "https://docs.angularjs.org/api/ng/service/$compile#-require-",
	          "!doc": "Controller constructor function. The controller is instantiated before the pre-linking phase and it is shared with other directives (see require attribute). This allows the directives to communicate with each other and augment each other's behavior."
	        },
	        require: {
	          "!type": "string",
	          "!url": "https://docs.angularjs.org/api/ng/service/$compile#-controller-",
	          "!doc": "Require another directive and inject its controller as the fourth argument to the linking function. The require takes a string name (or array of strings) of the directive(s) to pass in. If an array is used, the injected argument will be an array in corresponding order. If no such directive can be found, or if the directive does not have a controller, then an error is raised."
	        },
	        controllerAs: {
	          "!type": "string",
	          "!url": "https://docs.angularjs.org/api/ng/service/$compile#-controlleras-",
	          "!doc": "Controller alias at the directive scope. An alias for the controller so it can be referenced at the directive template. The directive needs to define a scope for this configuration to be used. Useful in the case when directive is used as component."
	        },
	        restrict: {
	          "!type": "string",
	          "!url": "https://docs.angularjs.org/api/ng/service/$compile#-restrict-",
	          "!doc": "String of subset of EACM which restricts the directive to a specific directive declaration style. If omitted, the defaults (elements and attributes) are used. E - Element name (default): <my-directive></my-directive>. A - Attribute (default): <div my-directive='exp'></div>. C - Class: <div class='my-directive: exp;'></div>. M - Comment: <!-- directive: my-directive exp --> "
	        },
	        templateNamespace: {
	          "!type": "string",
	          "!url": "https://docs.angularjs.org/api/ng/service/$compile#-templatenamespace-",
	          "!doc": "String representing the document type used by the markup in the template. AngularJS needs this information as those elements need to be created and cloned in a special way when they are defined outside their usual containers like <svg> and <math>."
	        },
	        template: {
	          "!type": "string",
	          "!url": "https://docs.angularjs.org/api/ng/service/$compile#-template-",
	          "!doc": "HTML markup that may: Replace the contents of the directive's element (default). Replace the directive's element itself (if replace is true - DEPRECATED). Wrap the contents of the directive's element (if transclude is true)."
	        },
	        templateUrl: {
	          "!type": "string",
	          "!url": "https://docs.angularjs.org/api/ng/service/$compile#-templateurl-",
	          "!doc": "This is similar to template but the template is loaded from the specified URL, asynchronously."
	        },
	        transclude: {
	          "!type": "bool",
	          "!url": "https://docs.angularjs.org/api/ng/service/$compile#-transclude-",
	          "!doc": "Extract the contents of the element where the directive appears and make it available to the directive. The contents are compiled and provided to the directive as a transclusion function."
	        },
	        compile: {
	          "!type": "fn(tElement: +Element, tAttrs: +Attr)",
	          "!url": "https://docs.angularjs.org/api/ng/service/$compile#-transclude-",
	          "!doc": "The compile function deals with transforming the template DOM. Since most directives do not do template transformation, it is not used often."
	        },
	        link: {
	          "!type": "fn(scope: ?, iElement: +Element, iAttrs: +Attr, controller: ?, transcludeFn: fn())",
	          "!url": "https://docs.angularjs.org/api/ng/service/$compile#-link-",
	          "!doc": "The link function is responsible for registering DOM listeners as well as updating the DOM. It is executed after the template has been cloned. This is where most of the directive logic will be put."
	        }
	      },
	      Module: {
	        "!url": "http://docs.angularjs.org/api/angular.Module",
	        "!doc": "Interface for configuring angular modules.",
	        prototype: {
	          animation: {
	            "!type": "fn(name: string, animationFactory: fn()) -> !this",
	            "!url": "http://docs.angularjs.org/api/angular.Module#animation",
	            "!doc": "Defines an animation hook that can be later used with $animate service and directives that use this service."
	          },
	          config: {
	            "!type": "fn(configFn: fn()) -> !this",
	            "!effects": ["custom angular_callInject 0"],
	            "!url": "http://docs.angularjs.org/api/angular.Module#config",
	            "!doc": "Use this method to register work which needs to be performed on module loading."
	          },
	          constant: "service.$provide.constant",
	          controller: {
	            "!type": "fn(name: string, constructor: fn()) -> !this",
	            "!effects": ["custom angular_regFieldCall"],
	            "!url": "http://docs.angularjs.org/api/ng.$controllerProvider",
	            "!doc": "Register a controller."
	          },
	          directive: {
	            "!type": "fn(name: string, directiveFactory: fn() -> directiveObj) -> !this",
	            "!effects": ["custom angular_regFieldCall"],
	            "!url": "http://docs.angularjs.org/api/ng.$compileProvider#directive",
	            "!doc": "Register a new directive with the compiler."
	          },
	          factory: "service.$provide.factory",
	          filter: {
	            "!type": "fn(name: string, filterFactory: fn()) -> !this",
	            "!effects": ["custom angular_callInject 1"],
	            "!url": "http://docs.angularjs.org/api/ng.$filterProvider",
	            "!doc": "Register filter factory function."
	          },
	          provider: "service.$provide.provider",
	          run: {
	            "!type": "fn(initializationFn: fn()) -> !this",
	            "!effects": ["custom angular_callInject 0"],
	            "!url": "http://docs.angularjs.org/api/angular.Module#run",
	            "!doc": "Register work which should be performed when the injector is done loading all modules."
	          },
	          service: "service.$provide.service",
	          value: "service.$provide.value",
	          name: {
	            "!type": "string",
	            "!url": "http://docs.angularjs.org/api/angular.Module#name",
	            "!doc": "Name of the module."
	          },
	          requires: {
	            "!type": "[string]",
	            "!url": "http://docs.angularjs.org/api/angular.Module#requires",
	            "!doc": "List of module names which must be loaded before this module."
	          }
	        }
	      },
	      Promise: {
	        "!url": "http://docs.angularjs.org/api/ng.$q",
	        "!doc": "Allow for interested parties to get access to the result of the deferred task when it completes.",
	        prototype: {
	          then: "fn(successCallback: fn(value: ?), errorCallback: fn(reason: ?), notifyCallback: fn(value: ?)) -> +Promise",
	          "catch": "fn(errorCallback: fn(reason: ?))",
	          "finally": "fn(callback: fn()) -> +Promise",
	          success: "fn(callback: fn(data: ?, status: number, headers: ?, config: ?)) -> +Promise",
	          error: "fn(callback: fn(data: ?, status: number, headers: ?, config: ?)) -> +Promise"
	        }
	      },
	      Deferred: {
	        "!url": "http://docs.angularjs.org/api/ng.$q",
	        prototype: {
	          resolve: "fn(value: ?)",
	          reject: "fn(reason: ?)",
	          notify: "fn(value: ?)",
	          promise: "+Promise"
	        }
	      },
	      ResourceClass: {
	        "!url": "http://docs.angularjs.org/api/ngResource.$resource",
	        prototype: {
	          $promise: "+Promise",
	          $save: "fn()"
	        }
	      },
	      Resource: {
	        "!url": "http://docs.angularjs.org/api/ngResource.$resource",
	        prototype: {
	          get: "fn(params: ?, callback: fn()) -> +ResourceClass",
	          save: "fn(params: ?, callback: fn()) -> +ResourceClass",
	          query: "fn(params: ?, callback: fn()) -> +ResourceClass",
	          remove: "fn(params: ?, callback: fn()) -> +ResourceClass",
	          "delete": "fn(params: ?, callback: fn()) -> +ResourceClass"
	        }
	      },
	      service: {
	        $anchorScroll: {
	          "!type": "fn()",
	          "!url": "http://docs.angularjs.org/api/ng.$anchorScroll",
	          "!doc": "Checks current value of $location.hash() and scroll to related element."
	        },
	        $animate: {
	          "!url": "http://docs.angularjs.org/api/ng.$animate",
	          "!doc": "Rudimentary DOM manipulation functions to insert, remove, move elements within the DOM.",
	          addClass: {
	            "!type": "fn(element: +Element, className: string, done?: fn()) -> !this",
	            "!url": "http://docs.angularjs.org/api/ng.$animate#addClass",
	            "!doc": "Adds the provided className CSS class value to the provided element."
	          },
	          enter: {
	            "!type": "fn(element: +Element, parent: +Element, after: +Element, done?: fn()) -> !this",
	            "!url": "http://docs.angularjs.org/api/ng.$animate#enter",
	            "!doc": "Inserts the element into the DOM either after the after element or within the parent element."
	          },
	          leave: {
	            "!type": "fn(element: +Element, done?: fn()) -> !this",
	            "!url": "http://docs.angularjs.org/api/ng.$animate#leave",
	            "!doc": "Removes the element from the DOM."
	          },
	          move: {
	            "!type": "fn(element: +Element, parent: +Element, after: +Element, done?: fn()) -> !this",
	            "!url": "http://docs.angularjs.org/api/ng.$animate#move",
	            "!doc": "Moves element to be placed either after the after element or inside of the parent element."
	          },
	          removeClass: {
	            "!type": "fn(element: +Element, className: string, done?: fn()) -> !this",
	            "!url": "http://docs.angularjs.org/api/ng.$animate#removeClass",
	            "!doc": "Removes the provided className CSS class value from the provided element."
	          }
	        },
	        $cacheFactory: {
	          "!type": "fn(cacheId: string, options?: ?) -> cacheObj",
	          "!url": "http://docs.angularjs.org/api/ng.$cacheFactory",
	          "!doc": "Factory that constructs cache objects and gives access to them."
	        },
	        $compile: {
	          "!type": "fn(element: +Element, transclude: fn(scope: ?), maxPriority: number)",
	          "!url": "http://docs.angularjs.org/api/ng.$compile",
	          "!doc": "Compiles a piece of HTML string or DOM into a template and produces a template function."
	        },
	        $controller: {
	          "!type": "fn(controller: fn(), locals: ?) -> ?",
	          "!url": "http://docs.angularjs.org/api/ng.$controller",
	          "!doc": "Instantiates controllers."
	        },
	        $document: {
	          "!type": "jQuery.fn",
	          "!url": "http://docs.angularjs.org/api/ng.$document",
	          "!doc": "A jQuery (lite)-wrapped reference to the browser's window.document element."
	        },
	        $exceptionHandler: {
	          "!type": "fn(exception: +Error, cause?: string)",
	          "!url": "http://docs.angularjs.org/api/ng.$exceptionHandler",
	          "!doc": "Any uncaught exception in angular expressions is delegated to this service."
	        },
	        $filter: {
	          "!type": "fn(name: string) -> fn(input: string) -> string",
	          "!url": "http://docs.angularjs.org/api/ng.$filter",
	          "!doc": "Retrieve a filter function."
	        },
	        $http: {
	          "!type": "fn(config: ?) -> service.$q",
	          "!url": "http://docs.angularjs.org/api/ng.$http",
	          "!doc": "Facilitates communication with remote HTTP servers.",
	          "delete": "fn(url: string, config?: ?) -> +Promise",
	          get: "fn(url: string, config?: ?) -> +Promise",
	          head: "fn(url: string, config?: ?) -> +Promise",
	          jsonp: "fn(url: string, config?: ?) -> +Promise",
	          post: "fn(url: string, data: ?, config?: ?) -> +Promise",
	          put: "fn(url: string, data: ?, config?: ?) -> +Promise"
	        },
	        $interpolate: {
	          "!type": "fn(text: string, mustHaveExpression?: bool, trustedContext?: string) -> fn(context: ?) -> string",
	          "!url": "http://docs.angularjs.org/api/ng.$interpolate",
	          "!doc": "Compiles a string with markup into an interpolation function."
	        },
	        $locale: {
	          "!url": "http://docs.angularjs.org/api/ng.$locale",
	          id: "string"
	        },
	        $location: {
	          "!url": "http://docs.angularjs.org/api/ng.$location",
	          "!doc": "Parses the URL in the browser address bar.",
	          absUrl: {
	            "!type": "fn() -> string",
	            "!url": "http://docs.angularjs.org/api/ng.$location#absUrl",
	            "!doc": "Return full url representation."
	          },
	          hash: {
	            "!type": "fn(value?: string) -> string",
	            "!url": "http://docs.angularjs.org/api/ng.$location#hash",
	            "!doc": "Get or set the hash fragment."
	          },
	          host: {
	            "!type": "fn() -> string",
	            "!url": "http://docs.angularjs.org/api/ng.$location#host",
	            "!doc": "Return host of current url."
	          },
	          path: {
	            "!type": "fn(value?: string) -> string",
	            "!url": "http://docs.angularjs.org/api/ng.$location#path",
	            "!doc": "Get or set the URL path."
	          },
	          port: {
	            "!type": "fn() -> number",
	            "!url": "http://docs.angularjs.org/api/ng.$location#port",
	            "!doc": "Returns the port of the current url."
	          },
	          protocol: {
	            "!type": "fn() -> string",
	            "!url": "http://docs.angularjs.org/api/ng.$location#protocol",
	            "!doc": "Return protocol of current url."
	          },
	          replace: {
	            "!type": "fn()",
	            "!url": "http://docs.angularjs.org/api/ng.$location#replace",
	            "!doc": "Changes to $location during current $digest will be replacing current history record, instead of adding new one."
	          },
	          search: {
	            "!type": "fn(search: string, paramValue?: string) -> string",
	            "!url": "http://docs.angularjs.org/api/ng.$location#search",
	            "!doc": "Get or set the URL query."
	          },
	          url: {
	            "!type": "fn(url: string, replace?: string) -> string",
	            "!url": "http://docs.angularjs.org/api/ng.$location#url",
	            "!doc": "Get or set the current url."
	          }
	        },
	        $log: {
	          "!url": "http://docs.angularjs.org/api/ng.$log",
	          "!doc": "Simple service for logging.",
	          debug: {
	            "!type": "fn(message: string)",
	            "!url": "http://docs.angularjs.org/api/ng.$log#debug",
	            "!doc": "Write a debug message."
	          },
	          error: {
	            "!type": "fn(message: string)",
	            "!url": "http://docs.angularjs.org/api/ng.$log#error",
	            "!doc": "Write an error message."
	          },
	          info: {
	            "!type": "fn(message: string)",
	            "!url": "http://docs.angularjs.org/api/ng.$log#info",
	            "!doc": "Write an info message."
	          },
	          log: {
	            "!type": "fn(message: string)",
	            "!url": "http://docs.angularjs.org/api/ng.$log#log",
	            "!doc": "Write a log message."
	          },
	          warn: {
	            "!type": "fn(message: string)",
	            "!url": "http://docs.angularjs.org/api/ng.$log#warn",
	            "!doc": "Write a warning message."
	          }
	        },
	        $parse: {
	          "!type": "fn(expression: string) -> fn(context: ?, locals: ?) -> ?",
	          "!url": "http://docs.angularjs.org/api/ng.$parse",
	          "!doc": "Converts Angular expression into a function."
	        },
	        $q: {
	          "!type": "fn(executor: fn(resolve: fn(value: ?) -> +Promise, reject: fn(value: ?) -> +Promise)) -> +Promise",
	          "!url": "http://docs.angularjs.org/api/ng.$q",
	          "!doc": "A promise/deferred implementation.",
	          all: {
	            "!type": "fn(promises: [+Promise]) -> +Promise",
	            "!url": "http://docs.angularjs.org/api/ng.$q#all",
	            "!doc": "Combines multiple promises into a single promise."
	          },
	          defer: {
	            "!type": "fn() -> +Deferred",
	            "!url": "http://docs.angularjs.org/api/ng.$q#defer",
	            "!doc": "Creates a Deferred object which represents a task which will finish in the future."
	          },
	          reject: {
	            "!type": "fn(reason: ?) -> +Promise",
	            "!url": "http://docs.angularjs.org/api/ng.$q#reject",
	            "!doc": "Creates a promise that is resolved as rejected with the specified reason."
	          },
	          when: {
	            "!type": "fn(value: ?) -> +Promise",
	            "!url": "http://docs.angularjs.org/api/ng.$q#when",
	            "!doc": "Wraps an object that might be a value or a (3rd party) then-able promise into a $q promise."
	          }
	        },
	        $rootElement: {
	          "!type": "+Element",
	          "!url": "http://docs.angularjs.org/api/ng.$rootElement",
	          "!doc": "The root element of Angular application."
	        },
	        $rootScope: {
	          "!url": "http://docs.angularjs.org/api/ng.$rootScope",
	          $apply: {
	            "!type": "fn(expression: string)",
	            "!url": "http://docs.angularjs.org/api/ng.$rootScope.Scope#$apply",
	            "!doc": "Execute an expression in angular from outside of the angular framework."
	          },
	          $broadcast: {
	            "!type": "fn(name: string, args?: ?) -> eventObj",
	            "!url": "http://docs.angularjs.org/api/ng.$rootScope.Scope#$broadcast",
	            "!doc": "Dispatches an event name downwards to all child scopes."
	          },
	          $destroy: {
	            "!type": "fn()",
	            "!url": "http://docs.angularjs.org/api/ng.$rootScope.Scope#$destroy",
	            "!doc": "Removes the current scope (and all of its children) from the parent scope."
	          },
	          $digest: {
	            "!type": "fn()",
	            "!url": "http://docs.angularjs.org/api/ng.$rootScope.Scope#$digest",
	            "!doc": "Processes all of the watchers of the current scope and its children."
	          },
	          $emit: {
	            "!type": "fn(name: string, args?: ?) -> eventObj",
	            "!url": "http://docs.angularjs.org/api/ng.$rootScope.Scope#$emit",
	            "!doc": "Dispatches an event name upwards through the scope hierarchy."
	          },
	          $eval: {
	            "!type": "fn(expression: string) -> ?",
	            "!url": "http://docs.angularjs.org/api/ng.$rootScope.Scope#$eval",
	            "!doc": "Executes the expression on the current scope and returns the result."
	          },
	          $evalAsync: {
	            "!type": "fn(expression: string)",
	            "!url": "http://docs.angularjs.org/api/ng.$rootScope.Scope#$evalAsync",
	            "!doc": "Executes the expression on the current scope at a later point in time."
	          },
	          $new: {
	            "!type": "fn(isolate: bool) -> service.$rootScope",
	            "!url": "http://docs.angularjs.org/api/ng.$rootScope.Scope#$new",
	            "!doc": "Creates a new child scope."
	          },
	          $on: {
	            "!type": "fn(name: string, listener: fn(event: ?)) -> fn()",
	            "!url": "http://docs.angularjs.org/api/ng.$rootScope.Scope#$on",
	            "!doc": "Listens on events of a given type."
	          },
	          $watch: {
	            "!type": "fn(watchExpression: string, listener?: fn(), objectEquality?: bool) -> fn()",
	            "!url": "http://docs.angularjs.org/api/ng.$rootScope.Scope#$watch",
	            "!doc": "Registers a listener callback to be executed whenever the watchExpression changes."
	          },
	          $watchCollection: {
	            "!type": "fn(obj: string, listener: fn()) -> fn()",
	            "!url": "http://docs.angularjs.org/api/ng.$rootScope.Scope#$watchCollection",
	            "!doc": "Shallow watches the properties of an object and fires whenever any of the properties."
	          },
	          $id: {
	            "!type": "number",
	            "!url": "http://docs.angularjs.org/api/ng.$rootScope.Scope#$id",
	            "!doc": "Unique scope ID."
	          }
	        },
	        $sce: {
	          HTML: "string",
	          CSS: "string",
	          URL: "string",
	          RESOURCE_URL: "string",
	          JS: "string",
	          getTrusted: "fn(type: string, maybeTrusted: ?) -> !1",
	          getTrustedCss: "fn(maybeTrusted: ?) -> !0",
	          getTrustedHtml: "fn(maybeTrusted: ?) -> !0",
	          getTrustedJs: "fn(maybeTrusted: ?) -> !0",
	          getTrustedResourceUrl: "fn(maybeTrusted: ?) -> !0",
	          getTrustedUrl: "fn(maybeTrusted: ?) -> !0",
	          parse: "fn(type: string, expression: string) -> fn(context: ?, locals: ?) -> ?",
	          parseAsCss: "fn(expression: string) -> fn(context: ?, locals: ?) -> ?",
	          parseAsHtml: "fn(expression: string) -> fn(context: ?, locals: ?) -> ?",
	          parseAsJs: "fn(expression: string) -> fn(context: ?, locals: ?) -> ?",
	          parseAsResourceUrl: "fn(expression: string) -> fn(context: ?, locals: ?) -> ?",
	          parseAsUrl: "fn(expression: string) -> fn(context: ?, locals: ?) -> ?",
	          trustAs: "fn(type: string, value: ?) -> !1",
	          trustAsHtml: "fn(value: ?) -> !0",
	          trustAsJs: "fn(value: ?) -> !0",
	          trustAsResourceUrl: "fn(value: ?) -> !0",
	          trustAsUrl: "fn(value: ?) -> !0",
	          isEnabled: "fn() -> bool"
	        },
	        $templateCache: {
	          "!url": "http://docs.angularjs.org/api/ng.$templateCache",
	          "!proto": "cacheObj"
	        },
	        $timeout: {
	          "!type": "fn(fn: fn(), delay?: number, invokeApply?: bool) -> +Promise",
	          "!url": "http://docs.angularjs.org/api/ng.$timeout",
	          "!doc": "Angular's wrapper for window.setTimeout.",
	          cancel: "fn(promise: +Promise)"
	        },
	        $window: "<top>",
	        $injector: {
	          "!url": "http://docs.angularjs.org/api/AUTO.$injector",
	          "!doc": "Retrieve object instances as defined by provider.",
	          annotate: {
	            "!type": "fn(f: fn()) -> [string]",
	            "!url": "http://docs.angularjs.org/api/AUTO.$injector#annotate",
	            "!doc": "Returns an array of service names which the function is requesting for injection."
	          },
	          get: {
	            "!type": "fn(name: string) -> ?",
	            "!url": "http://docs.angularjs.org/api/AUTO.$injector#get",
	            "!doc": "Return an instance of a service."
	          },
	          has: {
	            "!type": "fn(name: string) -> bool",
	            "!url": "http://docs.angularjs.org/api/AUTO.$injector#has",
	            "!doc": "Allows the user to query if the particular service exist."
	          },
	          instantiate: {
	            "!type": "fn(type: fn(), locals?: ?) -> +!0",
	            "!url": "http://docs.angularjs.org/api/AUTO.$injector#instantiate",
	            "!doc": "Create a new instance of JS type."
	          },
	          invoke: {
	            "!type": "fn(type: fn(), self?: ?, locals?: ?) -> !0.!ret",
	            "!url": "http://docs.angularjs.org/api/AUTO.$injector#invoke",
	            "!doc": "Invoke the method and supply the method arguments from the $injector."
	          }
	        },
	        $provide: {
	          "!url": "http://docs.angularjs.org/api/AUTO.$provide",
	          "!doc": "Use $provide to register new providers with the $injector.",
	          constant: {
	            "!type": "fn(name: string, value: ?) -> !this",
	            "!effects": ["custom angular_regField"],
	            "!url": "http://docs.angularjs.org/api/AUTO.$provide#constant",
	            "!doc": "A constant value."
	          },
	          decorator: {
	            "!type": "fn(name: string, decorator: fn())",
	            "!effects": ["custom angular_regFieldCall"],
	            "!url": "http://docs.angularjs.org/api/AUTO.$provide#decorator",
	            "!doc": "Decoration of service, allows the decorator to intercept the service instance creation."
	          },
	          factory: {
	            "!type": "fn(name: string, providerFunction: fn()) -> !this",
	            "!effects": ["custom angular_regFieldCall"],
	            "!url": "http://docs.angularjs.org/api/AUTO.$provide#factory",
	            "!doc": "A short hand for configuring services if only $get method is required."
	          },
	          provider: {
	            "!type": "fn(name: string, providerType: fn()) -> !this",
	            "!effects": ["custom angular_regFieldCall"],
	            "!url": "http://docs.angularjs.org/api/AUTO.$provide#provider",
	            "!doc": "Register a provider for a service."
	          },
	          service: {
	            "!type": "fn(name: string, constructor: fn()) -> !this",
	            "!effects": ["custom angular_regFieldNew"],
	            "!url": "http://docs.angularjs.org/api/AUTO.$provide#provider",
	            "!doc": "Register a provider for a service."
	          },
	          value: {
	            "!type": "fn(name: string, object: ?) -> !this",
	            "!effects": ["custom angular_regField"],
	            "!url": "http://docs.angularjs.org/api/AUTO.$providevalue",
	            "!doc": "A short hand for configuring services if the $get method is a constant."
	          }
	        },
	        $cookies: {
	          "!url": "http://docs.angularjs.org/api/ngCookies.$cookies",
	          "!doc": "Provides read/write access to browser's cookies.",
	          text: "string"
	        },
	        $resource: {
	          "!type": "fn(url: string, paramDefaults?: ?, actions?: ?) -> +Resource",
	          "!url": "http://docs.angularjs.org/api/ngResource.$resource",
	          "!doc": "Creates a resource object that lets you interact with RESTful server-side data sources."
	        },
	        $route: {
	          "!url": "http://docs.angularjs.org/api/ngRoute.$route",
	          "!doc": "Deep-link URLs to controllers and views.",
	          reload: {
	            "!type": "fn()",
	            "!url": "http://docs.angularjs.org/api/ngRoute.$route#reload",
	            "!doc": "Reload the current route even if $location hasn't changed."
	          },
	          current: {
	            "!url": "http://docs.angularjs.org/api/ngRoute.$route#current",
	            "!doc": "Reference to the current route definition.",
	            controller: "?",
	            locals: "?"
	          },
	          routes: "[?]"
	        },
	        $sanitize: {
	          "!type": "fn(string) -> string",
	          "!url": "http://docs.angularjs.org/api/ngSanitize.$sanitize",
	          "!doc": "Sanitize HTML input."
	        },
	        $swipe: {
	          "!url": "http://docs.angularjs.org/api/ngTouch.$swipe",
	          "!doc": "A service that abstracts the messier details of hold-and-drag swipe behavior.",
	          bind: {
	            "!type": "fn(element: +Element, handlers: ?)",
	            "!url": "http://docs.angularjs.org/api/ngTouch.$swipe#bind",
	            "!doc": "Abstracts the messier details of hold-and-drag swipe behavior."
	          }
	        }
	      }
	    },
	    angular: {
	      bind: {
	        "!type": "fn(self: ?, fn: fn(), args?: ?) -> !custom:angular_bind",
	        "!url": "http://docs.angularjs.org/api/angular.bind",
	        "!doc": "Returns a function which calls function fn bound to self."
	      },
	      bootstrap: {
	        "!type": "fn(element: +Element, modules?: [string]) -> service.$injector",
	        "!url": "http://docs.angularjs.org/api/angular.bootstrap",
	        "!doc": "Use this function to manually start up angular application."
	      },
	      copy: {
	        "!type": "fn(source: ?, target?: ?) -> !0",
	        "!url": "http://docs.angularjs.org/api/angular.copy",
	        "!doc": "Creates a deep copy of source, which should be an object or an array."
	      },
	      element: {
	        "!type": "fn(element: +Element) -> jQuery.fn",
	        "!url": "http://docs.angularjs.org/api/angular.element",
	        "!doc": "Wraps a raw DOM element or HTML string as a jQuery element."
	      },
	      equals: {
	        "!type": "fn(o1: ?, o2: ?) -> bool",
	        "!url": "http://docs.angularjs.org/api/angular.equals",
	        "!doc": "Determines if two objects or two values are equivalent."
	      },
	      extend: {
	        "!type": "fn(dst: ?, src: ?) -> !0",
	        "!url": "http://docs.angularjs.org/api/angular.extend",
	        "!doc": "Extends the destination object dst by copying all of the properties from the src object(s) to dst."
	      },
	      forEach: {
	        "!type": "fn(obj: ?, iterator: fn(value: ?, key: ?), context?: ?) -> !0",
	        "!effects": ["call !1 this=!2 !0.<i> number"],
	        "!url": "http://docs.angularjs.org/api/angular.forEach",
	        "!doc": "Invokes the iterator function once for each item in obj collection, which can be either an object or an array."
	      },
	      fromJson: {
	        "!type": "fn(json: string) -> ?",
	        "!url": "http://docs.angularjs.org/api/angular.fromJson",
	        "!doc": "Deserializes a JSON string."
	      },
	      identity: {
	        "!type": "fn(val: ?) -> !0",
	        "!url": "http://docs.angularjs.org/api/angular.identity",
	        "!doc": "A function that returns its first argument."
	      },
	      injector: {
	        "!type": "fn(modules: [string]) -> service.$injector",
	        "!url": "http://docs.angularjs.org/api/angular.injector",
	        "!doc": "Creates an injector function"
	      },
	      isArray: {
	        "!type": "fn(val: ?) -> bool",
	        "!url": "http://docs.angularjs.org/api/angular.isArray",
	        "!doc": "Determines if a reference is an Array."
	      },
	      isDate: {
	        "!type": "fn(val: ?) -> bool",
	        "!url": "http://docs.angularjs.org/api/angular.isDate",
	        "!doc": "Determines if a reference is a date."
	      },
	      isDefined: {
	        "!type": "fn(val: ?) -> bool",
	        "!url": "http://docs.angularjs.org/api/angular.isDefined",
	        "!doc": "Determines if a reference is defined."
	      },
	      isElement: {
	        "!type": "fn(val: ?) -> bool",
	        "!url": "http://docs.angularjs.org/api/angular.isElement",
	        "!doc": "Determines if a reference is a DOM element."
	      },
	      isFunction: {
	        "!type": "fn(val: ?) -> bool",
	        "!url": "http://docs.angularjs.org/api/angular.isFunction",
	        "!doc": "Determines if a reference is a function."
	      },
	      isNumber: {
	        "!type": "fn(val: ?) -> bool",
	        "!url": "http://docs.angularjs.org/api/angular.isNumber",
	        "!doc": "Determines if a reference is a number."
	      },
	      isObject: {
	        "!type": "fn(val: ?) -> bool",
	        "!url": "http://docs.angularjs.org/api/angular.isObject",
	        "!doc": "Determines if a reference is an object."
	      },
	      isString: {
	        "!type": "fn(val: ?) -> bool",
	        "!url": "http://docs.angularjs.org/api/angular.isString",
	        "!doc": "Determines if a reference is a string."
	      },
	      isUndefined: {
	        "!type": "fn(val: ?) -> bool",
	        "!url": "http://docs.angularjs.org/api/angular.isUndefined",
	        "!doc": "Determines if a reference is undefined."
	      },
	      lowercase: {
	        "!type": "fn(val: string) -> string",
	        "!url": "http://docs.angularjs.org/api/angular.lowercase",
	        "!doc": "Converts the specified string to lowercase."
	      },
	      module: {
	        "!type": "fn(name: string, deps: [string]) -> !custom:angular_module",
	        "!url": "http://docs.angularjs.org/api/angular.module",
	        "!doc": "A global place for creating, registering and retrieving Angular modules."
	      },
	      Module: "Module",
	      noop: {
	        "!type": "fn()",
	        "!url": "http://docs.angularjs.org/api/angular.noop",
	        "!doc": "A function that performs no operations."
	      },
	      toJson: {
	        "!type": "fn(val: ?) -> string",
	        "!url": "http://docs.angularjs.org/api/angular.toJson",
	        "!doc": "Serializes input into a JSON-formatted string."
	      },
	      uppercase: {
	        "!type": "fn(string) -> string",
	        "!url": "http://docs.angularjs.org/api/angular.uppercase",
	        "!doc": "Converts the specified string to uppercase."
	      },
	      version: {
	        "!url": "http://docs.angularjs.org/api/angular.version",
	        full: "string",
	        major: "number",
	        minor: "number",
	        dot: "number",
	        codename: "string"
	      }
	    }
	  };
	});


/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(mod) {
	  if (true) // CommonJS
	    return mod(exports);
	  if (true) // AMD
	    return !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports], __WEBPACK_AMD_DEFINE_FACTORY__ = (mod), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  mod(tern.comment || (tern.comment = {}));
	})(function(exports) {
	  function isSpace(ch) {
	    return (ch < 14 && ch > 8) || ch === 32 || ch === 160;
	  }
	
	  function onOwnLine(text, pos) {
	    for (; pos > 0; --pos) {
	      var ch = text.charCodeAt(pos - 1);
	      if (ch == 10) break;
	      if (!isSpace(ch)) return false;
	    }
	    return true;
	  }
	
	  // Gather comments directly before a function
	  exports.commentsBefore = function(text, pos) {
	    var found = null, emptyLines = 0, topIsLineComment;
	    out: while (pos > 0) {
	      var prev = text.charCodeAt(pos - 1);
	      if (prev == 10) {
	        for (var scan = --pos, sawNonWS = false; scan > 0; --scan) {
	          prev = text.charCodeAt(scan - 1);
	          if (prev == 47 && text.charCodeAt(scan - 2) == 47) {
	            if (!onOwnLine(text, scan - 2)) break out;
	            var content = text.slice(scan, pos);
	            if (!emptyLines && topIsLineComment) found[0] = content + "\n" + found[0];
	            else (found || (found = [])).unshift(content);
	            topIsLineComment = true;
	            emptyLines = 0;
	            pos = scan - 2;
	            break;
	          } else if (prev == 10) {
	            if (!sawNonWS && ++emptyLines > 1) break out;
	            break;
	          } else if (!sawNonWS && !isSpace(prev)) {
	            sawNonWS = true;
	          }
	        }
	      } else if (prev == 47 && text.charCodeAt(pos - 2) == 42) {
	        for (var scan = pos - 2; scan > 1; --scan) {
	          if (text.charCodeAt(scan - 1) == 42 && text.charCodeAt(scan - 2) == 47) {
	            if (!onOwnLine(text, scan - 2)) break out;
	            (found || (found = [])).unshift(text.slice(scan, pos - 2));
	            topIsLineComment = false;
	            emptyLines = 0;
	            break;
	          }
	        }
	        pos = scan - 2;
	      } else if (isSpace(prev)) {
	        --pos;
	      } else {
	        break;
	      }
	    }
	    return found;
	  };
	
	  exports.commentAfter = function(text, pos) {
	    while (pos < text.length) {
	      var next = text.charCodeAt(pos);
	      if (next == 47) {
	        var after = text.charCodeAt(pos + 1), end;
	        if (after == 47) // line comment
	          end = text.indexOf("\n", pos + 2);
	        else if (after == 42) // block comment
	          end = text.indexOf("*/", pos + 2);
	        else
	          return;
	        return text.slice(pos + 2, end < 0 ? text.length : end);
	      } else if (isSpace(next)) {
	        ++pos;
	      }
	    }
	  };
	
	  exports.ensureCommentsBefore = function(text, node) {
	    if (node.hasOwnProperty("commentsBefore")) return node.commentsBefore;
	    return node.commentsBefore = exports.commentsBefore(text, node.start);
	  };
	});


/***/ },
/* 24 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// Parses comments above variable declarations, function declarations,
	// and object properties as docstrings and JSDoc-style type
	// annotations.
	
	(function(mod) {
	  if (true) // CommonJS
	    return mod(__webpack_require__(3), __webpack_require__(9), __webpack_require__(23),
	               __webpack_require__(4), __webpack_require__(5));
	  if (true) // AMD
	    return !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(3), __webpack_require__(9), __webpack_require__(23), __webpack_require__(4) /*ORION*/, __webpack_require__(5)], __WEBPACK_AMD_DEFINE_FACTORY__ = (mod), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  mod(tern, tern, tern.comment, acorn, acorn.walk);
	})(function(infer, tern, comment, acorn, walk) {
	  "use strict";
	
	  var WG_MADEUP = 1, WG_STRONG = 101;
	
	  tern.registerPlugin("doc_comment", function(server, options) {
	    server.jsdocTypedefs = Object.create(null);
	    server.on("reset", function() {
	      server.jsdocTypedefs = Object.create(null);
	    });
	    server._docComment = {
	      weight: options && options.strong ? WG_STRONG : undefined,
	      fullDocs: options && options.fullDocs
	    };
	
	    return {
	      passes: {
	        postParse: postParse,
	        postInfer: postInfer,
	        postLoadDef: postLoadDef
	      }
	    };
	  });
	
	  function postParse(ast, text) {
	    function attachComments(node) { comment.ensureCommentsBefore(text, node); }
	
	    walk.simple(ast, {
	      VariableDeclaration: attachComments,
	      FunctionDeclaration: attachComments,
	      AssignmentExpression: function(node) {
	        if (node.operator == "=") attachComments(node);
	      },
	      ObjectExpression: function(node) {
	        for (var i = 0; i < node.properties.length; ++i)
	          attachComments(node.properties[i]);
	      },
	      CallExpression: function(node) {
	        if (isDefinePropertyCall(node)) attachComments(node);
	      }
	    });
	  }
	
	  function isDefinePropertyCall(node) {
	    return node.callee.type == "MemberExpression" &&
	      node.callee.object.name == "Object" &&
	      node.callee.property.name == "defineProperty" &&
	      node.arguments.length >= 3 &&
	      typeof node.arguments[1].value == "string";
	  }
	
	  function postInfer(ast, scope) {
	    jsdocParseTypedefs(ast.sourceFile.text, scope);
	
	    walk.simple(ast, {
	      VariableDeclaration: function(node, scope) {
	        if (node.commentsBefore)
	          interpretComments(node, node.commentsBefore, scope,
	                            scope.getProp(node.declarations[0].id.name));
	      },
	      FunctionDeclaration: function(node, scope) {
	        if (node.commentsBefore)
	          interpretComments(node, node.commentsBefore, scope,
	                            scope.getProp(node.id.name),
	                            node.body.scope.fnType);
	      },
	      AssignmentExpression: function(node, scope) {
	        if (node.commentsBefore)
	          interpretComments(node, node.commentsBefore, scope,
	                            infer.expressionType({node: node.left, state: scope}));
	      },
	      ObjectExpression: function(node, scope) {
	        for (var i = 0; i < node.properties.length; ++i) {
	          var prop = node.properties[i];
	          if (prop.commentsBefore)
	            interpretComments(prop, prop.commentsBefore, scope,
	                              node.objType.getProp(prop.key.name));
	        }
	      },
	      CallExpression: function(node, scope) {
	        if (node.commentsBefore && isDefinePropertyCall(node)) {
	          var type = infer.expressionType({node: node.arguments[0], state: scope}).getObjType();
	          if (type && type instanceof infer.Obj) {
	            var prop = type.props[node.arguments[1].value];
	            if (prop) interpretComments(node, node.commentsBefore, scope, prop);
	          }
	        }
	      }
	    }, infer.searchVisitor, scope);
	  }
	
	  function postLoadDef(data) {
	    var defs = data["!typedef"];
	    var cx = infer.cx(), orig = data["!name"];
	    if (defs) for (var name in defs)
	      cx.parent.jsdocTypedefs[name] =
	        maybeInstance(infer.def.parse(defs[name], orig, name), name);
	  }
	
	  // COMMENT INTERPRETATION
	
	  function stripLeadingChars(lines) {
	    for (var head, i = 1; i < lines.length; i++) {
	      var line = lines[i], lineHead = line.match(/^[\s\*]*/)[0];
	      if (lineHead != line) {
	        if (head == null) {
	          head = lineHead;
	        } else {
	          var same = 0;
	          while (same < head.length && head.charCodeAt(same) == lineHead.charCodeAt(same)) ++same;
	          if (same < head.length) head = head.slice(0, same)
	        }
	      }
	    }
	    lines = lines.map(function(line, i) {
	      line = line.replace(/\s+$/, "");
	      if (i == 0 && head != null) {
	        for (var j = 0; j < head.length; j++) {
	          var found = line.indexOf(head.slice(j));
	          if (found == 0) return line.slice(head.length - j);
	        }
	      }
	      if (head == null || i == 0) return line.replace(/^[\s\*]*/, "");
	      if (line.length < head.length) return "";
	      return line.slice(head.length);
	    });
	    while (lines.length && !lines[lines.length - 1]) lines.pop();
	    while (lines.length && !lines[0]) lines.shift();
	    return lines;
	  }
	
	  function interpretComments(node, comments, scope, aval, type) {
	    jsdocInterpretComments(node, scope, aval, comments);
	    var cx = infer.cx();
	
	    if (!type && aval instanceof infer.AVal && aval.types.length) {
	      type = aval.types[aval.types.length - 1];
	      if (!(type instanceof infer.Obj) || type.origin != cx.curOrigin || type.doc)
	        type = null;
	    }
	
	    for (var i = comments.length - 1; i >= 0; i--) {
	      var text = stripLeadingChars(comments[i].split(/\r\n?|\n/)).join("\n");
	      if (text) {
	        if (aval instanceof infer.AVal) aval.doc = text;
	        if (type) type.doc = text;
	        break;
	      }
	    }
	  }
	
	  // Parses a subset of JSDoc-style comments in order to include the
	  // explicitly defined types in the analysis.
	
	  function skipSpace(str, pos) {
	    while (/\s/.test(str.charAt(pos))) ++pos;
	    return pos;
	  }
	
	  function isIdentifier(string) {
	    if (!acorn.isIdentifierStart(string.charCodeAt(0))) return false;
	    for (var i = 1; i < string.length; i++)
	      if (!acorn.isIdentifierChar(string.charCodeAt(i))) return false;
	    return true;
	  }
	
	  function parseLabelList(scope, str, pos, close) {
	    var labels = [], types = [], madeUp = false;
	    for (var first = true; ; first = false) {
	      pos = skipSpace(str, pos);
	      if (first && str.charAt(pos) == close) break;
	      var colon = str.indexOf(":", pos);
	      if (colon < 0) return null;
	      var label = str.slice(pos, colon);
	      if (!isIdentifier(label)) return null;
	      labels.push(label);
	      pos = colon + 1;
	      var type = parseType(scope, str, pos);
	      if (!type) return null;
	      pos = type.end;
	      madeUp = madeUp || type.madeUp;
	      types.push(type.type);
	      pos = skipSpace(str, pos);
	      var next = str.charAt(pos);
	      ++pos;
	      if (next == close) break;
	      if (next != ",") return null;
	    }
	    return {labels: labels, types: types, end: pos, madeUp: madeUp};
	  }
	
	  function parseType(scope, str, pos) {
	    var type, union = false, madeUp = false;
	    for (;;) {
	      var inner = parseTypeInner(scope, str, pos);
	      if (!inner) return null;
	      madeUp = madeUp || inner.madeUp;
	      if (union) inner.type.propagate(union);
	      else type = inner.type;
	      pos = skipSpace(str, inner.end);
	      if (str.charAt(pos) != "|") break;
	      pos++;
	      if (!union) {
	        union = new infer.AVal;
	        type.propagate(union);
	        type = union;
	      }
	    }
	    var isOptional = false;
	    if (str.charAt(pos) == "=") {
	      ++pos;
	      isOptional = true;
	    }
	    return {type: type, end: pos, isOptional: isOptional, madeUp: madeUp};
	  }
	
	  function parseTypeInner(scope, str, pos) {
	    pos = skipSpace(str, pos);
	    var type, madeUp = false;
	
	    if (str.indexOf("function(", pos) == pos) {
	      var args = parseLabelList(scope, str, pos + 9, ")"), ret = infer.ANull;
	      if (!args) return null;
	      pos = skipSpace(str, args.end);
	      if (str.charAt(pos) == ":") {
	        ++pos;
	        var retType = parseType(scope, str, pos + 1);
	        if (!retType) return null;
	        pos = retType.end;
	        ret = retType.type;
	        madeUp = retType.madeUp;
	      }
	      type = new infer.Fn(null, infer.ANull, args.types, args.labels, ret);
	    } else if (str.charAt(pos) == "[") {
	      var inner = parseType(scope, str, pos + 1);
	      if (!inner) return null;
	      pos = skipSpace(str, inner.end);
	      madeUp = inner.madeUp;
	      if (str.charAt(pos) != "]") return null;
	      ++pos;
	      type = new infer.Arr(inner.type);
	    } else if (str.charAt(pos) == "{") {
	      var fields = parseLabelList(scope, str, pos + 1, "}");
	      if (!fields) return null;
	      type = new infer.Obj(true);
	      for (var i = 0; i < fields.types.length; ++i) {
	        var field = type.defProp(fields.labels[i]);
	        field.initializer = true;
	        fields.types[i].propagate(field);
	      }
	      pos = fields.end;
	      madeUp = fields.madeUp;
	    } else if (str.charAt(pos) == "(") {
	      var inner = parseType(scope, str, pos + 1);
	      if (!inner) return null;
	      pos = skipSpace(str, inner.end);
	      if (str.charAt(pos) != ")") return null;
	      ++pos;
	      type = inner.type;
	    } else {
	      var start = pos;
	      if (!acorn.isIdentifierStart(str.charCodeAt(pos))) return null;
	      while (acorn.isIdentifierChar(str.charCodeAt(pos))) ++pos;
	      if (start == pos) return null;
	      var word = str.slice(start, pos);
	      if (/^(number|integer)$/i.test(word)) type = infer.cx().num;
	      else if (/^bool(ean)?$/i.test(word)) type = infer.cx().bool;
	      else if (/^string$/i.test(word)) type = infer.cx().str;
	      else if (/^(null|undefined)$/i.test(word)) type = infer.ANull;
	      else if (/^array$/i.test(word)) {
	        var inner = null;
	        if (str.charAt(pos) == "." && str.charAt(pos + 1) == "<") {
	          var inAngles = parseType(scope, str, pos + 2);
	          if (!inAngles) return null;
	          pos = skipSpace(str, inAngles.end);
	          madeUp = inAngles.madeUp;
	          if (str.charAt(pos++) != ">") return null;
	          inner = inAngles.type;
	        }
	        type = new infer.Arr(inner);
	      } else if (/^object$/i.test(word)) {
	        type = new infer.Obj(true);
	        if (str.charAt(pos) == "." && str.charAt(pos + 1) == "<") {
	          var key = parseType(scope, str, pos + 2);
	          if (!key) return null;
	          pos = skipSpace(str, key.end);
	          madeUp = madeUp || key.madeUp;
	          if (str.charAt(pos++) != ",") return null;
	          var val = parseType(scope, str, pos);
	          if (!val) return null;
	          pos = skipSpace(str, val.end);
	          madeUp = key.madeUp || val.madeUp;
	          if (str.charAt(pos++) != ">") return null;
	          val.type.propagate(type.defProp("<i>"));
	        }
	      } else {
	        while (str.charCodeAt(pos) == 46 ||
	               acorn.isIdentifierChar(str.charCodeAt(pos))) ++pos;
	        var path = str.slice(start, pos);
	        var cx = infer.cx(), defs = cx.parent && cx.parent.jsdocTypedefs, found;
	        if (defs && (path in defs)) {
	          type = defs[path];
	        } else if (found = infer.def.parsePath(path, scope).getObjType()) {
	          type = maybeInstance(found, path);
	        } else {
	          if (!cx.jsdocPlaceholders) cx.jsdocPlaceholders = Object.create(null);
	          if (!(path in cx.jsdocPlaceholders))
	            type = cx.jsdocPlaceholders[path] = new infer.Obj(null, path);
	          else
	            type = cx.jsdocPlaceholders[path];
	          madeUp = true;
	        }
	      }
	    }
	
	    return {type: type, end: pos, madeUp: madeUp};
	  }
	
	  function maybeInstance(type, path) {
	    if (type instanceof infer.Fn && /^[A-Z]/.test(path)) {
	      var proto = type.getProp("prototype").getObjType();
	      if (proto instanceof infer.Obj) return infer.getInstance(proto);
	    }
	    return type;
	  }
	
	  function parseTypeOuter(scope, str, pos) {
	    pos = skipSpace(str, pos || 0);
	    if (str.charAt(pos) != "{") return null;
	    var result = parseType(scope, str, pos + 1);
	    if (!result) return null;
	    var end = skipSpace(str, result.end);
	    if (str.charAt(end) != "}") return null;
	    result.end = end + 1;
	    return result;
	  }
	
	  function jsdocInterpretComments(node, scope, aval, comments) {
	    var type, args, ret, foundOne, self, parsed;
	
	    for (var i = comments.length-1; i >= 0; i--) { //ORION
	      var comment = comments[i];
	      var decl = /(?:\n|$|\*)\s*@(type|param|arg(?:ument)?|returns?|this)\s+(.*)/g, m;
	      while (m = decl.exec(comment)) {
	        if (m[1] == "this" && (parsed = parseType(scope, m[2], 0))) {
	          self = parsed;
	          foundOne = true;
	          continue;
	        }
	
	        if (!(parsed = parseTypeOuter(scope, m[2]))) continue;
	        foundOne = true;
	
	        switch(m[1]) {
	        case "returns": case "return":
	          ret = parsed; break;
	        case "type":
	          type = parsed; break;
	        case "param": case "arg": case "argument":
	            var name = m[2].slice(parsed.end).match(/^\s*(\[?)\s*([^\]\s=]+)\s*(?:=[^\]]+\s*)?(\]?).*/);
	            if (!name) continue;
	            var argname = name[2] + (parsed.isOptional || (name[1] === '[' && name[3] === ']') ? "?" : "");
	          (args || (args = Object.create(null)))[argname] = parsed;
	          break;
	        }
	      }
	    }
	
	    if (foundOne) applyType(type, self, args, ret, node, aval);
	  };
	
	  function jsdocParseTypedefs(text, scope) {
	    var cx = infer.cx();
	
	    var re = /\s@typedef\s+(.*)/g, m;
	    while (m = re.exec(text)) {
	      var parsed = parseTypeOuter(scope, m[1]);
	      var name = parsed && m[1].slice(parsed.end).match(/^\s*(\S+)/);
	      if (name)
	        cx.parent.jsdocTypedefs[name[1]] = parsed.type;
	    }
	  }
	
	  function propagateWithWeight(type, target) {
	    var weight = infer.cx().parent._docComment.weight;
	    type.type.propagate(target, weight || (type.madeUp ? WG_MADEUP : undefined));
	  }
	
	  function applyType(type, self, args, ret, node, aval) {
	    var fn;
	    if (node.type == "VariableDeclaration") {
	      var decl = node.declarations[0];
	      if (decl.init && decl.init.type == "FunctionExpression") fn = decl.init.body.scope.fnType;
	    } else if (node.type == "FunctionDeclaration") {
	      fn = node.body.scope.fnType;
	    } else if (node.type == "AssignmentExpression") {
	      if (node.right.type == "FunctionExpression")
	        fn = node.right.body.scope.fnType;
	    } else if (node.type == "CallExpression") {
	    } else { // An object property
	      if (node.value.type == "FunctionExpression") fn = node.value.body.scope.fnType;
	    }
	
	    if (fn && (args || ret || self)) {
	      if (args) for (var i = 0; i < fn.argNames.length; ++i) {
	        var name = fn.argNames[i], known = args[name];
	        if (!known && (known = args[name + "?"]))
	          fn.argNames[i] += "?";
	        if (known) propagateWithWeight(known, fn.args[i]);
	      }
	      if (ret) {
	        if (fn.retval == infer.ANull) fn.retval = new infer.AVal;
	        propagateWithWeight(ret, fn.retval);
	      }
	      if (self) propagateWithWeight(self, fn.self);
	    } else if (type) {
	      propagateWithWeight(type, aval);
	    }
	  };
	});


/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(mod) {
	  if (true) // CommonJS
	    return mod(__webpack_require__(3), __webpack_require__(9), __webpack_require__(26));
	  if (true) // AMD
	    return !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(3), __webpack_require__(9), __webpack_require__(10)], __WEBPACK_AMD_DEFINE_FACTORY__ = (mod), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  mod(tern, tern);
	})(function(infer, tern, resolver, require) {
	  "use strict";
	
	  function resolvePath(base, path) {
	    if (path[0] == "/") return path;
	    var slash = base.lastIndexOf("/"), m;
	    if (slash >= 0) path = base.slice(0, slash + 1) + path;
	    while (m = /[^\/]*[^\/\.][^\/]*\/\.\.\//.exec(path))
	      path = path.slice(0, m.index) + path.slice(m.index + m[0].length);
	    return path.replace(/(^|[^\.])\.\//g, "$1");
	  }
	
	  function relativePath(from, to) {
	    if (from[from.length - 1] != "/") from += "/";
	    if (to.indexOf(from) == 0) return to.slice(from.length);
	    else return to;
	  }
	
	  function getModule(data, name) {
	    return data.modules[name] || (data.modules[name] = new infer.AVal);
	  }
	
	  var WG_DEFAULT_EXPORT = 95;
	
	  function buildWrappingScope(parent, origin, node) {
	    var scope = new infer.Scope(parent);
	    scope.originNode = node;
	    infer.cx().definitions.node.require.propagate(scope.defProp("require"));
	    var module = new infer.Obj(infer.cx().definitions.node.Module.getProp("prototype").getType());
	    module.propagate(scope.defProp("module"));
	    var exports = new infer.Obj(true, "exports");
	    module.origin = exports.origin = origin;
	    module.originNode = exports.originNode = scope.originNode;
	    exports.propagate(scope.defProp("exports"));
	    var moduleExports = scope.exports = module.defProp("exports");
	    exports.propagate(moduleExports, WG_DEFAULT_EXPORT);
	    return scope;
	  }
	
	  function resolveModule(server, name, _parent, text) { // ORION 11.0 Avoid loading file contents twice
	    server.addFile(name, text, server._node.currentOrigin);
	    return getModule(server._node, name);
	  }
	
	  // Assume node.js & access to local file system
	  if (require) (function() {
	    var fs = require("fs"), module_ = require("module"), path = require("path");
	
	    relativePath = path.relative;
	
	    resolveModule = function(server, name, parent) {
	      var data = server._node;
	      if (data.options.dontLoad == true ||
	          data.options.dontLoad && new RegExp(data.options.dontLoad).test(name) ||
	          data.options.load && !new RegExp(data.options.load).test(name))
	        return infer.ANull;
	
	      if (data.modules[name]) return data.modules[name];
	
	      var currentModule = {
	        id: parent,
	        paths: module_._nodeModulePaths(path.dirname(parent))
	      };
	      try {
	        var file = module_._resolveFilename(name, currentModule);
	      } catch(e) { return infer.ANull; }
	
	      var norm = normPath(file);
	      if (data.modules[norm]) return data.modules[norm];
	
	      if (fs.existsSync(file) && /^(\.js)?$/.test(path.extname(file)))
	        server.addFile(relativePath(server.options.projectDir, file), null, data.currentOrigin);
	      return data.modules[norm] = new infer.AVal;
	    };
	  })();
	
	  function normPath(name) { return name.replace(/\\/g, "/"); }
	
	  function resolveProjectPath(server, pth) {
	    return resolvePath(normPath(server.options.projectDir || "") + "/", normPath(pth));
	  }
	
	  infer.registerFunction("nodeRequire", function(_self, _args, argNodes) {
	    if (!argNodes || !argNodes.length || argNodes[0].type != "Literal" || typeof argNodes[0].value != "string")
	      return infer.ANull;
	    var cx = infer.cx(), server = cx.parent, data = server._node, name = argNodes[0].value;
	    var locals = cx.definitions.node;
	    var result;
	
	    if (locals[name] && /^[a-z_]*$/.test(name)) {
	      result = locals[name];
	    } else if (name in data.modules) {
	      result = data.modules[name];
	    } else if (data.options.modules && data.options.modules.hasOwnProperty(name)) {
	      var mod = data.options.modules[name];
	      if (typeof(mod) == "string" && mod.charAt(0) == "=") {
	        result = infer.def.parsePath(mod.slice(1));
	      } else {
	        var scope = buildWrappingScope(cx.topScope, name);
	        infer.def.load(data.options.modules[name], scope);
	        result = data.modules[name] = scope.exports;
	      }
	    } else {
	        var _f = resolver.getResolved(name); //ORION
			if(_f && _f.file) {
				name = _f.file;
				// data.currentFile is only available while analyzing a file; at query
		      // time, determine the calling file from the caller's AST.
		      var currentFile = data.currentFile || resolveProjectPath(server, argNodes[0].sourceFile.name);
		
		      var relative = /^\.{0,2}\//.test(name);
		      if (relative) {
		        if (!currentFile) return argNodes[0].required || infer.ANull;
		        name = resolvePath(currentFile, name);
		      }
		      result = resolveModule(server, name, currentFile, _f.content); // ORION 11.0 Avoid loading file contents twice
			} else {
				result = new infer.AVal(); //ORION
			}
	    }
	    return argNodes[0].required = result;
	  });
	
	  function preCondenseReach(state) {
	    var mods = infer.cx().parent._node.modules;
	    var node = state.roots["!node"] = new infer.Obj(null);
	    for (var name in mods) {
	      var mod = mods[name];
	      var id = mod.origin || name;
	      var prop = node.defProp(id.replace(/\./g, "`"));
	      mod.propagate(prop);
	      prop.origin = mod.origin;
	    }
	  }
	
	  function postLoadDef(data) {
	    var cx = infer.cx(), mods = cx.definitions[data["!name"]]["!node"];
	    var data = cx.parent._node;
	    if (mods) for (var name in mods.props) {
	      var origin = name.replace(/`/g, ".");
	      var mod = getModule(data, origin);
	      mod.origin = origin;
	      mods.props[name].propagate(mod);
	    }
	  }
	
	  function findTypeAt(_file, _pos, expr, type) {
	    if (!expr) return type;
	    var isStringLiteral = expr.node.type === "Literal" &&
	       typeof expr.node.value === "string";
	    var isRequireArg = !!expr.node.required;
	
	    if (isStringLiteral && isRequireArg) {
	      // The `type` is a value shared for all string literals.
	      // We must create a copy before modifying `origin` and `originNode`.
	      // Otherwise all string literals would point to the last jump location
	      type = Object.create(type);
	
	      // Provide a custom origin location pointing to the require()d file
	      var exportedType;
	      if (expr.node.required && (exportedType = expr.node.required.getType())) {
	        type.origin = exportedType.origin;
	        type.originNode = exportedType.originNode;
	      }
	    }
	
	    return type;
	  }
	
	  tern.registerPlugin("node", function(server, options) {
	    server._node = {
	      modules: Object.create(null),
	      options: options || {},
	      currentFile: null,
	      currentRequires: [],
	      currentOrigin: null,
	      server: server
	    };
	
	    /**
		 * @description If we should be using the node plugin
		 * @param {Object} file The file object
		 * @returns {Boolean} If we should do any work in the node plugin
		 * @since 10.0
		 * Orion
		 */
		function usingNode(file) {
			if(/\.js$/g.test(file.name) && file.ast && file.ast.environments) {
	      	  	return file.ast.environments.node;
	      	}
	      	return false;
		}
	      
	    server.on("beforeLoad", function(file) {
	        if(usingNode(file)) { //ORION
	          this._node.currentFile = resolveProjectPath(server, file.name);
	          this._node.currentOrigin = file.name;
	          this._node.currentRequires = [];
	          file.scope = buildWrappingScope(file.scope, this._node.currentOrigin, file.ast);
	        }
	    });
	
	    server.on("afterLoad", function(file) {
	        if(usingNode(file)) { //ORION
	          var mod = getModule(this._node, this._node.currentFile);
	          mod.origin = this._node.currentOrigin;
	          file.scope.exports.propagate(mod);
	          this._node.currentFile = null;
	          this._node.currentOrigin = null;
	        }
	    });
	
	    server.on("reset", function() {
	      this._node.modules = Object.create(null);
	    });
	
	    return {defs: defs,
	            passes: {preCondenseReach: preCondenseReach,
	                     postLoadDef: postLoadDef,
	                     completion: findCompletions,
	                     typeAt: findTypeAt,
	                    /**
	                     * @callback
	                     * Orion
	                     */
	                    postParse: function postParse(ast, text) {
	                    	if(ast && ast.environments && ast.environments.node) {
		                        resolver.doPostParse(server, ast, infer.cx().definitions, function(name) {
		                        	return /^[.]+\//.test(name);
		                        });
		                    }
	                    },
	                    /**
	                     * @callback
	                     * Orion
	                     */
	                    preInfer: function preInfer(ast, scope) {
	                    	if(ast && ast.environments && ast.environments.node) {
		                        resolver.doPreInfer(server);
		                    }
	                    }}};
	  });
	
	  // Completes CommonJS module names in strings passed to require
	  function findCompletions(file, query) {
	    var wordEnd = tern.resolvePos(file, query.end);
	    var callExpr = infer.findExpressionAround(file.ast, null, wordEnd, file.scope, "CallExpression");
	    if (!callExpr) return;
	    var callNode = callExpr.node;
	    if (callNode.callee.type != "Identifier" || callNode.callee.name != "require" ||
	        callNode.arguments.length < 1) return;
	    var argNode = callNode.arguments[0];
	    if (argNode.type != "Literal" || typeof argNode.value != "string" ||
	        argNode.start > wordEnd || argNode.end < wordEnd) return;
	
	    var word = argNode.raw.slice(1, wordEnd - argNode.start), quote = argNode.raw.charAt(0);
	    if (word && word.charAt(word.length - 1) == quote)
	      word = word.slice(0, word.length - 1);
	    var completions = completeModuleName(query, file, word);
	    if (argNode.end == wordEnd + 1 && file.text.charAt(wordEnd) == quote)
	      ++wordEnd;
	    return {
	      start: tern.outputPos(query, file, argNode.start),
	      end: tern.outputPos(query, file, wordEnd),
	      isProperty: false,
	      completions: completions.map(function(rec) {
	        var name = typeof rec == "string" ? rec : rec.name;
	        var string = JSON.stringify(name);
	        if (quote == "'") string = quote + string.slice(1, string.length -1).replace(/'/g, "\\'") + quote;
	        if (typeof rec == "string") return string;
	        rec.displayName = name;
	        rec.name = string;
	        return rec;
	      })
	    };
	  }
	
	  function completeModuleName(query, file, word) {
	    var completions = [];
	    var cx = infer.cx(), server = cx.parent, data = server._node;
	    var currentFile = data.currentFile || resolveProjectPath(server, file.name);
	    var wrapAsObjs = query.types || query.depths || query.docs || query.urls || query.origins;
	
	    function gather(modules) {
	      for (var name in modules) {
	        if (name == currentFile) continue;
	
	        var moduleName = resolveModulePath(name, currentFile);
	        if (moduleName &&
	            !(query.filter !== false && word &&
	              (query.caseInsensitive ? moduleName.toLowerCase() : moduleName).indexOf(word) !== 0)) {
	          var rec = wrapAsObjs ? {name: moduleName} : moduleName;
	          completions.push(rec);
	
	          if (query.types || query.docs || query.urls || query.origins) {
	            var val = modules[name];
	            infer.resetGuessing();
	            var type = val.getType();
	            rec.guess = infer.didGuess();
	            if (query.types)
	              rec.type = infer.toString(val);
	            if (query.docs)
	              maybeSet(rec, "doc", val.doc || type && type.doc);
	            if (query.urls)
	              maybeSet(rec, "url", val.url || type && type.url);
	            if (query.origins)
	              maybeSet(rec, "origin", val.origin || type && type.origin);
	          }
	        }
	      }
	    }
	
	    if (query.caseInsensitive) word = word.toLowerCase();
	    gather(cx.definitions.node);
	    gather(data.modules);
	    return completions;
	  }
	
	  /**
	   * Resolve the module path of the given module name by using the current file.
	   */
	  function resolveModulePath(name, currentFile) {
	
	    function startsWith(str, prefix) {
	      return str.slice(0, prefix.length) == prefix;
	    }
	
	    function endsWith(str, suffix) {
	      return str.slice(-suffix.length) == suffix;
	    }
	
	    if (name.indexOf('/') == -1) return name;
	    // module name has '/', compute the module path
	    var modulePath = normPath(relativePath(currentFile + '/..', name));
	    if (startsWith(modulePath, 'node_modules')) {
	      // module name starts with node_modules, remove it
	      modulePath = modulePath.substring('node_modules'.length + 1, modulePath.length);
	      if (endsWith(modulePath, 'index.js')) {
	        // module name ends with index.js, remove it.
	       modulePath = modulePath.substring(0, modulePath.length - 'index.js'.length - 1);
	      }
	    } else if (!startsWith(modulePath, '../')) {
	      // module name is not inside node_modules and there is not ../, add ./
	      modulePath = './' + modulePath;
	    }
	    if (endsWith(modulePath, '.js')) {
	      // remove js extension
	      modulePath = modulePath.substring(0, modulePath.length - '.js'.length);
	    }
	    return modulePath;
	  }
	
	  function maybeSet(obj, prop, val) {
	    if (val != null) obj[prop] = val;
	  }
	
	  tern.defineQueryType("node_exports", {
	    takesFile: true,
	    run: function(server, query, file) {
	      function describe(aval) {
	        var target = {}, type = aval.getType(false);
	        target.type = infer.toString(aval, 3);
	        var doc = aval.doc || (type && type.doc), url = aval.url || (type && type.url);
	        if (doc) target.doc = doc;
	        if (url) target.url = url;
	        var span = tern.getSpan(aval) || (type && tern.getSpan(type));
	        if (span) tern.storeSpan(server, query, span, target);
	        return target;
	      }
	
	      var known = server._node.modules[resolveProjectPath(server, file.name)];
	      if (!known) return {};
	      var type = known.getObjType(false);
	      var resp = describe(known);
	      if (type instanceof infer.Obj) {
	        var props = resp.props = {};
	        for (var prop in type.props)
	          props[prop] = describe(type.props[prop]);
	      }
	      return resp;
	    }
	  });
	/* eslint-disable missing-nls */
	  var defs = {
	    "!name": "node",
	    "!define": {
	      require: {
	        "!type": "fn(id: string) -> !custom:nodeRequire",
	        resolve: {
	          "!type": "fn() -> string",
	          "!url": "http://nodejs.org/api/globals.html#globals_require_resolve",
	          "!doc": "Use the internal require() machinery to look up the location of a module, but rather than loading the module, just return the resolved filename."
	        },
	        cache: {
	          "!url": "http://nodejs.org/api/globals.html#globals_require_cache",
	          "!doc": "Modules are cached in this object when they are required. By deleting a key value from this object, the next require will reload the module."
	        },
	        extensions: {
	          "!url": "http://nodejs.org/api/globals.html#globals_require_extensions",
	          "!doc": "Instruct require on how to handle certain file extensions."
	        },
	        "!url": "http://nodejs.org/api/globals.html#globals_require",
	        "!doc": "To require modules."
	      },
	      Module: {
	        "!type": "fn()",
	        prototype: {
	          exports: {
	            "!type": "?",
	            "!url": "http://nodejs.org/api/modules.html#modules_module_exports",
	            "!doc": "The exports object is created by the Module system. Sometimes this is not acceptable, many want their module to be an instance of some class. To do this assign the desired export object to module.exports. For example suppose we were making a module called a.js"
	          },
	          require: {
	            "!type": "require",
	            "!url": "http://nodejs.org/api/modules.html#modules_module_require_id",
	            "!doc": "The module.require method provides a way to load a module as if require() was called from the original module."
	          },
	          id: {
	            "!type": "string",
	            "!url": "http://nodejs.org/api/modules.html#modules_module_id",
	            "!doc": "The identifier for the module. Typically this is the fully resolved filename."
	          },
	          filename: {
	            "!type": "string",
	            "!url": "http://nodejs.org/api/modules.html#modules_module_filename",
	            "!doc": "The fully resolved filename to the module."
	          },
	          loaded: {
	            "!type": "bool",
	            "!url": "http://nodejs.org/api/modules.html#modules_module_loaded",
	            "!doc": "Whether or not the module is done loading, or is in the process of loading."
	          },
	          parent: {
	            "!type": "+Module",
	            "!url": "http://nodejs.org/api/modules.html#modules_module_parent",
	            "!doc": "The module that required this one."
	          },
	          children: {
	            "!type": "[+Module]",
	            "!url": "http://nodejs.org/api/modules.html#modules_module_children",
	            "!doc": "The module objects required by this one."
	          }
	        }
	      },
	      events: {
	        EventEmitter: {
	          prototype: {
	            addListener: {
	              "!type": "fn(event: string, listener: fn())",
	              "!url": "http://nodejs.org/api/events.html#events_emitter_addlistener_event_listener",
	              "!doc": "Adds a listener to the end of the listeners array for the specified event."
	            },
	            on: {
	              "!type": "fn(event: string, listener: fn())",
	              "!url": "http://nodejs.org/api/events.html#events_emitter_on_event_listener",
	              "!doc": "Adds a listener to the end of the listeners array for the specified event."
	            },
	            once: {
	              "!type": "fn(event: string, listener: fn())",
	              "!url": "http://nodejs.org/api/events.html#events_emitter_once_event_listener",
	              "!doc": "Adds a one time listener for the event. This listener is invoked only the next time the event is fired, after which it is removed."
	            },
	            removeListener: {
	              "!type": "fn(event: string, listener: fn())",
	              "!url": "http://nodejs.org/api/events.html#events_emitter_removelistener_event_listener",
	              "!doc": "Remove a listener from the listener array for the specified event. Caution: changes array indices in the listener array behind the listener."
	            },
	            removeAllListeners: {
	              "!type": "fn(event: string)",
	              "!url": "http://nodejs.org/api/events.html#events_emitter_removealllisteners_event",
	              "!doc": "Removes all listeners, or those of the specified event."
	            },
	            setMaxListeners: {
	              "!type": "fn(n: number)",
	              "!url": "http://nodejs.org/api/events.html#events_emitter_setmaxlisteners_n",
	              "!doc": "By default EventEmitters will print a warning if more than 10 listeners are added for a particular event. This is a useful default which helps finding memory leaks. Obviously not all Emitters should be limited to 10. This function allows that to be increased. Set to zero for unlimited."
	            },
	            listeners: {
	              "!type": "fn(event: string) -> [fn()]",
	              "!url": "http://nodejs.org/api/events.html#events_emitter_listeners_event",
	              "!doc": "Returns an array of listeners for the specified event."
	            },
	            emit: {
	              "!type": "fn(event: string)",
	              "!url": "http://nodejs.org/api/events.html#events_emitter_emit_event_arg1_arg2",
	              "!doc": "Execute each of the listeners in order with the supplied arguments."
	            }
	          },
	          "!url": "http://nodejs.org/api/events.html#events_class_events_eventemitter",
	          "!doc": "To access the EventEmitter class, require('events').EventEmitter."
	        }
	      },
	      stream: {
	        "!type": "fn()",
	        prototype: {
	          "!proto": "events.EventEmitter.prototype",
	          pipe: {
	            "!type": "fn(destination: +stream.Writable, options?: ?)",
	            "!url": "http://nodejs.org/api/stream.html#stream_readable_pipe_destination_options",
	            "!doc": "Connects this readable stream to destination WriteStream. Incoming data on this stream gets written to destination. Properly manages back-pressure so that a slow destination will not be overwhelmed by a fast readable stream."
	          }
	        },
	        Writable: {
	          "!type": "fn(options?: ?)",
	          prototype: {
	            "!proto": "stream.prototype",
	            write: {
	              "!type": "fn(chunk: +Buffer, encoding?: string, callback?: fn()) -> bool",
	              "!url": "http://nodejs.org/api/stream.html#stream_writable_write_chunk_encoding_callback_1",
	              "!doc": "Writes chunk to the stream. Returns true if the data has been flushed to the underlying resource. Returns false to indicate that the buffer is full, and the data will be sent out in the future. The 'drain' event will indicate when the buffer is empty again."
	            },
	            end: {
	              "!type": "fn(chunk: +Buffer, encoding?: string, callback?: fn()) -> bool",
	              "!url": "http://nodejs.org/api/stream.html#stream_writable_end_chunk_encoding_callback",
	              "!doc": "Call this method to signal the end of the data being written to the stream."
	            }
	          },
	          "!url": "http://nodejs.org/api/stream.html#stream_class_stream_writable",
	          "!doc": "A Writable Stream has the following methods, members, and events."
	        },
	        Readable: {
	          "!type": "fn(options?: ?)",
	          prototype: {
	            "!proto": "stream.prototype",
	            setEncoding: {
	              "!type": "fn(encoding: string)",
	              "!url": "http://nodejs.org/api/stream.html#stream_readable_setencoding_encoding",
	              "!doc": "Makes the 'data' event emit a string instead of a Buffer. encoding can be 'utf8', 'utf16le' ('ucs2'), 'ascii', or 'hex'."
	            },
	            pause: {
	              "!type": "fn()",
	              "!url": "http://nodejs.org/api/stream.html#stream_readable_pause",
	              "!doc": "Switches the readable stream into \"old mode\", where data is emitted using a 'data' event rather than being buffered for consumption via the read() method."
	            },
	            resume: {
	              "!type": "fn()",
	              "!url": "http://nodejs.org/api/stream.html#stream_readable_resume",
	              "!doc": "Switches the readable stream into \"old mode\", where data is emitted using a 'data' event rather than being buffered for consumption via the read() method."
	            },
	            destroy: "fn()",
	            unpipe: {
	              "!type": "fn(dest?: +stream.Writable)",
	              "!url": "http://nodejs.org/api/stream.html#stream_readable_unpipe_destination",
	              "!doc": "Undo a previously established pipe(). If no destination is provided, then all previously established pipes are removed."
	            },
	            push: {
	              "!type": "fn(chunk: +Buffer) -> bool",
	              "!url": "http://nodejs.org/api/stream.html#stream_readable_push_chunk",
	              "!doc": "Explicitly insert some data into the read queue. If called with null, will signal the end of the data."
	            },
	            unshift: {
	              "!type": "fn(chunk: +Buffer) -> bool",
	              "!url": "http://nodejs.org/api/stream.html#stream_readable_unshift_chunk",
	              "!doc": "This is the corollary of readable.push(chunk). Rather than putting the data at the end of the read queue, it puts it at the front of the read queue."
	            },
	            wrap: {
	              "!type": "fn(stream: ?) -> +stream.Readable",
	              "!url": "http://nodejs.org/api/stream.html#stream_readable_wrap_stream",
	              "!doc": "If you are using an older Node library that emits 'data' events and has a pause() method that is advisory only, then you can use the wrap() method to create a Readable stream that uses the old stream as its data source."
	            },
	            read: {
	              "!type": "fn(size?: number) -> +Buffer",
	              "!url": "http://nodejs.org/api/stream.html#stream_readable_read_size_1",
	              "!doc": "Call this method to consume data once the 'readable' event is emitted."
	            }
	          },
	          "!url": "http://nodejs.org/api/stream.html#stream_class_stream_readable",
	          "!doc": "A Readable Stream has the following methods, members, and events."
	        },
	        Duplex: {
	          "!type": "fn(options?: ?)",
	          prototype: {
	            "!proto": "stream.Readable.prototype",
	            write: "fn(chunk: +Buffer, encoding?: string, callback?: fn()) -> bool",
	            end: "fn(chunk: +Buffer, encoding?: string, callback?: fn()) -> bool"
	          },
	          "!url": "http://nodejs.org/api/stream.html#stream_class_stream_duplex",
	          "!doc": "A \"duplex\" stream is one that is both Readable and Writable, such as a TCP socket connection."
	        },
	        Transform: {
	          "!type": "fn(options?: ?)",
	          prototype: {
	            "!proto": "stream.Duplex.prototype"
	          },
	          "!url": "http://nodejs.org/api/stream.html#stream_class_stream_transform",
	          "!doc": "A \"transform\" stream is a duplex stream where the output is causally connected in some way to the input, such as a zlib stream or a crypto stream."
	        },
	        PassThrough: "stream.Transform",
	        "!url": "http://nodejs.org/api/stream.html#stream_stream",
	        "!doc": "A stream is an abstract interface implemented by various objects in Node. For example a request to an HTTP server is a stream, as is stdout. Streams are readable, writable, or both. All streams are instances of EventEmitter"
	      },
	      querystring: {
	        stringify: {
	          "!type": "fn(obj: ?, sep?: string, eq?: string) -> string",
	          "!url": "http://nodejs.org/api/querystring.html#querystring_querystring_stringify_obj_sep_eq",
	          "!doc": "Serialize an object to a query string. Optionally override the default separator ('&') and assignment ('=') characters."
	        },
	        parse: {
	          "!type": "fn(str: string, sep?: string, eq?: string, options?: ?) -> ?",
	          "!url": "http://nodejs.org/api/querystring.html#querystring_querystring_parse_str_sep_eq_options",
	          "!doc": "Deserialize a query string to an object. Optionally override the default separator ('&') and assignment ('=') characters."
	        },
	        escape: {
	          "!type": "fn(string) -> string",
	          "!url": "http://nodejs.org/api/querystring.html#querystring_querystring_escape",
	          "!doc": "The escape function used by querystring.stringify, provided so that it could be overridden if necessary."
	        },
	        unescape: {
	          "!type": "fn(string) -> string",
	          "!url": "http://nodejs.org/api/querystring.html#querystring_querystring_unescape",
	          "!doc": "The unescape function used by querystring.parse, provided so that it could be overridden if necessary."
	        }
	      },
	      http: {
	        STATUS_CODES: {},
	        createServer: {
	          "!type": "fn(listener?: fn(request: +http.IncomingMessage, response: +http.ServerResponse)) -> +http.Server",
	          "!url": "http://nodejs.org/api/http.html#http_http_createserver_requestlistener",
	          "!doc": "Returns a new web server object."
	        },
	        Server: {
	          "!type": "fn()",
	          prototype: {
	            "!proto": "events.EventEmitter.prototype",
	            listen: {
	              "!type": "fn(port: number, hostname?: string, backlog?: number, callback?: fn())",
	              "!url": "http://nodejs.org/api/http.html#http_server_listen_port_hostname_backlog_callback",
	              "!doc": "Begin accepting connections on the specified port and hostname. If the hostname is omitted, the server will accept connections directed to any IPv4 address (INADDR_ANY)."
	            },
	            close: {
	              "!type": "fn(callback?: ?)",
	              "!url": "http://nodejs.org/api/http.html#http_server_close_callback",
	              "!doc": "Stops the server from accepting new connections."
	            },
	            maxHeadersCount: {
	              "!type": "number",
	              "!url": "http://nodejs.org/api/http.html#http_server_maxheaderscount",
	              "!doc": "Limits maximum incoming headers count, equal to 1000 by default. If set to 0 - no limit will be applied."
	            },
	            setTimeout: {
	              "!type": "fn(timeout: number, callback?: fn())",
	              "!url": "http://nodejs.org/api/http.html#http_server_settimeout_msecs_callback",
	              "!doc": "Sets the timeout value for sockets, and emits a 'timeout' event on the Server object, passing the socket as an argument, if a timeout occurs."
	            },
	            timeout: {
	              "!type": "number",
	              "!url": "http://nodejs.org/api/http.html#http_server_timeout",
	              "!doc": "The number of milliseconds of inactivity before a socket is presumed to have timed out."
	            }
	          },
	          "!url": "http://nodejs.org/api/http.html#http_class_http_server",
	          "!doc": "Class for HTTP server objects."
	        },
	        ServerResponse: {
	          "!type": "fn()",
	          prototype: {
	            "!proto": "stream.Writable.prototype",
	            writeContinue: {
	              "!type": "fn()",
	              "!url": "http://nodejs.org/api/http.html#http_response_writecontinue",
	              "!doc": "Sends a HTTP/1.1 100 Continue message to the client, indicating that the request body should be sent."
	            },
	            writeHead: {
	              "!type": "fn(statusCode: number, headers?: ?)",
	              "!url": "http://nodejs.org/api/http.html#http_response_writehead_statuscode_reasonphrase_headers",
	              "!doc": "Sends a response header to the request. The status code is a 3-digit HTTP status code, like 404. The last argument, headers, are the response headers. Optionally one can give a human-readable reasonPhrase as the second argument."
	            },
	            setTimeout: {
	              "!type": "fn(timeout: number, callback?: fn())",
	              "!url": "http://nodejs.org/api/http.html#http_response_settimeout_msecs_callback",
	              "!doc": "Sets the Socket's timeout value to msecs. If a callback is provided, then it is added as a listener on the 'timeout' event on the response object."
	            },
	            statusCode: {
	              "!type": "number",
	              "!url": "http://nodejs.org/api/http.html#http_response_statuscode",
	              "!doc": "When using implicit headers (not calling response.writeHead() explicitly), this property controls the status code that will be sent to the client when the headers get flushed."
	            },
	            setHeader: {
	              "!type": "fn(name: string, value: string)",
	              "!url": "http://nodejs.org/api/http.html#http_response_setheader_name_value",
	              "!doc": "Sets a single header value for implicit headers. If this header already exists in the to-be-sent headers, its value will be replaced. Use an array of strings here if you need to send multiple headers with the same name."
	            },
	            headersSent: {
	              "!type": "bool",
	              "!url": "http://nodejs.org/api/http.html#http_response_headerssent",
	              "!doc": "Boolean (read-only). True if headers were sent, false otherwise."
	            },
	            sendDate: {
	              "!type": "bool",
	              "!url": "http://nodejs.org/api/http.html#http_response_senddate",
	              "!doc": "When true, the Date header will be automatically generated and sent in the response if it is not already present in the headers. Defaults to true."
	            },
	            getHeader: {
	              "!type": "fn(name: string) -> string",
	              "!url": "http://nodejs.org/api/http.html#http_response_getheader_name",
	              "!doc": "Reads out a header that's already been queued but not sent to the client. Note that the name is case insensitive. This can only be called before headers get implicitly flushed."
	            },
	            removeHeader: {
	              "!type": "fn(name: string)",
	              "!url": "http://nodejs.org/api/http.html#http_response_removeheader_name",
	              "!doc": "Removes a header that's queued for implicit sending."
	            },
	            addTrailers: {
	              "!type": "fn(headers: ?)",
	              "!url": "http://nodejs.org/api/http.html#http_response_addtrailers_headers",
	              "!doc": "This method adds HTTP trailing headers (a header but at the end of the message) to the response."
	            }
	          },
	          "!url": "http://nodejs.org/api/http.html#http_class_http_serverresponse",
	          "!doc": "This object is created internally by a HTTP server--not by the user. It is passed as the second parameter to the 'request' event."
	        },
	        request: {
	          "!type": "fn(options: ?, callback?: fn(res: +http.IncomingMessage)) -> +http.ClientRequest",
	          "!url": "http://nodejs.org/api/http.html#http_http_request_options_callback",
	          "!doc": "Node maintains several connections per server to make HTTP requests. This function allows one to transparently issue requests."
	        },
	        get: {
	          "!type": "fn(options: ?, callback?: fn(res: +http.IncomingMessage)) -> +http.ClientRequest",
	          "!url": "http://nodejs.org/api/http.html#http_http_get_options_callback",
	          "!doc": "Since most requests are GET requests without bodies, Node provides this convenience method. The only difference between this method and http.request() is that it sets the method to GET and calls req.end() automatically."
	        },
	        globalAgent: {
	          "!type": "+http.Agent",
	          "!url": "http://nodejs.org/api/http.html#http_http_globalagent",
	          "!doc": "Global instance of Agent which is used as the default for all http client requests."
	        },
	        Agent: {
	          "!type": "fn()",
	          prototype: {
	            maxSockets: {
	              "!type": "number",
	              "!url": "http://nodejs.org/api/http.html#http_agent_maxsockets",
	              "!doc": "By default set to 5. Determines how many concurrent sockets the agent can have open per host."
	            },
	            sockets: {
	              "!type": "[+net.Socket]",
	              "!url": "http://nodejs.org/api/http.html#http_agent_sockets",
	              "!doc": "An object which contains arrays of sockets currently in use by the Agent. Do not modify."
	            },
	            requests: {
	              "!type": "[+http.ClientRequest]",
	              "!url": "http://nodejs.org/api/http.html#http_agent_requests",
	              "!doc": "An object which contains queues of requests that have not yet been assigned to sockets. Do not modify."
	            }
	          },
	          "!url": "http://nodejs.org/api/http.html#http_class_http_agent",
	          "!doc": "In node 0.5.3+ there is a new implementation of the HTTP Agent which is used for pooling sockets used in HTTP client requests."
	        },
	        ClientRequest: {
	          "!type": "fn()",
	          prototype: {
	            "!proto": "stream.Writable.prototype",
	            abort: {
	              "!type": "fn()",
	              "!url": "http://nodejs.org/api/http.html#http_request_abort",
	              "!doc": "Aborts a request. (New since v0.3.8.)"
	            },
	            setTimeout: {
	              "!type": "fn(timeout: number, callback?: fn())",
	              "!url": "http://nodejs.org/api/http.html#http_request_settimeout_timeout_callback",
	              "!doc": "Once a socket is assigned to this request and is connected socket.setTimeout() will be called."
	            },
	            setNoDelay: {
	              "!type": "fn(noDelay?: fn())",
	              "!url": "http://nodejs.org/api/http.html#http_request_setnodelay_nodelay",
	              "!doc": "Once a socket is assigned to this request and is connected socket.setNoDelay() will be called."
	            },
	            setSocketKeepAlive: {
	              "!type": "fn(enable?: bool, initialDelay?: number)",
	              "!url": "http://nodejs.org/api/http.html#http_request_setsocketkeepalive_enable_initialdelay",
	              "!doc": "Once a socket is assigned to this request and is connected socket.setKeepAlive() will be called."
	            }
	          },
	          "!url": "http://nodejs.org/api/http.html#http_class_http_clientrequest",
	          "!doc": "This object is created internally and returned from http.request(). It represents an in-progress request whose header has already been queued. The header is still mutable using the setHeader(name, value), getHeader(name), removeHeader(name) API. The actual header will be sent along with the first data chunk or when closing the connection."
	        },
	        IncomingMessage: {
	          "!type": "fn()",
	          prototype: {
	            "!proto": "stream.Readable.prototype",
	            httpVersion: {
	              "!type": "string",
	              "!url": "http://nodejs.org/api/http.html#http_message_httpversion",
	              "!doc": "In case of server request, the HTTP version sent by the client. In the case of client response, the HTTP version of the connected-to server. Probably either '1.1' or '1.0'."
	            },
	            headers: {
	              "!type": "?",
	              "!url": "http://nodejs.org/api/http.html#http_message_headers",
	              "!doc": "The request/response headers object."
	            },
	            trailers: {
	              "!type": "?",
	              "!url": "http://nodejs.org/api/http.html#http_message_trailers",
	              "!doc": "The request/response trailers object. Only populated after the 'end' event."
	            },
	            setTimeout: {
	              "!type": "fn(timeout: number, callback?: fn())",
	              "!url": "http://nodejs.org/api/http.html#http_message_settimeout_msecs_callback",
	              "!doc": "Calls message.connection.setTimeout(msecs, callback)."
	            },
	            setEncoding: {
	              "!type": "fn(encoding?: string)",
	              "!url": "http://nodejs.org/api/http.html#http_message_setencoding_encoding",
	              "!doc": "Set the encoding for data emitted by the 'data' event."
	            },
	            pause: {
	              "!type": "fn()",
	              "!url": "http://nodejs.org/api/http.html#http_message_pause",
	              "!doc": "Pauses request/response from emitting events. Useful to throttle back a download."
	            },
	            resume: {
	              "!type": "fn()",
	              "!url": "http://nodejs.org/api/http.html#http_message_resume",
	              "!doc": "Resumes a paused request/response."
	            },
	            method: {
	              "!type": "string",
	              "!url": "http://nodejs.org/api/http.html#http_message_method",
	              "!doc": "Only valid for request obtained from http.Server."
	            },
	            url: {
	              "!type": "string",
	              "!url": "http://nodejs.org/api/http.html#http_message_url",
	              "!doc": "Only valid for request obtained from http.Server."
	            },
	            statusCode: {
	              "!type": "number",
	              "!url": "http://nodejs.org/api/http.html#http_message_statuscode",
	              "!doc": "Only valid for response obtained from http.ClientRequest."
	            },
	            socket: {
	              "!type": "+net.Socket",
	              "!url": "http://nodejs.org/api/http.html#http_message_socket",
	              "!doc": "The net.Socket object associated with the connection."
	            }
	          },
	          "!url": "http://nodejs.org/api/http.html#http_http_incomingmessage",
	          "!doc": "An IncomingMessage object is created by http.Server or http.ClientRequest and passed as the first argument to the 'request' and 'response' event respectively. It may be used to access response status, headers and data."
	        }
	      },
	      https: {
	        Server: "http.Server",
	        createServer: {
	          "!type": "fn(listener?: fn(request: +http.IncomingMessage, response: +http.ServerResponse)) -> +https.Server",
	          "!url": "http://nodejs.org/api/https.html#https_https_createserver_options_requestlistener",
	          "!doc": "Returns a new HTTPS web server object. The options is similar to tls.createServer(). The requestListener is a function which is automatically added to the 'request' event."
	        },
	        request: {
	          "!type": "fn(options: ?, callback?: fn(res: +http.IncomingMessage)) -> +http.ClientRequest",
	          "!url": "http://nodejs.org/api/https.html#https_https_request_options_callback",
	          "!doc": "Makes a request to a secure web server."
	        },
	        get: {
	          "!type": "fn(options: ?, callback?: fn(res: +http.IncomingMessage)) -> +http.ClientRequest",
	          "!url": "http://nodejs.org/api/https.html#https_https_get_options_callback",
	          "!doc": "Like http.get() but for HTTPS."
	        },
	        Agent: "http.Agent",
	        globalAgent: "http.globalAgent"
	      },
	      cluster: {
	        "!proto": "events.EventEmitter.prototype",
	        settings: {
	          exec: "string",
	          args: "[string]",
	          silent: "bool",
	          "!url": "http://nodejs.org/api/cluster.html#cluster_cluster_settings",
	          "!doc": "All settings set by the .setupMaster is stored in this settings object. This object is not supposed to be changed or set manually, by you."
	        },
	        Worker: {
	          "!type": "fn()",
	          prototype: {
	            "!proto": "events.EventEmitter.prototype",
	            id: {
	              "!type": "string",
	              "!url": "http://nodejs.org/api/cluster.html#cluster_worker_id",
	              "!doc": "Each new worker is given its own unique id, this id is stored in the id."
	            },
	            process: {
	              "!type": "+child_process.ChildProcess",
	              "!url": "http://nodejs.org/api/cluster.html#cluster_worker_process",
	              "!doc": "All workers are created using child_process.fork(), the returned object from this function is stored in process."
	            },
	            suicide: {
	              "!type": "bool",
	              "!url": "http://nodejs.org/api/cluster.html#cluster_worker_suicide",
	              "!doc": "This property is a boolean. It is set when a worker dies after calling .kill() or immediately after calling the .disconnect() method. Until then it is undefined."
	            },
	            send: {
	              "!type": "fn(message: ?, sendHandle?: ?)",
	              "!url": "http://nodejs.org/api/cluster.html#cluster_worker_send_message_sendhandle",
	              "!doc": "This function is equal to the send methods provided by child_process.fork(). In the master you should use this function to send a message to a specific worker. However in a worker you can also use process.send(message), since this is the same function."
	            },
	            destroy: "fn()",
	            disconnect: {
	              "!type": "fn()",
	              "!url": "http://nodejs.org/api/cluster.html#cluster_worker_disconnect",
	              "!doc": "When calling this function the worker will no longer accept new connections, but they will be handled by any other listening worker. Existing connection will be allowed to exit as usual. When no more connections exist, the IPC channel to the worker will close allowing it to die graceful. When the IPC channel is closed the disconnect event will emit, this is then followed by the exit event, there is emitted when the worker finally die."
	            },
	            kill: {
	              "!type": "fn(signal?: string)",
	              "!url": "http://nodejs.org/api/cluster.html#cluster_worker_kill_signal_sigterm",
	              "!doc": "This function will kill the worker, and inform the master to not spawn a new worker. The boolean suicide lets you distinguish between voluntary and accidental exit."
	            }
	          },
	          "!url": "http://nodejs.org/api/cluster.html#cluster_class_worker",
	          "!doc": "A Worker object contains all public information and method about a worker. In the master it can be obtained using cluster.workers. In a worker it can be obtained using cluster.worker."
	        },
	        isMaster: {
	          "!type": "bool",
	          "!url": "http://nodejs.org/api/cluster.html#cluster_cluster_ismaster",
	          "!doc": "True if the process is a master. This is determined by the process.env.NODE_UNIQUE_ID. If process.env.NODE_UNIQUE_ID is undefined, then isMaster is true."
	        },
	        isWorker: {
	          "!type": "bool",
	          "!url": "http://nodejs.org/api/cluster.html#cluster_cluster_isworker",
	          "!doc": "This boolean flag is true if the process is a worker forked from a master. If the process.env.NODE_UNIQUE_ID is set to a value, then isWorker is true."
	        },
	        setupMaster: {
	          "!type": "fn(settings?: cluster.settings)",
	          "!url": "http://nodejs.org/api/cluster.html#cluster_cluster_setupmaster_settings",
	          "!doc": "setupMaster is used to change the default 'fork' behavior. The new settings are effective immediately and permanently, they cannot be changed later on."
	        },
	        fork: {
	          "!type": "fn(env?: ?) -> +cluster.Worker",
	          "!url": "http://nodejs.org/api/cluster.html#cluster_cluster_fork_env",
	          "!doc": "Spawn a new worker process. This can only be called from the master process."
	        },
	        disconnect: {
	          "!type": "fn(callback?: fn())",
	          "!url": "http://nodejs.org/api/cluster.html#cluster_cluster_disconnect_callback",
	          "!doc": "When calling this method, all workers will commit a graceful suicide. When they are disconnected all internal handlers will be closed, allowing the master process to die graceful if no other event is waiting."
	        },
	        worker: {
	          "!type": "+cluster.Worker",
	          "!url": "http://nodejs.org/api/cluster.html#cluster_cluster_worker",
	          "!doc": "A reference to the current worker object. Not available in the master process."
	        },
	        workers: {
	          "!type": "[+cluster.Worker]",
	          "!url": "http://nodejs.org/api/cluster.html#cluster_cluster_workers",
	          "!doc": "A hash that stores the active worker objects, keyed by id field. Makes it easy to loop through all the workers. It is only available in the master process."
	        },
	        "!url": "http://nodejs.org/api/cluster.html#cluster_cluster",
	        "!doc": "A single instance of Node runs in a single thread. To take advantage of multi-core systems the user will sometimes want to launch a cluster of Node processes to handle the load."
	      },
	      zlib: {
	        Zlib: {
	          "!type": "fn()",
	          prototype: {
	            "!proto": "stream.Duplex.prototype",
	            flush: {
	              "!type": "fn(callback: fn())",
	              "!url": "http://nodejs.org/api/zlib.html#zlib_zlib_flush_callback",
	              "!doc": "Flush pending data. Don't call this frivolously, premature flushes negatively impact the effectiveness of the compression algorithm."
	            },
	            reset: {
	              "!type": "fn()",
	              "!url": "http://nodejs.org/api/zlib.html#zlib_zlib_reset",
	              "!doc": "Reset the compressor/decompressor to factory defaults. Only applicable to the inflate and deflate algorithms."
	            }
	          },
	          "!url": "http://nodejs.org/api/zlib.html#zlib_class_zlib_zlib",
	          "!doc": "Not exported by the zlib module. It is documented here because it is the base class of the compressor/decompressor classes."
	        },
	        deflate: {
	          "!type": "fn(buf: +Buffer, callback: fn())",
	          "!url": "http://nodejs.org/api/zlib.html#zlib_zlib_deflate_buf_callback",
	          "!doc": "Compress a string with Deflate."
	        },
	        deflateRaw: {
	          "!type": "fn(buf: +Buffer, callback: fn())",
	          "!url": "http://nodejs.org/api/zlib.html#zlib_zlib_deflateraw_buf_callback",
	          "!doc": "Compress a string with DeflateRaw."
	        },
	        gzip: {
	          "!type": "fn(buf: +Buffer, callback: fn())",
	          "!url": "http://nodejs.org/api/zlib.html#zlib_zlib_gzip_buf_callback",
	          "!doc": "Compress a string with Gzip."
	        },
	        gunzip: {
	          "!type": "fn(buf: +Buffer, callback: fn())",
	          "!url": "http://nodejs.org/api/zlib.html#zlib_zlib_gunzip_buf_callback",
	          "!doc": "Decompress a raw Buffer with Gunzip."
	        },
	        inflate: {
	          "!type": "fn(buf: +Buffer, callback: fn())",
	          "!url": "http://nodejs.org/api/zlib.html#zlib_zlib_inflate_buf_callback",
	          "!doc": "Decompress a raw Buffer with Inflate."
	        },
	        inflateRaw: {
	          "!type": "fn(buf: +Buffer, callback: fn())",
	          "!url": "http://nodejs.org/api/zlib.html#zlib_zlib_inflateraw_buf_callback",
	          "!doc": "Decompress a raw Buffer with InflateRaw."
	        },
	        unzip: {
	          "!type": "fn(buf: +Buffer, callback: fn())",
	          "!url": "http://nodejs.org/api/zlib.html#zlib_zlib_unzip_buf_callback",
	          "!doc": "Decompress a raw Buffer with Unzip."
	        },
	        Gzip: {
	          "!type": "fn()",
	          "!url": "http://nodejs.org/api/zlib.html#zlib_class_zlib_gzip",
	          "!doc": "Compress data using gzip.",
	          prototype: {"!proto:": "zlib.Zlib.prototype"}
	        },
	        createGzip: {
	          "!type": "fn(options: ?) -> +zlib.Zlib",
	          "!url": "http://nodejs.org/api/zlib.html#zlib_zlib_creategzip_options",
	          "!doc": "Returns a new Gzip object with an options."
	        },
	        Gunzip: {
	          "!type": "fn()",
	          "!url": "http://nodejs.org/api/zlib.html#zlib_class_zlib_gunzip",
	          "!doc": "Decompress a gzip stream.",
	          prototype: {"!proto:": "zlib.Zlib.prototype"}
	        },
	        createGunzip: {
	          "!type": "fn(options: ?) -> +zlib.Gunzip",
	          "!url": "http://nodejs.org/api/zlib.html#zlib_zlib_creategunzip_options",
	          "!doc": "Returns a new Gunzip object with an options."
	        },
	        Deflate: {
	          "!type": "fn()",
	          "!url": "http://nodejs.org/api/zlib.html#zlib_class_zlib_deflate",
	          "!doc": "Compress data using deflate.",
	          prototype: {"!proto:": "zlib.Zlib.prototype"}
	        },
	        createDeflate: {
	          "!type": "fn(options: ?) -> +zlib.Deflate",
	          "!url": "http://nodejs.org/api/zlib.html#zlib_zlib_createdeflate_options",
	          "!doc": "Returns a new Deflate object with an options."
	        },
	        Inflate: {
	          "!type": "fn()",
	          "!url": "http://nodejs.org/api/zlib.html#zlib_class_zlib_inflate",
	          "!doc": "Decompress a deflate stream.",
	          prototype: {"!proto:": "zlib.Zlib.prototype"}
	        },
	        createInflate: {
	          "!type": "fn(options: ?) -> +zlib.Inflate",
	          "!url": "http://nodejs.org/api/zlib.html#zlib_zlib_createinflate_options",
	          "!doc": "Returns a new Inflate object with an options."
	        },
	        InflateRaw: {
	          "!type": "fn()",
	          "!url": "http://nodejs.org/api/zlib.html#zlib_class_zlib_inflateraw",
	          "!doc": "Decompress a raw deflate stream.",
	          prototype: {"!proto:": "zlib.Zlib.prototype"}
	        },
	        createInflateRaw: {
	          "!type": "fn(options: ?) -> +zlib.InflateRaw",
	          "!url": "http://nodejs.org/api/zlib.html#zlib_zlib_createinflateraw_options",
	          "!doc": "Returns a new InflateRaw object with an options."
	        },
	        DeflateRaw: {
	          "!type": "fn()",
	          "!url": "http://nodejs.org/api/zlib.html#zlib_class_zlib_deflateraw",
	          "!doc": "Compress data using deflate, and do not append a zlib header.",
	          prototype: {"!proto:": "zlib.Zlib.prototype"}
	        },
	        createDeflateRaw: {
	          "!type": "fn(options: ?) -> +zlib.DeflateRaw",
	          "!url": "http://nodejs.org/api/zlib.html#zlib_zlib_createdeflateraw_options",
	          "!doc": "Returns a new DeflateRaw object with an options."
	        },
	        Unzip: {
	          "!type": "fn()",
	          "!url": "http://nodejs.org/api/zlib.html#zlib_class_zlib_unzip",
	          "!doc": "Decompress either a Gzip- or Deflate-compressed stream by auto-detecting the header.",
	          prototype: {"!proto:": "zlib.Zlib.prototype"}
	        },
	        createUnzip: {
	          "!type": "fn(options: ?) -> +zlib.Unzip",
	          "!url": "http://nodejs.org/api/zlib.html#zlib_zlib_createunzip_options",
	          "!doc": "Returns a new Unzip object with an options."
	        },
	        Z_NO_FLUSH: "number",
	        Z_PARTIAL_FLUSH: "number",
	        Z_SYNC_FLUSH: "number",
	        Z_FULL_FLUSH: "number",
	        Z_FINISH: "number",
	        Z_BLOCK: "number",
	        Z_TREES: "number",
	        Z_OK: "number",
	        Z_STREAM_END: "number",
	        Z_NEED_DICT: "number",
	        Z_ERRNO: "number",
	        Z_STREAM_ERROR: "number",
	        Z_DATA_ERROR: "number",
	        Z_MEM_ERROR: "number",
	        Z_BUF_ERROR: "number",
	        Z_VERSION_ERROR: "number",
	        Z_NO_COMPRESSION: "number",
	        Z_BEST_SPEED: "number",
	        Z_BEST_COMPRESSION: "number",
	        Z_DEFAULT_COMPRESSION: "number",
	        Z_FILTERED: "number",
	        Z_HUFFMAN_ONLY: "number",
	        Z_RLE: "number",
	        Z_FIXED: "number",
	        Z_DEFAULT_STRATEGY: "number",
	        Z_BINARY: "number",
	        Z_TEXT: "number",
	        Z_ASCII: "number",
	        Z_UNKNOWN: "number",
	        Z_DEFLATED: "number",
	        Z_NULL: "number"
	      },
	      os: {
	        tmpdir: {
	          "!type": "fn() -> string",
	          "!url": "http://nodejs.org/api/os.html#os_os_tmpdir",
	          "!doc": "Returns the operating system's default directory for temp files."
	        },
	        endianness: {
	          "!type": "fn() -> string",
	          "!url": "http://nodejs.org/api/os.html#os_os_endianness",
	          "!doc": "Returns the endianness of the CPU. Possible values are \"BE\" or \"LE\"."
	        },
	        hostname: {
	          "!type": "fn() -> string",
	          "!url": "http://nodejs.org/api/os.html#os_os_hostname",
	          "!doc": "Returns the hostname of the operating system."
	        },
	        type: {
	          "!type": "fn() -> string",
	          "!url": "http://nodejs.org/api/os.html#os_os_type",
	          "!doc": "Returns the operating system name."
	        },
	        platform: {
	          "!type": "fn() -> string",
	          "!url": "http://nodejs.org/api/os.html#os_os_platform",
	          "!doc": "Returns the operating system platform."
	        },
	        arch: {
	          "!type": "fn() -> string",
	          "!url": "http://nodejs.org/api/os.html#os_os_arch",
	          "!doc": "Returns the operating system CPU architecture."
	        },
	        release: {
	          "!type": "fn() -> string",
	          "!url": "http://nodejs.org/api/os.html#os_os_release",
	          "!doc": "Returns the operating system release."
	        },
	        uptime: {
	          "!type": "fn() -> number",
	          "!url": "http://nodejs.org/api/os.html#os_os_uptime",
	          "!doc": "Returns the system uptime in seconds."
	        },
	        loadavg: {
	          "!type": "fn() -> [number]",
	          "!url": "http://nodejs.org/api/os.html#os_os_loadavg",
	          "!doc": "Returns an array containing the 1, 5, and 15 minute load averages."
	        },
	        totalmem: {
	          "!type": "fn() -> number",
	          "!url": "http://nodejs.org/api/os.html#os_os_totalmem",
	          "!doc": "Returns the total amount of system memory in bytes."
	        },
	        freemem: {
	          "!type": "fn() -> number",
	          "!url": "http://nodejs.org/api/os.html#os_os_freemem",
	          "!doc": "Returns the amount of free system memory in bytes."
	        },
	        cpus: {
	          "!type": "fn() -> [os.cpuSpec]",
	          "!url": "http://nodejs.org/api/os.html#os_os_cpus",
	          "!doc": "Returns an array of objects containing information about each CPU/core installed: model, speed (in MHz), and times (an object containing the number of milliseconds the CPU/core spent in: user, nice, sys, idle, and irq)."
	        },
	        networkInterfaces: {
	          "!type": "fn() -> ?",
	          "!url": "http://nodejs.org/api/os.html#os_os_networkinterfaces",
	          "!doc": "Get a list of network interfaces."
	        },
	        EOL: {
	          "!type": "string",
	          "!url": "http://nodejs.org/api/os.html#os_os_eol",
	          "!doc": "A constant defining the appropriate End-of-line marker for the operating system."
	        }
	      },
	      punycode: {
	        decode: {
	          "!type": "fn(string: string) -> string",
	          "!url": "http://nodejs.org/api/punycode.html#punycode_punycode_decode_string",
	          "!doc": "Converts a Punycode string of ASCII code points to a string of Unicode code points."
	        },
	        encode: {
	          "!type": "fn(string: string) -> string",
	          "!url": "http://nodejs.org/api/punycode.html#punycode_punycode_encode_string",
	          "!doc": "Converts a string of Unicode code points to a Punycode string of ASCII code points."
	        },
	        toUnicode: {
	          "!type": "fn(domain: string) -> string",
	          "!url": "http://nodejs.org/api/punycode.html#punycode_punycode_tounicode_domain",
	          "!doc": "Converts a Punycode string representing a domain name to Unicode. Only the Punycoded parts of the domain name will be converted, i.e. it doesn't matter if you call it on a string that has already been converted to Unicode."
	        },
	        toASCII: {
	          "!type": "fn(domain: string) -> string",
	          "!url": "http://nodejs.org/api/punycode.html#punycode_punycode_toascii_domain",
	          "!doc": "Converts a Unicode string representing a domain name to Punycode. Only the non-ASCII parts of the domain name will be converted, i.e. it doesn't matter if you call it with a domain that's already in ASCII."
	        },
	        ucs2: {
	          decode: {
	            "!type": "fn(string: string) -> string",
	            "!url": "http://nodejs.org/api/punycode.html#punycode_punycode_ucs2_decode_string",
	            "!doc": "Creates an array containing the decimal code points of each Unicode character in the string. While JavaScript uses UCS-2 internally, this function will convert a pair of surrogate halves (each of which UCS-2 exposes as separate characters) into a single code point, matching UTF-16."
	          },
	          encode: {
	            "!type": "fn(codePoints: [number]) -> string",
	            "!url": "http://nodejs.org/api/punycode.html#punycode_punycode_ucs2_encode_codepoints",
	            "!doc": "Creates a string based on an array of decimal code points."
	          }
	        },
	        version: {
	          "!type": "?",
	          "!url": "http://nodejs.org/api/punycode.html#punycode_punycode_version",
	          "!doc": "A string representing the current Punycode.js version number."
	        }
	      },
	      repl: {
	        start: {
	          "!type": "fn(options: ?) -> +events.EventEmitter",
	          "!url": "http://nodejs.org/api/repl.html#repl_repl_start_options",
	          "!doc": "Returns and starts a REPLServer instance."
	        }
	      },
	      readline: {
	        createInterface: {
	          "!type": "fn(options: ?) -> +readline.Interface",
	          "!url": "http://nodejs.org/api/readline.html#readline_readline_createinterface_options",
	          "!doc": "Creates a readline Interface instance."
	        },
	        Interface: {
	          "!type": "fn()",
	          prototype: {
	            "!proto": "events.EventEmitter.prototype",
	            setPrompt: {
	              "!type": "fn(prompt: string, length: number)",
	              "!url": "http://nodejs.org/api/readline.html#readline_rl_setprompt_prompt_length",
	              "!doc": "Sets the prompt, for example when you run node on the command line, you see > , which is node's prompt."
	            },
	            prompt: {
	              "!type": "fn(preserveCursor?: bool)",
	              "!url": "http://nodejs.org/api/readline.html#readline_rl_prompt_preservecursor",
	              "!doc": "Readies readline for input from the user, putting the current setPrompt options on a new line, giving the user a new spot to write. Set preserveCursor to true to prevent the cursor placement being reset to 0."
	            },
	            question: {
	              "!type": "fn(query: string, callback: fn())",
	              "!url": "http://nodejs.org/api/readline.html#readline_rl_question_query_callback",
	              "!doc": "Prepends the prompt with query and invokes callback with the user's response. Displays the query to the user, and then invokes callback with the user's response after it has been typed."
	            },
	            pause: {
	              "!type": "fn()",
	              "!url": "http://nodejs.org/api/readline.html#readline_rl_pause",
	              "!doc": "Pauses the readline input stream, allowing it to be resumed later if needed."
	            },
	            resume: {
	              "!type": "fn()",
	              "!url": "http://nodejs.org/api/readline.html#readline_rl_resume",
	              "!doc": "Resumes the readline input stream."
	            },
	            close: {
	              "!type": "fn()",
	              "!url": "http://nodejs.org/api/readline.html#readline_rl_close",
	              "!doc": "Closes the Interface instance, relinquishing control on the input and output streams. The \"close\" event will also be emitted."
	            },
	            write: {
	              "!type": "fn(data: ?, key?: ?)",
	              "!url": "http://nodejs.org/api/readline.html#readline_rl_write_data_key",
	              "!doc": "Writes data to output stream. key is an object literal to represent a key sequence; available if the terminal is a TTY."
	            }
	          },
	          "!url": "http://nodejs.org/api/readline.html#readline_class_interface",
	          "!doc": "The class that represents a readline interface with an input and output stream."
	        }
	      },
	      vm: {
	        createContext: {
	          "!type": "fn(initSandbox?: ?) -> ?",
	          "!url": "http://nodejs.org/api/vm.html#vm_vm_createcontext_initsandbox",
	          "!doc": "vm.createContext creates a new context which is suitable for use as the 2nd argument of a subsequent call to vm.runInContext. A (V8) context comprises a global object together with a set of build-in objects and functions. The optional argument initSandbox will be shallow-copied to seed the initial contents of the global object used by the context."
	        },
	        Script: {
	          "!type": "fn()",
	          prototype: {
	            runInThisContext: {
	              "!type": "fn()",
	              "!url": "http://nodejs.org/api/vm.html#vm_script_runinthiscontext",
	              "!doc": "Similar to vm.runInThisContext but a method of a precompiled Script object. script.runInThisContext runs the code of script and returns the result. Running code does not have access to local scope, but does have access to the global object (v8: in actual context)."
	            },
	            runInNewContext: {
	              "!type": "fn(sandbox?: ?)",
	              "!url": "http://nodejs.org/api/vm.html#vm_script_runinnewcontext_sandbox",
	              "!doc": "Similar to vm.runInNewContext a method of a precompiled Script object. script.runInNewContext runs the code of script with sandbox as the global object and returns the result. Running code does not have access to local scope. sandbox is optional."
	            }
	          },
	          "!url": "http://nodejs.org/api/vm.html#vm_class_script",
	          "!doc": "A class for running scripts. Returned by vm.createScript."
	        },
	        runInThisContext: {
	          "!type": "fn(code: string, filename?: string)",
	          "!url": "http://nodejs.org/api/vm.html#vm_vm_runinthiscontext_code_filename",
	          "!doc": "vm.runInThisContext() compiles code, runs it and returns the result. Running code does not have access to local scope. filename is optional, it's used only in stack traces."
	        },
	        runInNewContext: {
	          "!type": "fn(code: string, sandbox?: ?, filename?: string)",
	          "!url": "http://nodejs.org/api/vm.html#vm_vm_runinnewcontext_code_sandbox_filename",
	          "!doc": "vm.runInNewContext compiles code, then runs it in sandbox and returns the result. Running code does not have access to local scope. The object sandbox will be used as the global object for code. sandbox and filename are optional, filename is only used in stack traces."
	        },
	        runInContext: {
	          "!type": "fn(code: string, context: ?, filename?: string)",
	          "!url": "http://nodejs.org/api/vm.html#vm_vm_runincontext_code_context_filename",
	          "!doc": "vm.runInContext compiles code, then runs it in context and returns the result. A (V8) context comprises a global object, together with a set of built-in objects and functions. Running code does not have access to local scope and the global object held within context will be used as the global object for code. filename is optional, it's used only in stack traces."
	        },
	        createScript: {
	          "!type": "fn(code: string, filename?: string) -> +vm.Script",
	          "!url": "http://nodejs.org/api/vm.html#vm_vm_createscript_code_filename",
	          "!doc": "createScript compiles code but does not run it. Instead, it returns a vm.Script object representing this compiled code. This script can be run later many times using methods below. The returned script is not bound to any global object. It is bound before each run, just for that run. filename is optional, it's only used in stack traces."
	        }
	      },
	      child_process: {
	        ChildProcess: {
	          "!type": "fn()",
	          prototype: {
	            "!proto": "events.EventEmitter.prototype",
	            stdin: {
	              "!type": "+stream.Writable",
	              "!url": "http://nodejs.org/api/child_process.html#child_process_child_stdin",
	              "!doc": "A Writable Stream that represents the child process's stdin. Closing this stream via end() often causes the child process to terminate."
	            },
	            stdout: {
	              "!type": "+stream.Readable",
	              "!url": "http://nodejs.org/api/child_process.html#child_process_child_stdout",
	              "!doc": "A Readable Stream that represents the child process's stdout."
	            },
	            stderr: {
	              "!type": "+stream.Readable",
	              "!url": "http://nodejs.org/api/child_process.html#child_process_child_stderr",
	              "!doc": "A Readable Stream that represents the child process's stderr."
	            },
	            pid: {
	              "!type": "number",
	              "!url": "http://nodejs.org/api/child_process.html#child_process_child_pid",
	              "!doc": "The PID of the child process."
	            },
	            kill: {
	              "!type": "fn(signal?: string)",
	              "!url": "http://nodejs.org/api/child_process.html#child_process_child_kill_signal",
	              "!doc": "Send a signal to the child process. If no argument is given, the process will be sent 'SIGTERM'."
	            },
	            send: {
	              "!type": "fn(message: ?, sendHandle?: ?)",
	              "!url": "http://nodejs.org/api/child_process.html#child_process_child_send_message_sendhandle",
	              "!doc": "When using child_process.fork() you can write to the child using child.send(message, [sendHandle]) and messages are received by a 'message' event on the child."
	            },
	            disconnect: {
	              "!type": "fn()",
	              "!url": "http://nodejs.org/api/child_process.html#child_process_child_disconnect",
	              "!doc": "To close the IPC connection between parent and child use the child.disconnect() method. This allows the child to exit gracefully since there is no IPC channel keeping it alive. When calling this method the disconnect event will be emitted in both parent and child, and the connected flag will be set to false. Please note that you can also call process.disconnect() in the child process."
	            }
	          },
	          "!url": "http://nodejs.org/api/child_process.html#child_process_class_childprocess",
	          "!doc": "ChildProcess is an EventEmitter."
	        },
	        spawn: {
	          "!type": "fn(command: string, args?: [string], options?: ?) -> +child_process.ChildProcess",
	          "!url": "http://nodejs.org/api/child_process.html#child_process_child_process_spawn_command_args_options",
	          "!doc": "Launches a new process with the given command, with command line arguments in args. If omitted, args defaults to an empty Array."
	        },
	        exec: {
	          "!type": "fn(command: string, callback: fn(error: ?, stdout: +Buffer, stderr: +Buffer)) -> +child_process.ChildProcess",
	          "!url": "http://nodejs.org/api/child_process.html#child_process_child_process_exec_command_options_callback",
	          "!doc": "Runs a command in a shell and buffers the output."
	        },
	        execFile: {
	          "!type": "fn(file: string, args: [string], options: ?, callback: fn(error: ?, stdout: +Buffer, stderr: +Buffer)) -> +child_process.ChildProcess",
	          "!url": "http://nodejs.org/api/child_process.html#child_process_child_process_execfile_file_args_options_callback",
	          "!doc": "This is similar to child_process.exec() except it does not execute a subshell but rather the specified file directly. This makes it slightly leaner than child_process.exec. It has the same options."
	        },
	        fork: {
	          "!type": "fn(modulePath: string, args?: [string], options?: ?) -> +child_process.ChildProcess",
	          "!url": "http://nodejs.org/api/child_process.html#child_process_child_process_fork_modulepath_args_options",
	          "!doc": "This is a special case of the spawn() functionality for spawning Node processes. In addition to having all the methods in a normal ChildProcess instance, the returned object has a communication channel built-in."
	        }
	      },
	      url: {
	        parse: {
	          "!type": "fn(urlStr: string, parseQueryString?: bool, slashesDenoteHost?: bool) -> url.type",
	          "!url": "http://nodejs.org/api/url.html#url_url_parse_urlstr_parsequerystring_slashesdenotehost",
	          "!doc": "Take a URL string, and return an object."
	        },
	        format: {
	          "!type": "fn(url: url.type) -> string",
	          "!url": "http://nodejs.org/api/url.html#url_url_format_urlobj",
	          "!doc": "Take a parsed URL object, and return a formatted URL string."
	        },
	        resolve: {
	          "!type": "fn(from: string, to: string) -> string",
	          "!url": "http://nodejs.org/api/url.html#url_url_resolve_from_to",
	          "!doc": "Take a base URL, and a href URL, and resolve them as a browser would for an anchor tag."
	        }
	      },
	      dns: {
	        lookup: {
	          "!type": "fn(domain: string, callback: fn(err: +Error, address: string, family: number)) -> string",
	          "!url": "http://nodejs.org/api/dns.html#dns_dns_lookup_domain_family_callback",
	          "!doc": "Resolves a domain (e.g. 'google.com') into the first found A (IPv4) or AAAA (IPv6) record. The family can be the integer 4 or 6. Defaults to null that indicates both Ip v4 and v6 address family."
	        },
	        resolve: {
	          "!type": "fn(domain: string, callback: fn(err: +Error, addresses: [string])) -> [string]",
	          "!url": "http://nodejs.org/api/dns.html#dns_dns_resolve_domain_rrtype_callback",
	          "!doc": "Resolves a domain (e.g. 'google.com') into an array of the record types specified by rrtype. Valid rrtypes are 'A' (IPV4 addresses, default), 'AAAA' (IPV6 addresses), 'MX' (mail exchange records), 'TXT' (text records), 'SRV' (SRV records), 'PTR' (used for reverse IP lookups), 'NS' (name server records) and 'CNAME' (canonical name records)."
	        },
	        resolve4: {
	          "!type": "fn(domain: string, callback: fn(err: +Error, addresses: [string])) -> [string]",
	          "!url": "http://nodejs.org/api/dns.html#dns_dns_resolve4_domain_callback",
	          "!doc": "The same as dns.resolve(), but only for IPv4 queries (A records). addresses is an array of IPv4 addresses (e.g. ['74.125.79.104', '74.125.79.105', '74.125.79.106'])."
	        },
	        resolve6: {
	          "!type": "fn(domain: string, callback: fn(err: +Error, addresses: [string])) -> [string]",
	          "!url": "http://nodejs.org/api/dns.html#dns_dns_resolve6_domain_callback",
	          "!doc": "The same as dns.resolve4() except for IPv6 queries (an AAAA query)."
	        },
	        resolveMx: {
	          "!type": "fn(domain: string, callback: fn(err: +Error, addresses: [string])) -> [string]",
	          "!url": "http://nodejs.org/api/dns.html#dns_dns_resolvemx_domain_callback",
	          "!doc": "The same as dns.resolve(), but only for mail exchange queries (MX records)."
	        },
	        resolveTxt: {
	          "!type": "fn(domain: string, callback: fn(err: +Error, addresses: [string])) -> [string]",
	          "!url": "http://nodejs.org/api/dns.html#dns_dns_resolvetxt_domain_callback",
	          "!doc": "The same as dns.resolve(), but only for text queries (TXT records). addresses is an array of the text records available for domain (e.g., ['v=spf1 ip4:0.0.0.0 ~all'])."
	        },
	        resolveSrv: {
	          "!type": "fn(domain: string, callback: fn(err: +Error, addresses: [string])) -> [string]",
	          "!url": "http://nodejs.org/api/dns.html#dns_dns_resolvesrv_domain_callback",
	          "!doc": "The same as dns.resolve(), but only for service records (SRV records). addresses is an array of the SRV records available for domain. Properties of SRV records are priority, weight, port, and name (e.g., [{'priority': 10, {'weight': 5, 'port': 21223, 'name': 'service.example.com'}, ...])."
	        },
	        resolveNs: {
	          "!type": "fn(domain: string, callback: fn(err: +Error, addresses: [string])) -> [string]",
	          "!url": "http://nodejs.org/api/dns.html#dns_dns_resolvens_domain_callback",
	          "!doc": "The same as dns.resolve(), but only for name server records (NS records). addresses is an array of the name server records available for domain (e.g., ['ns1.example.com', 'ns2.example.com'])."
	        },
	        resolveCname: {
	          "!type": "fn(domain: string, callback: fn(err: +Error, addresses: [string])) -> [string]",
	          "!url": "http://nodejs.org/api/dns.html#dns_dns_resolvecname_domain_callback",
	          "!doc": "The same as dns.resolve(), but only for canonical name records (CNAME records). addresses is an array of the canonical name records available for domain (e.g., ['bar.example.com'])."
	        },
	        reverse: {
	          "!type": "fn(ip: string, callback: fn(err: +Error, domains: [string])) -> [string]",
	          "!url": "http://nodejs.org/api/dns.html#dns_dns_reverse_ip_callback",
	          "!doc": "Reverse resolves an ip address to an array of domain names."
	        }
	      },
	      net: {
	        createServer: {
	          "!type": "fn(options?: ?, connectionListener?: fn(socket: +net.Socket)) -> +net.Server",
	          "!url": "http://nodejs.org/api/net.html#net_net_createserver_options_connectionlistener",
	          "!doc": "Creates a new TCP server. The connectionListener argument is automatically set as a listener for the 'connection' event."
	        },
	        Server: {
	          "!type": "fn()",
	          prototype: {
	            "!proto": "net.Socket.prototype",
	            listen: {
	              "!type": "fn(port: number, hostname?: string, backlog?: number, callback?: fn())",
	              "!url": "http://nodejs.org/api/net.html#net_server_listen_port_host_backlog_callback",
	              "!doc": "Begin accepting connections on the specified port and host. If the host is omitted, the server will accept connections directed to any IPv4 address (INADDR_ANY). A port value of zero will assign a random port."
	            },
	            close: {
	              "!type": "fn(callback?: fn())",
	              "!url": "http://nodejs.org/api/net.html#net_server_close_callback",
	              "!doc": "Stops the server from accepting new connections and keeps existing connections. This function is asynchronous, the server is finally closed when all connections are ended and the server emits a 'close' event. Optionally, you can pass a callback to listen for the 'close' event."
	            },
	            maxConnections: {
	              "!type": "number",
	              "!url": "http://nodejs.org/api/net.html#net_server_maxconnections",
	              "!doc": "Set this property to reject connections when the server's connection count gets high."
	            },
	            getConnections: {
	              "!type": "fn(callback: fn(err: +Error, count: number))",
	              "!url": "http://nodejs.org/api/net.html#net_server_getconnections_callback",
	              "!doc": "Asynchronously get the number of concurrent connections on the server. Works when sockets were sent to forks."
	            }
	          },
	          "!url": "http://nodejs.org/api/net.html#net_class_net_server",
	          "!doc": "This class is used to create a TCP or UNIX server. A server is a net.Socket that can listen for new incoming connections."
	        },
	        Socket: {
	          "!type": "fn(options: ?)",
	          prototype: {
	            "!proto": "events.EventEmitter.prototype",
	            connect: {
	              "!type": "fn(port: number, host?: string, connectionListener?: fn())",
	              "!url": "http://nodejs.org/api/net.html#net_socket_connect_port_host_connectlistener",
	              "!doc": "Opens the connection for a given socket. If port and host are given, then the socket will be opened as a TCP socket, if host is omitted, localhost will be assumed. If a path is given, the socket will be opened as a unix socket to that path."
	            },
	            bufferSize: {
	              "!type": "number",
	              "!url": "http://nodejs.org/api/net.html#net_socket_buffersize",
	              "!doc": "net.Socket has the property that socket.write() always works. This is to help users get up and running quickly. The computer cannot always keep up with the amount of data that is written to a socket - the network connection simply might be too slow. Node will internally queue up the data written to a socket and send it out over the wire when it is possible. (Internally it is polling on the socket's file descriptor for being writable)."
	            },
	            setEncoding: {
	              "!type": "fn(encoding?: string)",
	              "!url": "http://nodejs.org/api/net.html#net_socket_setencoding_encoding",
	              "!doc": "Set the encoding for the socket as a Readable Stream."
	            },
	            write: {
	              "!type": "fn(data: +Buffer, encoding?: string, callback?: fn())",
	              "!url": "http://nodejs.org/api/net.html#net_socket_write_data_encoding_callback",
	              "!doc": "Sends data on the socket. The second parameter specifies the encoding in the case of a string--it defaults to UTF8 encoding."
	            },
	            end: {
	              "!type": "fn(data?: +Buffer, encoding?: string)",
	              "!url": "http://nodejs.org/api/net.html#net_socket_end_data_encoding",
	              "!doc": "Half-closes the socket. i.e., it sends a FIN packet. It is possible the server will still send some data."
	            },
	            destroy: {
	              "!type": "fn()",
	              "!url": "http://nodejs.org/api/net.html#net_socket_destroy",
	              "!doc": "Ensures that no more I/O activity happens on this socket. Only necessary in case of errors (parse error or so)."
	            },
	            pause: {
	              "!type": "fn()",
	              "!url": "http://nodejs.org/api/net.html#net_socket_pause",
	              "!doc": "Pauses the reading of data. That is, 'data' events will not be emitted. Useful to throttle back an upload."
	            },
	            resume: {
	              "!type": "fn()",
	              "!url": "http://nodejs.org/api/net.html#net_socket_resume",
	              "!doc": "Resumes reading after a call to pause()."
	            },
	            setTimeout: {
	              "!type": "fn(timeout: number, callback?: fn())",
	              "!url": "http://nodejs.org/api/net.html#net_socket_settimeout_timeout_callback",
	              "!doc": "Sets the socket to timeout after timeout milliseconds of inactivity on the socket. By default net.Socket do not have a timeout."
	            },
	            setKeepAlive: {
	              "!type": "fn(enable?: bool, initialDelay?: number)",
	              "!url": "http://nodejs.org/api/net.html#net_socket_setkeepalive_enable_initialdelay",
	              "!doc": "Enable/disable keep-alive functionality, and optionally set the initial delay before the first keepalive probe is sent on an idle socket. enable defaults to false."
	            },
	            address: {
	              "!type": "fn() -> net.address",
	              "!url": "http://nodejs.org/api/net.html#net_socket_address",
	              "!doc": "Returns the bound address, the address family name and port of the socket as reported by the operating system. Returns an object with three properties, e.g. { port: 12346, family: 'IPv4', address: '127.0.0.1' }"
	            },
	            unref: {
	              "!type": "fn()",
	              "!url": "http://nodejs.org/api/net.html#net_socket_unref",
	              "!doc": "Calling unref on a socket will allow the program to exit if this is the only active socket in the event system. If the socket is already unrefd calling unref again will have no effect."
	            },
	            ref: {
	              "!type": "fn()",
	              "!url": "http://nodejs.org/api/net.html#net_socket_ref",
	              "!doc": "Opposite of unref, calling ref on a previously unrefd socket will not let the program exit if it's the only socket left (the default behavior). If the socket is refd calling ref again will have no effect."
	            },
	            remoteAddress: {
	              "!type": "string",
	              "!url": "http://nodejs.org/api/net.html#net_socket_remoteaddress",
	              "!doc": "The string representation of the remote IP address. For example, '74.125.127.100' or '2001:4860:a005::68'."
	            },
	            remotePort: {
	              "!type": "number",
	              "!url": "http://nodejs.org/api/net.html#net_socket_remoteport",
	              "!doc": "The numeric representation of the remote port. For example, 80 or 21."
	            },
	            localPort: {
	              "!type": "number",
	              "!url": "http://nodejs.org/api/net.html#net_socket_localport",
	              "!doc": "The numeric representation of the local port. For example, 80 or 21."
	            },
	            bytesRead: {
	              "!type": "number",
	              "!url": "http://nodejs.org/api/net.html#net_socket_bytesread",
	              "!doc": "The amount of received bytes."
	            },
	            bytesWritten: {
	              "!type": "number",
	              "!url": "http://nodejs.org/api/net.html#net_socket_byteswritten",
	              "!doc": "The amount of bytes sent."
	            },
	            setNoDelay: {
	              "!type": "fn(noDelay?: fn())",
	              "!url": "http://nodejs.org/api/net.html#net_socket_setnodelay_nodelay",
	              "!doc": "Disables the Nagle algorithm. By default TCP connections use the Nagle algorithm, they buffer data before sending it off. Setting true for noDelay will immediately fire off data each time socket.write() is called. noDelay defaults to true."
	            },
	            localAddress: {
	              "!type": "string",
	              "!url": "http://nodejs.org/api/net.html#net_socket_localaddress",
	              "!doc": "The string representation of the local IP address the remote client is connecting on. For example, if you are listening on '0.0.0.0' and the client connects on '192.168.1.1', the value would be '192.168.1.1'."
	            }
	          },
	          "!url": "http://nodejs.org/api/net.html#net_class_net_socket",
	          "!doc": "This object is an abstraction of a TCP or UNIX socket. net.Socket instances implement a duplex Stream interface. They can be created by the user and used as a client (with connect()) or they can be created by Node and passed to the user through the 'connection' event of a server."
	        },
	        connect: {
	          "!type": "fn(options: ?, connectionListener?: fn()) -> +net.Socket",
	          "!url": "http://nodejs.org/api/net.html#net_net_connect_options_connectionlistener",
	          "!doc": "Constructs a new socket object and opens the socket to the given location. When the socket is established, the 'connect' event will be emitted."
	        },
	        createConnection: {
	          "!type": "fn(options: ?, connectionListener?: fn()) -> +net.Socket",
	          "!url": "http://nodejs.org/api/net.html#net_net_createconnection_options_connectionlistener",
	          "!doc": "Constructs a new socket object and opens the socket to the given location. When the socket is established, the 'connect' event will be emitted."
	        },
	        isIP: {
	          "!type": "fn(input: string) -> number",
	          "!url": "http://nodejs.org/api/net.html#net_net_isip_input",
	          "!doc": "Tests if input is an IP address. Returns 0 for invalid strings, returns 4 for IP version 4 addresses, and returns 6 for IP version 6 addresses."
	        },
	        isIPv4: {
	          "!type": "fn(input: string) -> bool",
	          "!url": "http://nodejs.org/api/net.html#net_net_isipv4_input",
	          "!doc": "Returns true if input is a version 4 IP address, otherwise returns false."
	        },
	        isIPv6: {
	          "!type": "fn(input: string) -> bool",
	          "!url": "http://nodejs.org/api/net.html#net_net_isipv6_input",
	          "!doc": "Returns true if input is a version 6 IP address, otherwise returns false."
	        }
	      },
	      dgram: {
	        createSocket: {
	          "!type": "fn(type: string, callback?: fn()) -> +dgram.Socket",
	          "!url": "http://nodejs.org/api/dgram.html#dgram_dgram_createsocket_type_callback",
	          "!doc": "Creates a datagram Socket of the specified types. Valid types are udp4 and udp6."
	        },
	        Socket: {
	          "!type": "fn()",
	          prototype: {
	            "!proto": "events.EventEmitter.prototype",
	            send: {
	              "!type": "fn(buf: +Buffer, offset: number, length: number, port: number, address: string, callback?: fn())",
	              "!url": "http://nodejs.org/api/dgram.html#dgram_socket_send_buf_offset_length_port_address_callback",
	              "!doc": "For UDP sockets, the destination port and IP address must be specified. A string may be supplied for the address parameter, and it will be resolved with DNS. An optional callback may be specified to detect any DNS errors and when buf may be re-used. Note that DNS lookups will delay the time that a send takes place, at least until the next tick. The only way to know for sure that a send has taken place is to use the callback."
	            },
	            bind: {
	              "!type": "fn(port: number, address?: string)",
	              "!url": "http://nodejs.org/api/dgram.html#dgram_socket_bind_port_address_callback",
	              "!doc": "For UDP sockets, listen for datagrams on a named port and optional address. If address is not specified, the OS will try to listen on all addresses."
	            },
	            close: {
	              "!type": "fn()",
	              "!url": "http://nodejs.org/api/dgram.html#dgram_socket_close",
	              "!doc": "Close the underlying socket and stop listening for data on it."
	            },
	            address: {
	              address: "string",
	              family: "string",
	              port: "number",
	              "!url": "http://nodejs.org/api/dgram.html#dgram_socket_address",
	              "!doc": "Returns an object containing the address information for a socket. For UDP sockets, this object will contain address , family and port."
	            },
	            setBroadcast: {
	              "!type": "fn(flag: bool)",
	              "!url": "http://nodejs.org/api/dgram.html#dgram_socket_setbroadcast_flag",
	              "!doc": "Sets or clears the SO_BROADCAST socket option. When this option is set, UDP packets may be sent to a local interface's broadcast address."
	            },
	            setTTL: {
	              "!type": "fn(ttl: number)",
	              "!url": "http://nodejs.org/api/dgram.html#dgram_socket_setttl_ttl",
	              "!doc": "Sets the IP_TTL socket option. TTL stands for \"Time to Live,\" but in this context it specifies the number of IP hops that a packet is allowed to go through. Each router or gateway that forwards a packet decrements the TTL. If the TTL is decremented to 0 by a router, it will not be forwarded. Changing TTL values is typically done for network probes or when multicasting."
	            },
	            setMulticastTTL: {
	              "!type": "fn(ttl: number)",
	              "!url": "http://nodejs.org/api/dgram.html#dgram_socket_setmulticastttl_ttl",
	              "!doc": "Sets the IP_MULTICAST_TTL socket option. TTL stands for \"Time to Live,\" but in this context it specifies the number of IP hops that a packet is allowed to go through, specifically for multicast traffic. Each router or gateway that forwards a packet decrements the TTL. If the TTL is decremented to 0 by a router, it will not be forwarded."
	            },
	            setMulticastLoopback: {
	              "!type": "fn(flag: bool)",
	              "!url": "http://nodejs.org/api/dgram.html#dgram_socket_setmulticastloopback_flag",
	              "!doc": "Sets or clears the IP_MULTICAST_LOOP socket option. When this option is set, multicast packets will also be received on the local interface."
	            },
	            addMembership: {
	              "!type": "fn(multicastAddress: string, multicastInterface?: string)",
	              "!url": "http://nodejs.org/api/dgram.html#dgram_socket_addmembership_multicastaddress_multicastinterface",
	              "!doc": "Tells the kernel to join a multicast group with IP_ADD_MEMBERSHIP socket option."
	            },
	            dropMembership: {
	              "!type": "fn(multicastAddress: string, multicastInterface?: string)",
	              "!url": "http://nodejs.org/api/dgram.html#dgram_socket_dropmembership_multicastaddress_multicastinterface",
	              "!doc": "Opposite of addMembership - tells the kernel to leave a multicast group with IP_DROP_MEMBERSHIP socket option. This is automatically called by the kernel when the socket is closed or process terminates, so most apps will never need to call this."
	            }
	          },
	          "!url": "http://nodejs.org/api/dgram.html#dgram_class_dgram_socket",
	          "!doc": "The dgram Socket class encapsulates the datagram functionality. It should be created via dgram.createSocket(type, [callback])."
	        }
	      },
	      fs: {
	        rename: {
	          "!type": "fn(oldPath: string, newPath: string, callback?: fn())",
	          "!url": "http://nodejs.org/api/fs.html#fs_fs_rename_oldpath_newpath_callback",
	          "!doc": "Asynchronous rename(2). No arguments other than a possible exception are given to the completion callback."
	        },
	        renameSync: {
	          "!type": "fn(oldPath: string, newPath: string)",
	          "!url": "http://nodejs.org/api/fs.html#fs_fs_renamesync_oldpath_newpath",
	          "!doc": "Synchronous rename(2)."
	        },
	        ftruncate: {
	          "!type": "fn(fd: number, len: number, callback?: fn())",
	          "!url": "http://nodejs.org/api/fs.html#fs_fs_ftruncate_fd_len_callback",
	          "!doc": "Asynchronous ftruncate(2). No arguments other than a possible exception are given to the completion callback."
	        },
	        ftruncateSync: {
	          "!type": "fn(fd: number, len: number)",
	          "!url": "http://nodejs.org/api/fs.html#fs_fs_ftruncatesync_fd_len",
	          "!doc": "Synchronous ftruncate(2)."
	        },
	        truncate: {
	          "!type": "fn(path: string, len: number, callback?: fn())",
	          "!url": "http://nodejs.org/api/fs.html#fs_fs_truncate_path_len_callback",
	          "!doc": "Asynchronous truncate(2). No arguments other than a possible exception are given to the completion callback."
	        },
	        truncateSync: {
	          "!type": "fn(path: string, len: number)",
	          "!url": "http://nodejs.org/api/fs.html#fs_fs_truncatesync_path_len",
	          "!doc": "Synchronous truncate(2)."
	        },
	        chown: {
	          "!type": "fn(path: string, uid: number, gid: number, callback?: fn())",
	          "!url": "http://nodejs.org/api/fs.html#fs_fs_chown_path_uid_gid_callback",
	          "!doc": "Asynchronous chown(2). No arguments other than a possible exception are given to the completion callback."
	        },
	        chownSync: {
	          "!type": "fn(path: string, uid: number, gid: number)",
	          "!url": "http://nodejs.org/api/fs.html#fs_fs_chownsync_path_uid_gid",
	          "!doc": "Synchronous chown(2)."
	        },
	        fchown: {
	          "!type": "fn(fd: number, uid: number, gid: number, callback?: fn())",
	          "!url": "http://nodejs.org/api/fs.html#fs_fs_fchown_fd_uid_gid_callback",
	          "!doc": "Asynchronous fchown(2). No arguments other than a possible exception are given to the completion callback."
	        },
	        fchownSync: {
	          "!type": "fn(fd: number, uid: number, gid: number)",
	          "!url": "http://nodejs.org/api/fs.html#fs_fs_fchownsync_fd_uid_gid",
	          "!doc": "Synchronous fchown(2)."
	        },
	        lchown: {
	          "!type": "fn(path: string, uid: number, gid: number, callback?: fn())",
	          "!url": "http://nodejs.org/api/fs.html#fs_fs_lchown_path_uid_gid_callback",
	          "!doc": "Asynchronous lchown(2). No arguments other than a possible exception are given to the completion callback."
	        },
	        lchownSync: {
	          "!type": "fn(path: string, uid: number, gid: number)",
	          "!url": "http://nodejs.org/api/fs.html#fs_fs_lchownsync_path_uid_gid",
	          "!doc": "Synchronous lchown(2)."
	        },
	        chmod: {
	          "!type": "fn(path: string, mode: string, callback?: fn())",
	          "!url": "http://nodejs.org/api/fs.html#fs_fs_chmod_path_mode_callback",
	          "!doc": "Asynchronous chmod(2). No arguments other than a possible exception are given to the completion callback."
	        },
	        chmodSync: {
	          "!type": "fn(path: string, mode: string)",
	          "!url": "http://nodejs.org/api/fs.html#fs_fs_chmodsync_path_mode",
	          "!doc": "Synchronous chmod(2)."
	        },
	        fchmod: {
	          "!type": "fn(fd: number, mode: string, callback?: fn())",
	          "!url": "http://nodejs.org/api/fs.html#fs_fs_fchmod_fd_mode_callback",
	          "!doc": "Asynchronous fchmod(2). No arguments other than a possible exception are given to the completion callback."
	        },
	        fchmodSync: {
	          "!type": "fn(fd: number, mode: string)",
	          "!url": "http://nodejs.org/api/fs.html#fs_fs_fchmodsync_fd_mode",
	          "!doc": "Synchronous fchmod(2)."
	        },
	        lchmod: {
	          "!type": "fn(path: string, mode: number, callback?: fn())",
	          "!url": "http://nodejs.org/api/fs.html#fs_fs_lchmod_path_mode_callback",
	          "!doc": "Asynchronous lchmod(2). No arguments other than a possible exception are given to the completion callback."
	        },
	        lchmodSync: {
	          "!type": "fn(path: string, mode: string)",
	          "!url": "http://nodejs.org/api/fs.html#fs_fs_lchmodsync_path_mode",
	          "!doc": "Synchronous lchmod(2)."
	        },
	        stat: {
	          "!type": "fn(path: string, callback?: fn(err: +Error, stats: +fs.Stats) -> ?) -> +fs.Stats",
	          "!url": "http://nodejs.org/api/fs.html#fs_fs_stat_path_callback",
	          "!doc": "Asynchronous stat(2). The callback gets two arguments (err, stats) where stats is a fs.Stats object."
	        },
	        lstat: {
	          "!type": "fn(path: string, callback?: fn(err: +Error, stats: +fs.Stats) -> ?) -> +fs.Stats",
	          "!url": "http://nodejs.org/api/fs.html#fs_fs_lstat_path_callback",
	          "!doc": "Asynchronous lstat(2). The callback gets two arguments (err, stats) where stats is a fs.Stats object. lstat() is identical to stat(), except that if path is a symbolic link, then the link itself is stat-ed, not the file that it refers to."
	        },
	        fstat: {
	          "!type": "fn(fd: number, callback?: fn(err: +Error, stats: +fs.Stats) -> ?) -> +fs.Stats",
	          "!url": "http://nodejs.org/api/fs.html#fs_fs_fstat_fd_callback",
	          "!doc": "Asynchronous fstat(2). The callback gets two arguments (err, stats) where stats is a fs.Stats object. fstat() is identical to stat(), except that the file to be stat-ed is specified by the file descriptor fd."
	        },
	        statSync: {
	          "!type": "fn(path: string) -> +fs.Stats",
	          "!url": "http://nodejs.org/api/fs.html#fs_fs_statsync_path",
	          "!doc": "Synchronous stat(2). Returns an instance of fs.Stats."
	        },
	        lstatSync: {
	          "!type": "fn(path: string) -> +fs.Stats",
	          "!url": "http://nodejs.org/api/fs.html#fs_fs_lstatsync_path",
	          "!doc": "Synchronous lstat(2). Returns an instance of fs.Stats."
	        },
	        fstatSync: {
	          "!type": "fn(fd: number) -> +fs.Stats",
	          "!url": "http://nodejs.org/api/fs.html#fs_fs_fstatsync_fd",
	          "!doc": "Synchronous fstat(2). Returns an instance of fs.Stats."
	        },
	        link: {
	          "!type": "fn(srcpath: string, dstpath: string, callback?: fn())",
	          "!url": "http://nodejs.org/api/fs.html#fs_fs_link_srcpath_dstpath_callback",
	          "!doc": "Asynchronous link(2). No arguments other than a possible exception are given to the completion callback."
	        },
	        linkSync: {
	          "!type": "fn(srcpath: string, dstpath: string)",
	          "!url": "http://nodejs.org/api/fs.html#fs_fs_linksync_srcpath_dstpath",
	          "!doc": "Synchronous link(2)."
	        },
	        symlink: {
	          "!type": "fn(srcpath: string, dstpath: string, type?: string, callback?: fn())",
	          "!url": "http://nodejs.org/api/fs.html#fs_fs_symlink_srcpath_dstpath_type_callback",
	          "!doc": "Asynchronous symlink(2). No arguments other than a possible exception are given to the completion callback. type argument can be either 'dir', 'file', or 'junction' (default is 'file'). It is only used on Windows (ignored on other platforms). Note that Windows junction points require the destination path to be absolute. When using 'junction', the destination argument will automatically be normalized to absolute path."
	        },
	        symlinkSync: {
	          "!type": "fn(srcpath: string, dstpath: string, type?: string)",
	          "!url": "http://nodejs.org/api/fs.html#fs_fs_symlinksync_srcpath_dstpath_type",
	          "!doc": "Synchronous symlink(2)."
	        },
	        readlink: {
	          "!type": "fn(path: string, callback?: fn(err: +Error, linkString: string))",
	          "!url": "http://nodejs.org/api/fs.html#fs_fs_readlink_path_callback",
	          "!doc": "Asynchronous readlink(2). The callback gets two arguments (err, linkString)."
	        },
	        readlinkSync: {
	          "!type": "fn(path: string)",
	          "!url": "http://nodejs.org/api/fs.html#fs_fs_readlinksync_path",
	          "!doc": "Synchronous readlink(2). Returns the symbolic link's string value."
	        },
	        realpath: {
	          "!type": "fn(path: string, cache: string, callback: fn(err: +Error, resolvedPath: string))",
	          "!url": "http://nodejs.org/api/fs.html#fs_fs_realpath_path_cache_callback",
	          "!doc": "Asynchronous realpath(2). The callback gets two arguments (err, resolvedPath). May use process.cwd to resolve relative paths. cache is an object literal of mapped paths that can be used to force a specific path resolution or avoid additional fs.stat calls for known real paths."
	        },
	        realpathSync: {
	          "!type": "fn(path: string, cache?: bool) -> string",
	          "!url": "http://nodejs.org/api/fs.html#fs_fs_realpathsync_path_cache",
	          "!doc": "Synchronous realpath(2). Returns the resolved path."
	        },
	        unlink: {
	          "!type": "fn(path: string, callback?: fn())",
	          "!url": "http://nodejs.org/api/fs.html#fs_fs_unlink_path_callback",
	          "!doc": "Asynchronous unlink(2). No arguments other than a possible exception are given to the completion callback."
	        },
	        unlinkSync: {
	          "!type": "fn(path: string)",
	          "!url": "http://nodejs.org/api/fs.html#fs_fs_unlinksync_path",
	          "!doc": "Synchronous unlink(2)."
	        },
	        rmdir: {
	          "!type": "fn(path: string, callback?: fn())",
	          "!url": "http://nodejs.org/api/fs.html#fs_fs_rmdir_path_callback",
	          "!doc": "Asynchronous rmdir(2). No arguments other than a possible exception are given to the completion callback."
	        },
	        rmdirSync: {
	          "!type": "fn(path: string)",
	          "!url": "http://nodejs.org/api/fs.html#fs_fs_rmdirsync_path",
	          "!doc": "Synchronous rmdir(2)."
	        },
	        mkdir: {
	          "!type": "fn(path: string, mode?: ?, callback?: fn())",
	          "!url": "http://nodejs.org/api/fs.html#fs_fs_mkdir_path_mode_callback",
	          "!doc": "Asynchronous mkdir(2). No arguments other than a possible exception are given to the completion callback. mode defaults to 0777."
	        },
	        mkdirSync: {
	          "!type": "fn(path: string, mode?: string)",
	          "!url": "http://nodejs.org/api/fs.html#fs_fs_mkdirsync_path_mode",
	          "!doc": "Synchronous mkdir(2)."
	        },
	        readdir: {
	          "!type": "fn(path: string, callback?: fn(err: +Error, files: [string]))",
	          "!url": "http://nodejs.org/api/fs.html#fs_fs_readdir_path_callback",
	          "!doc": "Asynchronous readdir(3). Reads the contents of a directory. The callback gets two arguments (err, files) where files is an array of the names of the files in the directory excluding '.' and '..'."
	        },
	        readdirSync: {
	          "!type": "fn(path: string) -> [string]",
	          "!url": "http://nodejs.org/api/fs.html#fs_fs_readdirsync_path",
	          "!doc": "Synchronous readdir(3). Returns an array of filenames excluding '.' and '..'."
	        },
	        close: {
	          "!type": "fn(fd: number, callback?: fn())",
	          "!url": "http://nodejs.org/api/fs.html#fs_fs_close_fd_callback",
	          "!doc": "Asynchronous close(2). No arguments other than a possible exception are given to the completion callback."
	        },
	        closeSync: {
	          "!type": "fn(fd: number)",
	          "!url": "http://nodejs.org/api/fs.html#fs_fs_closesync_fd",
	          "!doc": "Synchronous close(2)."
	        },
	        open: {
	          "!type": "fn(path: string, flags: string, mode?: string, callback?: fn(err: +Error, fd: number))",
	          "!url": "http://nodejs.org/api/fs.html#fs_fs_open_path_flags_mode_callback",
	          "!doc": "Asynchronous file open."
	        },
	        openSync: {
	          "!type": "fn(path: string, flags: string, mode?: string) -> number",
	          "!url": "http://nodejs.org/api/fs.html#fs_fs_opensync_path_flags_mode",
	          "!doc": "Synchronous open(2)."
	        },
	        utimes: {
	          "!type": "fn(path: string, atime: number, mtime: number, callback?: fn())",
	          "!url": "http://nodejs.org/api/fs.html#fs_fs_utimes_path_atime_mtime_callback",
	          "!doc": "Change file timestamps of the file referenced by the supplied path."
	        },
	        utimesSync: {
	          "!type": "fn(path: string, atime: number, mtime: number)",
	          "!url": "http://nodejs.org/api/fs.html#fs_fs_utimessync_path_atime_mtime",
	          "!doc": "Change file timestamps of the file referenced by the supplied path."
	        },
	        futimes: {
	          "!type": "fn(fd: number, atime: number, mtime: number, callback?: fn())",
	          "!url": "http://nodejs.org/api/fs.html#fs_fs_futimes_fd_atime_mtime_callback",
	          "!doc": "Change the file timestamps of a file referenced by the supplied file descriptor."
	        },
	        futimesSync: {
	          "!type": "fn(fd: number, atime: number, mtime: number)",
	          "!url": "http://nodejs.org/api/fs.html#fs_fs_futimessync_fd_atime_mtime",
	          "!doc": "Change the file timestamps of a file referenced by the supplied file descriptor."
	        },
	        fsync: {
	          "!type": "fn(fd: number, callback?: fn())",
	          "!url": "http://nodejs.org/api/fs.html#fs_fs_fsync_fd_callback",
	          "!doc": "Asynchronous fsync(2). No arguments other than a possible exception are given to the completion callback."
	        },
	        fsyncSync: {
	          "!type": "fn(fd: number)",
	          "!url": "http://nodejs.org/api/fs.html#fs_fs_fsyncsync_fd",
	          "!doc": "Synchronous fsync(2)."
	        },
	        write: {
	          "!type": "fn(fd: number, buffer: +Buffer, offset: number, length: number, position: number, callback?: fn(err: +Error, written: number, buffer: +Buffer))",
	          "!url": "http://nodejs.org/api/fs.html#fs_fs_write_fd_buffer_offset_length_position_callback",
	          "!doc": "Write buffer to the file specified by fd."
	        },
	        writeSync: {
	          "!type": "fn(fd: number, buffer: +Buffer, offset: number, length: number, position: number) -> number",
	          "!url": "http://nodejs.org/api/fs.html#fs_fs_writesync_fd_buffer_offset_length_position",
	          "!doc": "Synchronous version of fs.write(). Returns the number of bytes written."
	        },
	        read: {
	          "!type": "fn(fd: number, buffer: +Buffer, offset: number, length: number, position: number, callback?: fn(err: +Error, bytesRead: number, buffer: +Buffer))",
	          "!url": "http://nodejs.org/api/fs.html#fs_fs_read_fd_buffer_offset_length_position_callback",
	          "!doc": "Read data from the file specified by fd."
	        },
	        readSync: {
	          "!type": "fn(fd: number, buffer: +Buffer, offset: number, length: number, position: number) -> number",
	          "!url": "http://nodejs.org/api/fs.html#fs_fs_readsync_fd_buffer_offset_length_position",
	          "!doc": "Synchronous version of fs.read. Returns the number of bytesRead."
	        },
	        readFile: {
	          "!type": "fn(filename: string, callback: fn(err: +Error, data: +Buffer))",
	          "!url": "http://nodejs.org/api/fs.html#fs_fs_readfile_filename_options_callback",
	          "!doc": "Asynchronously reads the entire contents of a file."
	        },
	        readFileSync: {
	          "!type": "fn(filename: string, encoding: string) -> +Buffer",
	          "!url": "http://nodejs.org/api/fs.html#fs_fs_readfilesync_filename_options",
	          "!doc": "Synchronous version of fs.readFile. Returns the contents of the filename."
	        },
	        writeFile: {
	          "!type": "fn(filename: string, data: +Buffer, encoding?: string, callback?: fn())",
	          "!url": "http://nodejs.org/api/fs.html#fs_fs_writefile_filename_data_options_callback",
	          "!doc": "Asynchronously writes data to a file, replacing the file if it already exists. data can be a string or a buffer."
	        },
	        writeFileSync: {
	          "!type": "fn(filename: string, data: +Buffer, encoding?: string)",
	          "!url": "http://nodejs.org/api/fs.html#fs_fs_writefilesync_filename_data_options",
	          "!doc": "The synchronous version of fs.writeFile."
	        },
	        appendFile: {
	          "!type": "fn(filename: string, data: ?, encoding?: string, callback?: fn())",
	          "!url": "http://nodejs.org/api/fs.html#fs_fs_appendfile_filename_data_options_callback",
	          "!doc": "Asynchronously append data to a file, creating the file if it not yet exists. data can be a string or a buffer."
	        },
	        appendFileSync: {
	          "!type": "fn(filename: string, data: ?, encoding?: string)",
	          "!url": "http://nodejs.org/api/fs.html#fs_fs_appendfilesync_filename_data_options",
	          "!doc": "The synchronous version of fs.appendFile."
	        },
	        watchFile: {
	          "!type": "fn(filename: string, options: ?, listener: fn(current: +fs.Stats, prev: +fs.Stats))",
	          "!url": "http://nodejs.org/api/fs.html#fs_fs_watchfile_filename_options_listener",
	          "!doc": "Watch for changes on filename. The callback listener will be called each time the file is accessed."
	        },
	        unwatchFile: {
	          "!type": "fn(filename: string, listener?: fn())",
	          "!url": "http://nodejs.org/api/fs.html#fs_fs_unwatchfile_filename_listener",
	          "!doc": "Stop watching for changes on filename. If listener is specified, only that particular listener is removed. Otherwise, all listeners are removed and you have effectively stopped watching filename."
	        },
	        watch: {
	          "!type": "fn(filename: string, options?: ?, listener?: fn(event: string, filename: string)) -> +fs.FSWatcher",
	          "!url": "http://nodejs.org/api/fs.html#fs_fs_watch_filename_options_listener",
	          "!doc": "Watch for changes on filename, where filename is either a file or a directory. The returned object is a fs.FSWatcher."
	        },
	        exists: {
	          "!type": "fn(path: string, callback?: fn(exists: bool))",
	          "!url": "http://nodejs.org/api/fs.html#fs_fs_exists_path_callback",
	          "!doc": "Test whether or not the given path exists by checking with the file system. Then call the callback argument with either true or false."
	        },
	        existsSync: {
	          "!type": "fn(path: string) -> bool",
	          "!url": "http://nodejs.org/api/fs.html#fs_fs_existssync_path",
	          "!doc": "Synchronous version of fs.exists."
	        },
	        Stats: {
	          "!type": "fn()",
	          prototype: {
	            isFile: "fn() -> bool",
	            isDirectory: "fn() -> bool",
	            isBlockDevice: "fn() -> bool",
	            isCharacterDevice: "fn() -> bool",
	            isSymbolicLink: "fn() -> bool",
	            isFIFO: "fn() -> bool",
	            isSocket: "fn() -> bool",
	            dev: "number",
	            ino: "number",
	            mode: "number",
	            nlink: "number",
	            uid: "number",
	            gid: "number",
	            rdev: "number",
	            size: "number",
	            blksize: "number",
	            blocks: "number",
	            atime: "+Date",
	            mtime: "+Date",
	            ctime: "+Date"
	          },
	          "!url": "http://nodejs.org/api/fs.html#fs_class_fs_stats",
	          "!doc": "Objects returned from fs.stat(), fs.lstat() and fs.fstat() and their synchronous counterparts are of this type."
	        },
	        createReadStream: {
	          "!type": "fn(path: string, options?: ?) -> +stream.Readable",
	          "!url": "http://nodejs.org/api/fs.html#fs_fs_createreadstream_path_options",
	          "!doc": "Returns a new ReadStream object."
	        },
	        createWriteStream: {
	          "!type": "fn(path: string, options?: ?) -> +stream.Writable",
	          "!url": "http://nodejs.org/api/fs.html#fs_fs_createwritestream_path_options",
	          "!doc": "Returns a new WriteStream object."
	        },
	        FSWatcher: {
	          "!type": "fn()",
	          prototype: {
	            close: "fn()"
	          },
	          "!url": "http://nodejs.org/api/fs.html#fs_class_fs_fswatcher",
	          "!doc": "Objects returned from fs.watch() are of this type."
	        }
	      },
	      path: {
	        normalize: {
	          "!type": "fn(p: string) -> string",
	          "!url": "http://nodejs.org/api/path.html#path_path_normalize_p",
	          "!doc": "Normalize a string path, taking care of '..' and '.' parts."
	        },
	        join: {
	          "!type": "fn() -> string",
	          "!url": "http://nodejs.org/api/path.html#path_path_join_path1_path2",
	          "!doc": "Join all arguments together and normalize the resulting path."
	        },
	        resolve: {
	          "!type": "fn(from: string, from2: string, from3: string, from4: string, from5: string, to: string) -> string",
	          "!url": "http://nodejs.org/api/path.html#path_path_resolve_from_to",
	          "!doc": "Resolves to to an absolute path."
	        },
	        relative: {
	          "!type": "fn(from: string, to: string) -> string",
	          "!url": "http://nodejs.org/api/path.html#path_path_relative_from_to",
	          "!doc": "Solve the relative path from from to to."
	        },
	        dirname: {
	          "!type": "fn(p: string) -> string",
	          "!url": "http://nodejs.org/api/path.html#path_path_dirname_p",
	          "!doc": "Return the directory name of a path. Similar to the Unix dirname command."
	        },
	        basename: {
	          "!type": "fn(p: string, ext?: string) -> string",
	          "!url": "http://nodejs.org/api/path.html#path_path_basename_p_ext",
	          "!doc": "Return the last portion of a path. Similar to the Unix basename command."
	        },
	        extname: {
	          "!type": "fn(p: string) -> string",
	          "!url": "http://nodejs.org/api/path.html#path_path_extname_p",
	          "!doc": "Return the extension of the path, from the last '.' to end of string in the last portion of the path. If there is no '.' in the last portion of the path or the first character of it is '.', then it returns an empty string."
	        },
	        sep: {
	          "!type": "string",
	          "!url": "http://nodejs.org/api/path.html#path_path_sep",
	          "!doc": "The platform-specific file separator. '\\\\' or '/'."
	        },
	        delimiter: {
	          "!type": "string",
	          "!url": "http://nodejs.org/api/path.html#path_path_delimiter",
	          "!doc": "The platform-specific path delimiter, ; or ':'."
	        }
	      },
	      string_decoder: {
	        StringDecoder: {
	          "!type": "fn(encoding?: string)",
	          prototype: {
	            write: {
	              "!type": "fn(buffer: +Buffer) -> string",
	              "!url": "http://nodejs.org/api/string_decoder.html#string_decoder_decoder_write_buffer",
	              "!doc": "Returns a decoded string."
	            },
	            end: {
	              "!type": "fn()",
	              "!url": "http://nodejs.org/api/string_decoder.html#string_decoder_decoder_end",
	              "!doc": "Returns any trailing bytes that were left in the buffer."
	            }
	          },
	          "!url": "http://nodejs.org/api/string_decoder.html#string_decoder_class_stringdecoder",
	          "!doc": "Accepts a single argument, encoding which defaults to utf8."
	        }
	      },
	      tls: {
	        CLIENT_RENEG_LIMIT: "number",
	        CLIENT_RENEG_WINDOW: "number",
	        SLAB_BUFFER_SIZE: "number",
	        getCiphers: {
	          "!type": "fn() -> [string]",
	          "!url": "http://nodejs.org/api/tls.html#tls_tls_getciphers",
	          "!doc": "Returns an array with the names of the supported SSL ciphers."
	        },
	        Server: {
	          "!type": "fn()",
	          prototype: {
	            "!proto": "net.Server.prototype",
	            listen: {
	              "!type": "fn(port: number, host?: string, callback?: fn())",
	              "!url": "http://nodejs.org/api/tls.html#tls_server_listen_port_host_callback",
	              "!doc": "Begin accepting connections on the specified port and host. If the host is omitted, the server will accept connections directed to any IPv4 address (INADDR_ANY)."
	            },
	            close: {
	              "!type": "fn()",
	              "!url": "http://nodejs.org/api/tls.html#tls_server_close",
	              "!doc": "Stops the server from accepting new connections. This function is asynchronous, the server is finally closed when the server emits a 'close' event."
	            },
	            addContext: {
	              "!type": "fn(hostName: string, credentials: tls.Server.credentials)",
	              "!url": "http://nodejs.org/api/tls.html#tls_server_addcontext_hostname_credentials",
	              "!doc": "Add secure context that will be used if client request's SNI hostname is matching passed hostname (wildcards can be used). credentials can contain key, cert and ca."
	            }
	          },
	          "!url": "http://nodejs.org/api/tls.html#tls_class_tls_server",
	          "!doc": "This class is a subclass of net.Server and has the same methods on it. Instead of accepting just raw TCP connections, this accepts encrypted connections using TLS or SSL."
	        },
	        createServer: {
	          "!type": "fn(options?: ?, connectionListener?: fn(stream: +tls.CleartextStream)) -> +tls.Server",
	          "!url": "http://nodejs.org/api/tls.html#tls_tls_createserver_options_secureconnectionlistener",
	          "!doc": "Creates a new tls.Server. The connectionListener argument is automatically set as a listener for the secureConnection event."
	        },
	        CleartextStream: {
	          "!type": "fn()",
	          prototype: {
	            "!proto": "stream.Duplex.prototype",
	            authorized: {
	              "!type": "bool",
	              "!url": "http://nodejs.org/api/tls.html#tls_cleartextstream_authorized",
	              "!doc": "A boolean that is true if the peer certificate was signed by one of the specified CAs, otherwise false"
	            },
	            authorizationError: {
	              "!type": "+Error",
	              "!url": "http://nodejs.org/api/tls.html#tls_cleartextstream_authorizationerror",
	              "!doc": "The reason why the peer's certificate has not been verified. This property becomes available only when cleartextStream.authorized === false."
	            },
	            getPeerCertificate: {
	              "!type": "fn() -> ?",
	              "!url": "http://nodejs.org/api/tls.html#tls_cleartextstream_getpeercertificate",
	              "!doc": "Returns an object representing the peer's certificate. The returned object has some properties corresponding to the field of the certificate."
	            },
	            getCipher: {
	              "!type": "fn() -> tls.cipher",
	              "!url": "http://nodejs.org/api/tls.html#tls_cleartextstream_getcipher",
	              "!doc": "Returns an object representing the cipher name and the SSL/TLS protocol version of the current connection."
	            },
	            address: {
	              "!type": "net.address",
	              "!url": "http://nodejs.org/api/tls.html#tls_cleartextstream_address",
	              "!doc": "Returns the bound address, the address family name and port of the underlying socket as reported by the operating system. Returns an object with three properties, e.g. { port: 12346, family: 'IPv4', address: '127.0.0.1' }"
	            },
	            remoteAddress: {
	              "!type": "string",
	              "!url": "http://nodejs.org/api/tls.html#tls_cleartextstream_remoteaddress",
	              "!doc": "The string representation of the remote IP address. For example, '74.125.127.100' or '2001:4860:a005::68'."
	            },
	            remotePort: {
	              "!type": "number",
	              "!url": "http://nodejs.org/api/tls.html#tls_cleartextstream_remoteport",
	              "!doc": "The numeric representation of the remote port. For example, 443."
	            }
	          },
	          "!url": "http://nodejs.org/api/tls.html#tls_class_tls_cleartextstream",
	          "!doc": "This is a stream on top of the Encrypted stream that makes it possible to read/write an encrypted data as a cleartext data."
	        },
	        connect: {
	          "!type": "fn(port: number, host?: string, options: ?, listener: fn()) -> +tls.CleartextStream",
	          "!url": "http://nodejs.org/api/tls.html#tls_tls_connect_options_callback",
	          "!doc": "Creates a new client connection to the given port and host (old API) or options.port and options.host. (If host is omitted, it defaults to localhost.)"
	        },
	        createSecurePair: {
	          "!type": "fn(credentials?: crypto.credentials, isServer?: bool, requestCert?: bool, rejectUnauthorized?: bool) -> +tls.SecurePair",
	          "!url": "http://nodejs.org/api/tls.html#tls_tls_createsecurepair_credentials_isserver_requestcert_rejectunauthorized",
	          "!doc": "Creates a new secure pair object with two streams, one of which reads/writes encrypted data, and one reads/writes cleartext data. Generally the encrypted one is piped to/from an incoming encrypted data stream, and the cleartext one is used as a replacement for the initial encrypted stream."
	        },
	        SecurePair: {
	          "!type": "fn()",
	          prototype: {
	            "!proto": "events.EventEmitter.prototype",
	            cleartext: {
	              "!type": "+tls.CleartextStream",
	              "!url": "http://nodejs.org/api/tls.html#tls_class_securepair",
	              "!doc": "Returned by tls.createSecurePair."
	            },
	            encrypted: {
	              "!type": "+stream.Duplex",
	              "!url": "http://nodejs.org/api/tls.html#tls_class_securepair",
	              "!doc": "Returned by tls.createSecurePair."
	            }
	          },
	          "!url": "http://nodejs.org/api/tls.html#tls_class_securepair",
	          "!doc": "Returned by tls.createSecurePair."
	        }
	      },
	      crypto: {
	        getCiphers: {
	          "!type": "fn() -> [string]",
	          "!url": "http://nodejs.org/api/crypto.html#crypto_crypto_getciphers",
	          "!doc": "Returns an array with the names of the supported ciphers."
	        },
	        getHashes: {
	          "!type": "fn() -> [string]",
	          "!url": "http://nodejs.org/api/crypto.html#crypto_crypto_gethashes",
	          "!doc": "Returns an array with the names of the supported hash algorithms."
	        },
	        createCredentials: {
	          "!type": "fn(details?: ?) -> crypto.credentials",
	          "!url": "http://nodejs.org/api/crypto.html#crypto_crypto_createcredentials_details",
	          "!doc": "Creates a credentials object."
	        },
	        createHash: {
	          "!type": "fn(algorithm: string) -> +crypto.Hash",
	          "!url": "http://nodejs.org/api/crypto.html#crypto_crypto_createhash_algorithm",
	          "!doc": "Creates and returns a hash object, a cryptographic hash with the given algorithm which can be used to generate hash digests."
	        },
	        Hash: {
	          "!type": "fn()",
	          prototype: {
	            "!proto": "stream.Duplex.prototype",
	            update: {
	              "!type": "fn(data: +Buffer, encoding?: string)",
	              "!url": "http://nodejs.org/api/crypto.html#crypto_hash_update_data_input_encoding",
	              "!doc": "Updates the hash content with the given data, the encoding of which is given in input_encoding and can be 'utf8', 'ascii' or 'binary'. If no encoding is provided, then a buffer is expected."
	            },
	            digest: {
	              "!type": "fn(encoding?: string) -> +Buffer",
	              "!url": "http://nodejs.org/api/crypto.html#crypto_hash_digest_encoding",
	              "!doc": "Calculates the digest of all of the passed data to be hashed. The encoding can be 'hex', 'binary' or 'base64'. If no encoding is provided, then a buffer is returned."
	            }
	          },
	          "!url": "http://nodejs.org/api/crypto.html#crypto_class_hash",
	          "!doc": "The class for creating hash digests of data."
	        },
	        createHmac: {
	          "!type": "fn(algorithm: string, key: string) -> +crypto.Hmac",
	          "!url": "http://nodejs.org/api/crypto.html#crypto_crypto_createhmac_algorithm_key",
	          "!doc": "Creates and returns a hmac object, a cryptographic hmac with the given algorithm and key."
	        },
	        Hmac: {
	          "!type": "fn()",
	          prototype: {
	            update: {
	              "!type": "fn(data: +Buffer)",
	              "!url": "http://nodejs.org/api/crypto.html#crypto_hmac_update_data",
	              "!doc": "Update the hmac content with the given data. This can be called many times with new data as it is streamed."
	            },
	            digest: {
	              "!type": "fn(encoding?: string) -> +Buffer",
	              "!url": "http://nodejs.org/api/crypto.html#crypto_hmac_digest_encoding",
	              "!doc": "Calculates the digest of all of the passed data to the hmac. The encoding can be 'hex', 'binary' or 'base64'. If no encoding is provided, then a buffer is returned."
	            }
	          },
	          "!url": "http://nodejs.org/api/crypto.html#crypto_class_hmac",
	          "!doc": "Class for creating cryptographic hmac content."
	        },
	        createCipher: {
	          "!type": "fn(algorithm: string, password: string) -> +crypto.Cipher",
	          "!url": "http://nodejs.org/api/crypto.html#crypto_crypto_createcipher_algorithm_password",
	          "!doc": "Creates and returns a cipher object, with the given algorithm and password."
	        },
	        createCipheriv: {
	          "!type": "fn(algorithm: string, password: string, iv: string) -> +crypto.Cipher",
	          "!url": "http://nodejs.org/api/crypto.html#crypto_crypto_createcipheriv_algorithm_key_iv",
	          "!doc": "Creates and returns a cipher object, with the given algorithm, key and iv."
	        },
	        Cipher: {
	          "!type": "fn()",
	          prototype: {
	            "!proto": "stream.Duplex.prototype",
	            update: {
	              "!type": "fn(data: +Buffer, input_encoding?: string, output_encoding?: string) -> +Buffer",
	              "!url": "http://nodejs.org/api/crypto.html#crypto_cipher_update_data_input_encoding_output_encoding",
	              "!doc": "Updates the cipher with data, the encoding of which is given in input_encoding and can be 'utf8', 'ascii' or 'binary'. If no encoding is provided, then a buffer is expected."
	            },
	            "final": {
	              "!type": "fn(output_encoding?: string) -> +Buffer",
	              "!url": "http://nodejs.org/api/crypto.html#crypto_cipher_final_output_encoding",
	              "!doc": "Returns any remaining enciphered contents, with output_encoding being one of: 'binary', 'base64' or 'hex'. If no encoding is provided, then a buffer is returned."
	            },
	            setAutoPadding: {
	              "!type": "fn(auto_padding: bool)",
	              "!url": "http://nodejs.org/api/crypto.html#crypto_cipher_setautopadding_auto_padding_true",
	              "!doc": "You can disable automatic padding of the input data to block size. If auto_padding is false, the length of the entire input data must be a multiple of the cipher's block size or final will fail. Useful for non-standard padding, e.g. using 0x0 instead of PKCS padding. You must call this before cipher.final."
	            }
	          },
	          "!url": "http://nodejs.org/api/crypto.html#crypto_class_cipher",
	          "!doc": "Class for encrypting data."
	        },
	        createDecipher: {
	          "!type": "fn(algorithm: string, password: string) -> +crypto.Decipher",
	          "!url": "http://nodejs.org/api/crypto.html#crypto_crypto_createdecipher_algorithm_password",
	          "!doc": "Creates and returns a decipher object, with the given algorithm and key. This is the mirror of the createCipher() above."
	        },
	        createDecipheriv: {
	          "!type": "fn(algorithm: string, key: string, iv: string) -> +crypto.Decipher",
	          "!url": "http://nodejs.org/api/crypto.html#crypto_crypto_createdecipheriv_algorithm_key_iv",
	          "!doc": "Creates and returns a decipher object, with the given algorithm, key and iv. This is the mirror of the createCipheriv() above."
	        },
	        Decipher: {
	          "!type": "fn()",
	          prototype: {
	            "!proto": "stream.Duplex.prototype",
	            update: {
	              "!type": "fn(data: +Buffer, input_encoding?: string, output_encoding?: string)",
	              "!url": "http://nodejs.org/api/crypto.html#crypto_decipher_update_data_input_encoding_output_encoding",
	              "!doc": "Updates the decipher with data, which is encoded in 'binary', 'base64' or 'hex'. If no encoding is provided, then a buffer is expected."
	            },
	            "final": {
	              "!type": "fn(output_encoding?: string) -> +Buffer",
	              "!url": "http://nodejs.org/api/crypto.html#crypto_decipher_final_output_encoding",
	              "!doc": "Returns any remaining plaintext which is deciphered, with output_encoding being one of: 'binary', 'ascii' or 'utf8'. If no encoding is provided, then a buffer is returned."
	            },
	            setAutoPadding: {
	              "!type": "fn(auto_padding: bool)",
	              "!url": "http://nodejs.org/api/crypto.html#crypto_decipher_setautopadding_auto_padding_true",
	              "!doc": "You can disable auto padding if the data has been encrypted without standard block padding to prevent decipher.final from checking and removing it. Can only work if the input data's length is a multiple of the ciphers block size. You must call this before streaming data to decipher.update."
	            }
	          },
	          "!url": "http://nodejs.org/api/crypto.html#crypto_class_decipher",
	          "!doc": "Class for decrypting data."
	        },
	        createSign: {
	          "!type": "fn(algorithm: string) -> +crypto.Sign",
	          "!url": "http://nodejs.org/api/crypto.html#crypto_crypto_createsign_algorithm",
	          "!doc": "Creates and returns a signing object, with the given algorithm. On recent OpenSSL releases, openssl list-public-key-algorithms will display the available signing algorithms. Examples are 'RSA-SHA256'."
	        },
	        Sign: {
	          "!type": "fn()",
	          prototype: {
	            "!proto": "stream.Writable.prototype",
	            update: {
	              "!type": "fn(data: +Buffer)",
	              "!url": "http://nodejs.org/api/crypto.html#crypto_sign_update_data",
	              "!doc": "Updates the sign object with data. This can be called many times with new data as it is streamed."
	            },
	            sign: {
	              "!type": "fn(private_key: string, output_format: string) -> +Buffer",
	              "!url": "http://nodejs.org/api/crypto.html#crypto_sign_sign_private_key_output_format",
	              "!doc": "Calculates the signature on all the updated data passed through the sign. private_key is a string containing the PEM encoded private key for signing."
	            }
	          },
	          "!url": "http://nodejs.org/api/crypto.html#crypto_class_sign",
	          "!doc": "Class for generating signatures."
	        },
	        createVerify: {
	          "!type": "fn(algorith: string) -> +crypto.Verify",
	          "!url": "http://nodejs.org/api/crypto.html#crypto_crypto_createverify_algorithm",
	          "!doc": "Creates and returns a verification object, with the given algorithm. This is the mirror of the signing object above."
	        },
	        Verify: {
	          "!type": "fn()",
	          prototype: {
	            "!proto": "stream.Writable.prototype",
	            update: {
	              "!type": "fn(data: +Buffer)",
	              "!url": "http://nodejs.org/api/crypto.html#crypto_verifier_update_data",
	              "!doc": "Updates the verifier object with data. This can be called many times with new data as it is streamed."
	            },
	            verify: {
	              "!type": "fn(object: string, signature: string, signature_format?: string) -> bool",
	              "!url": "http://nodejs.org/api/crypto.html#crypto_verifier_verify_object_signature_signature_format",
	              "!doc": "Verifies the signed data by using the object and signature. object is a string containing a PEM encoded object, which can be one of RSA public key, DSA public key, or X.509 certificate. signature is the previously calculated signature for the data, in the signature_format which can be 'binary', 'hex' or 'base64'. If no encoding is specified, then a buffer is expected."
	            }
	          },
	          "!url": "http://nodejs.org/api/crypto.html#crypto_class_verify",
	          "!doc": "Class for verifying signatures."
	        },
	        createDiffieHellman: {
	          "!type": "fn(prime: number, encoding?: string) -> +crypto.DiffieHellman",
	          "!url": "http://nodejs.org/api/crypto.html#crypto_crypto_creatediffiehellman_prime_length",
	          "!doc": "Creates a Diffie-Hellman key exchange object and generates a prime of the given bit length. The generator used is 2."
	        },
	        DiffieHellman: {
	          "!type": "fn()",
	          prototype: {
	            generateKeys: {
	              "!type": "fn(encoding?: string) -> +Buffer",
	              "!url": "http://nodejs.org/api/crypto.html#crypto_diffiehellman_generatekeys_encoding",
	              "!doc": "Generates private and public Diffie-Hellman key values, and returns the public key in the specified encoding. This key should be transferred to the other party. Encoding can be 'binary', 'hex', or 'base64'. If no encoding is provided, then a buffer is returned."
	            },
	            computeSecret: {
	              "!type": "fn(other_public_key: +Buffer, input_encoding?: string, output_encoding?: string) -> +Buffer",
	              "!url": "http://nodejs.org/api/crypto.html#crypto_diffiehellman_computesecret_other_public_key_input_encoding_output_encoding",
	              "!doc": "Computes the shared secret using other_public_key as the other party's public key and returns the computed shared secret. Supplied key is interpreted using specified input_encoding, and secret is encoded using specified output_encoding. Encodings can be 'binary', 'hex', or 'base64'. If the input encoding is not provided, then a buffer is expected."
	            },
	            getPrime: {
	              "!type": "fn(encoding?: string) -> +Buffer",
	              "!url": "http://nodejs.org/api/crypto.html#crypto_diffiehellman_getprime_encoding",
	              "!doc": "Returns the Diffie-Hellman prime in the specified encoding, which can be 'binary', 'hex', or 'base64'. If no encoding is provided, then a buffer is returned."
	            },
	            getGenerator: {
	              "!type": "fn(encoding: string) -> +Buffer",
	              "!url": "http://nodejs.org/api/crypto.html#crypto_diffiehellman_getgenerator_encoding",
	              "!doc": "Returns the Diffie-Hellman prime in the specified encoding, which can be 'binary', 'hex', or 'base64'. If no encoding is provided, then a buffer is returned."
	            },
	            getPublicKey: {
	              "!type": "fn(encoding?: string) -> +Buffer",
	              "!url": "http://nodejs.org/api/crypto.html#crypto_diffiehellman_getpublickey_encoding",
	              "!doc": "Returns the Diffie-Hellman public key in the specified encoding, which can be 'binary', 'hex', or 'base64'. If no encoding is provided, then a buffer is returned."
	            },
	            getPrivateKey: {
	              "!type": "fn(encoding?: string) -> +Buffer",
	              "!url": "http://nodejs.org/api/crypto.html#crypto_diffiehellman_getprivatekey_encoding",
	              "!doc": "Returns the Diffie-Hellman private key in the specified encoding, which can be 'binary', 'hex', or 'base64'. If no encoding is provided, then a buffer is returned."
	            },
	            setPublicKey: {
	              "!type": "fn(public_key: +Buffer, encoding?: string)",
	              "!url": "http://nodejs.org/api/crypto.html#crypto_diffiehellman_setpublickey_public_key_encoding",
	              "!doc": "Sets the Diffie-Hellman public key. Key encoding can be 'binary', 'hex' or 'base64'. If no encoding is provided, then a buffer is expected."
	            },
	            setPrivateKey: {
	              "!type": "fn(public_key: +Buffer, encoding?: string)",
	              "!url": "http://nodejs.org/api/crypto.html#crypto_diffiehellman_setprivatekey_private_key_encoding",
	              "!doc": "Sets the Diffie-Hellman private key. Key encoding can be 'binary', 'hex' or 'base64'. If no encoding is provided, then a buffer is expected."
	            }
	          },
	          "!url": "http://nodejs.org/api/crypto.html#crypto_class_diffiehellman",
	          "!doc": "The class for creating Diffie-Hellman key exchanges."
	        },
	        getDiffieHellman: {
	          "!type": "fn(group_name: string) -> +crypto.DiffieHellman",
	          "!url": "http://nodejs.org/api/crypto.html#crypto_crypto_getdiffiehellman_group_name",
	          "!doc": "Creates a predefined Diffie-Hellman key exchange object. The supported groups are: 'modp1', 'modp2', 'modp5' (defined in RFC 2412) and 'modp14', 'modp15', 'modp16', 'modp17', 'modp18' (defined in RFC 3526). The returned object mimics the interface of objects created by crypto.createDiffieHellman() above, but will not allow to change the keys (with diffieHellman.setPublicKey() for example). The advantage of using this routine is that the parties don't have to generate nor exchange group modulus beforehand, saving both processor and communication time."
	        },
	        pbkdf2: {
	          "!type": "fn(password: string, salt: string, iterations: number, keylen: number, callback: fn(err: +Error, derivedKey: string))",
	          "!url": "http://nodejs.org/api/crypto.html#crypto_crypto_pbkdf2_password_salt_iterations_keylen_callback",
	          "!doc": "Asynchronous PBKDF2 applies pseudorandom function HMAC-SHA1 to derive a key of given length from the given password, salt and iterations. The callback gets two arguments (err, derivedKey)."
	        },
	        pbkdf2Sync: {
	          "!type": "fn(password: string, salt: string, iterations: number, keylen: number) -> string",
	          "!url": "http://nodejs.org/api/crypto.html#crypto_crypto_pbkdf2sync_password_salt_iterations_keylen",
	          "!doc": "Synchronous PBKDF2 function. Returns derivedKey or throws error."
	        },
	        randomBytes: {
	          "!type": "fn(size: number, callback?: fn(err: +Error, buf: +Buffer))",
	          "!url": "http://nodejs.org/api/crypto.html#crypto_crypto_randombytes_size_callback",
	          "!doc": "Generates cryptographically strong pseudo-random data."
	        },
	        pseudoRandomBytes: {
	          "!type": "fn(size: number, callback?: fn(err: +Error, buf: +Buffer))",
	          "!url": "http://nodejs.org/api/crypto.html#crypto_crypto_pseudorandombytes_size_callback",
	          "!doc": "Generates non-cryptographically strong pseudo-random data. The data returned will be unique if it is sufficiently long, but is not necessarily unpredictable. For this reason, the output of this function should never be used where unpredictability is important, such as in the generation of encryption keys."
	        },
	        DEFAULT_ENCODING: "string"
	      },
	      util: {
	        format: {
	          "!type": "fn(format: string) -> string",
	          "!url": "http://nodejs.org/api/util.html#util_util_format_format",
	          "!doc": "Returns a formatted string using the first argument as a printf-like format."
	        },
	        debug: {
	          "!type": "fn(msg: string)",
	          "!url": "http://nodejs.org/api/util.html#util_util_debug_string",
	          "!doc": "A synchronous output function. Will block the process and output string immediately to stderr."
	        },
	        error: {
	          "!type": "fn(msg: string)",
	          "!url": "http://nodejs.org/api/util.html#util_util_error",
	          "!doc": "Same as util.debug() except this will output all arguments immediately to stderr."
	        },
	        puts: {
	          "!type": "fn(data: string)",
	          "!url": "http://nodejs.org/api/util.html#util_util_puts",
	          "!doc": "A synchronous output function. Will block the process and output all arguments to stdout with newlines after each argument."
	        },
	        print: {
	          "!type": "fn(data: string)",
	          "!url": "http://nodejs.org/api/util.html#util_util_print",
	          "!doc": "A synchronous output function. Will block the process, cast each argument to a string then output to stdout. Does not place newlines after each argument."
	        },
	        log: {
	          "!type": "fn(string: string)",
	          "!url": "http://nodejs.org/api/util.html#util_util_log_string",
	          "!doc": "Output with timestamp on stdout."
	        },
	        inspect: {
	          "!type": "fn(object: ?, options: ?) -> string",
	          "!url": "http://nodejs.org/api/util.html#util_util_inspect_object_options",
	          "!doc": "Return a string representation of object, which is useful for debugging."
	        },
	        isArray: {
	          "!type": "fn(object: ?) -> bool",
	          "!url": "http://nodejs.org/api/util.html#util_util_isarray_object",
	          "!doc": "Returns true if the given \"object\" is an Array. false otherwise."
	        },
	        isRegExp: {
	          "!type": "fn(object: ?) -> bool",
	          "!url": "http://nodejs.org/api/util.html#util_util_isregexp_object",
	          "!doc": "Returns true if the given \"object\" is a RegExp. false otherwise."
	        },
	        isDate: {
	          "!type": "fn(object: ?) -> bool",
	          "!url": "http://nodejs.org/api/util.html#util_util_isdate_object",
	          "!doc": "Returns true if the given \"object\" is a Date. false otherwise."
	        },
	        isError: {
	          "!type": "fn(object: ?) -> bool",
	          "!url": "http://nodejs.org/api/util.html#util_util_iserror_object",
	          "!doc": "Returns true if the given \"object\" is an Error. false otherwise."
	        },
	        inherits: {
	          "!type": "fn(constructor: ?, superConstructor: ?)",
	          "!url": "http://nodejs.org/api/util.html#util_util_inherits_constructor_superconstructor",
	          "!doc": "Inherit the prototype methods from one constructor into another. The prototype of constructor will be set to a new object created from superConstructor."
	        }
	      },
	      assert: {
	        "!type": "fn(value: ?, message?: string)",
	        fail: {
	          "!type": "fn(actual: ?, expected: ?, message: string, operator: string)",
	          "!url": "http://nodejs.org/api/assert.html#assert_assert_fail_actual_expected_message_operator",
	          "!doc": "Throws an exception that displays the values for actual and expected separated by the provided operator."
	        },
	        ok: {
	          "!type": "fn(value: ?, message?: string)",
	          "!url": "http://nodejs.org/api/assert.html#assert_assert",
	          "!doc": "This module is used for writing unit tests for your applications, you can access it with require('assert')."
	        },
	        equal: {
	          "!type": "fn(actual: ?, expected: ?, message?: string)",
	          "!url": "http://nodejs.org/api/assert.html#assert_assert_equal_actual_expected_message",
	          "!doc": "Tests shallow, coercive equality with the equal comparison operator ( == )."
	        },
	        notEqual: {
	          "!type": "fn(actual: ?, expected: ?, message?: string)",
	          "!url": "http://nodejs.org/api/assert.html#assert_assert_notequal_actual_expected_message",
	          "!doc": "Tests shallow, coercive non-equality with the not equal comparison operator ( != )."
	        },
	        deepEqual: {
	          "!type": "fn(actual: ?, expected: ?, message?: string)",
	          "!url": "http://nodejs.org/api/assert.html#assert_assert_deepequal_actual_expected_message",
	          "!doc": "Tests for deep equality."
	        },
	        notDeepEqual: {
	          "!type": "fn(acutal: ?, expected: ?, message?: string)",
	          "!url": "http://nodejs.org/api/assert.html#assert_assert_notdeepequal_actual_expected_message",
	          "!doc": "Tests for any deep inequality."
	        },
	        strictEqual: {
	          "!type": "fn(actual: ?, expected: ?, message?: string)",
	          "!url": "http://nodejs.org/api/assert.html#assert_assert_strictequal_actual_expected_message",
	          "!doc": "Tests strict equality, as determined by the strict equality operator ( === )"
	        },
	        notStrictEqual: {
	          "!type": "fn(actual: ?, expected: ?, message?: string)",
	          "!url": "http://nodejs.org/api/assert.html#assert_assert_notstrictequal_actual_expected_message",
	          "!doc": "Tests strict non-equality, as determined by the strict not equal operator ( !== )"
	        },
	        "throws": {
	          "!type": "fn(block: fn(), error?: ?, messsage?: string)",
	          "!url": "http://nodejs.org/api/assert.html#assert_assert_throws_block_error_message",
	          "!doc": "Expects block to throw an error. error can be constructor, regexp or validation function."
	        },
	        doesNotThrow: {
	          "!type": "fn(block: fn(), error?: ?, messsage?: string)",
	          "!url": "http://nodejs.org/api/assert.html#assert_assert_doesnotthrow_block_message",
	          "!doc": "Expects block not to throw an error."
	        },
	        ifError: {
	          "!type": "fn(value: ?)",
	          "!url": "http://nodejs.org/api/assert.html#assert_assert_iferror_value",
	          "!doc": "Tests if value is not a false value, throws if it is a true value. Useful when testing the first argument, error in callbacks."
	        },
	        "!url": "http://nodejs.org/api/assert.html#assert_assert",
	        "!doc": "This module is used for writing unit tests for your applications, you can access it with require('assert')."
	      },
	      tty: {
	        isatty: {
	          "!type": "fn(fd: number) -> bool",
	          "!url": "http://nodejs.org/api/tty.html#tty_tty_isatty_fd",
	          "!doc": "Returns true or false depending on if the fd is associated with a terminal."
	        }
	      },
	      domain: {
	        create: {
	          "!type": "fn() -> +events.EventEmitter",
	          "!url": "http://nodejs.org/api/domain.html#domain_domain_create",
	          "!doc": "Returns a new Domain object."
	        },
	        Domain: {
	          "!type": "fn()",
	          prototype: {
	            "!proto": "events.EventEmitter.prototype",
	            run: {
	              "!type": "fn(fn: fn())",
	              "!url": "http://nodejs.org/api/domain.html#domain_domain_run_fn",
	              "!doc": "Run the supplied function in the context of the domain, implicitly binding all event emitters, timers, and lowlevel requests that are created in that context."
	            },
	            members: {
	              "!type": "[+events.EventEmitter]",
	              "!url": "http://nodejs.org/api/domain.html#domain_domain_members",
	              "!doc": "An array of timers and event emitters that have been explicitly added to the domain."
	            },
	            add: {
	              "!type": "fn(emitter: +events.EventEmitter)",
	              "!url": "http://nodejs.org/api/domain.html#domain_domain_add_emitter",
	              "!doc": "Explicitly adds an emitter to the domain. If any event handlers called by the emitter throw an error, or if the emitter emits an error event, it will be routed to the domain's error event, just like with implicit binding."
	            },
	            remove: {
	              "!type": "fn(emitter: +events.EventEmitter)",
	              "!url": "http://nodejs.org/api/domain.html#domain_domain_remove_emitter",
	              "!doc": "The opposite of domain.add(emitter). Removes domain handling from the specified emitter."
	            },
	            bind: {
	              "!type": "fn(callback: fn(err: +Error, data: ?)) -> !0",
	              "!url": "http://nodejs.org/api/domain.html#domain_domain_bind_callback",
	              "!doc": "The returned function will be a wrapper around the supplied callback function. When the returned function is called, any errors that are thrown will be routed to the domain's error event."
	            },
	            intercept: {
	              "!type": "fn(cb: fn(data: ?)) -> !0",
	              "!url": "http://nodejs.org/api/domain.html#domain_domain_intercept_callback",
	              "!doc": "This method is almost identical to domain.bind(callback). However, in addition to catching thrown errors, it will also intercept Error objects sent as the first argument to the function."
	            },
	            dispose: {
	              "!type": "fn()",
	              "!url": "http://nodejs.org/api/domain.html#domain_domain_dispose",
	              "!doc": "The dispose method destroys a domain, and makes a best effort attempt to clean up any and all IO that is associated with the domain. Streams are aborted, ended, closed, and/or destroyed. Timers are cleared. Explicitly bound callbacks are no longer called. Any error events that are raised as a result of this are ignored."
	            }
	          },
	          "!url": "http://nodejs.org/api/domain.html#domain_class_domain",
	          "!doc": "The Domain class encapsulates the functionality of routing errors and uncaught exceptions to the active Domain object."
	        }
	      },
	      "os.cpuSpec": {
	        model: "string",
	        speed: "number",
	        times: {
	          user: "number",
	          nice: "number",
	          sys: "number",
	          idle: "number",
	          irq: "number"
	        }
	      },
	      "process.memoryUsage.type": {
	        rss: "number",
	        heapTotal: "?",
	        number: "?",
	        heapUsed: "number"
	      },
	      "net.address": {
	        port: "number",
	        family: "string",
	        address: "string"
	      },
	      "url.type": {
	        href: "string",
	        protocol: "string",
	        auth: "string",
	        hostname: "string",
	        port: "string",
	        host: "string",
	        pathname: "string",
	        search: "string",
	        query: "string",
	        slashes: "bool",
	        hash: "string"
	      },
	      "tls.Server.credentials": {
	        key: "string",
	        cert: "string",
	        ca: "string"
	      },
	      "tls.cipher": {
	        name: "string",
	        version: "string"
	      },
	      "crypto.credentials": {
	        pfx: "string",
	        key: "string",
	        passphrase: "string",
	        cert: "string",
	        ca: "string",
	        crl: "string",
	        ciphers: "string"
	      },
	      buffer: {
	        Buffer: "Buffer",
	        INSPECT_MAX_BYTES: "number",
	        SlowBuffer: "Buffer"
	      },
	      module: {},
	      timers: {
	        setTimeout: {
	          "!type": "fn(callback: fn(), ms: number) -> timers.Timer",
	          "!url": "http://nodejs.org/api/globals.html#globals_settimeout_cb_ms",
	          "!doc": "Run callback cb after at least ms milliseconds. The actual delay depends on external factors like OS timer granularity and system load."
	        },
	        clearTimeout: {
	          "!type": "fn(id: timers.Timer)",
	          "!url": "http://nodejs.org/api/globals.html#globals_cleartimeout_t",
	          "!doc": "Stop a timer that was previously created with setTimeout(). The callback will not execute."
	        },
	        setInterval: {
	          "!type": "fn(callback: fn(), ms: number) -> timers.Timer",
	          "!url": "http://nodejs.org/api/globals.html#globals_setinterval_cb_ms",
	          "!doc": "Run callback cb repeatedly every ms milliseconds. Note that the actual interval may vary, depending on external factors like OS timer granularity and system load. It's never less than ms but it may be longer."
	        },
	        clearInterval: {
	          "!type": "fn(id: timers.Timer)",
	          "!url": "http://nodejs.org/api/globals.html#globals_clearinterval_t",
	          "!doc": "Stop a timer that was previously created with setInterval(). The callback will not execute."
	        },
	        setImmediate: {
	          "!type": "fn(callback: fn()) -> timers.Timer",
	          "!url": "http://nodejs.org/api/timers.html#timers_setimmediate_callback_arg",
	          "!doc": "Schedule the 'immediate' execution of callback after I/O events callbacks."
	        },
	        clearImmediate: {
	          "!type": "fn(id: timers.Timer)",
	          "!url": "http://nodejs.org/api/timers.html#timers_clearimmediate_immediateid",
	          "!doc": "Stops an immediate from triggering."
	        },
	        Timer: {
	          unref: {
	            "!type": "fn()",
	            "!url": "http://nodejs.org/api/timers.html#timers_unref",
	            "!doc": "Create a timer that is active but if it is the only item left in the event loop won't keep the program running."
	          },
	          ref: {
	            "!type": "fn()",
	            "!url": "http://nodejs.org/api/timers.html#timers_unref",
	            "!doc": "Explicitly request the timer hold the program open (cancel the effect of 'unref')."
	          }
	        }
	      }
	    },
	    process: {
	      stdout: {
	        "!type": "+stream.Writable",
	        "!url": "http://nodejs.org/api/process.html#process_process_stdout",
	        "!doc": "A Writable Stream to stdout."
	      },
	      stderr: {
	        "!type": "+stream.Writable",
	        "!url": "http://nodejs.org/api/process.html#process_process_stderr",
	        "!doc": "A writable stream to stderr."
	      },
	      stdin: {
	        "!type": "+stream.Readable",
	        "!url": "http://nodejs.org/api/process.html#process_process_stdin",
	        "!doc": "A Readable Stream for stdin. The stdin stream is paused by default, so one must call process.stdin.resume() to read from it."
	      },
	      argv: {
	        "!type": "[string]",
	        "!url": "http://nodejs.org/api/process.html#process_process_argv",
	        "!doc": "An array containing the command line arguments. The first element will be 'node', the second element will be the name of the JavaScript file. The next elements will be any additional command line arguments."
	      },
	      execPath: {
	        "!type": "string",
	        "!url": "http://nodejs.org/api/process.html#process_process_execpath",
	        "!doc": "This is the absolute pathname of the executable that started the process."
	      },
	      abort: {
	        "!type": "fn()",
	        "!url": "http://nodejs.org/api/process.html#process_process_abort",
	        "!doc": "This causes node to emit an abort. This will cause node to exit and generate a core file."
	      },
	      chdir: {
	        "!type": "fn(directory: string)",
	        "!url": "http://nodejs.org/api/process.html#process_process_chdir_directory",
	        "!doc": "Changes the current working directory of the process or throws an exception if that fails."
	      },
	      cwd: {
	        "!type": "fn()",
	        "!url": "http://nodejs.org/api/process.html#process_process_cwd",
	        "!doc": "Returns the current working directory of the process."
	      },
	      env: {
	        "!url": "http://nodejs.org/api/process.html#process_process_env",
	        "!doc": "An object containing the user environment."
	      },
	      exit: {
	        "!type": "fn(code?: number)",
	        "!url": "http://nodejs.org/api/process.html#process_process_exit_code",
	        "!doc": "Ends the process with the specified code. If omitted, exit uses the 'success' code 0."
	      },
	      getgid: {
	        "!type": "fn() -> number",
	        "!url": "http://nodejs.org/api/process.html#process_process_getgid",
	        "!doc": "Gets the group identity of the process. This is the numerical group id, not the group name."
	      },
	      setgid: {
	        "!type": "fn(id: number)",
	        "!url": "http://nodejs.org/api/process.html#process_process_setgid_id",
	        "!doc": "Sets the group identity of the process. This accepts either a numerical ID or a groupname string. If a groupname is specified, this method blocks while resolving it to a numerical ID."
	      },
	      getuid: {
	        "!type": "fn() -> number",
	        "!url": "http://nodejs.org/api/process.html#process_process_getuid",
	        "!doc": "Gets the user identity of the process. This is the numerical userid, not the username."
	      },
	      setuid: {
	        "!type": "fn(id: number)",
	        "!url": "http://nodejs.org/api/process.html#process_process_setuid_id",
	        "!doc": "Sets the user identity of the process. This accepts either a numerical ID or a username string. If a username is specified, this method blocks while resolving it to a numerical ID."
	      },
	      version: {
	        "!type": "string",
	        "!url": "http://nodejs.org/api/process.html#process_process_version",
	        "!doc": "A compiled-in property that exposes NODE_VERSION."
	      },
	      versions: {
	        http_parser: "string",
	        node: "string",
	        v8: "string",
	        ares: "string",
	        uv: "string",
	        zlib: "string",
	        openssl: "string",
	        "!url": "http://nodejs.org/api/process.html#process_process_versions",
	        "!doc": "A property exposing version strings of node and its dependencies."
	      },
	      config: {
	        target_defaults: {
	          cflags: "[?]",
	          default_configuration: "string",
	          defines: "[string]",
	          include_dirs: "[string]",
	          libraries: "[string]"
	        },
	        variables: {
	          clang: "number",
	          host_arch: "string",
	          node_install_npm: "bool",
	          node_install_waf: "bool",
	          node_prefix: "string",
	          node_shared_openssl: "bool",
	          node_shared_v8: "bool",
	          node_shared_zlib: "bool",
	          node_use_dtrace: "bool",
	          node_use_etw: "bool",
	          node_use_openssl: "bool",
	          target_arch: "string",
	          v8_no_strict_aliasing: "number",
	          v8_use_snapshot: "bool",
	          visibility: "string"
	        },
	        "!url": "http://nodejs.org/api/process.html#process_process_config",
	        "!doc": "An Object containing the JavaScript representation of the configure options that were used to compile the current node executable. This is the same as the \"config.gypi\" file that was produced when running the ./configure script."
	      },
	      kill: {
	        "!type": "fn(pid: number, signal?: string)",
	        "!url": "http://nodejs.org/api/process.html#process_process_kill_pid_signal",
	        "!doc": "Send a signal to a process. pid is the process id and signal is the string describing the signal to send. Signal names are strings like 'SIGINT' or 'SIGUSR1'. If omitted, the signal will be 'SIGTERM'."
	      },
	      pid: {
	        "!type": "number",
	        "!url": "http://nodejs.org/api/process.html#process_process_pid",
	        "!doc": "The PID of the process."
	      },
	      title: {
	        "!type": "string",
	        "!url": "http://nodejs.org/api/process.html#process_process_title",
	        "!doc": "Getter/setter to set what is displayed in 'ps'."
	      },
	      arch: {
	        "!type": "string",
	        "!url": "http://nodejs.org/api/process.html#process_process_arch",
	        "!doc": "What processor architecture you're running on: 'arm', 'ia32', or 'x64'."
	      },
	      platform: {
	        "!type": "string",
	        "!url": "http://nodejs.org/api/process.html#process_process_platform",
	        "!doc": "What platform you're running on: 'darwin', 'freebsd', 'linux', 'sunos' or 'win32'"
	      },
	      memoryUsage: {
	        "!type": "fn() -> process.memoryUsage.type",
	        "!url": "http://nodejs.org/api/process.html#process_process_memoryusage",
	        "!doc": "Returns an object describing the memory usage of the Node process measured in bytes."
	      },
	      nextTick: {
	        "!type": "fn(callback: fn())",
	        "!url": "http://nodejs.org/api/process.html#process_process_nexttick_callback",
	        "!doc": "On the next loop around the event loop call this callback. This is not a simple alias to setTimeout(fn, 0), it's much more efficient. It typically runs before any other I/O events fire, but there are some exceptions."
	      },
	      maxTickDepth: {
	        "!type": "number",
	        "!url": "http://nodejs.org/api/process.html#process_process_maxtickdepth",
	        "!doc": "The maximum depth of nextTick-calling nextTick-callbacks that will be evaluated before allowing other forms of I/O to occur."
	      },
	      umask: {
	        "!type": "fn(mask?: number) -> number",
	        "!url": "http://nodejs.org/api/process.html#process_process_umask_mask",
	        "!doc": "Sets or reads the process's file mode creation mask. Child processes inherit the mask from the parent process. Returns the old mask if mask argument is given, otherwise returns the current mask."
	      },
	      uptime: {
	        "!type": "fn() -> number",
	        "!url": "http://nodejs.org/api/process.html#process_process_uptime",
	        "!doc": "Number of seconds Node has been running."
	      },
	      hrtime: {
	        "!type": "fn() -> [number]",
	        "!url": "http://nodejs.org/api/process.html#process_process_hrtime",
	        "!doc": "Returns the current high-resolution real time in a [seconds, nanoseconds] tuple Array. It is relative to an arbitrary time in the past. It is not related to the time of day and therefore not subject to clock drift. The primary use is for measuring performance between intervals."
	      },
	      "!url": "http://nodejs.org/api/globals.html#globals_process",
	      "!doc": "The process object."
	    },
	    global: {
	      "!type": "<top>",
	      "!url": "http://nodejs.org/api/globals.html#globals_global",
	      "!doc": "In browsers, the top-level scope is the global scope. That means that in browsers if you're in the global scope var something will define a global variable. In Node this is different. The top-level scope is not the global scope; var something inside a Node module will be local to that module."
	    },
	    console: {
	      log: {
	        "!type": "fn(text: string)",
	        "!url": "http://nodejs.org/api/stdio.html#stdio_console_log_data",
	        "!doc": "Prints to stdout with newline. This function can take multiple arguments in a printf()-like way."
	      },
	      info: {
	        "!type": "fn(text: string)",
	        "!url": "http://nodejs.org/api/stdio.html#stdio_console_info_data",
	        "!doc": "Same as console.log."
	      },
	      error: {
	        "!type": "fn(text: string)",
	        "!url": "http://nodejs.org/api/stdio.html#stdio_console_error_data",
	        "!doc": "Same as console.log but prints to stderr."
	      },
	      warn: {
	        "!type": "fn(text: string)",
	        "!url": "http://nodejs.org/api/stdio.html#stdio_console_warn_data",
	        "!doc": "Same as console.error."
	      },
	      dir: {
	        "!type": "fn(obj: ?)",
	        "!url": "http://nodejs.org/api/stdio.html#stdio_console_dir_obj",
	        "!doc": "Uses util.inspect on obj and prints resulting string to stdout."
	      },
	      time: {
	        "!type": "fn(label: string)",
	        "!url": "http://nodejs.org/api/stdio.html#stdio_console_time_label",
	        "!doc": "Mark a time."
	      },
	      timeEnd: {
	        "!type": "fn(label: string)",
	        "!url": "http://nodejs.org/api/stdio.html#stdio_console_timeend_label",
	        "!doc": "Finish timer, record output."
	      },
	      trace: {
	        "!type": "fn(label: string)",
	        "!url": "http://nodejs.org/api/stdio.html#stdio_console_trace_label",
	        "!doc": "Print a stack trace to stderr of the current position."
	      },
	      assert: {
	        "!type": "fn(expression: bool)",
	        "!url": "http://nodejs.org/api/stdio.html#stdio_console_assert_expression_message",
	        "!doc": "Same as assert.ok() where if the expression evaluates as false throw an AssertionError with message."
	      },
	      "!url": "http://nodejs.org/api/globals.html#globals_console",
	      "!doc": "Used to print to stdout and stderr."
	    },
	    __filename: {
	      "!type": "string",
	      "!url": "http://nodejs.org/api/globals.html#globals_filename",
	      "!doc": "The filename of the code being executed. This is the resolved absolute path of this code file. For a main program this is not necessarily the same filename used in the command line. The value inside a module is the path to that module file."
	    },
	    __dirname: {
	      "!type": "string",
	      "!url": "http://nodejs.org/api/globals.html#globals_dirname",
	      "!doc": "The name of the directory that the currently executing script resides in."
	    },
	    setTimeout: "timers.setTimeout",
	    clearTimeout: "timers.clearTimeout",
	    setInterval: "timers.setInterval",
	    clearInterval: "timers.clearInterval",
	    module: {
	      "!type": "+Module",
	      "!url": "http://nodejs.org/api/globals.html#globals_module",
	      "!doc": "A reference to the current module. In particular module.exports is the same as the exports object. module isn't actually a global but rather local to each module."
	    },
	    Buffer: {
	      "!type": "fn(str: string, encoding?: string) -> +Buffer",
	      prototype: {
	        "!proto": "String.prototype",
	        write: "fn(string: string, offset?: number, length?: number, encoding?: string) -> number",
	        toString: "fn(encoding?: string, start?: number, end?: number) -> string",
	        length: "number",
	        copy: "fn(targetBuffer: +Buffer, targetStart?: number, sourceStart?: number, sourceEnd?: number)",
	        slice: "fn(start?: number, end?: number) -> +Buffer",
	        readUInt8: "fn(offset: number, noAssert?: bool) -> number",
	        readUInt16LE: "fn(offset: number, noAssert?: bool) -> number",
	        readUInt16BE: "fn(offset: number, noAssert?: bool) -> number",
	        readUInt32LE: "fn(offset: number, noAssert?: bool) -> number",
	        readUInt32BE: "fn(offset: number, noAssert?: bool) -> number",
	        readInt8: "fn(offset: number, noAssert?: bool) -> number",
	        readInt16LE: "fn(offset: number, noAssert?: bool) -> number",
	        readInt16BE: "fn(offset: number, noAssert?: bool) -> number",
	        readInt32LE: "fn(offset: number, noAssert?: bool) -> number",
	        readInt32BE: "fn(offset: number, noAssert?: bool) -> number",
	        readFloatLE: "fn(offset: number, noAssert?: bool) -> number",
	        readFloatBE: "fn(offset: number, noAssert?: bool) -> number",
	        readDoubleLE: "fn(offset: number, noAssert?: bool) -> number",
	        readDoubleBE: "fn(offset: number, noAssert?: bool) -> number",
	        writeUInt8: "fn(value: number, offset: number, noAssert?: bool)",
	        writeUInt16LE: "fn(value: number, offset: number, noAssert?: bool)",
	        writeUInt16BE: "fn(value: number, offset: number, noAssert?: bool)",
	        writeUInt32LE: "fn(value: number, offset: number, noAssert?: bool)",
	        writeUInt32BE: "fn(value: number, offset: number, noAssert?: bool)",
	        writeInt8: "fn(value: number, offset: number, noAssert?: bool)",
	        writeInt16LE: "fn(value: number, offset: number, noAssert?: bool)",
	        writeInt16BE: "fn(value: number, offset: number, noAssert?: bool)",
	        writeInt32LE: "fn(value: number, offset: number, noAssert?: bool)",
	        writeInt32BE: "fn(value: number, offset: number, noAssert?: bool)",
	        writeFloatLE: "fn(value: number, offset: number, noAssert?: bool)",
	        writeFloatBE: "fn(value: number, offset: number, noAssert?: bool)",
	        writeDoubleLE: "fn(value: number, offset: number, noAssert?: bool)",
	        writeDoubleBE: "fn(value: number, offset: number, noAssert?: bool)",
	        fill: "fn(value: ?, offset?: number, end?: number)"
	      },
	      isBuffer: "fn(obj: ?) -> bool",
	      byteLength: "fn(string: string, encoding?: string) -> number",
	      concat: "fn(list: [+Buffer], totalLength?: number) -> +Buffer",
	      "!url": "http://nodejs.org/api/globals.html#globals_class_buffer",
	      "!doc": "Used to handle binary data."
	    }
	  };
	});


/***/ },
/* 26 */
/***/ function(module, exports, __webpack_require__) {

	var map = {
		"./angular": 22,
		"./angular.js": 22,
		"./complete_strings": 27,
		"./complete_strings.js": 27,
		"./component": 28,
		"./component.js": 28,
		"./doc_comment": 24,
		"./doc_comment.js": 24,
		"./node": 25,
		"./node.js": 25,
		"./requirejs": 29,
		"./requirejs.js": 29
	};
	function webpackContext(req) {
		return __webpack_require__(webpackContextResolve(req));
	};
	function webpackContextResolve(req) {
		return map[req] || (function() { throw new Error("Cannot find module '" + req + "'.") }());
	};
	webpackContext.keys = function webpackContextKeys() {
		return Object.keys(map);
	};
	webpackContext.resolve = webpackContextResolve;
	module.exports = webpackContext;
	webpackContext.id = 26;


/***/ },
/* 27 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// When enabled, this plugin will gather (short) strings in your code,
	// and completing when inside a string will try to complete to
	// previously seen strings. Takes a single option, maxLength, which
	// controls the maximum length of string values to gather, and
	// defaults to 15.
	
	(function(mod) {
	  if (true) // CommonJS
	    return mod(__webpack_require__(3), __webpack_require__(9), __webpack_require__(5));
	  if (true) // AMD
	    return !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(3), __webpack_require__(9), __webpack_require__(5)], __WEBPACK_AMD_DEFINE_FACTORY__ = (mod), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  mod(tern, tern, acorn.walk);
	})(function(infer, tern, walk) {
	  "use strict";
	
	  tern.registerPlugin("complete_strings", function(server, options) {
	    server._completeStrings = { maxLen: options && options.maxLength || 15,
	                                seen: Object.create(null) };
	    server.on("reset", function() {
	      server._completeStrings.seen = Object.create(null);
	    });
	    return {
	      passes: {
	        postParse: postParse,
	        completion: complete
	      }
	    };
	  });
	
	  function postParse(ast) {
	    var data = infer.cx().parent._completeStrings;
	    walk.simple(ast, {
	      Literal: function(node) {
	        if (typeof node.value == "string" && node.value && node.value.length < data.maxLen)
	          data.seen[node.value] = ast.sourceFile.name;
	      }
	    });
	  }
	
	  function complete(file, query) {
	    var pos = tern.resolvePos(file, query.end);
	    var lit = infer.findExpressionAround(file.ast, null, pos, file.scope, "Literal");
	    if (!lit || typeof lit.node.value != "string") return;
	    var before = lit.node.value.slice(0, pos - lit.node.start - 1);
	    var matches = [], seen = infer.cx().parent._completeStrings.seen;
	    for (var str in seen) if (str.length > before.length && str.indexOf(before) == 0) {
	      if (query.types || query.docs || query.urls || query.origins) {
	        var rec = {name: JSON.stringify(str), displayName: str};
	        matches.push(rec);
	        if (query.types) rec.type = "string";
	        if (query.origins) rec.origin = seen[str];
	      } else {
	        matches.push(JSON.stringify(str));
	      }
	    }
	    if (matches.length) return {
	      start: tern.outputPos(query, file, lit.node.start),
	      end: tern.outputPos(query, file, pos + (file.text.charAt(pos) == file.text.charAt(lit.node.start) ? 1 : 0)),
	      isProperty: false,
	      completions: matches
	    };
	  }
	});


/***/ },
/* 28 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(process) {(function(mod) {
	  if (true) // CommonJS
	    return mod(__webpack_require__(3), __webpack_require__(9), __webpack_require__(26));
	  if (true) // AMD
	    return !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(3), __webpack_require__(9)], __WEBPACK_AMD_DEFINE_FACTORY__ = (mod), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  mod(tern, tern);
	})(function(infer, tern, require) {
	  "use strict";
	
	  function resolvePath(base, path) {
	    var slash = base.lastIndexOf("/");
	    var m;
	
	    if (slash >= 0) path = base.slice(0, slash + 1) + path;
	    while (m = /[^\/]*[^\/\.][^\/]*\/\.\.\//.exec(path))
	      path = path.slice(0, m.index) + path.slice(m.index + m[0].length);
	
	    return path.replace(/(^|[^\.])\.\//g, "$1");
	  }
	
	  function resolveModule(server, name) {
	    server.addFile(name, null, server._component.currentName);
	    return getModule(server._component, name);
	  }
	
	  function getModule(data, name) {
	    return data.modules[name] || (data.modules[name] = new infer.AVal);
	  }
	
	  function exportsFromScope(scope) {
	    var mType = scope.getProp("module").getType();
	    var exportsVal = mType && mType.getProp("exports");
	
	    if (!(exportsVal instanceof infer.AVal) || exportsVal.isEmpty())
	      return scope.getProp("exports");
	    else
	      return exportsVal.types[exportsVal.types.length - 1];
	  }
	
	  function buildWrappingScope(parent, origin, node) {
	    var scope = new infer.Scope(parent);
	    var cx = infer.cx();
	    scope.originNode = node;
	    cx.definitions.component.require.propagate(scope.defProp("require"));
	
	    var type = cx.definitions.component.Module.getProp("prototype").getType();
	    var module = new infer.Obj(type);
	    module.propagate(scope.defProp("module"));
	
	    var exports = new infer.Obj(true, "exports", origin);
	    exports.propagate(scope.defProp("exports"));
	    exports.propagate(module.defProp("exports"));
	
	    return scope;
	  }
	
	  // Assume node.js & access to local file system
	  if (require) (function() {
	    var fs = require("fs");
	    var path = require("path");
	
	    var win = /win/.test(process.platform);
	    var resolve = path.resolve;
	
	    if (win) resolve = function(base, file) {
	      return path.resolve(base, file).replace(/\\/g, "/");
	    };
	
	    resolveModule = function(server, name, relative) {
	      var data = server._component;
	      var dir = server.options.projectDir || "";
	      var file = name;
	
	      if (data.options.dontLoad == true)
	        return infer.ANull;
	
	      if (data.options.dontLoad && new RegExp(data.options.dontLoad).test(name))
	        return infer.ANull;
	
	      if (data.options.load && !new RegExp(data.options.load).test(name))
	        return infer.ANull;
	
	      if (!relative) {
	        try {
	          var cmp = JSON.parse(fs.readFileSync(resolve(dir, "component.json")));
	          if(!cmp.dependencies) return infer.ANull;
	          var dpx = new RegExp("(.*?)\/" + name, 'i');
	          var dep = Object.keys(cmp.dependencies).filter(function(dependency) {
	            return dpx.test(dependency);
	          }).pop();
	          var author = dep.match(/(.*?)\/.*?/i).shift();
	          author =  author.substring(0, author.length - 1);
	          file = resolve(dir, "components/" + author + "-" + name);
	        } catch(e) {}
	      }
	
	      try {
	        var pkg = JSON.parse(fs.readFileSync(resolve(dir, file + "/component.json")));
	      } catch(e) {}
	
	      if (pkg && pkg.main) {
	        file += "/" + pkg.main;
	      } else {
	        try {
	          if (fs.statSync(resolve(dir, file)).isDirectory())
	            file += "/index.js";
	        } catch(e) {}
	      }
	
	      if (!/\.js$/.test(file)) file += ".js";
	
	      try {
	        if (!fs.statSync(resolve(dir, file)).isFile()) return infer.ANull;
	      } catch(e) { return infer.ANull; }
	
	      server.addFile(file, null, data.currentName);
	      return data.modules[file] = data.modules[name] = new infer.AVal;
	    };
	  })();
	
	  tern.registerPlugin("component", function(server, options) {
	    server._component = {
	      modules: Object.create(null),
	      options: options || {},
	      currentFile: null,
	      currentName: null,
	      server: server
	    };
	
	    server.on("beforeLoad", function(file) {
	      this._component.currentFile = file.name.replace(/\\/g, "/");
	      this._component.currentName = file.name;
	      file.scope = buildWrappingScope(file.scope, file.name, file.ast);
	    });
	
	    server.on("afterLoad", function(file) {
	      this._component.currentFile = this._component.currentName = null;
	      exportsFromScope(file.scope).propagate(getModule(this._component, file.name));
	    });
	
	    server.on("reset", function() {
	      this._component.modules = Object.create(null);
	    });
	
	    return {defs: defs};
	  });
	
	  infer.registerFunction("componentRequire", function(_self, _args, argNodes) {
	    if (!argNodes || !argNodes.length || argNodes[0].type != "Literal" || typeof argNodes[0].value != "string")
	      return infer.ANull;
	
	    var cx = infer.cx();
	    var server = cx.parent;
	    var data = server._component;
	    var name = argNodes[0].value;
	
	    var locals = cx.definitions.component;
	    if (locals[name] && /^[a-z_]*$/.test(name)) return locals[name];
	
	    var relative = /^\.{0,2}\//.test(name);
	    if (relative) {
	      if (!data.currentFile) return argNodes[0].required || infer.ANull;
	      name = resolvePath(data.currentFile, name);
	    }
	
	    if (name in data.modules) return data.modules[name];
	
	    var result;
	    if (data.options.modules && data.options.modules.hasOwnProperty(name)) {
	      var scope = buildWrappingScope(cx.topScope, name);
	      infer.def.load(data.options.modules[name], scope);
	      result = data.modules[name] = exportsFromScope(scope);
	    } else {
	      result = resolveModule(server, name, relative);
	    }
	
	    return argNodes[0].required = result;
	  });
	
	  var defs = {
	    "!name": "component",
	    "!define": {
	      require: {
	        "!type": "fn(id: string) -> !custom:componentRequire",
	        "!doc": "Require the given path/module",
	        modules: {
	          "!doc": "Registered modules"
	        },
	        aliases: {
	          "!doc": "Registered aliases"
	        },
	        resolve: {
	          "!type": "fn(path: string) -> string",
	          "!doc": "Resolve path"
	        },
	        normalize: {
	          "!type": "fn(curr: string, path: string) -> string",
	          "!doc": "Normalize `path` relative to the current path"
	        },
	        register: {
	          "!type": "fn(path: string, definition: fn())",
	          "!doc": "Register module at `path` with callback `definition`"
	        },
	        alias: {
	          "!type": "fn(from: string, to: string)",
	          "!doc": "Alias a module definition"
	        },
	        relative: {
	          "!type": "fn(parent: string) -> fn()",
	          "!doc": "Return a require function relative to the `parent` path"
	        }
	      },
	      Module: {
	        "!type": "fn()",
	        prototype: {
	          exports: {
	            "!type": "?",
	            "!doc": "The exports object is created by the Module system. Sometimes this is not acceptable, many want their module to be an instance of some class. To do this assign the desired export object to module.exports. For example suppose we were making a module called a.js"
	          },
	          require: {
	            "!type": "require",
	            "!doc": "The module.require method provides a way to load a module as if require() was called from the original module."
	          },
	          id: {
	            "!type": "string",
	            "!doc": "The identifier for the module. Typically this is the fully resolved filename."
	          },
	          filename: {
	            "!type": "string",
	            "!doc": "The fully resolved filename to the module."
	          },
	          loaded: {
	            "!type": "bool",
	            "!doc": "Whether or not the module is done loading, or is in the process of loading."
	          },
	          parent: {
	            "!type": "+Module",
	            "!doc": "The module that required this one."
	          },
	          children: {
	            "!type": "[+Module]",
	            "!doc": "The module objects required by this one."
	          }
	        }
	      }
	    }
	  };
	});
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14)))

/***/ },
/* 29 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*eslint-env node, amd*/
	/*globals tern */
	(function(mod) {
	  if (true) // CommonJS
	    return mod(__webpack_require__(3), __webpack_require__(9));
	  if (true) // AMD
	    return !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(3), __webpack_require__(9), __webpack_require__(10)], __WEBPACK_AMD_DEFINE_FACTORY__ = (mod), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  mod(tern, tern);
	})(function(infer, tern, resolver) {
	  "use strict";
	
	  //ORION
	  function addInterfaceDep(inter, deps) {
	  	if(inter) {
	    	deps.push(inter);
	    } else {
	    	deps.push(infer.ANull);
	    }
	  }
	    
	  function getRequire(data) {
	    if (!data.require) {
	      data.require = new infer.Fn("require", infer.ANull, [infer.cx().str], ["module"], new infer.AVal);
	      data.require.computeRet = function(_self, _args, argNodes) {
	        if (argNodes.length && argNodes[0].type == "Literal" && typeof argNodes[0].value == "string") {
	          var _i = getInterface(argNodes[0].value, data); //ORION
	          if(_i) {
	          	return _i;
	          }
	        }
	        return infer.ANull;
	      };
	    }
	    return data.require;
	  }
	
	  var EXPORT_OBJ_WEIGHT = 50;
	
	  function getModuleInterface(data, exports) {
	    var mod = new infer.Obj(infer.cx().definitions.requirejs.module, "module");
	    var expProp = mod.defProp("exports");
	    var _m = getModule(stripJSExt(data.currentFile), data); //ORION
	    if(_m) {
	 	   expProp.propagate(_m);
		}
	    exports.propagate(expProp, EXPORT_OBJ_WEIGHT);
	    return mod;
	  }
	
	  function getExports(data) {
	  //ORION
	    var _exports = new infer.Obj(true, "exports");
	    var mod = getModule(stripJSExt(data.currentFile), data);
	    if(mod) {
	    	mod.addType(_exports, EXPORT_OBJ_WEIGHT);
	    }
	    return _exports;
	  }
	
	  function getInterface(name, data) {
	    if (data.options.override && Object.prototype.hasOwnProperty.call(data.options.override, name)) {
	      var over = data.options.override[name];
	      if (typeof over === "string" && over.charAt(0) === "=") return infer.def.parsePath(over.slice(1));
	      if (typeof over === "object") {
	        var known = getKnownModule(name, data);
	        if (known) return known;
	        var scope = data.interfaces[stripJSExt(name)] = new infer.Obj(null, stripJSExt(name));
	        infer.def.load(over, scope);
	        return scope;
	      }
	      name = over;
	    }
	    known = getModule(name, data);
	    if (known) {
	      data.server.addFile(known.origin, known.contents, data.currentFile);
	    }
	    return known;
	  }
	
	  function getKnownModule(name, data) {
	    var val = resolver.getResolved(name); //ORION
	  	if(val && val.file) {
	    	return data.interfaces[stripJSExt(val.file)];
	    }
	    return null;
	  }
	
	  function getModule(name, data) {
	    var known = getKnownModule(name, data);
	    if (!known) {
	      var val = resolver.getResolved(name); //ORION
	      if(val && val.file) {
		      known = data.interfaces[stripJSExt(val.file)] = new infer.AVal();
		      known.origin = val.file;
		      known.contents = val.contents;
	      }
	    }
	    return known;
	  }
	
	  function stripJSExt(f) {
	    return f.replace(/\.js$/, '');
	  }
	
	  infer.registerFunction("requireJS", function(_self, args, argNodes) {
	    var server = infer.cx().parent, data = server && server._requireJS;
	    if (!data || !args.length) return infer.ANull;
	
	    var name = data.currentFile;
	    var out = data.interfaces[stripJSExt(name)] = new infer.AVal;
	    out.origin = name;
	
	    var deps = [], fn, _exports, mod;
	
	    function interf(name) {
	      if (name == "require") return getRequire(data);
	      if (name == "exports") return _exports || (_exports = getExports(data));
	      if (name == "module") return mod || (mod = getModuleInterface(data, _exports || (_exports = getExports(data))));
	      return getInterface(name, data);
	    }
	
	    if (argNodes && args.length > 1) {
	      var node = argNodes[args.length == 2 ? 0 : 1]; //ORION
	      if (node.type == "Literal" && typeof node.value == "string") {
	        addInterfaceDep(interf(node.value), deps); //ORION
	      } else if (node.type == "ArrayExpression") for (var i = 0; i < node.elements.length; ++i) {
	        var elt = node.elements[i];
	        if (elt.type == "Literal" && typeof elt.value == "string") {
	          addInterfaceDep(interf(elt.value), deps); //ORION
	        }
	      }
	    } else if (argNodes && args.length == 1 && argNodes[0].type == "FunctionExpression" && argNodes[0].params.length) {
	      // Simplified CommonJS call
	      addInterfaceDep(interf("require", data), deps); //ORION
	      addInterfaceDep(interf("exports", data), deps); //ORION
	      addInterfaceDep(interf("module", data), deps); //ORION
	      fn = args[0];
	    }
	
	    if (!fn) {
	      fn = args[Math.min(args.length - 1, 2)];
	      if (!fn.isEmpty() && !fn.getFunctionType()) fn = null;
	    }
	
	    if (fn) {
	      fn.propagate(new infer.IsCallee(infer.ANull, deps, null, out)); 
	      out.originNode = fn.originNode;
	    } else if (args.length) args[0].propagate(out);
	
	    return infer.ANull;
	  });
	
	  // Parse simple ObjectExpression AST nodes to their corresponding JavaScript objects.
	  function parseExprNode(node) {
	    switch (node.type) {
	    case "ArrayExpression":
	      return node.elements.map(parseExprNode);
	    case "Literal":
	      return node.value;
	    case "ObjectExpression":
	      var obj = {};
	      node.properties.forEach(function(prop) {
	        var key = prop.key.name || prop.key.value;
	        obj[key] = parseExprNode(prop.value);
	      });
	      return obj;
	    }
	  }
	
	  infer.registerFunction("requireJSConfig", function(_self, _args, argNodes) {
	    var server = infer.cx().parent, data = server && server._requireJS;
	    if (data && argNodes && argNodes.length && argNodes[0].type == "ObjectExpression") {
	      var config = parseExprNode(argNodes[0]);
	      for (var key in config) if (config.hasOwnProperty(key)) {
	        var value = config[key], exists = data.options[key];
	        if (!exists) {
	          data.options[key] = value;
	        } else if (key == "paths") {
	          for (var path in value) if (value.hasOwnProperty(path) && !data.options.paths[path])
	            data.options.paths[path] = value[path];
	        }
	      }
	    }
	    return infer.ANull;
	  });
	
	  function preCondenseReach(state) {
	    var interfaces = infer.cx().parent._requireJS.interfaces;
	    var rjs = state.roots["!requirejs"] = new infer.Obj(null);
	    for (var name in interfaces) {
	      var prop = rjs.defProp(name.replace(/\./g, "`"));
	      interfaces[name].propagate(prop);
	      prop.origin = interfaces[name].origin;
	    }
	  }
	
	  function postLoadDef(data) {
	    var cx = infer.cx(), interfaces = cx.definitions[data["!name"]]["!requirejs"];
	    var data = cx.parent._requireJS;
	    if (interfaces) for (var name in interfaces.props) {
	      interfaces.props[name].propagate(getInterface(name, data));
	    }
	  }
	
	  tern.registerPlugin("requirejs", function(server, options) {
	    server._requireJS = {
	      interfaces: Object.create(null),
	      options: options || {},
	      currentFile: null,
	      server: server
	    };
	
	    server.on("beforeLoad", function(file) {
	      this._requireJS.currentFile = file.name;
	    });
	    server.on("reset", function() {
	      this._requireJS.interfaces = Object.create(null);
	      this._requireJS.require = null;
	    });
	    return {
	      defs: defs,
	      passes: {
	        preCondenseReach: preCondenseReach,
	        postLoadDef: postLoadDef,
	        typeAt: findTypeAt,
	        /**
			 * @callback
			 * Orion
			 */
			postParse: function postParse(ast, text) {
				resolver.doPostParse(server, ast, infer.cx().definitions);
			},
			/**
			 * @callback
			 * Orion
			 */
			preInfer: function preInfer(ast, scope) {
				resolver.doPreInfer(server);
			}
	      }
	    };
	  });
	
	  function findTypeAt(_file, _pos, expr, type) {
	    if (!expr || expr.node.type != "Literal" ||
	        typeof expr.node.value != "string" || !expr.node.required)
	      return type;
	
	    // The `type` is a value shared for all string literals.
	    // We must create a copy before modifying `origin` and `originNode`.
	    // Otherwise all string literals would point to the last jump location
	    type = Object.create(type);
	
	    // Provide a custom origin location pointing to the require()d file
	    var exportedType = expr.node.required;
	    type.origin = exportedType.origin;
	    type.originNode = exportedType.originNode;
	    return type;
	  }
	/* eslint-disable missing-nls */
	  var defs = {
	    "!name": "requirejs",
	    "!define": {
	      module: {
	        id: "string",
	        uri: "string",
	        config: "fn() -> ?"
	      },
	      config: {
	        "!url": "http://requirejs.org/docs/api.html#config",
	        baseUrl: {
	          "!type": "string",
	          "!doc": "the root path to use for all module lookups",
	          "!url": "http://requirejs.org/docs/api.html#config-baseUrl"
	        },
	        paths: {
	          "!type": "?",
	          "!doc": "path mappings for module names not found directly under baseUrl. The path settings are assumed to be relative to baseUrl, unless the paths setting starts with a '/' or has a URL protocol in it ('like http:').",
	          "!url": "http://requirejs.org/docs/api.html#config-paths"
	        },
	        shim: {
	          "!type": "?",
	          "!doc": "Configure the dependencies, exports, and custom initialization for older, traditional 'browser globals' scripts that do not use define() to declare the dependencies and set a module value.",
	          "!url": "http://requirejs.org/docs/api.html#config-shim"
	        },
	        map: {
	          "!type": "?",
	          "!doc": "For the given module prefix, instead of loading the module with the given ID, substitute a different module ID.",
	          "!url": "http://requirejs.org/docs/api.html#config-map"
	        },
	        config: {
	          "!type": "?",
	          "!doc": "There is a common need to pass configuration info to a module. That configuration info is usually known as part of the application, and there needs to be a way to pass that down to a module. In RequireJS, that is done with the config option for requirejs.config(). Modules can then read that info by asking for the special dependency 'module' and calling module.config().",
	          "!url": "http://requirejs.org/docs/api.html#config-moduleconfig"
	        },
	        packages: {
	          "!type": "?",
	          "!doc": "configures loading modules from CommonJS packages. See the packages topic for more information.",
	          "!url": "http://requirejs.org/docs/api.html#config-packages"
	        },
	        nodeIdCompat: {
	          "!type": "?",
	          "!doc": "Node treats module ID example.js and example the same. By default these are two different IDs in RequireJS. If you end up using modules installed from npm, then you may need to set this config value to true to avoid resolution issues.",
	          "!url": "http://requirejs.org/docs/api.html#config-nodeIdCompat"
	        },
	        waitSeconds: {
	          "!type": "number",
	          "!doc": "The number of seconds to wait before giving up on loading a script. Setting it to 0 disables the timeout. The default is 7 seconds.",
	          "!url": "http://requirejs.org/docs/api.html#config-waitSeconds"
	        },
	        context: {
	          "!type": "number",
	          "!doc": "A name to give to a loading context. This allows require.js to load multiple versions of modules in a page, as long as each top-level require call specifies a unique context string. To use it correctly, see the Multiversion Support section.",
	          "!url": "http://requirejs.org/docs/api.html#config-context"
	        },
	        deps: {
	          "!type": "?",
	          "!doc": "An array of dependencies to load. Useful when require is defined as a config object before require.js is loaded, and you want to specify dependencies to load as soon as require() is defined. Using deps is just like doing a require([]) call, but done as soon as the loader has processed the configuration. It does not block any other require() calls from starting their requests for modules, it is just a way to specify some modules to load asynchronously as part of a config block.",
	          "!url": "http://requirejs.org/docs/api.html#config-deps"
	        },
	        callback: {
	          "!type": "fn()",
	          "!doc": "A function to execute after deps have been loaded. Useful when require is defined as a config object before require.js is loaded, and you want to specify a function to require after the configuration's deps array has been loaded.",
	          "!url": "http://requirejs.org/docs/api.html#config-callback"
	        },
	        enforceDefine: {
	          "!type": "bool",
	          "!doc": "If set to true, an error will be thrown if a script loads that does not call define() or have a shim exports string value that can be checked. See Catching load failures in IE for more information.",
	          "!url": "http://requirejs.org/docs/api.html#config-enforceDefine"
	        },
	        xhtml: {
	          "!type": "bool",
	          "!doc": "If set to true, document.createElementNS() will be used to create script elements.",
	          "!url": "http://requirejs.org/docs/api.html#config-xhtml"
	        },
	        urlArgs: {
	          "!type": "string",
	          "!doc": "Extra query string arguments appended to URLs that RequireJS uses to fetch resources. Most useful to cache bust when the browser or server is not configured correctly.",
	          "!url": "http://requirejs.org/docs/api.html#config-urlArgs"
	        },
	        scriptType: {
	          "!type": "string",
	          "!doc": "Specify the value for the type='' attribute used for script tags inserted into the document by RequireJS. Default is 'text/javascript'. To use Firefox's JavaScript 1.8 features, use 'text/javascript;version=1.8'.",
	          "!url": "http://requirejs.org/docs/api.html#config-scriptType"
	        },
	        skipDataMain: {
	          "!type": "bool",
	          "!doc": "Introduced in RequireJS 2.1.9: If set to true, skips the data-main attribute scanning done to start module loading. Useful if RequireJS is embedded in a utility library that may interact with other RequireJS library on the page, and the embedded version should not do data-main loading.",
	          "!url": "http://requirejs.org/docs/api.html#config-skipDataMain"
	        }
	      },
	      RequireJSError: {
	        "prototype" : {
	          "!proto": "Error.prototype",
	          "requireType": {
	            "!type": "string",
	            "!doc": "A string value with a general classification, like 'timeout', 'nodefine', 'scripterror'.",
	            "!url": "http://requirejs.org/docs/api.html#errors"
	          },
	          "requireModules": {
	            "!type": "[string]",
	            "!doc": "An array of module names/URLs that timed out.",
	            "!url": "http://requirejs.org/docs/api.html#errors"
	          }
	        }
	      }
	    },
	    requirejs: {
	      "!type": "fn(deps: [string], callback: fn(), errback?: fn(err: +RequireJSError)) -> !custom:requireJS",
	      onError: {
	        "!type": "fn(err: +RequireJSError)",
	        "!doc": "To detect errors that are not caught by local errbacks, you can override requirejs.onError()",
	        "!url": "http://requirejs.org/docs/api.html#requirejsonerror"
	      },
	      load: {
	        "!type": "fn(context: ?, moduleName: string, url: string)"
	      },
	      config: "fn(config: config) -> !custom:requireJSConfig",
	      version: "string",
	      isBrowser: "bool"
	    },
	    require: "requirejs",
	    define: {
	      "!type": "fn(deps: [string], callback: fn()) -> !custom:requireJS",
	      amd: {
	        jQuery: "bool"
	      }
	    }
	  };
	});


/***/ },
/* 30 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*******************************************************************************
	 * @license
	 * Copyright (c) 2015 IBM Corporation and others.
	 * All rights reserved. This program and the accompanying materials are made 
	 * available under the terms of the Eclipse Public License v1.0 
	 * (http://www.eclipse.org/legal/epl-v10.html), and the Eclipse Distribution 
	 * License v1.0 (http://www.eclipse.org/org/documents/edl-v10.html). 
	 *
	 * Contributors:
	 *	 IBM Corporation - Allow original requirejs plugin to find files in Orion workspace
	 *******************************************************************************/
	/* eslint-disable missing-nls */
	/*eslint-env node, amd*/
	/*globals tern tern */
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
		__webpack_require__(9),
		__webpack_require__(31),
		__webpack_require__(35),
		__webpack_require__(64),
		__webpack_require__(71),
		__webpack_require__(72),
	], __WEBPACK_AMD_DEFINE_RESULT__ = function(tern, Finder, Eslint, SourceCode, Metrics, ASTManager) {
	
		tern.registerPlugin("eslint", /* @callback */ function(server, options) {
			return {
				//don't need any passes yet
			};
		});
	
		/**
		 * @description Extracts any errors captured by the tolerant Esprima parser and returns them
		 * @function
		 * @private
		 * @param {esprima.AST} ast The AST
		 * @returns {esprima.Error[]} The array of AST errors (if any)
		 */
		function extractParseErrors(ast) {
			var errors = [], errorMap = Object.create(null);
			var asterrors = ast.errors;
			if(asterrors) {
				var len = asterrors.length;
				for(var i = 0; i < len; i++) {
					var error = asterrors[i];
					var token = null;
					if(error.end && error.token) {
						token = {range: [error.index, error.end], value: error.token};
					}
					else if(ast.tokens.length > 0) {
						//error object did not contain the token infos, try to find it
						token = Finder.findToken(error.index, ast.tokens);
					}
					var msg = error.message;
					if(errorMap[error.index] === msg) {
						continue;
					}
					errorMap[error.index] = msg;
					if(error.type) {
						switch(error.type) {
							case ASTManager.ErrorTypes.Unexpected:
								if(token) {
									error.args = {0: token.value, nls: "syntaxErrorBadToken"}; //$NON-NLS-0$
									error.message = msg = error.args.nls;
								}
								break;
							case ASTManager.ErrorTypes.EndOfInput:
								error.args = {nls: "syntaxErrorIncomplete"}; //$NON-NLS-0$
								error.message = error.args.nls;
								break;
						}
					} else if(!error.token) {
						//an untyped error with no tokens, report the failure
						error.args = {0: error.message, nls: 'esprimaParseFailure'}; //$NON-NLS-1$
						error.message = error.args.nls;
						//use the line number / column
						delete error.start;
						delete error.end;
					}
					if(token) {
						error.node = token;
						if(token.value) {
							if(!error.args) {
								error.args = Object.create(null);
							}
							if(!error.args.data) {
								error.args.data = Object.create(null);
							}
							error.args.data.tokenValue = token.value;
						}
					}
					errors.push(error);
				}
			}
			return errors;
		}
		
		/**
		 * @description Post-processes the ESLint generated problems to determine if there are any linting issues reported for the same 
		 * nodes as parse errors. If there are we discard those problems.
		 * @function
		 * @private
		 * @param {Array} parseErrors The array of parse errors, never <code>null</code>
		 * @param {Array} eslintErrors The array of eslint computed errors, never <code>null</code>
		 * @returns {Array} The filtered list of errors to report to the editor
		 * @since 6.0
		 */
		function filterProblems(parseErrors, eslintErrors) {
			var len = parseErrors.length;
			if(len < 1) {
				return eslintErrors;
			}
			var filtered = [].concat(parseErrors);
			var len2 = eslintErrors.length;
			filter: for(var i = 0; i < len2; i++) {
				var ee = eslintErrors[i];
				for(var j = 0; j < len; j++) {
					var pe = parseErrors[j];
					var node = ee.node;
					if(node && node.range && node.range[0] >= pe.index && node.range[0] <= pe.end) {
						continue filter;
					}
				}
				filtered.push(ee);
			}
			return filtered;
		}
	
		tern.defineQueryType("lint", {
			takesFile: true,
			/**
			 * @callback
			 */
			run: function(server, query, file) {
				var start = Date.now();
				var config = query.config;
				var _tern = Object.create(null);
				// delegate tern functions
				_tern.findRefs = function(srv, query, file) {
					return tern.findRefs(srv, query, file);
				};
				_tern.findRefsToVariable = function(srv, query, file, expr, checkShadowing) {
					return tern.findRefsToVariable(srv, query, file, expr, checkShadowing);
				};
				_tern.findRefsToProperty = function(srv, query, expr, prop) {
					return tern.findRefsToProperty(srv, query, expr, prop);
				};
				_tern.ternError = function(msg) {
					return tern.ternError(msg);
				};
				_tern.findExpr = function(file, query, wide) {
					return tern.findExpr(file, query, wide);
				};
				_tern.findExprType = function(srv, query, file, expr) {
					return tern.findExprType(srv, query, file, expr);
				};
				_tern.server = server;
				_tern.query = query;
				_tern.file = file;
				config.tern = _tern;
				
				var messages = Eslint.verify(new SourceCode(file.text, file.ast), config, file.name);
				var end = Date.now() - start;
				Metrics.logTiming('language tools', 'validation', end, 'application/javascript'); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
				var strippedMessages = [];
				messages.forEach(function(element) {
					var strippedMessage =
						{
							args: element.args,
							severity: element.severity,
							column: element.column,
							line: element.line,
							message: element.message,
							nodeType: element.nodeType,
							ruleId: element.ruleId,
							source: element.source
						};
						if (element.node && element.node.range) {
							strippedMessage.node = {
								range: element.node.range
							};
						}
						if (element.related) {
							strippedMessage.related = {
								range: element.related.range
							};
						}
					strippedMessages.push(strippedMessage);
				});
				var parseErrors = extractParseErrors(file.ast);
				return filterProblems(parseErrors, strippedMessages);
			}
		});
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*******************************************************************************
	 * @license
	 * Copyright (c) 2013, 2015 IBM Corporation and others.
	 * All rights reserved. This program and the accompanying materials are made 
	 * available under the terms of the Eclipse Public License v1.0 
	 * (http://www.eclipse.org/legal/epl-v10.html), and the Eclipse Distribution 
	 * License v1.0 (http://www.eclipse.org/org/documents/edl-v10.html). 
	 *
	 * Contributors:
	 *     IBM Corporation - initial API and implementation
	 *******************************************************************************/
	/*eslint-env amd*/
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	__webpack_require__(32),
	__webpack_require__(33)
	], __WEBPACK_AMD_DEFINE_RESULT__ = function(Estraverse, ESlintEnv) {
		
		if(!Estraverse.VisitorKeys.RecoveredNode) {
			///do not visit the recovered node. If called from the worker this will not be set
	    	Estraverse.VisitorKeys.RecoveredNode = [];
		}
		
		var Finder = {
			
			visitor: null,
			
			punc: '\n\t\r (){}[]:;,.+=-*^&@!%~`\'\"\/\\',  //$NON-NLS-0$
			
			/**
			 * @name findWord
			 * @description Finds the word from the start position
			 * @function
			 * @public
			 * @memberof javascript.Finder
			 * @param {String} text The text of the source to find the word in
			 * @param {Number} start The current start position of the carat
			 * @returns {String} Returns the computed word from the given string and offset or <code>null</code>
			 */
			findWord: function(text, start) {
				if(text && start > -1) {
					var ispunc = this.punc.indexOf(text.charAt(start)) > -1;
					var pos = ispunc && start > 0 ? start-1 : start;
					while(pos >= 0) {
						if(this.punc.indexOf(text.charAt(pos)) > -1) {
							break;
						}
						pos--;
					}
					var s = pos;
					pos = start;
					while(pos <= text.length) {
						if(this.punc.indexOf(text.charAt(pos)) > -1) {
							break;
						}
						pos++;
					}
					if((s === start || (ispunc && (s === start-1))) && pos === start) {
						return null;
					}
					else if(s === start) {
						return text.substring(s, pos);
					}
					else {
						return text.substring(s+1, pos);
					}
				}
				return null;
			},
			
			/**
			 * @name findNode
			 * @description Finds the AST node for the given offset
			 * @function
			 * @public
			 * @memberof javascript.Finder
			 * @param {Number} offset The offset into the source file
			 * @param {Object} ast The AST to search
			 * @param {Object} options The optional options
			 * @returns The AST node at the given offset or <code>null</code> if it could not be computed.
			 */
			findNode: function(offset, ast, options) {
				var found = null;
				var parents = options && options.parents ? [] : null;
				var next = options && options.next ? options.next : false;
				if(typeof offset === 'number' && offset > -1 && ast) {
					Estraverse.traverse(ast, {
						/**
						 * start visiting an AST node
						 */
						enter: function(node) {
							if(node.type && node.range) {
								if(!next && node.type === Estraverse.Syntax.Program && offset < node.range[0]) {
									//https://bugs.eclipse.org/bugs/show_bug.cgi?id=447454
									return Estraverse.VisitorOption.Break;
								}
								//only check nodes that are typed, we don't care about any others
								if(node.range[0] <= offset) {
									found = node;
									if(parents) {
										parents.push(node);
									}
								} else {
									if(next) {
										found = node;
										if(parents) {
											parents.push(node);
										}
									}
									if(found.type !== Estraverse.Syntax.Program) {
										//we don't want to find the next node as the program root
										//if program has no children it will be returned on the next pass
										//https://bugs.eclipse.org/bugs/show_bug.cgi?id=442411
										return Estraverse.VisitorOption.Break;
									}
								}
							}
						},
						/** override */
						leave: function(node) {
							if(parents && offset > node.range[1]) {
								parents.pop();
							}
						}
					});
				}
				if(found && parents && parents.length > 0) {
					var p = parents[parents.length-1];
					if(p.type !== 'Program' && p.range[0] === found.range[0] && p.range[1] === found.range[1]) {
						//a node can't be its own parent
						parents.pop();
					}
					found.parents = parents;
				}
				return found;
			},
			
			/**
			 * @description Finds the first non-comment AST node immediately following the given comment node
			 * @param {Object} comment The comment node
			 * @param {Object} ast The AST 
			 * @since 10.0
			 */
			findNodeAfterComment: function(comment, ast) {
				var found = null;
				var parents = [];
				if(Array.isArray(comment.range) && ast) {
					var offset = comment.range[1];
					Estraverse.traverse(ast, {
						/**
						 * start visiting an AST node
						 */
						enter: function(node, last) {
							if(node.type && node.range) {
								if(last) {
									parents.push(last);
								}
								if(offset > node.range[0]) {
									found = node;
								} else {
									found = node;
									if(node.type !== Estraverse.Syntax.Program) {
										return Estraverse.VisitorOption.Break;
									}
	
								}
							}
						}
					});
				}
				if(found) {
					found.parents = parents;
				}
				return found;
			},
			
			/**
			 * @description Finds all of the AST nodes that start within the given range
			 * @function
			 * @param {Object} ast The AST to inspect
			 * @param {Number} start The starting offset
			 * @param {Number} end The ending offset
			 * @returns {Array.<Object>} Returns the array of AST nodes that start within the given range
			 * @since 11.0
			 */
			findNodesForRange: function findeNodesForRange(ast, start, end) {
				var nodes = [];
				if(ast) {
					Estraverse.traverse(ast, {
						enter: function(node) {
							if(node.range[0] >= start && node.range[0] < end) {
								nodes.push(node);
							}
							if(node.range[0] >= end) {
								return Estraverse.VisitorOption.BREAK;
							}
						}
					});
				}
				return nodes;
			},
			
			/**
			 * @name findToken
			 * @description Finds the token in the given token stream for the given start offset
			 * @function
			 * @public
			 * @memberof javascript.Finder
			 * @param {Number} offset The offset intot the source
			 * @param {Array|Object} tokens The array of tokens to search
			 * @returns {Object} The AST token that starts at the given start offset
			 */
			findToken: function(offset, tokens) {
				if(typeof offset === 'number' && offset > -1 && tokens && tokens.length > 0) {
					var min = 0,
						max = tokens.length-1,
						token, 
						idx = 0;
						token = tokens[0];
					if(offset >= token.range[0] && offset < token.range[1]) {
						token.index = 0;
						return token;
					}
					token = tokens[max];
					if(offset >= token.range[0]) {
						token.index = max;
						return token;
					}
					token = null;
					while(min <= max) {
						idx = Math.floor((min + max) / 2);
						token = tokens[idx];
						if(offset < token.range[0]) {
							max = idx-1;
						}
						else if(offset > token.range[1]) {
							min = idx+1;
						}
						else if(offset === token.range[1]) {
							var next = tokens[idx+1];
							if(next.range[0] === token.range[1]) {
								min = idx+1;
							}
							else {
								token.index = idx;
								return token;
							}
						}
						else if(offset >= token.range[0] && offset < token.range[1]) {
							token.index = idx;
							return token;
						}
						if(min === max) {
							token = tokens[min];
							if(offset >= token.range[0] && offset <= token.range[1]) {
								token.index = min;
								return token;
							}
							return null;
						}
					}
				}
				return null;
			},
			
			/**
			 * @description Finds the doc comment at the given offset. Returns null if there
			 * is no comment at the given offset
			 * @function
			 * @public
			 * @param {Number} offset The offset into the source
			 * @param {Object} ast The AST to search
			 * @returns {Object} Returns the comment node for the given offset or null
			 */
			findComment: function(offset, ast) {
				if(ast.comments) {
					var comments = ast.comments;
					var len = comments.length;
					for(var i = 0; i < len; i++) {
						var comment = comments[i];
						if(comment.range[0] < offset && comment.range[1] >= offset) {
							return comment;
						} else if(offset === ast.range[1] && offset === comment.range[1]) {
						   return comment;
						} else if(offset > ast.range[1] && offset <= comment.range[1]) {
							return comment;
						} else if(comment.range[0] > offset) {
							//we've passed the node
							return null;
						}
					}
					return null;
				}
			},
			
			/**
			 * @description Finds the script blocks from an HTML file and returns the code and offset for found blocks. The returned array may not be sorted.
			 * @function
			 * @public
			 * @param {String} buffer The file contents
			 * @param {Number} offset The offset into the buffer to find the enclosing block for
			 * @returns {Object} An object of script block items {text, offset}
			 * @since 6.0
			 */
			findScriptBlocks: function(buffer, offset) {
				var blocks = [];
				var val = null;
				
				// Find script tags
				var regex = /<\s*script([^>]*)(?:\/>|>((?:.|\r?\n)*?)<\s*\/script[^<>]*>)/ig;
				var langRegex = /(type|language)\s*=\s*"([^"]*)"/i;
				var srcRegex = /src\s*=\s*"([^"]*)"/i;			
				var comments = this.findHtmlCommentBlocks(buffer, offset);
				loop: while((val = regex.exec(buffer)) !== null) {
					var attributes = val[1];
					var text = val[2];
					var deps = null;
					if (attributes){
						var lang = langRegex.exec(attributes);
						// No type/language attribute or empty values default to javascript
						if (lang && lang[2]){
							var type = lang[2];
							if (lang[1] === "language"){
								// Language attribute does not include 'text' prefix
								type = "text/" + type; //$NON-NLS-1$
							}
							if (!/^(application|text)\/(ecmascript|javascript(\d.\d)?|livescript|jscript|x\-ecmascript|x\-javascript)$/ig.test(type)) {
								continue;
							}
						}
						var src = srcRegex.exec(attributes);
						if (src){
							deps = src[1];
						}
					}
					if (!text && deps){
						blocks.push({text: "", offset: 0, dependencies: deps});
						continue;
					}
					if (text === undefined){
						// Inline script blocks with no dependents are not valid i.e. <script/>
						continue;
					}
					var index = val.index+val[0].indexOf('>')+1;
					if(typeof offset !== 'number' || (index <= offset && index+text.length >= offset)) {
						for(var i = 0; i < comments.length; i++) {
							if(comments[i].start <= index && comments[i].end >= index) {
								continue loop;
							}
						}
						blocks.push({
							text: text,
							offset: index,
							dependencies: deps
							
						});
					}
				}
				
				// Find onevent attribute values
				var eventAttributes = {'blur':true, 'change':true, 'click':true, 'dblclick':true, 'focus':true, 'keydown':true, 'keypress':true, 'keyup':true, 'load':true, 'mousedown':true, 'mousemove':true, 'mouseout':true, 'mouseover':true, 'mouseup':true, 'reset':true, 'select':true, 'submit':true, 'unload':true};
				var eventRegex = /(\s+)on(\w*)(\s*=\s*")([^"]*)"/ig;
				var count = 0;
				loop: while((val = eventRegex.exec(buffer)) !== null) {
					count++;
					var leadingWhitespace = val[1];
					var attribute = val[2];
					var assignment = val[3];
					text = val[4];
					if (attribute && attribute.toLowerCase() in eventAttributes){
						if(!text){
							text = "";
						}
						index = val.index + leadingWhitespace.length + 2 + attribute.length + assignment.length;
						if(typeof offset !== 'number' || (index <= offset && index+text.length >= offset)) {
							for(var j = 0; j < comments.length; j++) {
								if(comments[j].start <= index && comments[j].end >= index) {
									continue loop;
								}
							}
							blocks.push({
								text: text,
								offset: index,
								isWrappedFunctionCall: true
							});
						}
					}
				}
				return blocks;
			},
			
			/**
			 * @description Finds all of the block comments in an HTML file
			 * @function
			 * @public
			 * @param {String} buffer The file contents
			 * @param {Number} offset The optional offset to compute the block(s) for
			 * @return {Array} The array of block objects {text, start, end}
			 * @since 6.0
			 */
			findHtmlCommentBlocks: function(buffer, offset) {
				var blocks = [];
				var val = null, regex = /<!--((?:.|\r?\n)*?)-->/ig;
				while((val = regex.exec(buffer)) != null) {
					var text = val[1];
					if(text.length < 1) {
						continue;
					}
					if(typeof offset !== 'number' || (val.index <= offset && val.index+text.length >= val.index)) {
						blocks.push({
							text: text,
							start: val.index,
							end: val.index+text.length
						});
					}
				}
				return blocks;
			},
			
			/**
			 * @description Asks the ESLint environment description if it knows about the given member name and if so
			 * returns the index name it was found in
			 * @function
			 * @param {String} name The name of the member to look up
			 * @returns {String} The name of the ESLint environment it was found in or <code>null</code>
			 * @since 8.0
			 */
			findESLintEnvForMember: function findESLintEnvForMember(name) {
				var keys = Object.keys(ESlintEnv);
				if(keys) {
					var len = keys.length;
					for(var i = 0; i < len; i++) {
						var env = ESlintEnv[keys[i]];
						if(typeof env[name] !== 'undefined') {
							return keys[i];
						}
						var globals = env['globals'];
						if(globals && typeof globals[name] !== 'undefined') {
							return keys[i];
						}
					}
				}
				return null;
			},
			
			/**
			 * @description Find the directive comment with the given name in the given AST
			 * @function
			 * @param {Object} ast The AST to search
			 * @param {String} name The name of the fdirective to look for. e.g. eslint-env
			 * @returns {Object} The AST comment node or <code>null</code>
			 * @since 8.0
			 */
			findDirective: function findDirective(ast, name) {
				if(ast && typeof name !== 'undefined') {
					var len = ast.comments.length;
					for(var i = 0; i < len; i++) {
						var match = /^\s*(eslint-\w+|eslint|globals?)(\s|$)/.exec(ast.comments[i].value);
						if(match !== null && typeof match !== 'undefined' && match[1] === name) {
							return ast.comments[i];
						}
					}
				}
				return null;
			},
			
			/**
			 * @description Tries to find the comment for the given node. If more than one is found in the array
			 * the last entry is considered 'attached' to the node
			 * @function
			 * @private
			 * @param {Object} node The AST node
			 * @returns {Object} The comment object from the AST or null
			 * @since 8.0
			 */
			findCommentForNode: function findCommentForNode(node) {
				var comments = node.leadingComments;
				var comment = null;
				if(comments && comments.length > 0) {
					//simple case: the node has an attaced comment, take the last comment in the leading array
					comment = comments[comments.length-1];
					if(comment.type === 'Block') {
						comment.node = node;
						return comment;
					}
				} else if(node.type === 'Property') { //TODO https://github.com/jquery/esprima/issues/1071
					comment = findCommentForNode(node.key);
					if(comment) {
						comment.node = node;
						return comment;
					}
				} else if(node.type === 'FunctionDeclaration') { //TODO https://github.com/jquery/esprima/issues/1071
					comment = findCommentForNode(node.id);
					if(comment) {
						comment.node = node;
						return comment;
					}
				}
				//we still want to show a hover for something with no doc
				comment = Object.create(null);
				comment.node = node;
				comment.value = '';
				return comment;
			},
			
			/**
			 * @description Finds the parent function for the given node if one exists
			 * @function
			 * @param {Object} node The AST node
			 * @returns {Object} The function node that directly encloses the given node or ```null```
			 * @since 9.0
			 */
			findParentFunction: function findParentFunction(node) {
				if(node) {
					if(node.parents) {
						//the node has been computed with the parents array from Finder#findNode
						var parents = node.parents;
						var parent = parents.pop();
						while(parent) {
							if(parent.type === 'FunctionDeclaration' || parent.type === 'FunctionExpression') {
								return parent;
							}
							parent = parents.pop();
						}
					} else if(node.parent) {
						//eslint has tagged the AST with herarchy infos
						parent = node.parent;
						while(parent) {
							if(parent.type === 'FunctionDeclaration' || parent.type === 'FunctionExpression') {
								return parent;
							}
							parent = parent.parent;
						}
					}
				}
				return null;
			} 
		};
	
		return Finder;
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 32 */
/***/ function(module, exports, __webpack_require__) {

	var require;var require;(function(f){if(true){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.estraverse = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return require(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
	/*
	  Copyright (C) 2012-2013 Yusuke Suzuki <utatane.tea@gmail.com>
	  Copyright (C) 2012 Ariya Hidayat <ariya.hidayat@gmail.com>
	
	  Redistribution and use in source and binary forms, with or without
	  modification, are permitted provided that the following conditions are met:
	
	    * Redistributions of source code must retain the above copyright
	      notice, this list of conditions and the following disclaimer.
	    * Redistributions in binary form must reproduce the above copyright
	      notice, this list of conditions and the following disclaimer in the
	      documentation and/or other materials provided with the distribution.
	
	  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
	  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
	  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
	  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
	  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
	  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
	  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
	  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
	  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
	  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*/
	/*jslint vars:false, bitwise:true*/
	/*jshint indent:4*/
	/*global exports:true*/
	(function clone(exports) {
	    'use strict';
	
	    var Syntax,
	        isArray,
	        VisitorOption,
	        VisitorKeys,
	        objectCreate,
	        objectKeys,
	        BREAK,
	        SKIP,
	        REMOVE;
	
	    function ignoreJSHintError() { }
	
	    isArray = Array.isArray;
	    if (!isArray) {
	        isArray = function isArray(array) {
	            return Object.prototype.toString.call(array) === '[object Array]';
	        };
	    }
	
	    function deepCopy(obj) {
	        var ret = {}, key, val;
	        for (key in obj) {
	            if (obj.hasOwnProperty(key)) {
	                val = obj[key];
	                if (typeof val === 'object' && val !== null) {
	                    ret[key] = deepCopy(val);
	                } else {
	                    ret[key] = val;
	                }
	            }
	        }
	        return ret;
	    }
	
	    function shallowCopy(obj) {
	        var ret = {}, key;
	        for (key in obj) {
	            if (obj.hasOwnProperty(key)) {
	                ret[key] = obj[key];
	            }
	        }
	        return ret;
	    }
	    ignoreJSHintError(shallowCopy);
	
	    // based on LLVM libc++ upper_bound / lower_bound
	    // MIT License
	
	    function upperBound(array, func) {
	        var diff, len, i, current;
	
	        len = array.length;
	        i = 0;
	
	        while (len) {
	            diff = len >>> 1;
	            current = i + diff;
	            if (func(array[current])) {
	                len = diff;
	            } else {
	                i = current + 1;
	                len -= diff + 1;
	            }
	        }
	        return i;
	    }
	
	    function lowerBound(array, func) {
	        var diff, len, i, current;
	
	        len = array.length;
	        i = 0;
	
	        while (len) {
	            diff = len >>> 1;
	            current = i + diff;
	            if (func(array[current])) {
	                i = current + 1;
	                len -= diff + 1;
	            } else {
	                len = diff;
	            }
	        }
	        return i;
	    }
	    ignoreJSHintError(lowerBound);
	
	    objectCreate = Object.create || (function () {
	        function F() { }
	
	        return function (o) {
	            F.prototype = o;
	            return new F();
	        };
	    })();
	
	    objectKeys = Object.keys || function (o) {
	        var keys = [], key;
	        for (key in o) {
	            keys.push(key);
	        }
	        return keys;
	    };
	
	    function extend(to, from) {
	        var keys = objectKeys(from), key, i, len;
	        for (i = 0, len = keys.length; i < len; i += 1) {
	            key = keys[i];
	            to[key] = from[key];
	        }
	        return to;
	    }
	
	    Syntax = {
	        AssignmentExpression: 'AssignmentExpression',
	        AssignmentPattern: 'AssignmentPattern',
	        ArrayExpression: 'ArrayExpression',
	        ArrayPattern: 'ArrayPattern',
	        ArrowFunctionExpression: 'ArrowFunctionExpression',
	        AwaitExpression: 'AwaitExpression', // CAUTION: It's deferred to ES7.
	        BlockStatement: 'BlockStatement',
	        BinaryExpression: 'BinaryExpression',
	        BreakStatement: 'BreakStatement',
	        CallExpression: 'CallExpression',
	        CatchClause: 'CatchClause',
	        ClassBody: 'ClassBody',
	        ClassDeclaration: 'ClassDeclaration',
	        ClassExpression: 'ClassExpression',
	        ComprehensionBlock: 'ComprehensionBlock',  // CAUTION: It's deferred to ES7.
	        ComprehensionExpression: 'ComprehensionExpression',  // CAUTION: It's deferred to ES7.
	        ConditionalExpression: 'ConditionalExpression',
	        ContinueStatement: 'ContinueStatement',
	        DebuggerStatement: 'DebuggerStatement',
	        DirectiveStatement: 'DirectiveStatement',
	        DoWhileStatement: 'DoWhileStatement',
	        EmptyStatement: 'EmptyStatement',
	        ExportAllDeclaration: 'ExportAllDeclaration',
	        ExportDefaultDeclaration: 'ExportDefaultDeclaration',
	        ExportNamedDeclaration: 'ExportNamedDeclaration',
	        ExportSpecifier: 'ExportSpecifier',
	        ExpressionStatement: 'ExpressionStatement',
	        ForStatement: 'ForStatement',
	        ForInStatement: 'ForInStatement',
	        ForOfStatement: 'ForOfStatement',
	        FunctionDeclaration: 'FunctionDeclaration',
	        FunctionExpression: 'FunctionExpression',
	        GeneratorExpression: 'GeneratorExpression',  // CAUTION: It's deferred to ES7.
	        Identifier: 'Identifier',
	        IfStatement: 'IfStatement',
	        ImportDeclaration: 'ImportDeclaration',
	        ImportDefaultSpecifier: 'ImportDefaultSpecifier',
	        ImportNamespaceSpecifier: 'ImportNamespaceSpecifier',
	        ImportSpecifier: 'ImportSpecifier',
	        Literal: 'Literal',
	        LabeledStatement: 'LabeledStatement',
	        LogicalExpression: 'LogicalExpression',
	        MemberExpression: 'MemberExpression',
	        MetaProperty: 'MetaProperty',
	        MethodDefinition: 'MethodDefinition',
	        ModuleSpecifier: 'ModuleSpecifier',
	        NewExpression: 'NewExpression',
	        ObjectExpression: 'ObjectExpression',
	        ObjectPattern: 'ObjectPattern',
	        Program: 'Program',
	        Property: 'Property',
	        RestElement: 'RestElement',
	        ReturnStatement: 'ReturnStatement',
	        SequenceExpression: 'SequenceExpression',
	        SpreadElement: 'SpreadElement',
	        Super: 'Super',
	        SwitchStatement: 'SwitchStatement',
	        SwitchCase: 'SwitchCase',
	        TaggedTemplateExpression: 'TaggedTemplateExpression',
	        TemplateElement: 'TemplateElement',
	        TemplateLiteral: 'TemplateLiteral',
	        ThisExpression: 'ThisExpression',
	        ThrowStatement: 'ThrowStatement',
	        TryStatement: 'TryStatement',
	        UnaryExpression: 'UnaryExpression',
	        UpdateExpression: 'UpdateExpression',
	        VariableDeclaration: 'VariableDeclaration',
	        VariableDeclarator: 'VariableDeclarator',
	        WhileStatement: 'WhileStatement',
	        WithStatement: 'WithStatement',
	        YieldExpression: 'YieldExpression'
	    };
	
	    VisitorKeys = {
	        AssignmentExpression: ['left', 'right'],
	        AssignmentPattern: ['left', 'right'],
	        ArrayExpression: ['elements'],
	        ArrayPattern: ['elements'],
	        ArrowFunctionExpression: ['params', 'body'],
	        AwaitExpression: ['argument'], // CAUTION: It's deferred to ES7.
	        BlockStatement: ['body'],
	        BinaryExpression: ['left', 'right'],
	        BreakStatement: ['label'],
	        CallExpression: ['callee', 'arguments'],
	        CatchClause: ['param', 'body'],
	        ClassBody: ['body'],
	        ClassDeclaration: ['id', 'superClass', 'body'],
	        ClassExpression: ['id', 'superClass', 'body'],
	        ComprehensionBlock: ['left', 'right'],  // CAUTION: It's deferred to ES7.
	        ComprehensionExpression: ['blocks', 'filter', 'body'],  // CAUTION: It's deferred to ES7.
	        ConditionalExpression: ['test', 'consequent', 'alternate'],
	        ContinueStatement: ['label'],
	        DebuggerStatement: [],
	        DirectiveStatement: [],
	        DoWhileStatement: ['body', 'test'],
	        EmptyStatement: [],
	        ExportAllDeclaration: ['source'],
	        ExportDefaultDeclaration: ['declaration'],
	        ExportNamedDeclaration: ['declaration', 'specifiers', 'source'],
	        ExportSpecifier: ['exported', 'local'],
	        ExpressionStatement: ['expression'],
	        ForStatement: ['init', 'test', 'update', 'body'],
	        ForInStatement: ['left', 'right', 'body'],
	        ForOfStatement: ['left', 'right', 'body'],
	        FunctionDeclaration: ['id', 'params', 'defaults', 'body'],
	        FunctionExpression: ['id', 'params', 'defaults', 'body'],
	        GeneratorExpression: ['blocks', 'filter', 'body'],  // CAUTION: It's deferred to ES7.
	        Identifier: [],
	        IfStatement: ['test', 'consequent', 'alternate'],
	        ImportDeclaration: ['specifiers', 'source'],
	        ImportDefaultSpecifier: ['local'],
	        ImportNamespaceSpecifier: ['local'],
	        ImportSpecifier: ['imported', 'local'],
	        Literal: [],
	        LabeledStatement: ['label', 'body'],
	        LogicalExpression: ['left', 'right'],
	        MemberExpression: ['object', 'property'],
	        MetaProperty: ['meta', 'property'],
	        MethodDefinition: ['key', 'value'],
	        ModuleSpecifier: [],
	        NewExpression: ['callee', 'arguments'],
	        ObjectExpression: ['properties'],
	        ObjectPattern: ['properties'],
	        Program: ['body'],
	        Property: ['key', 'value'],
	        RestElement: [ 'argument' ],
	        ReturnStatement: ['argument'],
	        SequenceExpression: ['expressions'],
	        SpreadElement: ['argument'],
	        Super: [],
	        SwitchStatement: ['discriminant', 'cases'],
	        SwitchCase: ['test', 'consequent'],
	        TaggedTemplateExpression: ['tag', 'quasi'],
	        TemplateElement: [],
	        TemplateLiteral: ['quasis', 'expressions'],
	        ThisExpression: [],
	        ThrowStatement: ['argument'],
	        TryStatement: ['block', 'handler', 'finalizer'],
	        UnaryExpression: ['argument'],
	        UpdateExpression: ['argument'],
	        VariableDeclaration: ['declarations'],
	        VariableDeclarator: ['id', 'init'],
	        WhileStatement: ['test', 'body'],
	        WithStatement: ['object', 'body'],
	        YieldExpression: ['argument']
	    };
	
	    // unique id
	    BREAK = {};
	    SKIP = {};
	    REMOVE = {};
	
	    VisitorOption = {
	        Break: BREAK,
	        Skip: SKIP,
	        Remove: REMOVE
	    };
	
	    function Reference(parent, key) {
	        this.parent = parent;
	        this.key = key;
	    }
	
	    Reference.prototype.replace = function replace(node) {
	        this.parent[this.key] = node;
	    };
	
	    Reference.prototype.remove = function remove() {
	        if (isArray(this.parent)) {
	            this.parent.splice(this.key, 1);
	            return true;
	        } else {
	            this.replace(null);
	            return false;
	        }
	    };
	
	    function Element(node, path, wrap, ref) {
	        this.node = node;
	        this.path = path;
	        this.wrap = wrap;
	        this.ref = ref;
	    }
	
	    function Controller() { }
	
	    // API:
	    // return property path array from root to current node
	    Controller.prototype.path = function path() {
	        var i, iz, j, jz, result, element;
	
	        function addToPath(result, path) {
	            if (isArray(path)) {
	                for (j = 0, jz = path.length; j < jz; ++j) {
	                    result.push(path[j]);
	                }
	            } else {
	                result.push(path);
	            }
	        }
	
	        // root node
	        if (!this.__current.path) {
	            return null;
	        }
	
	        // first node is sentinel, second node is root element
	        result = [];
	        for (i = 2, iz = this.__leavelist.length; i < iz; ++i) {
	            element = this.__leavelist[i];
	            addToPath(result, element.path);
	        }
	        addToPath(result, this.__current.path);
	        return result;
	    };
	
	    // API:
	    // return type of current node
	    Controller.prototype.type = function () {
	        var node = this.current();
	        return node.type || this.__current.wrap;
	    };
	
	    // API:
	    // return array of parent elements
	    Controller.prototype.parents = function parents() {
	        var i, iz, result;
	
	        // first node is sentinel
	        result = [];
	        for (i = 1, iz = this.__leavelist.length; i < iz; ++i) {
	            result.push(this.__leavelist[i].node);
	        }
	
	        return result;
	    };
	
	    // API:
	    // return current node
	    Controller.prototype.current = function current() {
	        return this.__current.node;
	    };
	
	    Controller.prototype.__execute = function __execute(callback, element) {
	        var previous, result;
	
	        result = undefined;
	
	        previous  = this.__current;
	        this.__current = element;
	        this.__state = null;
	        if (callback) {
	            result = callback.call(this, element.node, this.__leavelist[this.__leavelist.length - 1].node);
	        }
	        this.__current = previous;
	
	        return result;
	    };
	
	    // API:
	    // notify control skip / break
	    Controller.prototype.notify = function notify(flag) {
	        this.__state = flag;
	    };
	
	    // API:
	    // skip child nodes of current node
	    Controller.prototype.skip = function () {
	        this.notify(SKIP);
	    };
	
	    // API:
	    // break traversals
	    Controller.prototype['break'] = function () {
	        this.notify(BREAK);
	    };
	
	    // API:
	    // remove node
	    Controller.prototype.remove = function () {
	        this.notify(REMOVE);
	    };
	
	    Controller.prototype.__initialize = function(root, visitor) {
	        this.visitor = visitor;
	        this.root = root;
	        this.__worklist = [];
	        this.__leavelist = [];
	        this.__current = null;
	        this.__state = null;
	        this.__fallback = visitor.fallback === 'iteration';
	        this.__keys = VisitorKeys;
	        if (visitor.keys) {
	            this.__keys = extend(objectCreate(this.__keys), visitor.keys);
	        }
	    };
	
	    function isNode(node) {
	        if (node == null) {
	            return false;
	        }
	        return typeof node === 'object' && typeof node.type === 'string';
	    }
	
	    function isProperty(nodeType, key) {
	        return (nodeType === Syntax.ObjectExpression || nodeType === Syntax.ObjectPattern) && 'properties' === key;
	    }
	
	    Controller.prototype.traverse = function traverse(root, visitor) {
	        var worklist,
	            leavelist,
	            element,
	            node,
	            nodeType,
	            ret,
	            key,
	            current,
	            current2,
	            candidates,
	            candidate,
	            sentinel;
	
	        this.__initialize(root, visitor);
	
	        sentinel = {};
	
	        // reference
	        worklist = this.__worklist;
	        leavelist = this.__leavelist;
	
	        // initialize
	        worklist.push(new Element(root, null, null, null));
	        leavelist.push(new Element(null, null, null, null));
	
	        while (worklist.length) {
	            element = worklist.pop();
	
	            if (element === sentinel) {
	                element = leavelist.pop();
	
	                ret = this.__execute(visitor.leave, element);
	
	                if (this.__state === BREAK || ret === BREAK) {
	                    return;
	                }
	                continue;
	            }
	
	            if (element.node) {
	
	                ret = this.__execute(visitor.enter, element);
	
	                if (this.__state === BREAK || ret === BREAK) {
	                    return;
	                }
	
	                worklist.push(sentinel);
	                leavelist.push(element);
	
	                if (this.__state === SKIP || ret === SKIP) {
	                    continue;
	                }
	
	                node = element.node;
	                nodeType = node.type || element.wrap;
	                candidates = this.__keys[nodeType];
	                if (!candidates) {
	                    if (this.__fallback) {
	                        candidates = objectKeys(node);
	                    } else {
	                        throw new Error('Unknown node type ' + nodeType + '.');
	                    }
	                }
	
	                current = candidates.length;
	                while ((current -= 1) >= 0) {
	                    key = candidates[current];
	                    candidate = node[key];
	                    if (!candidate) {
	                        continue;
	                    }
	
	                    if (isArray(candidate)) {
	                        current2 = candidate.length;
	                        while ((current2 -= 1) >= 0) {
	                            if (!candidate[current2]) {
	                                continue;
	                            }
	                            if (isProperty(nodeType, candidates[current])) {
	                                element = new Element(candidate[current2], [key, current2], 'Property', null);
	                            } else if (isNode(candidate[current2])) {
	                                element = new Element(candidate[current2], [key, current2], null, null);
	                            } else {
	                                continue;
	                            }
	                            worklist.push(element);
	                        }
	                    } else if (isNode(candidate)) {
	                        worklist.push(new Element(candidate, key, null, null));
	                    }
	                }
	            }
	        }
	    };
	
	    Controller.prototype.replace = function replace(root, visitor) {
	        function removeElem(element) {
	            var i,
	                key,
	                nextElem,
	                parent;
	
	            if (element.ref.remove()) {
	                // When the reference is an element of an array.
	                key = element.ref.key;
	                parent = element.ref.parent;
	
	                // If removed from array, then decrease following items' keys.
	                i = worklist.length;
	                while (i--) {
	                    nextElem = worklist[i];
	                    if (nextElem.ref && nextElem.ref.parent === parent) {
	                        if  (nextElem.ref.key < key) {
	                            break;
	                        }
	                        --nextElem.ref.key;
	                    }
	                }
	            }
	        }
	
	        var worklist,
	            leavelist,
	            node,
	            nodeType,
	            target,
	            element,
	            current,
	            current2,
	            candidates,
	            candidate,
	            sentinel,
	            outer,
	            key;
	
	        this.__initialize(root, visitor);
	
	        sentinel = {};
	
	        // reference
	        worklist = this.__worklist;
	        leavelist = this.__leavelist;
	
	        // initialize
	        outer = {
	            root: root
	        };
	        element = new Element(root, null, null, new Reference(outer, 'root'));
	        worklist.push(element);
	        leavelist.push(element);
	
	        while (worklist.length) {
	            element = worklist.pop();
	
	            if (element === sentinel) {
	                element = leavelist.pop();
	
	                target = this.__execute(visitor.leave, element);
	
	                // node may be replaced with null,
	                // so distinguish between undefined and null in this place
	                if (target !== undefined && target !== BREAK && target !== SKIP && target !== REMOVE) {
	                    // replace
	                    element.ref.replace(target);
	                }
	
	                if (this.__state === REMOVE || target === REMOVE) {
	                    removeElem(element);
	                }
	
	                if (this.__state === BREAK || target === BREAK) {
	                    return outer.root;
	                }
	                continue;
	            }
	
	            target = this.__execute(visitor.enter, element);
	
	            // node may be replaced with null,
	            // so distinguish between undefined and null in this place
	            if (target !== undefined && target !== BREAK && target !== SKIP && target !== REMOVE) {
	                // replace
	                element.ref.replace(target);
	                element.node = target;
	            }
	
	            if (this.__state === REMOVE || target === REMOVE) {
	                removeElem(element);
	                element.node = null;
	            }
	
	            if (this.__state === BREAK || target === BREAK) {
	                return outer.root;
	            }
	
	            // node may be null
	            node = element.node;
	            if (!node) {
	                continue;
	            }
	
	            worklist.push(sentinel);
	            leavelist.push(element);
	
	            if (this.__state === SKIP || target === SKIP) {
	                continue;
	            }
	
	            nodeType = node.type || element.wrap;
	            candidates = this.__keys[nodeType];
	            if (!candidates) {
	                if (this.__fallback) {
	                    candidates = objectKeys(node);
	                } else {
	                    throw new Error('Unknown node type ' + nodeType + '.');
	                }
	            }
	
	            current = candidates.length;
	            while ((current -= 1) >= 0) {
	                key = candidates[current];
	                candidate = node[key];
	                if (!candidate) {
	                    continue;
	                }
	
	                if (isArray(candidate)) {
	                    current2 = candidate.length;
	                    while ((current2 -= 1) >= 0) {
	                        if (!candidate[current2]) {
	                            continue;
	                        }
	                        if (isProperty(nodeType, candidates[current])) {
	                            element = new Element(candidate[current2], [key, current2], 'Property', new Reference(candidate, current2));
	                        } else if (isNode(candidate[current2])) {
	                            element = new Element(candidate[current2], [key, current2], null, new Reference(candidate, current2));
	                        } else {
	                            continue;
	                        }
	                        worklist.push(element);
	                    }
	                } else if (isNode(candidate)) {
	                    worklist.push(new Element(candidate, key, null, new Reference(node, key)));
	                }
	            }
	        }
	
	        return outer.root;
	    };
	
	    function traverse(root, visitor) {
	        var controller = new Controller();
	        return controller.traverse(root, visitor);
	    }
	
	    function replace(root, visitor) {
	        var controller = new Controller();
	        return controller.replace(root, visitor);
	    }
	
	    function extendCommentRange(comment, tokens) {
	        var target;
	
	        target = upperBound(tokens, function search(token) {
	            return token.range[0] > comment.range[0];
	        });
	
	        comment.extendedRange = [comment.range[0], comment.range[1]];
	
	        if (target !== tokens.length) {
	            comment.extendedRange[1] = tokens[target].range[0];
	        }
	
	        target -= 1;
	        if (target >= 0) {
	            comment.extendedRange[0] = tokens[target].range[1];
	        }
	
	        return comment;
	    }
	
	    function attachComments(tree, providedComments, tokens) {
	        // At first, we should calculate extended comment ranges.
	        var comments = [], comment, len, i, cursor;
	
	        if (!tree.range) {
	            throw new Error('attachComments needs range information');
	        }
	
	        // tokens array is empty, we attach comments to tree as 'leadingComments'
	        if (!tokens.length) {
	            if (providedComments.length) {
	                for (i = 0, len = providedComments.length; i < len; i += 1) {
	                    comment = deepCopy(providedComments[i]);
	                    comment.extendedRange = [0, tree.range[0]];
	                    comments.push(comment);
	                }
	                tree.leadingComments = comments;
	            }
	            return tree;
	        }
	
	        for (i = 0, len = providedComments.length; i < len; i += 1) {
	            comments.push(extendCommentRange(deepCopy(providedComments[i]), tokens));
	        }
	
	        // This is based on John Freeman's implementation.
	        cursor = 0;
	        traverse(tree, {
	            enter: function (node) {
	                var comment;
	
	                while (cursor < comments.length) {
	                    comment = comments[cursor];
	                    if (comment.extendedRange[1] > node.range[0]) {
	                        break;
	                    }
	
	                    if (comment.extendedRange[1] === node.range[0]) {
	                        if (!node.leadingComments) {
	                            node.leadingComments = [];
	                        }
	                        node.leadingComments.push(comment);
	                        comments.splice(cursor, 1);
	                    } else {
	                        cursor += 1;
	                    }
	                }
	
	                // already out of owned node
	                if (cursor === comments.length) {
	                    return VisitorOption.Break;
	                }
	
	                if (comments[cursor].extendedRange[0] > node.range[1]) {
	                    return VisitorOption.Skip;
	                }
	            }
	        });
	
	        cursor = 0;
	        traverse(tree, {
	            leave: function (node) {
	                var comment;
	
	                while (cursor < comments.length) {
	                    comment = comments[cursor];
	                    if (node.range[1] < comment.extendedRange[0]) {
	                        break;
	                    }
	
	                    if (node.range[1] === comment.extendedRange[0]) {
	                        if (!node.trailingComments) {
	                            node.trailingComments = [];
	                        }
	                        node.trailingComments.push(comment);
	                        comments.splice(cursor, 1);
	                    } else {
	                        cursor += 1;
	                    }
	                }
	
	                // already out of owned node
	                if (cursor === comments.length) {
	                    return VisitorOption.Break;
	                }
	
	                if (comments[cursor].extendedRange[0] > node.range[1]) {
	                    return VisitorOption.Skip;
	                }
	            }
	        });
	
	        return tree;
	    }
	
	    exports.version = require('./package.json').version;
	    exports.Syntax = Syntax;
	    exports.traverse = traverse;
	    exports.replace = replace;
	    exports.attachComments = attachComments;
	    exports.VisitorKeys = VisitorKeys;
	    exports.VisitorOption = VisitorOption;
	    exports.Controller = Controller;
	    exports.cloneEnvironment = function () { return clone({}); };
	
	    return exports;
	}(exports));
	/* vim: set sw=4 ts=4 et tw=80 : */
	
	},{"./package.json":2}],2:[function(require,module,exports){
	module.exports={
	  "name": "estraverse",
	  "description": "ECMAScript JS AST traversal functions",
	  "homepage": "https://github.com/estools/estraverse",
	  "main": "estraverse.js",
	  "version": "4.1.1",
	  "engines": {
	    "node": ">=0.10.0"
	  },
	  "maintainers": [
	    {
	      "name": "Yusuke Suzuki",
	      "email": "utatane.tea@gmail.com",
	      "web": "http://github.com/Constellation"
	    }
	  ],
	  "repository": {
	    "type": "git",
	    "url": "http://github.com/estools/estraverse.git"
	  },
	  "devDependencies": {
	    "chai": "^2.1.1",
	    "coffee-script": "^1.8.0",
	    "espree": "^1.11.0",
	    "gulp": "^3.8.10",
	    "gulp-bump": "^0.2.2",
	    "gulp-filter": "^2.0.0",
	    "gulp-git": "^1.0.1",
	    "gulp-tag-version": "^1.2.1",
	    "jshint": "^2.5.6",
	    "mocha": "^2.1.0"
	  },
	  "license": "BSD-2-Clause",
	  "scripts": {
	    "test": "npm run-script lint && npm run-script unit-test",
	    "lint": "jshint estraverse.js",
	    "unit-test": "mocha --compilers coffee:coffee-script/register"
	  }
	}
	
	},{}]},{},[1])(1)
	});

/***/ },
/* 33 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*eslint-env amd */
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	    __webpack_require__(34)
	], __WEBPACK_AMD_DEFINE_RESULT__ = function(globals) {
	/**
	 * @fileoverview Defines environment settings and globals.
	 * @author Elan Shanker
	 * @copyright 2014 Elan Shanker. All rights reserved.
	 */
	"use strict";
	
	var exports = {
	    builtin: globals.builtin,
	    browser: {
	        globals: globals.browser
	    },
	    node: {
	        globals: globals.node,
	        ecmaFeatures: {
	            globalReturn: true
	        }
	    },
	    commonjs: {
	        globals: globals.commonjs,
	        ecmaFeatures: {
	            globalReturn: true
	        }
	    },
	    worker: {
	        globals: globals.worker
	    },
	    amd: {
	        globals: globals.amd
	    },
	    mocha: {
	        globals: globals.mocha
	    },
	    jasmine: {
	        globals: globals.jasmine
	    },
	    jest: {
	        globals: globals.jest
	    },
	    phantomjs: {
	        globals: globals.phantom
	    },
	    jquery: {
	        globals: globals.jquery
	    },
	    qunit: {
	        globals: globals.qunit
	    },
	    prototypejs: {
	        globals: globals.prototypejs
	    },
	    shelljs: {
	        globals: globals.shelljs
	    },
	    meteor: {
	        globals: globals.meteor
	    },
	    mongo: {
	        globals: globals.mongo
	    },
	    protractor: {
	        globals: globals.protractor
	    },
	    applescript: {
	        globals: globals.applescript
	    },
	    nashorn: {
	        globals: globals.nashorn
	    },
	    serviceworker: {
	        globals: globals.serviceworker
	    },
	    embertest: {
	        globals: globals.embertest
	    },
	    webextensions: {
	        globals: globals.webextensions
	    },
	    es6: {
	        ecmaFeatures: {
	            arrowFunctions: true,
	            blockBindings: true,
	            regexUFlag: true,
	            regexYFlag: true,
	            templateStrings: true,
	            binaryLiterals: true,
	            octalLiterals: true,
	            unicodeCodePointEscapes: true,
	            superInFunctions: true,
	            defaultParams: true,
	            restParams: true,
	            forOf: true,
	            objectLiteralComputedProperties: true,
	            objectLiteralShorthandMethods: true,
	            objectLiteralShorthandProperties: true,
	            objectLiteralDuplicateProperties: true,
	            generators: true,
	            destructuring: true,
	            classes: true,
	            spread: true,
	            newTarget: true
	        }
	    }
	};
	
	    return exports;
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 34 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* eslint-env amd */
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
	    return {
		"builtin": {
			"Array": false,
			"ArrayBuffer": false,
			"Boolean": false,
			"constructor": false,
			"DataView": false,
			"Date": false,
			"decodeURI": false,
			"decodeURIComponent": false,
			"encodeURI": false,
			"encodeURIComponent": false,
			"Error": false,
			"escape": false,
			"eval": false,
			"EvalError": false,
			"Float32Array": false,
			"Float64Array": false,
			"Function": false,
			"hasOwnProperty": false,
			"Infinity": false,
			"Int16Array": false,
			"Int32Array": false,
			"Int8Array": false,
			"isFinite": false,
			"isNaN": false,
			"isPrototypeOf": false,
			"JSON": false,
			"Map": false,
			"Math": false,
			"NaN": false,
			"Number": false,
			"Object": false,
			"parseFloat": false,
			"parseInt": false,
			"Promise": false,
			"propertyIsEnumerable": false,
			"Proxy": false,
			"RangeError": false,
			"ReferenceError": false,
			"Reflect": false,
			"RegExp": false,
			"Set": false,
			"String": false,
			"Symbol": false,
			"SyntaxError": false,
			"System": false,
			"toLocaleString": false,
			"toString": false,
			"TypeError": false,
			"Uint16Array": false,
			"Uint32Array": false,
			"Uint8Array": false,
			"Uint8ClampedArray": false,
			"undefined": false,
			"unescape": false,
			"URIError": false,
			"valueOf": false,
			"WeakMap": false,
			"WeakSet": false
		},
		"browser": {
			"addEventListener": false,
			"alert": false,
			"AnalyserNode": false,
			"AnimationEvent": false,
			"applicationCache": false,
			"ApplicationCache": false,
			"ApplicationCacheErrorEvent": false,
			"atob": false,
			"Attr": false,
			"Audio": false,
			"AudioBuffer": false,
			"AudioBufferSourceNode": false,
			"AudioContext": false,
			"AudioDestinationNode": false,
			"AudioListener": false,
			"AudioNode": false,
			"AudioParam": false,
			"AudioProcessingEvent": false,
			"AutocompleteErrorEvent": false,
			"BarProp": false,
			"BatteryManager": false,
			"BeforeUnloadEvent": false,
			"BiquadFilterNode": false,
			"Blob": false,
			"blur": false,
			"btoa": false,
			"Cache": false,
			"caches": false,
			"CacheStorage": false,
			"cancelAnimationFrame": false,
			"CanvasGradient": false,
			"CanvasPattern": false,
			"CanvasRenderingContext2D": false,
			"CDATASection": false,
			"ChannelMergerNode": false,
			"ChannelSplitterNode": false,
			"CharacterData": false,
			"clearInterval": false,
			"clearTimeout": false,
			"clientInformation": false,
			"ClientRect": false,
			"ClientRectList": false,
			"ClipboardEvent": false,
			"close": false,
			"closed": false,
			"CloseEvent": false,
			"Comment": false,
			"CompositionEvent": false,
			"confirm": false,
			"console": false,
			"ConvolverNode": false,
			"crypto": false,
			"Crypto": false,
			"CryptoKey": false,
			"CSS": false,
			"CSSFontFaceRule": false,
			"CSSImportRule": false,
			"CSSKeyframeRule": false,
			"CSSKeyframesRule": false,
			"CSSMediaRule": false,
			"CSSPageRule": false,
			"CSSRule": false,
			"CSSRuleList": false,
			"CSSStyleDeclaration": false,
			"CSSStyleRule": false,
			"CSSStyleSheet": false,
			"CSSSupportsRule": false,
			"CSSUnknownRule": false,
			"CSSViewportRule": false,
			"CustomEvent": false,
			"DataTransfer": false,
			"DataTransferItem": false,
			"DataTransferItemList": false,
			"Debug": false,
			"defaultStatus": false,
			"defaultstatus": false,
			"DelayNode": false,
			"DeviceMotionEvent": false,
			"DeviceOrientationEvent": false,
			"devicePixelRatio": false,
			"dispatchEvent": false,
			"document": false,
			"Document": false,
			"DocumentFragment": false,
			"DocumentType": false,
			"DOMError": false,
			"DOMException": false,
			"DOMImplementation": false,
			"DOMParser": false,
			"DOMSettableTokenList": false,
			"DOMStringList": false,
			"DOMStringMap": false,
			"DOMTokenList": false,
			"DragEvent": false,
			"DynamicsCompressorNode": false,
			"Element": false,
			"ElementTimeControl": false,
			"ErrorEvent": false,
			"event": false,
			"Event": false,
			"EventSource": false,
			"EventTarget": false,
			"external": false,
			"fetch": false,
			"File": false,
			"FileError": false,
			"FileList": false,
			"FileReader": false,
			"find": false,
			"focus": false,
			"FocusEvent": false,
			"FontFace": false,
			"FormData": false,
			"frameElement": false,
			"frames": false,
			"GainNode": false,
			"Gamepad": false,
			"GamepadButton": false,
			"GamepadEvent": false,
			"getComputedStyle": false,
			"getSelection": false,
			"HashChangeEvent": false,
			"Headers": false,
			"history": false,
			"History": false,
			"HTMLAllCollection": false,
			"HTMLAnchorElement": false,
			"HTMLAppletElement": false,
			"HTMLAreaElement": false,
			"HTMLAudioElement": false,
			"HTMLBaseElement": false,
			"HTMLBlockquoteElement": false,
			"HTMLBodyElement": false,
			"HTMLBRElement": false,
			"HTMLButtonElement": false,
			"HTMLCanvasElement": false,
			"HTMLCollection": false,
			"HTMLContentElement": false,
			"HTMLDataListElement": false,
			"HTMLDetailsElement": false,
			"HTMLDialogElement": false,
			"HTMLDirectoryElement": false,
			"HTMLDivElement": false,
			"HTMLDListElement": false,
			"HTMLDocument": false,
			"HTMLElement": false,
			"HTMLEmbedElement": false,
			"HTMLFieldSetElement": false,
			"HTMLFontElement": false,
			"HTMLFormControlsCollection": false,
			"HTMLFormElement": false,
			"HTMLFrameElement": false,
			"HTMLFrameSetElement": false,
			"HTMLHeadElement": false,
			"HTMLHeadingElement": false,
			"HTMLHRElement": false,
			"HTMLHtmlElement": false,
			"HTMLIFrameElement": false,
			"HTMLImageElement": false,
			"HTMLInputElement": false,
			"HTMLIsIndexElement": false,
			"HTMLKeygenElement": false,
			"HTMLLabelElement": false,
			"HTMLLayerElement": false,
			"HTMLLegendElement": false,
			"HTMLLIElement": false,
			"HTMLLinkElement": false,
			"HTMLMapElement": false,
			"HTMLMarqueeElement": false,
			"HTMLMediaElement": false,
			"HTMLMenuElement": false,
			"HTMLMetaElement": false,
			"HTMLMeterElement": false,
			"HTMLModElement": false,
			"HTMLObjectElement": false,
			"HTMLOListElement": false,
			"HTMLOptGroupElement": false,
			"HTMLOptionElement": false,
			"HTMLOptionsCollection": false,
			"HTMLOutputElement": false,
			"HTMLParagraphElement": false,
			"HTMLParamElement": false,
			"HTMLPictureElement": false,
			"HTMLPreElement": false,
			"HTMLProgressElement": false,
			"HTMLQuoteElement": false,
			"HTMLScriptElement": false,
			"HTMLSelectElement": false,
			"HTMLShadowElement": false,
			"HTMLSourceElement": false,
			"HTMLSpanElement": false,
			"HTMLStyleElement": false,
			"HTMLTableCaptionElement": false,
			"HTMLTableCellElement": false,
			"HTMLTableColElement": false,
			"HTMLTableElement": false,
			"HTMLTableRowElement": false,
			"HTMLTableSectionElement": false,
			"HTMLTemplateElement": false,
			"HTMLTextAreaElement": false,
			"HTMLTitleElement": false,
			"HTMLTrackElement": false,
			"HTMLUListElement": false,
			"HTMLUnknownElement": false,
			"HTMLVideoElement": false,
			"IDBCursor": false,
			"IDBCursorWithValue": false,
			"IDBDatabase": false,
			"IDBEnvironment": false,
			"IDBFactory": false,
			"IDBIndex": false,
			"IDBKeyRange": false,
			"IDBObjectStore": false,
			"IDBOpenDBRequest": false,
			"IDBRequest": false,
			"IDBTransaction": false,
			"IDBVersionChangeEvent": false,
			"Image": false,
			"ImageBitmap": false,
			"ImageData": false,
			"indexedDB": false,
			"innerHeight": false,
			"innerWidth": false,
			"InputEvent": false,
			"InputMethodContext": false,
			"Intl": false,
			"KeyboardEvent": false,
			"length": false,
			"localStorage": false,
			"location": false,
			"Location": false,
			"locationbar": false,
			"matchMedia": false,
			"MediaElementAudioSourceNode": false,
			"MediaEncryptedEvent": false,
			"MediaError": false,
			"MediaKeyError": false,
			"MediaKeyEvent": false,
			"MediaKeyMessageEvent": false,
			"MediaKeys": false,
			"MediaKeySession": false,
			"MediaKeyStatusMap": false,
			"MediaKeySystemAccess": false,
			"MediaList": false,
			"MediaQueryList": false,
			"MediaQueryListEvent": false,
			"MediaSource": false,
			"MediaStreamAudioDestinationNode": false,
			"MediaStreamAudioSourceNode": false,
			"MediaStreamEvent": false,
			"MediaStreamTrack": false,
			"menubar": false,
			"MessageChannel": false,
			"MessageEvent": false,
			"MessagePort": false,
			"MIDIAccess": false,
			"MIDIConnectionEvent": false,
			"MIDIInput": false,
			"MIDIInputMap": false,
			"MIDIMessageEvent": false,
			"MIDIOutput": false,
			"MIDIOutputMap": false,
			"MIDIPort": false,
			"MimeType": false,
			"MimeTypeArray": false,
			"MouseEvent": false,
			"moveBy": false,
			"moveTo": false,
			"MutationEvent": false,
			"MutationObserver": false,
			"MutationRecord": false,
			"name": false,
			"NamedNodeMap": false,
			"navigator": false,
			"Navigator": false,
			"Node": false,
			"NodeFilter": false,
			"NodeIterator": false,
			"NodeList": false,
			"Notification": false,
			"OfflineAudioCompletionEvent": false,
			"OfflineAudioContext": false,
			"offscreenBuffering": false,
			"onbeforeunload": true,
			"onblur": true,
			"onerror": true,
			"onfocus": true,
			"onload": true,
			"onresize": true,
			"onunload": true,
			"open": false,
			"openDatabase": false,
			"opener": false,
			"opera": false,
			"Option": false,
			"OscillatorNode": false,
			"outerHeight": false,
			"outerWidth": false,
			"PageTransitionEvent": false,
			"pageXOffset": false,
			"pageYOffset": false,
			"parent": false,
			"Path2D": false,
			"performance": false,
			"Performance": false,
			"PerformanceEntry": false,
			"PerformanceMark": false,
			"PerformanceMeasure": false,
			"PerformanceNavigation": false,
			"PerformanceResourceTiming": false,
			"PerformanceTiming": false,
			"PeriodicWave": false,
			"Permissions": false,
			"PermissionStatus": false,
			"personalbar": false,
			"Plugin": false,
			"PluginArray": false,
			"PopStateEvent": false,
			"postMessage": false,
			"print": false,
			"ProcessingInstruction": false,
			"ProgressEvent": false,
			"prompt": false,
			"PushManager": false,
			"PushSubscription": false,
			"RadioNodeList": false,
			"Range": false,
			"ReadableByteStream": false,
			"ReadableStream": false,
			"removeEventListener": false,
			"Request": false,
			"requestAnimationFrame": false,
			"resizeBy": false,
			"resizeTo": false,
			"Response": false,
			"RTCIceCandidate": false,
			"RTCSessionDescription": false,
			"screen": false,
			"Screen": false,
			"screenLeft": false,
			"ScreenOrientation": false,
			"screenTop": false,
			"screenX": false,
			"screenY": false,
			"ScriptProcessorNode": false,
			"scroll": false,
			"scrollbars": false,
			"scrollBy": false,
			"scrollTo": false,
			"scrollX": false,
			"scrollY": false,
			"SecurityPolicyViolationEvent": false,
			"Selection": false,
			"self": false,
			"ServiceWorker": false,
			"ServiceWorkerContainer": false,
			"ServiceWorkerRegistration": false,
			"sessionStorage": false,
			"setInterval": false,
			"setTimeout": false,
			"ShadowRoot": false,
			"SharedWorker": false,
			"showModalDialog": false,
			"speechSynthesis": false,
			"SpeechSynthesisEvent": false,
			"SpeechSynthesisUtterance": false,
			"status": false,
			"statusbar": false,
			"stop": false,
			"Storage": false,
			"StorageEvent": false,
			"styleMedia": false,
			"StyleSheet": false,
			"StyleSheetList": false,
			"SubtleCrypto": false,
			"SVGAElement": false,
			"SVGAltGlyphDefElement": false,
			"SVGAltGlyphElement": false,
			"SVGAltGlyphItemElement": false,
			"SVGAngle": false,
			"SVGAnimateColorElement": false,
			"SVGAnimatedAngle": false,
			"SVGAnimatedBoolean": false,
			"SVGAnimatedEnumeration": false,
			"SVGAnimatedInteger": false,
			"SVGAnimatedLength": false,
			"SVGAnimatedLengthList": false,
			"SVGAnimatedNumber": false,
			"SVGAnimatedNumberList": false,
			"SVGAnimatedPathData": false,
			"SVGAnimatedPoints": false,
			"SVGAnimatedPreserveAspectRatio": false,
			"SVGAnimatedRect": false,
			"SVGAnimatedString": false,
			"SVGAnimatedTransformList": false,
			"SVGAnimateElement": false,
			"SVGAnimateMotionElement": false,
			"SVGAnimateTransformElement": false,
			"SVGAnimationElement": false,
			"SVGCircleElement": false,
			"SVGClipPathElement": false,
			"SVGColor": false,
			"SVGColorProfileElement": false,
			"SVGColorProfileRule": false,
			"SVGComponentTransferFunctionElement": false,
			"SVGCSSRule": false,
			"SVGCursorElement": false,
			"SVGDefsElement": false,
			"SVGDescElement": false,
			"SVGDiscardElement": false,
			"SVGDocument": false,
			"SVGElement": false,
			"SVGElementInstance": false,
			"SVGElementInstanceList": false,
			"SVGEllipseElement": false,
			"SVGEvent": false,
			"SVGExternalResourcesRequired": false,
			"SVGFEBlendElement": false,
			"SVGFEColorMatrixElement": false,
			"SVGFEComponentTransferElement": false,
			"SVGFECompositeElement": false,
			"SVGFEConvolveMatrixElement": false,
			"SVGFEDiffuseLightingElement": false,
			"SVGFEDisplacementMapElement": false,
			"SVGFEDistantLightElement": false,
			"SVGFEDropShadowElement": false,
			"SVGFEFloodElement": false,
			"SVGFEFuncAElement": false,
			"SVGFEFuncBElement": false,
			"SVGFEFuncGElement": false,
			"SVGFEFuncRElement": false,
			"SVGFEGaussianBlurElement": false,
			"SVGFEImageElement": false,
			"SVGFEMergeElement": false,
			"SVGFEMergeNodeElement": false,
			"SVGFEMorphologyElement": false,
			"SVGFEOffsetElement": false,
			"SVGFEPointLightElement": false,
			"SVGFESpecularLightingElement": false,
			"SVGFESpotLightElement": false,
			"SVGFETileElement": false,
			"SVGFETurbulenceElement": false,
			"SVGFilterElement": false,
			"SVGFilterPrimitiveStandardAttributes": false,
			"SVGFitToViewBox": false,
			"SVGFontElement": false,
			"SVGFontFaceElement": false,
			"SVGFontFaceFormatElement": false,
			"SVGFontFaceNameElement": false,
			"SVGFontFaceSrcElement": false,
			"SVGFontFaceUriElement": false,
			"SVGForeignObjectElement": false,
			"SVGGElement": false,
			"SVGGeometryElement": false,
			"SVGGlyphElement": false,
			"SVGGlyphRefElement": false,
			"SVGGradientElement": false,
			"SVGGraphicsElement": false,
			"SVGHKernElement": false,
			"SVGICCColor": false,
			"SVGImageElement": false,
			"SVGLangSpace": false,
			"SVGLength": false,
			"SVGLengthList": false,
			"SVGLinearGradientElement": false,
			"SVGLineElement": false,
			"SVGLocatable": false,
			"SVGMarkerElement": false,
			"SVGMaskElement": false,
			"SVGMatrix": false,
			"SVGMetadataElement": false,
			"SVGMissingGlyphElement": false,
			"SVGMPathElement": false,
			"SVGNumber": false,
			"SVGNumberList": false,
			"SVGPaint": false,
			"SVGPathElement": false,
			"SVGPathSeg": false,
			"SVGPathSegArcAbs": false,
			"SVGPathSegArcRel": false,
			"SVGPathSegClosePath": false,
			"SVGPathSegCurvetoCubicAbs": false,
			"SVGPathSegCurvetoCubicRel": false,
			"SVGPathSegCurvetoCubicSmoothAbs": false,
			"SVGPathSegCurvetoCubicSmoothRel": false,
			"SVGPathSegCurvetoQuadraticAbs": false,
			"SVGPathSegCurvetoQuadraticRel": false,
			"SVGPathSegCurvetoQuadraticSmoothAbs": false,
			"SVGPathSegCurvetoQuadraticSmoothRel": false,
			"SVGPathSegLinetoAbs": false,
			"SVGPathSegLinetoHorizontalAbs": false,
			"SVGPathSegLinetoHorizontalRel": false,
			"SVGPathSegLinetoRel": false,
			"SVGPathSegLinetoVerticalAbs": false,
			"SVGPathSegLinetoVerticalRel": false,
			"SVGPathSegList": false,
			"SVGPathSegMovetoAbs": false,
			"SVGPathSegMovetoRel": false,
			"SVGPatternElement": false,
			"SVGPoint": false,
			"SVGPointList": false,
			"SVGPolygonElement": false,
			"SVGPolylineElement": false,
			"SVGPreserveAspectRatio": false,
			"SVGRadialGradientElement": false,
			"SVGRect": false,
			"SVGRectElement": false,
			"SVGRenderingIntent": false,
			"SVGScriptElement": false,
			"SVGSetElement": false,
			"SVGStopElement": false,
			"SVGStringList": false,
			"SVGStylable": false,
			"SVGStyleElement": false,
			"SVGSVGElement": false,
			"SVGSwitchElement": false,
			"SVGSymbolElement": false,
			"SVGTests": false,
			"SVGTextContentElement": false,
			"SVGTextElement": false,
			"SVGTextPathElement": false,
			"SVGTextPositioningElement": false,
			"SVGTitleElement": false,
			"SVGTransform": false,
			"SVGTransformable": false,
			"SVGTransformList": false,
			"SVGTRefElement": false,
			"SVGTSpanElement": false,
			"SVGUnitTypes": false,
			"SVGURIReference": false,
			"SVGUseElement": false,
			"SVGViewElement": false,
			"SVGViewSpec": false,
			"SVGVKernElement": false,
			"SVGZoomAndPan": false,
			"SVGZoomEvent": false,
			"Text": false,
			"TextDecoder": false,
			"TextEncoder": false,
			"TextEvent": false,
			"TextMetrics": false,
			"TextTrack": false,
			"TextTrackCue": false,
			"TextTrackCueList": false,
			"TextTrackList": false,
			"TimeEvent": false,
			"TimeRanges": false,
			"toolbar": false,
			"top": false,
			"Touch": false,
			"TouchEvent": false,
			"TouchList": false,
			"TrackEvent": false,
			"TransitionEvent": false,
			"TreeWalker": false,
			"UIEvent": false,
			"URL": false,
			"ValidityState": false,
			"VTTCue": false,
			"WaveShaperNode": false,
			"WebGLActiveInfo": false,
			"WebGLBuffer": false,
			"WebGLContextEvent": false,
			"WebGLFramebuffer": false,
			"WebGLProgram": false,
			"WebGLRenderbuffer": false,
			"WebGLRenderingContext": false,
			"WebGLShader": false,
			"WebGLShaderPrecisionFormat": false,
			"WebGLTexture": false,
			"WebGLUniformLocation": false,
			"WebSocket": false,
			"WheelEvent": false,
			"window": false,
			"Window": false,
			"Worker": false,
			"XDomainRequest": false,
			"XMLDocument": false,
			"XMLHttpRequest": false,
			"XMLHttpRequestEventTarget": false,
			"XMLHttpRequestProgressEvent": false,
			"XMLHttpRequestUpload": false,
			"XMLSerializer": false,
			"XPathEvaluator": false,
			"XPathException": false,
			"XPathExpression": false,
			"XPathNamespace": false,
			"XPathNSResolver": false,
			"XPathResult": false,
			"XSLTProcessor": false
		},
		"worker": {
			"applicationCache": false,
			"atob": false,
			"BroadcastChannel": false,
			"btoa": false,
			"Cache": false,
			"caches": false,
			"clearInterval": false,
			"clearTimeout": false,
			"close": true,
			"console": false,
			"fetch": false,
			"FileReaderSync": false,
			"FormData": false,
			"Headers": false,
			"IDBCursor": false,
			"IDBCursorWithValue": false,
			"IDBDatabase": false,
			"IDBFactory": false,
			"IDBIndex": false,
			"IDBKeyRange": false,
			"IDBObjectStore": false,
			"IDBOpenDBRequest": false,
			"IDBRequest": false,
			"IDBTransaction": false,
			"IDBVersionChangeEvent": false,
			"ImageData": false,
			"importScripts": true,
			"indexedDB": false,
			"location": false,
			"MessageChannel": false,
			"MessagePort": false,
			"name": false,
			"navigator": false,
			"Notification": false,
			"onclose": true,
			"onconnect": true,
			"onerror": true,
			"onlanguagechange": true,
			"onmessage": true,
			"onoffline": true,
			"ononline": true,
			"onrejectionhandled": true,
			"onunhandledrejection": true,
			"performance": false,
			"Performance": false,
			"PerformanceEntry": false,
			"PerformanceMark": false,
			"PerformanceMeasure": false,
			"PerformanceNavigation": false,
			"PerformanceResourceTiming": false,
			"PerformanceTiming": false,
			"postMessage": true,
			"Promise": false,
			"Request": false,
			"Response": false,
			"self": true,
			"ServiceWorkerRegistration": false,
			"setInterval": false,
			"setTimeout": false,
			"TextDecoder": false,
			"TextEncoder": false,
			"URL": false,
			"WebSocket": false,
			"Worker": false,
			"XMLHttpRequest": false
		},
		"node": {
			"__dirname": false,
			"__filename": false,
			"arguments": false,
			"Buffer": false,
			"clearImmediate": false,
			"clearInterval": false,
			"clearTimeout": false,
			"console": false,
			"exports": true,
			"GLOBAL": false,
			"global": false,
			"module": false,
			"process": false,
			"require": false,
			"root": false,
			"setImmediate": false,
			"setInterval": false,
			"setTimeout": false
		},
		"commonjs": {
			"exports": true,
			"module": false,
			"require": false
		},
		"amd": {
			"define": false,
			"require": false
		},
		"mocha": {
			"after": false,
			"afterEach": false,
			"before": false,
			"beforeEach": false,
			"context": false,
			"describe": false,
			"it": false,
			"mocha": false,
			"setup": false,
			"specify": false,
			"suite": false,
			"suiteSetup": false,
			"suiteTeardown": false,
			"teardown": false,
			"test": false,
			"xcontext": false,
			"xdescribe": false,
			"xit": false,
			"xspecify": false
		},
		"jasmine": {
			"afterAll": false,
			"afterEach": false,
			"beforeAll": false,
			"beforeEach": false,
			"describe": false,
			"expect": false,
			"fail": false,
			"fdescribe": false,
			"fit": false,
			"it": false,
			"jasmine": false,
			"pending": false,
			"runs": false,
			"spyOn": false,
			"waits": false,
			"waitsFor": false,
			"xdescribe": false,
			"xit": false
		},
		"jest": {
			"afterEach": false,
			"beforeEach": false,
			"describe": false,
			"expect": false,
			"it": false,
			"jest": false,
			"pit": false,
			"require": false,
			"xdescribe": false,
			"xit": false
		},
		"qunit": {
			"asyncTest": false,
			"deepEqual": false,
			"equal": false,
			"expect": false,
			"module": false,
			"notDeepEqual": false,
			"notEqual": false,
			"notOk": false,
			"notPropEqual": false,
			"notStrictEqual": false,
			"ok": false,
			"propEqual": false,
			"QUnit": false,
			"raises": false,
			"start": false,
			"stop": false,
			"strictEqual": false,
			"test": false,
			"throws": false
		},
		"phantomjs": {
			"console": true,
			"exports": true,
			"phantom": true,
			"require": true,
			"WebPage": true
		},
		"couch": {
			"emit": false,
			"exports": false,
			"getRow": false,
			"log": false,
			"module": false,
			"provides": false,
			"require": false,
			"respond": false,
			"send": false,
			"start": false,
			"sum": false
		},
		"rhino": {
			"defineClass": false,
			"deserialize": false,
			"gc": false,
			"help": false,
			"importClass": false,
			"importPackage": false,
			"java": false,
			"load": false,
			"loadClass": false,
			"Packages": false,
			"print": false,
			"quit": false,
			"readFile": false,
			"readUrl": false,
			"runCommand": false,
			"seal": false,
			"serialize": false,
			"spawn": false,
			"sync": false,
			"toint32": false,
			"version": false
		},
		"nashorn": {
			"__DIR__": false,
			"__FILE__": false,
			"__LINE__": false,
			"com": false,
			"edu": false,
			"exit": false,
			"Java": false,
			"java": false,
			"javafx": false,
			"JavaImporter": false,
			"javax": false,
			"JSAdapter": false,
			"load": false,
			"loadWithNewGlobal": false,
			"org": false,
			"Packages": false,
			"print": false,
			"quit": false
		},
		"wsh": {
			"ActiveXObject": true,
			"Enumerator": true,
			"GetObject": true,
			"ScriptEngine": true,
			"ScriptEngineBuildVersion": true,
			"ScriptEngineMajorVersion": true,
			"ScriptEngineMinorVersion": true,
			"VBArray": true,
			"WScript": true,
			"WSH": true,
			"XDomainRequest": true
		},
		"jquery": {
			"$": false,
			"jQuery": false
		},
		"yui": {
			"Y": false,
			"YUI": false,
			"YUI_config": false
		},
		"shelljs": {
			"cat": false,
			"cd": false,
			"chmod": false,
			"config": false,
			"cp": false,
			"dirs": false,
			"echo": false,
			"env": false,
			"error": false,
			"exec": false,
			"exit": false,
			"find": false,
			"grep": false,
			"ls": false,
			"mkdir": false,
			"mv": false,
			"popd": false,
			"pushd": false,
			"pwd": false,
			"rm": false,
			"sed": false,
			"target": false,
			"tempdir": false,
			"test": false,
			"which": false
		},
		"prototypejs": {
			"$": false,
			"$$": false,
			"$A": false,
			"$break": false,
			"$continue": false,
			"$F": false,
			"$H": false,
			"$R": false,
			"$w": false,
			"Abstract": false,
			"Ajax": false,
			"Autocompleter": false,
			"Builder": false,
			"Class": false,
			"Control": false,
			"Draggable": false,
			"Draggables": false,
			"Droppables": false,
			"Effect": false,
			"Element": false,
			"Enumerable": false,
			"Event": false,
			"Field": false,
			"Form": false,
			"Hash": false,
			"Insertion": false,
			"ObjectRange": false,
			"PeriodicalExecuter": false,
			"Position": false,
			"Prototype": false,
			"Scriptaculous": false,
			"Selector": false,
			"Sortable": false,
			"SortableObserver": false,
			"Sound": false,
			"Template": false,
			"Toggle": false,
			"Try": false
		},
		"meteor": {
			"$": false,
			"_": false,
			"Accounts": false,
			"App": false,
			"Assets": false,
			"Blaze": false,
			"check": false,
			"Cordova": false,
			"DDP": false,
			"DDPServer": false,
			"Deps": false,
			"EJSON": false,
			"Email": false,
			"HTTP": false,
			"Log": false,
			"Match": false,
			"Meteor": false,
			"Mongo": false,
			"MongoInternals": false,
			"Npm": false,
			"Package": false,
			"Plugin": false,
			"process": false,
			"Random": false,
			"ReactiveDict": false,
			"ReactiveVar": false,
			"Router": false,
			"Session": false,
			"share": false,
			"Spacebars": false,
			"Template": false,
			"Tinytest": false,
			"Tracker": false,
			"UI": false,
			"Utils": false,
			"WebApp": false,
			"WebAppInternals": false
		},
		"mongo": {
			"_isWindows": false,
			"_rand": false,
			"BulkWriteResult": false,
			"cat": false,
			"cd": false,
			"connect": false,
			"db": false,
			"getHostName": false,
			"getMemInfo": false,
			"hostname": false,
			"listFiles": false,
			"load": false,
			"ls": false,
			"md5sumFile": false,
			"mkdir": false,
			"Mongo": false,
			"ObjectId": false,
			"PlanCache": false,
			"pwd": false,
			"quit": false,
			"removeFile": false,
			"rs": false,
			"sh": false,
			"UUID": false,
			"version": false,
			"WriteResult": false
		},
		"applescript": {
			"$": false,
			"Application": false,
			"Automation": false,
			"console": false,
			"delay": false,
			"Library": false,
			"ObjC": false,
			"ObjectSpecifier": false,
			"Path": false,
			"Progress": false,
			"Ref": false
		},
		"serviceworker": {
			"caches": false,
			"Cache": false,
			"CacheStorage": false,
			"Client": false,
			"clients": false,
			"Clients": false,
			"ExtendableEvent": false,
			"ExtendableMessageEvent": false,
			"FetchEvent": false,
			"importScripts": false,
			"registration": false,
			"self": false,
			"ServiceWorker": false,
			"ServiceWorkerContainer": false,
			"ServiceWorkerGlobalScope": false,
			"ServiceWorkerMessageEvent": false,
			"ServiceWorkerRegistration": false,
			"skipWaiting": false,
			"WindowClient": false
		},
		"embertest": {
			"andThen": false,
			"click": false,
			"currentPath": false,
			"currentRouteName": false,
			"currentUrl": false,
			"fillIn": false,
			"find": false,
			"keyEvent": false,
			"triggerEvent": false,
			"visit": false
		},
		"protractor": {
			"$": false,
			"$$": false,
			"browser": false,
			"By": false,
			"by": false,
			"DartObject": false,
			"element": false,
			"protractor": false
		},
		"shared-node-browser": {
			"clearInterval": false,
			"clearTimeout": false,
			"console": false,
			"setInterval": false,
			"setTimeout": false
		},
		"webextensions": {
			"browser": false,
			"chrome": false,
			"opr": false
		}
	};
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 35 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* eslint-env amd */
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	__webpack_require__(32), 
	__webpack_require__(62), 
	__webpack_require__(33), 
	__webpack_require__(36), 
	__webpack_require__(53),
	__webpack_require__(58),
	__webpack_require__(60),
	__webpack_require__, 
	module,
	__webpack_require__(64),
	__webpack_require__(66),
	__webpack_require__(67),
	__webpack_require__(68),
	__webpack_require__(69)
	], __WEBPACK_AMD_DEFINE_RESULT__ = function(estraverse, escope, environments, rules, util, RuleContext, events, require, module, SourceCode, NodeEventGenerator,CommentEventGenerator, validator, Replacements) {
	
	/**
	 * @fileoverview Main ESLint object.
	 * @author Nicholas C. Zakas
	 */
	"use strict";
	var EventEmitter = events.EventEmitter;
	var assign = util.mixin;
	var replacements = Replacements;
	var DEFAULT_PARSER = ""; // ORION we don't need a default parser
	
	//------------------------------------------------------------------------------
	// Helpers
	//------------------------------------------------------------------------------
	
	/**
	 * Parses a list of "name:boolean_value" or/and "name" options divided by comma or
	 * whitespace.
	 * @param {string} string The string to parse.
	 * @param {Comment} comment The comment node which has the string.
	 * @returns {Object} Result map object of names and boolean values
	 */
	function parseBooleanConfig(string, comment) {
	    var items = {};
	    // Collapse whitespace around : to make parsing easier
	    string = string.replace(/\s*:\s*/g, ":");
	    // Collapse whitespace around ,
	    string = string.replace(/\s*,\s*/g, ",");
	    string.split(/\s|,+/).forEach(function(name) {
	        if (!name) {
	            return;
	        }
	        var pos = name.indexOf(":"),
	            value;
	        if (pos !== -1) {
	            value = name.substring(pos + 1, name.length);
	            name = name.substring(0, pos);
	        }
	
	        items[name] = {
	            value: (value === "true"),
	            comment: comment
	        };
	
	    });
	    return items;
	}
	
	/**
	 * Parses a JSON-like config.
	 * @param {string} string The string to parse.
	 * @param {Object} location Start line and column of comments for potential error message.
	 * @param {Object[]} messages The messages queue for potential error message.
	 * @returns {Object} Result map object
	 */
	function parseJsonConfig(string, location, messages) {
	    var items = {};
	    string = string.replace(/([a-zA-Z0-9\-\/]+):/g, "\"$1\":").replace(/(\]|[0-9])\s+(?=")/, "$1,");
	    try {
	        items = JSON.parse("{" + string + "}");
	    } catch (ex) {
	
	        messages.push({
	            fatal: true,
	            severity: 2,
	            message: "Failed to parse JSON from '" + string + "': " + ex.message,
	            line: location.start.line,
	            column: location.start.column + 1
	        });
	
	    }
	
	    return items;
	}
	
	/**
	 * Parses a config of values separated by comma.
	 * @param {string} string The string to parse.
	 * @returns {Object} Result map of values and true values
	 */
	function parseListConfig(string) {
	    var items = {};
	    // Collapse whitespace around ,
	    string = string.replace(/\s*,\s*/g, ",");
	    string.split(/,+/).forEach(function(name) {
	        name = name.trim();
	        if (!name) {
	            return;
	        }
	        items[name] = true;
	    });
	    return items;
	}
	
	/**
	 * @param {Scope} scope The scope object to check.
	 * @param {string} name The name of the variable to look up.
	 * @returns {Variable} The variable object if found or null if not.
	 */
	function getVariable(scope, name) {
	    var variable = null;
	    scope.variables.some(function(v) {
	        if (v.name === name) {
	            variable = v;
	            return true;
	        } else {
	            return false;
	        }
	
	    });
	    return variable;
	}
	
	/**
	 * Ensures that variables representing built-in properties of the Global Object,
	 * and any globals declared by special block comments, are present in the global
	 * scope.
	 * @param {ASTNode} program The top node of the AST.
	 * @param {Scope} globalScope The global scope.
	 * @param {Object} config The existing configuration data.
	 * @returns {void}
	 */
	function addDeclaredGlobals(program, globalScope, config) {
	    var declaredGlobals = {},
	        exportedGlobals = {},
	        explicitGlobals = {},
	        builtin = environments.builtin;
	
	    assign(declaredGlobals, builtin);
	
	    Object.keys(config.env).forEach(function(name) {
	        if (config.env[name]) {
	            var environmentGlobals = environments[name] && environments[name].globals;
	            if (environmentGlobals) {
	                assign(declaredGlobals, environmentGlobals);
	            }
	        }
	    });
	
	    assign(exportedGlobals, config.exported);
	    assign(declaredGlobals, config.globals);
	    assign(explicitGlobals, config.astGlobals);
	
	    Object.keys(declaredGlobals).forEach(function(name) {
	        var variable = getVariable(globalScope, name);
	        if (!variable) {
	            variable = new escope.Variable(name, globalScope);
	            variable.eslintExplicitGlobal = false;
	            globalScope.variables.push(variable);
	        }
	        variable.writeable = declaredGlobals[name];
	    });
	
	    Object.keys(explicitGlobals).forEach(function(name) {
	        var variable = getVariable(globalScope, name);
	        if (!variable) {
	            variable = new escope.Variable(name, globalScope);
	            variable.eslintExplicitGlobal = true;
	            variable.eslintExplicitGlobalComment = explicitGlobals[name].comment;
	            globalScope.variables.push(variable);
	        }
	        variable.writeable = explicitGlobals[name].value;
	    });
	
	    // mark all exported variables as such
	    Object.keys(exportedGlobals).forEach(function(name) {
	        var variable = getVariable(globalScope, name);
	        if (variable) {
	            variable.eslintUsed = true;
	        }
	    });
	}
	
	/**
	 * Add data to reporting configuration to disable reporting for list of rules
	 * starting from start location
	 * @param  {Object[]} reportingConfig Current reporting configuration
	 * @param  {Object} start Position to start
	 * @param  {string[]} rulesToDisable List of rules
	 * @returns {void}
	 */
	function disableReporting(reportingConfig, start, rulesToDisable) {
	
	    if (rulesToDisable.length) {
	        rulesToDisable.forEach(function(rule) {
	            reportingConfig.push({
	                start: start,
	                end: null,
	                rule: rule
	            });
	        });
	    } else {
	        reportingConfig.push({
	            start: start,
	            end: null,
	            rule: null
	        });
	    }
	}
	
	/**
	 * Add data to reporting configuration to enable reporting for list of rules
	 * starting from start location
	 * @param  {Object[]} reportingConfig Current reporting configuration
	 * @param  {Object} start Position to start
	 * @param  {string[]} rulesToEnable List of rules
	 * @returns {void}
	 */
	function enableReporting(reportingConfig, start, rulesToEnable) {
	    var i;
	
	    if (rulesToEnable.length) {
	        rulesToEnable.forEach(function(rule) {
	            for (i = reportingConfig.length - 1; i >= 0; i--) {
	                if (!reportingConfig[i].end && reportingConfig[i].rule === rule ) {
	                    reportingConfig[i].end = start;
	                    break;
	                }
	            }
	        });
	    } else {
	        // find all previous disabled locations if they was started as list of rules
	        var prevStart;
	        for (i = reportingConfig.length - 1; i >= 0; i--) {
	            if (prevStart && prevStart !== reportingConfig[i].start) {
	                break;
	            }
	
	            if (!reportingConfig[i].end) {
	                reportingConfig[i].end = start;
	                prevStart = reportingConfig[i].start;
	            }
	        }
	    }
	}
	
	/**
	 * Parses comments in file to extract file-specific config of rules, globals
	 * and environments and merges them with global config; also code blocks
	 * where reporting is disabled or enabled and merges them with reporting config.
	 * @param {string} filename The file being checked.
	 * @param {ASTNode} ast The top node of the AST.
	 * @param {Object} config The existing configuration data.
	 * @param {Object[]} reportingConfig The existing reporting configuration data.
	 * @param {Object[]} messages The messages queue.
	 * @returns {object} Modified config object
	 */
	function modifyConfigsFromComments(filename, ast, config, reportingConfig, messages) {
	
	    var commentConfig = {
	        exported: {},
	        astGlobals: {},
	        rules: {},
	        env: {}
	    };
	    var commentRules = {};
	
	    ast.comments.forEach(function(comment) {
	
	        var value = comment.value.trim();
	        var match = /^(eslint-\w+|eslint-\w+-\w+|eslint|exported|globals?)(\s|$)/.exec(value);
	
	        if (match) {
	            value = value.substring(match.index + match[1].length);
	
	            if (comment.type === "Block") {
	                switch (match[1]) {
	                    case "exported":
	                        assign(commentConfig.exported, parseBooleanConfig(value, comment));
	                        break;
	
	                    case "globals":
	                    case "global":
	                        assign(commentConfig.astGlobals, parseBooleanConfig(value, comment));
	                        break;
	
	                    case "eslint-env":
	                        assign(commentConfig.env, parseListConfig(value));
	                        break;
	
	                    case "eslint-disable":
	                        disableReporting(reportingConfig, comment.loc.start, Object.keys(parseListConfig(value)));
	                        break;
	
	                    case "eslint-enable":
	                        enableReporting(reportingConfig, comment.loc.start, Object.keys(parseListConfig(value)));
	                        break;
	
	                    case "eslint":
	                        var items = parseJsonConfig(value, comment.loc, messages);
	                        Object.keys(items).forEach(function(name) {
	                            var ruleValue = items[name];
	                            validator.validateRuleOptions(name, ruleValue, filename + " line " + comment.loc.start.line);
	                            commentRules[name] = ruleValue;
	                        });
	                        break;
	
	                    // no default
	                }
	            } else {
	                // comment.type === "Line"
	                if (match[1] === "eslint-disable-line") {
	                    disableReporting(reportingConfig, { "line": comment.loc.start.line, "column": 0 }, Object.keys(parseListConfig(value)));
	                    enableReporting(reportingConfig, comment.loc.end, Object.keys(parseListConfig(value)));
	                }
	            }
	        }
	    });
	
	    // apply environment configs
	    Object.keys(commentConfig.env).forEach(function(name) {
	        if (environments[name]) {
	            commentConfig = util.mergeConfigs(commentConfig, environments[name]);
	        }
	    });
	    assign(commentConfig.rules, commentRules);
	
	    return util.mergeConfigs(config, commentConfig);
	}
	
	/**
	 * Check if message of rule with ruleId should be ignored in location
	 * @param  {Object[]} reportingConfig  Collection of ignore records
	 * @param  {string} ruleId   Id of rule
	 * @param  {Object} location Location of message
	 * @returns {boolean}          True if message should be ignored, false otherwise
	 */
	function isDisabledByReportingConfig(reportingConfig, ruleId, location) {
	
	    for (var i = 0, c = reportingConfig.length; i < c; i++) {
	
	        var ignore = reportingConfig[i];
	        if ((!ignore.rule || ignore.rule === ruleId) &&
	            (location.line > ignore.start.line || (location.line === ignore.start.line && location.column >= ignore.start.column)) &&
	            (!ignore.end || (location.line < ignore.end.line || (location.line === ignore.end.line && location.column <= ignore.end.column)))) {
	            return true;
	        }
	    }
	
	    return false;
	}
	
	/**
	 * Process initial config to make it safe to extend by file comment config
	 * @param  {Object} config Initial config
	 * @returns {Object}        Processed config
	 */
	function prepareConfig(config) {
	
	    config.globals = config.globals || config.global || {};
	    delete config.global;
	
	    var copiedRules = {},
	        ecmaFeatures = {},
	        preparedConfig;
	
	    if (typeof config.rules === "object") {
	        Object.keys(config.rules).forEach(function(k) {
	            var rule = config.rules[k];
	            if (rule === null) {
	                throw new Error("Invalid config for rule '" + k + "'\.");
	            }
	            if (Array.isArray(rule)) {
	                copiedRules[k] = rule.slice();
	            } else {
	                copiedRules[k] = rule;
	            }
	        });
	    }
	
	    // merge in environment ecmaFeatures
	    if (typeof config.env === "object") {
	        Object.keys(config.env).forEach(function(env) {
	            if (config.env[env] && environments[env] && environments[env].ecmaFeatures) {
	                assign(ecmaFeatures, environments[env].ecmaFeatures);
	            }
	        });
	    }
	
	    preparedConfig = {
	        rules: copiedRules,
	        parser: config.parser || DEFAULT_PARSER,
	        globals: util.mergeConfigs({}, config.globals),
	        env: util.mergeConfigs({}, config.env || {}),
	        settings: util.mergeConfigs({}, config.settings || {}),
	        ecmaFeatures: util.mergeConfigs(ecmaFeatures, config.ecmaFeatures || {}),
	        tern: config.tern
	    };
	
	    // can't have global return inside of modules
	    if (preparedConfig.ecmaFeatures.modules) {
	        preparedConfig.ecmaFeatures.globalReturn = false;
	    }
	
	    return preparedConfig;
	}
	
	/**
	 * Provide a stub rule with a given message
	 * @param  {string} message The message to be displayed for the rule
	 * @returns {Function}      Stub rule function
	 */
	function createStubRule(message) {
	
	    /**
	     * Creates a fake rule object
	     * @param {object} context context object for each rule
	     * @returns {object} collection of node to listen on
	     */
	    function createRuleModule(context) {
	        return {
	            Program: function(node) {
	                context.report(node, message);
	            }
	        };
	    }
	
	    if (message) {
	        return createRuleModule;
	    }
	    throw new Error("No message passed to stub rule");
	}
	
	/**
	 * Provide a rule replacement message
	 * @param  {string} ruleId Name of the rule
	 * @returns {string}       Message detailing rule replacement
	 */
	function getRuleReplacementMessage(ruleId) {
	    if (ruleId in replacements.rules) {
	        var newRules = replacements.rules[ruleId];
	        return "Rule \'" + ruleId + "\' was removed and replaced by: " + newRules.join(", ");
	    }
	}
	
	var eslintEnvPattern = /\/\*\s*eslint-env\s(.+?)\*\//g;
	
	/**
	 * Checks whether or not there is a comment which has "eslint-env *" in a given text.
	 * @param {string} text - A source code text to check.
	 * @returns {object|null} A result of parseListConfig() with "eslint-env *" comment.
	 */
	function findEslintEnv(text) {
	    var match, retv;
	
	    eslintEnvPattern.lastIndex = 0;
	    while ((match = eslintEnvPattern.exec(text))) {
	        retv = assign(retv || {}, parseListConfig(match[1]));
	    }
	
	    return retv;
	}
	
	//------------------------------------------------------------------------------
	// Public Interface
	//------------------------------------------------------------------------------
	
	/**
	 * Object that is responsible for verifying JavaScript text
	 * @name eslint
	 */
	module.exports = (function() {
	
	    var api = Object.create(new EventEmitter()),
	        messages = [],
	        currentConfig = null,
	        currentScopes = null,
	        scopeMap = null,
	        scopeManager = null,
	        currentFilename = null,
	        controller = null,
	        reportingConfig = [],
	        sourceCode = null;
	
	    /**
	     * Parses text into an AST. Moved out here because the try-catch prevents
	     * optimization of functions, so it's best to keep the try-catch as isolated
	     * as possible
	     * @param {string} text The text to parse.
	     * @param {Object} config The ESLint configuration object.
	     * @returns {ASTNode} The AST if successful or null if not.
	     * @private
	     */
	    function parse(text, config) {
	
	        var parser;
	
	        try {
	            parser = __webpack_require__(70)(config.parser);
	        } catch (ex) {
	            messages.push({
	                fatal: true,
	                severity: 2,
	                message: ex.message,
	                line: 0,
	                column: 0
	            });
	
	            return null;
	        }
	
	        /*
	         * Check for parsing errors first. If there's a parsing error, nothing
	         * else can happen. However, a parsing error does not throw an error
	         * from this method - it's just considered a fatal error message, a
	         * problem that ESLint identified just like any other.
	         */
	        try {
	            return parser.parse(text, {
	                loc: true,
	                range: true,
	                raw: true,
	                tokens: true,
	                comment: true,
	                attachComment: true,
	                ecmaFeatures: config.ecmaFeatures
	            });
	        } catch (ex) {
	
	            // If the message includes a leading line number, strip it:
	            var message = ex.message.replace(/^line \d+:/i, "").trim();
	
	            messages.push({
	                fatal: true,
	                severity: 2,
	
	                message: "Parsing error: " + message,
	
	                line: ex.lineNumber,
	                column: ex.column + 1
	            });
	
	            return null;
	        }
	    }
	
	    /**
	     * Get the severity level of a rule (0 - none, 1 - warning, 2 - error)
	     * Returns 0 if the rule config is not valid (an Array or a number)
	     * @param {Array|number} ruleConfig rule configuration
	     * @returns {number} 0, 1, or 2, indicating rule severity
	     */
	    function getRuleSeverity(ruleConfig) {
	        if (typeof ruleConfig === "number") {
	            return ruleConfig;
	        } else if (Array.isArray(ruleConfig)) {
	            return ruleConfig[0];
	        }
	        return 0;
	    }
	
	    /**
	     * Get the options for a rule (not including severity), if any
	     * @param {Array|number} ruleConfig rule configuration
	     * @returns {Array} of rule options, empty Array if none
	     */
	    function getRuleOptions(ruleConfig) {
	        if (Array.isArray(ruleConfig)) {
	            return ruleConfig.slice(1);
	        }
	        return [];
	    }
	
	    // set unlimited listeners (see https://github.com/eslint/eslint/issues/524)
	    api.setMaxListeners(0);
	
	    /**
	     * Resets the internal state of the object.
	     * @returns {void}
	     */
	    api.reset = function() {
	        this.removeAllListeners();
	        messages = [];
	        currentConfig = null;
	        currentScopes = null;
	        scopeMap = null;
	        scopeManager = null;
	        controller = null;
	        reportingConfig = [];
	        sourceCode = null;
	    };
	
	    /**
	     * Verifies the text against the rules specified by the second argument.
	     * @param {string|SourceCode} textOrSourceCode The text to parse or a SourceCode object.
	     * @param {Object} config An object whose keys specify the rules to use.
	     * @param {string=} filename The optional filename of the file being checked.
	     *      If this is not set, the filename will default to '<input>' in the rule context.
	     * @param {boolean=} saveState Indicates if the state from the last run should be saved.
	     *      Mostly useful for testing purposes.
	     * @returns {Object[]} The results as an array of messages or null if no messages.
	     */
	    api.verify = function(textOrSourceCode, config, filename, saveState) {
	
	        var ast,
	            shebang,
	            ecmaFeatures,
	            ecmaVersion,
	            text = typeof textOrSourceCode === "string" ? textOrSourceCode : null;
	
	        // set the current parsed filename
	        currentFilename = filename;
	
	        if (!saveState) {
	            this.reset();
	        }
	
	        // search and apply "eslint-env *".
	        var envInFile = findEslintEnv(text || textOrSourceCode.text);
	        if (envInFile) {
	            if (!config || !config.env) {
	                config = assign({}, config || {}, {env: envInFile});
	            } else {
	                config = assign({}, config);
	                config.env = assign({}, config.env, envInFile);
	            }
	        }
	
	        // process initial config to make it safe to extend
	        config = prepareConfig(config || {});
	
	        // only do this for text
	        if (text !== null) {
	
	            // there's no input, just exit here
	            if (text.trim().length === 0) {
	                //sourceCode = new SourceCode(text, require("../conf/blank-script.json")); // ORION this code is never used as we always get an ast from tern
	                return messages;
	            }
	
	            ast = parse(text.replace(/^#!([^\r\n]+)/, /* @callback */ function(match, captured) {
	                shebang = captured;
	                return "//" + captured;
	            }), config);
	
	            if (ast) {
	                sourceCode = new SourceCode(text, ast);
	            }
	
	        } else {
	            sourceCode = textOrSourceCode;
	            ast = sourceCode.ast;
	        }
	
	        // if espree failed to parse the file, there's no sense in setting up rules
	        if (ast) {
	
	            // parse global comments and modify config
	            config = modifyConfigsFromComments(filename, ast, config, reportingConfig, messages);
	
	            // enable appropriate rules
	            Object.keys(config.rules).filter(function(key) {
	                return getRuleSeverity(config.rules[key]) > 0;
	            }).forEach(function(key) {
	                var ruleCreator,
	                    severity,
	                    options,
	                    rule;
	
	                ruleCreator = rules.get(key);
	                if (!ruleCreator) {
	                    var replacementMsg = getRuleReplacementMessage(key);
	                    if (replacementMsg) {
	                        ruleCreator = createStubRule(replacementMsg);
	                    } else {
	                        ruleCreator = createStubRule("Definition for rule '" + key + "' was not found");
	                    }
	                    rules.define(key, ruleCreator);
	                }
	
	                severity = getRuleSeverity(config.rules[key]);
	                options = getRuleOptions(config.rules[key]);
	                
	                var settings = config.settings;
	                if (!settings) {
	                		settings = Object.create(null);
	                	}
	                	settings.tern = config.tern;
	
	                try {
	                    rule = ruleCreator(new RuleContext(
	                        key, api, severity, options,
	                        settings, config.ecmaFeatures, config.env // ORION
	                    ));
	
	                    // add all the node types as listeners
	                    Object.keys(rule).forEach(function(nodeType) {
	                        api.on(nodeType, rule[nodeType]); // ORION remove timing usage as timing was always disabled
	                    });
	                } catch (ex) {
	                    ex.message = "Error while loading rule '" + key + "': " + ex.message;
	                    throw ex;
	                }
	            });
	
	            // save config so rules can access as necessary
	            currentConfig = config;
	            controller = new estraverse.Controller();
	
	            ecmaFeatures = currentConfig.ecmaFeatures;
	            ecmaVersion = ecmaFeatures.blockBindings || ecmaFeatures.classes ||
	                    ecmaFeatures.modules || ecmaFeatures.defaultParams ||
	                    ecmaFeatures.destructuring ? 6 : 5;
	
	
	            // gather data that may be needed by the rules
	            scopeManager = escope.analyze(ast, {
	                ignoreEval: true,
	                nodejsScope: ecmaFeatures.globalReturn,
	                ecmaVersion: ecmaVersion,
	                sourceType: ecmaFeatures.modules ? "module" : "script"
	            });
	            currentScopes = scopeManager.scopes;
	
	            /*
	             * Index the scopes by the start range of their block for efficient
	             * lookup in getScope.
	             */
	            scopeMap = [];
	            currentScopes.forEach(function(scope, index) {
	                var range = scope.block.range[0];
	
	                // Sometimes two scopes are returned for a given node. This is
	                // handled later in a known way, so just don't overwrite here.
	                if (!scopeMap[range]) {
	                    scopeMap[range] = index;
	                }
	            });
	
	            // augment global scope with declared global variables
	            addDeclaredGlobals(ast, currentScopes[0], currentConfig);
	
	            // remove shebang comments
	            if (shebang && ast.comments.length && ast.comments[0].value === shebang) {
	                ast.comments.splice(0, 1);
	
	                if (ast.body.length && ast.body[0].leadingComments && ast.body[0].leadingComments[0].value === shebang) {
	                    ast.body[0].leadingComments.splice(0, 1);
	                }
	            }
	
	            var eventGenerator = new NodeEventGenerator(api);
	            eventGenerator = new CommentEventGenerator(eventGenerator, sourceCode);
	
	            /*
	             * Each node has a type property. Whenever a particular type of node is found,
	             * an event is fired. This allows any listeners to automatically be informed
	             * that this type of node has been found and react accordingly.
	             */
	            controller.traverse(ast, {
	                enter: function(node, parent) {
	                    node.parent = parent;
	                    eventGenerator.enterNode(node);
	                },
	                leave: function(node) {
	                    eventGenerator.leaveNode(node);
	                }
	            });
	
	        }
	
	        // sort by line and column
	        messages.sort(function(a, b) {
	            var lineDiff = a.line - b.line;
	
	            if (lineDiff === 0) {
	                return a.column - b.column;
	            }
	            return lineDiff;
	        });
	
	        return messages;
	    };
	
	    /**
	     * Reports a message from one of the rules.
	     * @param {string} ruleId The ID of the rule causing the message.
	     * @param {number} severity The severity level of the rule as configured.
	     * @param {ASTNode} node The AST node that the message relates to.
	     * @param {Object=} location An object containing the error line and column
	     *      numbers. If location is not provided the node's start location will
	     *      be used.
	     * @param {string} message The actual message.
	     * @param {Object} opts Optional template data which produces a formatted message
	     *     with symbols being replaced by this object's values.
	     * @param {Object} fix A fix command description.
	     * @returns {void}
	     */
	    api.report = function(ruleId, severity, node, location, message, opts, fix, related) { //ORION add related
	
	        if (typeof location === "string") {
	            fix = opts;
	            related = opts;
	            opts = message;
	            message = location;
	            location = node.loc.start;
	        }
	
	        if (isDisabledByReportingConfig(reportingConfig, ruleId, location)) {
	            return;
	        }
	
			if (opts) {
		        message = message.replace(/\{\{\s*(.+?)\s*\}\}/g, function(fullMatch, term) {
		            if (term in opts) {
		                return opts[term];
		            }
		
		            // Preserve old behavior: If parameter name not provided, don't replace it.
		            return fullMatch;
		        });
		    }
	
	        var problem = {
	            ruleId: ruleId,
	            severity: severity,
	            message: message,
	            node: node, //ORION
	            args: opts, //ORION
	            line: location.line,
	            column: location.column, //ORION
	            nodeType: node.type,
	            source: sourceCode.lines[location.line - 1] || "",
	            related: typeof related !== "undefined" ? related : null // ORION
	        };
	
	        // ensure there's range and text properties, otherwise it's not a valid fix
	        if (fix && Array.isArray(fix.range) && typeof fix.text === "string") {
	            problem.fix = fix;
	        }
	
	        messages.push(problem);
	    };
	
	    /**
	     * Gets the SourceCode object representing the parsed source.
	     * @returns {SourceCode} The SourceCode object.
	     */
	    api.getSourceCode = function() {
	        return sourceCode;
	    };
	
	    // methods that exist on SourceCode object
	    var externalMethods = {
	        getSource: "getText",
	        getSourceLines: "getLines",
	        getAllComments: "getAllComments",
	        getNodeByRangeIndex: "getNodeByRangeIndex",
	        getComments: "getComments",
	        getJSDocComment: "getJSDocComment",
	        getFirstToken: "getFirstToken",
	        getFirstTokens: "getFirstTokens",
	        getLastToken: "getLastToken",
	        getLastTokens: "getLastTokens",
	        getTokenAfter: "getTokenAfter",
	        getTokenBefore: "getTokenBefore",
	        getTokenByRangeStart: "getTokenByRangeStart",
	        getTokens: "getTokens",
	        getTokensAfter: "getTokensAfter",
	        getTokensBefore: "getTokensBefore",
	        getTokensBetween: "getTokensBetween"
	    };
	
	    // copy over methods
	    Object.keys(externalMethods).forEach(function(methodName) {
	        api[methodName] = function() {
	            return sourceCode ? sourceCode[externalMethods[methodName]].apply(sourceCode, arguments) : null;
	        };
	    });
	
	    /**
	     * Gets nodes that are ancestors of current node.
	     * @returns {ASTNode[]} Array of objects representing ancestors.
	     */
	    api.getAncestors = function() {
	        return controller.parents();
	    };
	
	    /**
	     * Gets the scope for the current node.
	     * @returns {Object} An object representing the current node's scope.
	     */
	    api.getScope = function() {
	        var parents = controller.parents(),
	            scope = currentScopes[0];
	
	        // Don't do this for Program nodes - they have no parents
	        if (parents.length) {
	
	            // if current node introduces a scope, add it to the list
	            var current = controller.current();
	            if (currentConfig.ecmaFeatures.blockBindings) {
	                if (["BlockStatement", "SwitchStatement", "CatchClause", "FunctionDeclaration", "FunctionExpression", "ArrowFunctionExpression"].indexOf(current.type) >= 0) {
	                    parents.push(current);
	                }
	            } else {
	                if (["FunctionDeclaration", "FunctionExpression", "ArrowFunctionExpression"].indexOf(current.type) >= 0) {
	                    parents.push(current);
	                }
	            }
	
	            // Ascend the current node's parents
	            for (var i = parents.length - 1; i >= 0; --i) {
	
	                // Get the innermost scope
	                scope = scopeManager.acquire(parents[i], true);
	                if (scope) {
	                    if (scope.type === "function-expression-name") {
	                        return scope.childScopes[0];
	                    }
	                    return scope;
	                }
	
	            }
	
	        }
	
	        return currentScopes[0];
	    };
	
	    /**
	     * Record that a particular variable has been used in code
	     * @param {string} name The name of the variable to mark as used
	     * @returns {boolean} True if the variable was found and marked as used,
	     *      false if not.
	     */
	    api.markVariableAsUsed = function(name) {
	        var scope = this.getScope(),
	            specialScope = currentConfig.ecmaFeatures.globalReturn || currentConfig.ecmaFeatures.modules,
	            variables,
	            i,
	            len;
	
	        // Special Node.js scope means we need to start one level deeper
	        if (scope.type === "global" && specialScope) {
	            scope = scope.childScopes[0];
	        }
	
	        do {
	            variables = scope.variables;
	            for (i = 0, len = variables.length; i < len; i++) {
	                if (variables[i].name === name) {
	                    variables[i].eslintUsed = true;
	                    return true;
	                }
	            }
	        } while ( (scope = scope.upper) );
	
	        return false;
	    };
	
	    /**
	     * Gets the filename for the currently parsed source.
	     * @returns {string} The filename associated with the source being parsed.
	     *     Defaults to "<input>" if no filename info is present.
	     */
	    api.getFilename = function() {
	        if (typeof currentFilename === "string") {
	            return currentFilename;
	        }
	        return "<input>";
	    };
	
	    /**
	     * Defines a new linting rule.
	     * @param {string} ruleId A unique rule identifier
	     * @param {Function} ruleModule Function from context to object mapping AST node types to event handlers
	     * @returns {void}
	     */
	    var defineRule = api.defineRule = function(ruleId, ruleModule) {
	        rules.define(ruleId, ruleModule);
	    };
	
	    /**
	     * Defines many new linting rules.
	     * @param {object} rulesToDefine map from unique rule identifier to rule
	     * @returns {void}
	     */
	    api.defineRules = function(rulesToDefine) {
	        Object.getOwnPropertyNames(rulesToDefine).forEach(function(ruleId) {
	            defineRule(ruleId, rulesToDefine[ruleId]);
	        });
	    };
	
	    /**
	     * Gets the default eslint configuration.
	     * @returns {Object} Object mapping rule IDs to their default configurations
	     */
	    api.defaults = function() {
	        return {};
	    };
	
	    /**
	     * Gets variables that are declared by a specified node.
	     *
	     * The variables are its `defs[].node` or `defs[].parent` is same as the specified node.
	     * Specifically, below:
	     *
	     * - `VariableDeclaration` - variables of its all declarators.
	     * - `VariableDeclarator` - variables.
	     * - `FunctionDeclaration`/`FunctionExpression` - its function name and parameters.
	     * - `ArrowFunctionExpression` - its parameters.
	     * - `ClassDeclaration`/`ClassExpression` - its class name.
	     * - `CatchClause` - variables of its exception.
	     * - `ImportDeclaration` - variables of  its all specifiers.
	     * - `ImportSpecifier`/`ImportDefaultSpecifier`/`ImportNamespaceSpecifier` - a variable.
	     * - others - always an empty array.
	     *
	     * @param {ASTNode} node A node to get.
	     * @returns {escope.Variable[]} Variables that are declared by the node.
	     */
	    api.getDeclaredVariables = function(node) {
	        return (scopeManager && scopeManager.getDeclaredVariables(node)) || [];
	    };
	
	    return api;
	
	}());
	
	return module.exports;
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 36 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* eslint-env amd */
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	__webpack_require__(37), 
	exports, 
	], __WEBPACK_AMD_DEFINE_RESULT__ = function(Rules, exports) {
	/**
	 * @fileoverview Defines a storage for rules.
	 * @author Nicholas C. Zakas
	 */
	
	"use strict";
	
	//------------------------------------------------------------------------------
	// Privates
	//------------------------------------------------------------------------------
	
	var rules = Object.create(null);
	
	//------------------------------------------------------------------------------
	// Public Interface
	//------------------------------------------------------------------------------
	
	/**
	 * Registers a rule module for rule id in storage.
	 * @param {String} ruleId Rule id (file name).
	 * @param {Function} ruleModule Rule handler.
	 * @returns {void}
	 */
	function define(ruleId, ruleModule) {
	    rules[ruleId] = ruleModule;
	}
	
	exports.define = define;
	
	/**
	 * Loads and registers all rules from passed rules directory.
	 * @param {String} [rulesDir] Path to rules directory, may be relative. Defaults to `lib/rules`.
	 * @returns {void}
	 */
	function load() {
	    var newRules = Rules.rules;
	    Object.keys(newRules).forEach(function(ruleId) {
	        define(ruleId, newRules[ruleId]);
	    });
	}
	
	exports.load = load;
	
	/**
	 * Registers all given rules of a plugin.
	 * @param {Object} pluginRules A key/value map of rule definitions.
	 * @param {String} pluginName The name of the plugin without prefix (`eslint-plugin-`).
	 * @returns {void}
	 */
	exports.import = function (pluginRules, pluginName) {
	    Object.keys(pluginRules).forEach(function (ruleId) {
	        var qualifiedRuleId = pluginName + "/" + ruleId,
	            rule = pluginRules[ruleId];
	
	        define(qualifiedRuleId, rule);
	    });
	};
	
	/**
	 * Access rule handler by id (file name).
	 * @param {String} ruleId Rule id (file name).
	 * @returns {Function} Rule handler.
	 */
	exports.get = function(ruleId) {
	    return rules[ruleId];
	};
	
	/**
	 * Reset rules storage.
	 * Should be used only in tests.
	 * @returns {void}
	 */
	exports.testClear = function() {
	    rules = Object.create(null);
	};
	
	//------------------------------------------------------------------------------
	// Initialization
	//------------------------------------------------------------------------------
	
	// loads built-in rules
	load();
	
	
	return exports;
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 37 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*******************************************************************************
	 * @license
	 * Copyright (c) 2013, 2015 IBM Corporation and others.
	 * All rights reserved. This program and the accompanying materials are made
	 * available under the terms of the Eclipse Public License v1.0
	 * (http://www.eclipse.org/legal/epl-v10.html), and the Eclipse Distribution
	 * License v1.0 (http://www.eclipse.org/org/documents/edl-v10.html).
	 *
	 * Contributors:
	 *	 IBM Corporation - initial API and implementation
	 *******************************************************************************/
	/*eslint-env amd*/
	/*globals importScripts onmessage:true onconnect:true requirejs*/
	/**
	 * Implements eslint's load-rules API for AMD. Our rules are loaded as AMD modules.
	 */
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	__webpack_require__(53),
	__webpack_require__(57),
	__webpack_require__(31),
	__webpack_require__(54),
	__webpack_require__(32),
	__webpack_require__(55),
	__webpack_require__(40),
	__webpack_require__(41),
	__webpack_require__(42),
	__webpack_require__(43),
	__webpack_require__(38),
	__webpack_require__(44),
	__webpack_require__(45),
	__webpack_require__(46),
	__webpack_require__(47),
	__webpack_require__(48),
	__webpack_require__(50),
	__webpack_require__(51),
	__webpack_require__(52),
	__webpack_require__(49),
	], __WEBPACK_AMD_DEFINE_RESULT__ = function(util, Logger, Finder, ProblemMessages, Estraverse, JsSyntax, 
			accessorPairs, noControlRegex, noDuplicateCase, noElseReturn, noEmptyCharClasses, 
			noEmptyLabel, noEqNull, noExtraBoolCast, noExtraParens, noInvalidRegExp, noNegatedInLhs, noObjCalls, noSelfCompare, noIrregularWhitespace) {
	
	    var rules = {
	        "curly": function(context) {
		        		/**
		        		 * Checks the following AST element for a BlockStatement
		        		 */
		        		function checkBlock(node) {
		        			try {
		        			    switch(node.type) {
		        			        case 'IfStatement': {
		            					if(node.consequent && node.consequent.type !== 'BlockStatement') {
		            						//flag the first token of the statement that should be in the block
		            						context.report(node.consequent, ProblemMessages['curly'], null /*, context.getTokens(node.consequent)[0]*/);
		            					}
		            					if(node.alternate && node.alternate.type !== 'BlockStatement' && node.alternate.type !== 'IfStatement') {
		            						//flag the first token of the statement that should be in the block
		            						context.report(node.alternate, ProblemMessages['curly'], null /*, context.getTokens(node.alternate)[0]*/);
		            					}
		            					break;
		        				    }
		        				    case 'DoWhileStatement':
		        				    case 'WhileStatement':
		        				    case 'WithStatement':
		        				    case 'ForStatement':
		                            case 'ForInStatement': 
		                            case 'ForOfStatement': {
		            					if(node.body && node.body.type !== 'BlockStatement') {
		            						//flag the first token of the statement that should be in the block
		            						context.report(node.body, ProblemMessages['curly'], null /*, context.getTokens(node.body)[0]*/);
		            					}
		            					break;
		        					}
		        				}
		        			}
		        			catch(ex) {
		        				Logger.log(ex);
		        			}
		        		}
		
		        		return {
		        			'IfStatement' : checkBlock,
		        			'WhileStatement' : checkBlock,
		        			'ForStatement' : checkBlock,
		        			'ForInStatement' : checkBlock,
		        			'ForOfStatement': checkBlock,
		        			'WithStatement': checkBlock,
		        			'DoWhileStatement': checkBlock
		        		};
	        },
			"eqeqeq": function(context) {
				        function getOperatorToken(context, node) {
		            		var tokens = context.getTokens(node), len = tokens.length, operator = node.operator;
		            		for (var i=0; i < len; i++) {
		            			var t = tokens[i];
		            			if (t.value === operator) {
		            				return t;
		            			}
		            		}
		            		return null;
		            	}
		            	function isNullness(node) {
		            		if(node && node.type) {
		            			return (node.type === 'Literal' && node.value === null) || (node.type === 'Identifier' && node.name === 'undefined');
		            		}
		            		return false;
		            	}
		        		return {
		        			"BinaryExpression": function(node) {
		        				try {
		        					if(isNullness(node.left) || isNullness(node.right)) {
		        						return;
		        					}
		        					var op = node.operator;
		        					var expected = null;
		        					if (op === "==") {
		        					    expected = '===';
		        						context.report(node, ProblemMessages['eqeqeq'], {0: expected, 1:op}, getOperatorToken(context, node));
		        					} else if (op === "!=") {
		        					    expected = '!==';
		        						context.report(node, ProblemMessages['eqeqeq'], {0:expected, 1:op}, getOperatorToken(context, node));
		        					}
		        				}
		        				catch(ex) {
		        					Logger.log(ex);
		        				}
		        			}
		        		};
	        },
			"missing-doc": function(context) {
	                function validComment(comments) {
	                    if(comments && comments.leading) {
	                        var len = comments.leading.length;
	                        return len > 0 && comments.leading[len-1].type === 'Block';
	                    }
	                    return false;
	                }
	        		function checkDoc(node) {
	        			try {
	        				var comments;
	        				var name;
	        				switch(node.type) {
	        					case 'Property':
	        						if(node.value && node.value.type === 'FunctionExpression') {
	        							comments = context.getComments(node);
	        							if(!comments || comments.leading.length < 1) {
	        							    //TODO see https://github.com/jquery/esprima/issues/1071
	    							        comments = context.getComments(node.key);
	        							}
	        							if(!validComment(comments)) {
	        								switch(node.key.type) {
	        									case 'Identifier':
	        										name = node.key.name;
	        										break;
	        									case 'Literal':
	        										name = node.key.value;
	        										break;
	        								}
	        								context.report(node.key, ProblemMessages['missing-doc'], {0:name}, { type: 'expr' }); //$NON-NLS-1$
	        							}
	        						}
	        						break;
	        					case 'FunctionDeclaration':
	    							comments = context.getComments(node);
	    							if(!comments || comments.leading.length < 1) {
	    							    //TODO see https://github.com/jquery/esprima/issues/1071
								        comments = context.getComments(node.id);
	    							} 
	    							if(!validComment(comments)) {
	    								context.report(node.id, ProblemMessages['missing-doc'], {0:node.id.name}, { type: 'decl' });  //$NON-NLS-1$
	    							}
	        						break;
	        					case 'ExpressionStatement':
	        						if(node.expression && node.expression.type === 'AssignmentExpression') {
	        							var anode = node.expression;
	        							if(anode.right && anode.right.type === 'FunctionExpression' && anode.left && anode.left.type === 'MemberExpression') {
	        								//comments are attached to the enclosing expression statement
	        								comments = context.getComments(node);
	        								if(!comments || comments.leading.length < 1) {
	            							    //TODO see https://github.com/jquery/esprima/issues/1071
	        							        comments = context.getComments(anode.left);
	            							}
	        								if(!validComment(comments)) {
	        									name = anode.left.computed === true ? anode.left.property.value : anode.left.property.name;
	        									context.report(anode.left.property, ProblemMessages['missing-doc'], {0:name}, { type: 'expr' }); //$NON-NLS-1$
	        								}
	        							}
	        						}
	        						break;
	        				}
	        			}
	        			catch(ex) {
	        				Logger.log(ex);
	        			}
	        		}
	
	        		return {
	        			"Property": checkDoc,
	        			"FunctionDeclaration": checkDoc,
	        			"ExpressionStatement": checkDoc
	        		};
	        },
			"new-parens": function(context) {
	        		return {
	        			'NewExpression' : function(node) {
	        				try {
	        					if(node.callee) {
	        						var tokens = context.getTokens(node.callee, 0, 1);
	        						if(tokens && tokens.length > 0) {
	        							var last = tokens[tokens.length-1];
	        							if(last.type !== 'Punctuator' || last.value !== '(') {
	        								//if there s no opening parenthesis its safe to assume they are missing
	        								context.report(node.callee, ProblemMessages['new-parens'], null, tokens[0]);
	        							}
	        						}
	        					}
	        				}
	        				catch(ex) {
	        					Logger.log(ex);
	        				}
	        			}
	        		};
	        },
	        "no-caller": function(context) {
	                return {
	                    "MemberExpression": function(node) {
	                        var func = Finder.findParentFunction(node);
	                        if(func) {
	                            var object = node.object;
	                            if (!object || object.name !== "arguments" || object.type !== "Identifier") {
	                                return;
	                            }
	                            var prop = node.property;
	                            var name = prop.name ? prop.name : prop.value;
	                            if (name === "callee" || name === "caller") {
	                                context.report(prop, ProblemMessages['no-caller'], {0: name});
	                            }
	                        }
	                    }
	                };
	        },
	        "no-comma-dangle": function(context) {
	                return {
	                    'ObjectExpression': function(node) {
	                        var token  = context.getLastToken(node, 1);
	                        if(token && token.value === ',') {
	                            context.report(node, ProblemMessages['no-comma-dangle'], null, token);
	                        }
	                    }
	                };
	        },
	        "no-cond-assign": function(context) {
	
	                var statements = {
	                    'IfStatement': true,
	                    'DoWhileStatement': true,
	                    'WhileStatement': true,
	                    'ForStatement': true
	                };
	
	                function isParenthesised(node) {
	                    var type = node.parent.type;
	                    if(statements[type]) {
	                        //if its direct parent is the control statement, check for double parenthesis
	                        if(type !== 'ForStatement') {
	                            return context.getTokenBefore(node, 1).value === '(';
	                        }
	                    }
	                    return context.getTokenBefore(node).value === '(';
	                }
	                function skip(node) {
	                    switch(node.type) {
	                        case 'FunctionExpression':
	                        case 'ObjectExpression':
	                        case 'CallExpression':
	                        case 'ArrayExpression': {
	                            return true;
	                        }
	                        default: return false;
	                    }
	                }
	                function checkForAssignment(node) {
	                    var assigns = [];
	                    if(node.test === null) {
	                        return;
	                    }
	                    node.test.parent = node;
	                    Estraverse.traverse(node.test, {
	                        enter: function(n, parent) {
	                            if(n.range[0] > node.test.range[1]) {
	                                //once we've left the test object
	                                return Estraverse.VisitorOption.Break;
	                            }
	                            if(skip(n)) {
	                                return Estraverse.VisitorOption.Skip;
	                            }
	                            if(parent) {
	                                n.parent = parent;
	                            }
	                            if(n && n.type === 'AssignmentExpression') {
	                                assigns.push(n);
	                            }
	                        }
	                    });
	                    var len = assigns.length;
	                    if(len > 0) {
	                        for(var i = 0; i < len; i++) {
	                            var assign = assigns[i];
	                            if(!isParenthesised(assign)) {
	                                assign.range[0] = assign.left.range[0]; //mark only from the start of first part
	                                context.report(assign, ProblemMessages['no-cond-assign']);
	                            }
	                        }
	                    }
	                }
	
	                return {
	                  'IfStatement': checkForAssignment,
	                  'WhileStatement': checkForAssignment,
	                  'ForStatement': checkForAssignment,
	                  'DoWhileStatement': checkForAssignment
	                };
	        },
	        "no-console": function(context) {
	                return {
	                    'MemberExpression': function(node) {
	                        if(node.object.name === 'console') {
	                            //are we using the browser env?
	                            if(context.env && context.env['browser']) {
	                                context.report(node.object, ProblemMessages['no-console']);
	                            }
	                        }
	                    }
	                };
	        },
	        "no-constant-condition": function(context) {
	                /**
	                 * @param {Object} node The AST node
	                 * @returns {Boolean} If the given node has a 'truthy' constant value
	                 */
	                function isConst(node) {
	                    switch(node.type) {
	                        case 'Literal':
	                        case 'ObjectExpression':
	                        case 'FunctionExpression':
	                        case 'ArrayExpression': {
	                            return true;
	                        }
	                        case 'BinaryExpression':
	                        case 'LogicalExpression': {
	                            return isConst(node.left) && isConst(node.right);
	                        }
	                        case 'UnaryExpression': {
	                            return isConst(node.argument);
	                        }
	                        default: return false;
	                    }
	                }
	                function checkCondition(node) {
	                    if(node && node.test && isConst(node.test)) {
	                        context.report(node.test, ProblemMessages['no-constant-condition']);
	                    }
	                }
	
	                return {
	                    'IfStatement': checkCondition,
	                    'WhileStatement': checkCondition,
	                    'DoWhileStatement': checkCondition,
	                    'ForStatement': checkCondition,
	                    'ConditionalExpression': checkCondition
	                };
	        },
			"no-debugger": function(context) {
	        		return {
	        			"DebuggerStatement": function(node) {
	        				try {
	        					context.report(node, ProblemMessages['no-debugger'], null, context.getTokens(node)[0]);
	        				}
	        				catch(ex) {
	        					Logger.log(ex);
	        				}
	        			}
	        		};
	        },
			"no-dupe-keys": function(context) {
	        		return {
	        			"ObjectExpression": function(node) {
	        				try {
	        					var props = node.properties;
	        					if(props && props.length > 0) {
	        						var len = props.length;
	        						var seen = Object.create(null);
	        						for(var i = 0; i < len; i++) {
	        							var prop = props[i];
	        							// Here we're concerned only with duplicate keys having kind == "init". Duplicates among other kinds (get, set)
	        							// cause syntax errors, by spec, so don't need to be linted.
	        							if(prop.kind !== "init") {
	        								continue;
	        							}
	        							var name = prop.key.name ? prop.key.name : prop.key.value;
	        							if(Object.prototype.hasOwnProperty.call(seen, name)) {
	        								context.report(prop, ProblemMessages['no-dupe-keys'], {0:name}, context.getTokens(prop)[0]);
	        							}
	        							else {
	        								seen[name] = 1;
	        							}
	        						}
	        					}
	        				}
	        				catch(ex) {
	        					Logger.log(ex);
	        				}
	        			}
	        		};
	        },
			'no-empty-block': function(context) {
	        		var comments;
	
	        		return {
	        		    'Program' : function(node) {
	        		          comments = node.comments;
	        		    },
	        			'BlockStatement' : function(node) {
	        			    try {
	            			    if(node.body.length < 1) {
	            			        for(var i = 0; i < comments.length; i++) {
	            			            var range = comments[i].range;
	            			            if(range[0] >= node.range[0] && range[1] <= node.range[1]) {
	            			                //a commented empty block, ignore
	            			                return;
	            			            }
	            			        }
	            			        context.report(node, ProblemMessages['no-empty-block']);
	            			    }
	        			    }
	        			    catch(ex) {
	        			        Logger.log(ex);
	        			    }
	        			}
	        		};
	        },
			"no-eval": function(context) {
	        		return {
	        			"CallExpression": function(node) {
	        				try {
	        					var name = node.callee.name;
	        					if(!name) {
	        						return;
	        					}
	        					if('eval' === name) {
	        						context.report(node.callee, ProblemMessages['no-eval'], {0:'\'eval\''}, context.getTokens(node.callee)[0]); //$NON-NLS-1$
	        					}
	        				}
	        				catch(ex) {
	        					Logger.log(ex);
	        				}
	        			}
	        		};
	        },
			"no-extra-semi": function(context) {
	        		return {
	        			"EmptyStatement": function(node) {
	        				try {
	        					var tokens = context.getTokens(node);
	        					var t = tokens[tokens.length - 1];
	        					if (t && t.type === "Punctuator" && t.value === ";") {
	        						context.report(node, ProblemMessages['no-extra-semi'], null, t /* expose the bad token */);
	        					}
	        				}
	        				catch(ex) {
	        					Logger.log(ex);
	        				}
	        			}
	        		};
	        },
			'no-fallthrough': function(context) {
	        		function fallsthrough(node) {
	        		    // cases with no statements or only a single case are implicitly fall-through
	        		    if(node.consequent) {
	        		        var statements = node.consequent.slice(0);
	        		        if(statements.length > 0 && statements[0].type === 'BlockStatement') {
	        		            var stmts = statements.shift(); //take the block statement off the list, it is not returnable
	        		            if(stmts.body.length > 0) {
	        		                statements = [].concat(statements, stmts.body); //remove the block statement
	        		            }
	        		        }
	        		        if(statements.length < 1) {
	        					return false;
	        				}
	        		        var statement = null;
	        		        for(var i = 0; i < statements.length; i++) {
	        		            statement = statements[i];
	        		            if(util.returnableStatement(statement)) {
	        		                return false;
	        		            }
	        		        }
	        		        return true;
	        		    }
	        		    return false;
	        		}
	
	        		return {
	        			'SwitchStatement' : function(node) {
	        			    try {
	            			    if(node.cases && node.cases.length > 1) {
	            			        //single case is implicitly fallthrough
	            			        var caselen  = node.cases.length;
	            			       cases: for(var i = 0; i < caselen; i++) {
	            			            if(i+1 === caselen) {
	            			                //last node is implicitly fall-through
	            			                break;
	            			            }
	            			            if(fallsthrough(node.cases[i])) {
	            			                //corect the highlighting to match eclipse
	            			                var reportednode = node.cases[i+1];
	            			                if(reportednode.test) {
	            			                    reportednode.range[1] = reportednode.test.range[1];
	            			                } else {
	            			                    //default case - tag the token
	            			                    var tokens = context.getTokens(reportednode);
	            			                    if(tokens && tokens.length > 0) {
	            			                        reportednode.range[1] = tokens[0].range[1];
	            			                    }
	            			                }
	            			                var comments = reportednode.leadingComments;
	            			                if(!comments && reportednode.test) {
	            			                    //TODO see https://github.com/jquery/esprima/issues/1071
	            			                    comments = reportednode.test.leadingComments;
	            			                }
	            			                if(comments) {
	                        		            var comment = null;
	                        		            for(var c = 0; c < comments.length; c++) {
	                        		                comment = comments[c];
	                        		                if(/\$?falls?\s?through\$?/i.test(comment.value.toLowerCase())) {
	                        		                    continue cases;
	                        		                }
	                        		            }
	                        		        }
	            			                context.report(reportednode, ProblemMessages['no-fallthrough']);
	            			            }
	            			        }
	            			    }
	        			    }
	        			    catch(ex) {
	        			        Logger.log(ex);
	        			    }
	        			 }
	        		};
	        },
	        "no-implied-eval": function(context) {
	        		return {
	        			"CallExpression": function(node) {
	        				try {
	        					var name = node.callee.name;
	        					if(!name) {
	        						return;
	        					}
	        					if('setInterval' === name || 'setTimeout' === name) {
	        						if(node.arguments.length > 0) {
	        							var arg = node.arguments[0];
	        							if(arg.type === 'Literal') {
	        								context.report(node.callee, ProblemMessages['no-eval'], {0:'Implicit \'eval\''}, context.getTokens(node.callee)[0]); //$NON-NLS-1$
	        							}
	        							else if(arg.type === 'Identifier') {
	        								//lets see if we can find it's definition
	        								var scope = context.getScope();
	        								var decl = util.getDeclaration(arg, scope);
	        								if (decl && decl.defs && decl.defs.length) {
	        									var def = decl.defs[0];
	        									var dnode = def.node;
	        									if(def.type === 'Variable' && dnode && dnode.type === 'VariableDeclarator' &&
	        											dnode.init && dnode.init.type === 'Literal') {
	        										context.report(node.callee, ProblemMessages['no-eval'], {0:'Implicit \'eval\''}, context.getTokens(node.callee)[0]); //$NON-NLS-1$
	        									}
	        								}
	        							}
	        						}
	        					}
	        				}
	        				catch(ex) {
	        					Logger.log(ex);
	        				}
	        			}
	        		};
	        },
	        "no-iterator": function(context) {
	                return {
	                    'MemberExpression': function(node) {
	                        if(node.property !== null) {
	                            if(node.computed) {
	                                if(node.property.value === '__iterator__') {
	                                    context.report(node.property, ProblemMessages['no-iterator']);
	                                }
	                            } else if(node.property.name === '__iterator__') {
	                                context.report(node.property, ProblemMessages['no-iterator']);
	                            }
	                        }
	                    }
	                };
	        },
	        "no-proto": function(context) {
	                return {
	                    'MemberExpression': function(node) {
	                        if(node.property !== null) {
	                            if(node.computed) {
	                                if(node.property.value === '__proto__') {
	                                    context.report(node.property, ProblemMessages['no-proto']);
	                                }
	                            } else if(node.property.name === '__proto__') {
	                                context.report(node.property, ProblemMessages['no-proto']);
	                            }
	                        }
	                    }
	                };
	        },
			'no-jslint': function(context) {
	        		return {
	        			'Program' : function(node) {
	        			    try {
	            			    var comments = node.comments;
	            			    var len;
	            			    if(comments && (len = comments.length) && comments.length > 0) {
	            			        for(var i = 0; i < len; i++) {
	            			            var comment = comments[i];
	            			            if(comment.type === 'Block') {
	            			                var match = /^\s*(js[l|h]int)(\s+\w+:\w+)+/ig.exec(comment.value);
	            			                if(match) {
	            			                    var jslint = match[1];
	            			                    if(jslint.length < 1) {
	            			                        continue;
	            			                    }
	            			                    var start = 2 + comment.value.indexOf(jslint) + comment.range[0];
	            			                    var end = start + jslint.length;
	            			                    context.report({type:'BlockComment', range:[start, end], loc: comment.loc}, ProblemMessages['no-jslint'], {0:jslint}); //$NON-NLS-1$
	            			                }
	            			            }
	            			        }
	            			    }
	        			    }
	        			    catch(ex) {
	        			        Logger.log(ex);
	        			    }
	        			 }
	        		};
	        },
			"no-new-array": function(context) {
			    	function checkNode(node) {
			    		var callee = node.callee;
		    			if (callee && callee.name === 'Array') {
							var args = node.arguments;
							if(args.length > 1) {
								context.report(callee, ProblemMessages['no-new-array']);
							} else if(args.length === 1 && (args[0].type === 'Literal' && typeof args[0].value !== 'number')) {
								context.report(callee, ProblemMessages['no-new-array']);
							}
						}
			    	}
	        		return {
	        			'NewExpression': checkNode,
	        			'CallExpression': checkNode
	        		};
	        },
			"no-new-func": function(context) {
	        		return {
	        			'NewExpression': function(node) {
	        				var callee = node.callee;
			    			if (callee && callee.name === 'Function') {
			    				context.report(callee, ProblemMessages['no-new-func']);
		    				}
	        			}
	        		};
	        },
			"no-new-object": function(context) {
			   		return {
	        			'NewExpression': function(node) {
	        				var callee = node.callee;
			    			if (callee && callee.name === 'Object') {
			    				context.report(callee, ProblemMessages['no-new-object']);
		    				}
	        			}
	        		};
	        },
			"no-new-wrappers": function(context) {
	        		var wrappers = ["String", "Number", "Math", "Boolean", "JSON"]; //$NON-NLS-4$ //$NON-NLS-3$ //$NON-NLS-2$ //$NON-NLS-1$ //$NON-NLS-0$ //$NON-NLS-5$
					return {
	        			'NewExpression': function(node) {
	        				var callee = node.callee;
			    			if (callee && wrappers.indexOf(callee.name) > -1) {
			    				context.report(callee, ProblemMessages['no-new-wrappers'], [callee.name]);
		    				}
	        			}
	        		};
	        },
	        "no-with": function(context) {
	        		return {'WithStatement': function(node) {
		        			context.report(node, ProblemMessages['no-with'], null, context.getFirstToken(node));
		        		}
	        		};
	        },
			"missing-nls": function(context){
	        		function reportMissingNLS(node, index){
	        			var data = Object.create(null);
	        			data.indexOnLine = index;
	        			context.report(node, ProblemMessages['missing-nls'], {0:node.value, data: data});
	        		}
	        		
	        		return {
	                    'Literal': function(node) {
	                    	_collectLinesWithStringLiterals(node, context._linesWithStringLiterals);
	                    },
	                    /**
	                     * @callback
	                     */
	                    'Program': function(node){
	                    	context._linesWithStringLiterals = Object.create(null);
	                    	context._isMissingNLSActive = true;
	                    },
	                    /**
	                     * @callback
	                     */
	                    'Program:exit': function(node){
	                    	context._isMissingNLSActive = false;
	                    	// Read each line in the map and check if there are non-nls statements
	                    	if (context._linesWithStringLiterals){
	                    		
	                    		var comments = node.comments;
		                    	var linesWithComments = {};
		                    	if (Array.isArray(comments)){
		                    		for (var f=0; f<comments.length; f++) {
		                    			var comment = comments[f];
		                    			if (comment.type.toLowerCase() === 'line'){
		                    				var lineNumber = comment.loc.end.line;
									        linesWithComments[lineNumber] = "//" + comment.value; // Add in leading // to simply regex //$NON-NLS-1$
		                    			}
		                    		}
		                    	}
	                    		
	                    		for (lineNumber in context._linesWithStringLiterals) {
	                    			var nodes = context._linesWithStringLiterals[lineNumber];
								    if (nodes) {
								    	
								    	// 0 based line count
										comment = linesWithComments[lineNumber];
								        var nonNlsRegExp = /\/\/\$NON-NLS-([0-9])+\$/g;
								        var match;
								        comments = [];
								    	if (comment){
									        while ((match = nonNlsRegExp.exec(comment)) !== null){
									        	comments.push(match[1]);
									        }
								        }
	
								        for (var i=0; i<nodes.length; i++) {
								        	match = false;
								        	for (var j=0; j<comments.length; j++) {
	
								        		// NON-NLS comments start at 1
								        		if (comments[j] === (""+(i+1))){
								        			comments[j] = null;
								        			match = true;
								        			break;
								        		}
								        		// For now allow NON-NLS-0 comments
								        		if (i===0 && comments[j] === '0'){
								        			comments[j] = null;
								        			match = true;
								        			break;
								        		}
								        	}
								        	if (!match){
								        		reportMissingNLS(nodes[i], i);
								        	}
								        }
								    }
								}
	                    	}
	                    }
					};
	        },
	        "unnecessary-nls": function(context){
	        		function reportUnusedNLS(range, value, nlsCommentValue){
						context.report({range: range, loc: {start: range[0], end: range[1]}, value: value}, ProblemMessages['unnecessary-nls'], {data: {nlsComment: nlsCommentValue}});
	        		}
	
	        		return {
	                    'Literal': function(node) {
	                    	if (!context._isMissingNLSActive){
	                    		_collectLinesWithStringLiterals(node, context._linesWithStringLiterals);
	                    	}
	                    },
	                    /**
	                     * @callback
	                     */
	                    'Program': function(node){
	                    	if (!context._isMissingNLSActive){
	                    		context._linesWithStringLiterals = Object.create(null);
	                		}
	                    },
	                    /**
	                     * @callback
	                     */
	                    'Program:exit': function(node){
	                    	var start, value, lineNumber, match, nlsComments;
	                    	var comments = node.comments;
	                    	var linesWithComments = {};
	                    	if (Array.isArray(comments)){
	                    		for (var f=0; f<comments.length; f++) {
	                    			var comment = comments[f];
	                    			if (comment.type.toLowerCase() === 'line'){
	                    				lineNumber = comment.loc.end.line;
								        linesWithComments[lineNumber] = comment;
	                    			}
	                    		}
	                    	}
	                    	
	                    	// NLS tag must start with // (or be start of line comment) and can be numbered 0 to 9
	                    	var nonNlsRegExp = /(?:^|(\/\/))\$NON-NLS-([0-9])+\$/g;
	
	                    	// Read each line in the map and check if there are non-nls statements
	                    	if (context._linesWithStringLiterals){
	                    		for (lineNumber in context._linesWithStringLiterals) {
	                    			var nodes = context._linesWithStringLiterals[lineNumber];
								    if (nodes) {
								    	comment = linesWithComments[lineNumber];
								    	delete linesWithComments[lineNumber];
									    nlsComments = [];
								        if (comment) {
									        while ((match = nonNlsRegExp.exec(comment.value)) !== null){
									        	nlsComments.push(match);
									        }
							        	}
										for (var j=0; j<nlsComments.length; j++) {
											match = nlsComments[j];
								        	var hasMatch = false;
								        	for (var i=0; i<nodes.length; i++) {
								        		// NON-NLS comments start at 1
								        		if (match[2] === (""+(i+1))){
								        			hasMatch = true;
								        			break;
								        		}
								        		// For now allow NON-NLS-0 comments
								        		if (i===0 && match[2] === '0'){
								        			hasMatch = true;
								        			break;
								        		}
								        	}
								        	if (!hasMatch){
								        		value = match[1] ? match[0] : '//' + match[0]; //$NON-NLS-1$
												start = comment.range[0] + match.index;
												if (match[1]){
													start += 2; // Comment range doesn't include line comment prefix
												}
	                    						reportUnusedNLS([start, start+value.length], value, match[0]);	        		
								        	}
								        }
								    }
								}
	                    	}
	                    	
	                    	// Find comments on lines with no string literals
	                    	for (lineNumber in linesWithComments){
	                    		comment = linesWithComments[lineNumber];
	                    		if (comment){
	                    			// See if there is any code on the line before the comment
	                    			var index = comment.range[0]-1;
	                    			var text = node.sourceFile.text;
	                    			var isBlank = index < 0;  //If we happen to be at the start of the file treat as newline
	                    			var prevChar;
	                    			if (text){
		                    			while (index >= 0 && (prevChar = text.charAt(index)).match(/\s/)){
		                    				if (prevChar === '\n' || index === 0){
		                    					isBlank = true;
		                    					break;
		                    				}
		                    				index--;
		                    			}
	                				}
	                    			while ((match = nonNlsRegExp.exec(comment.value)) !== null){
	                    				if (isBlank && match.index > 0){
	                    					break; // We are on a commented out line of code, skip marking non-nls messages
	                    				}
	                    				value = match[1] ? match[0] : '//' + match[0]; //$NON-NLS-1$
										start = comment.range[0] + match.index;
										if (match[1]){
											start += 2; // Comment range doesn't include line comment prefix
										}
	            						reportUnusedNLS([start, start+value.length], value, match[0]);	
	            					}
	                			}
	                    	}
	                    }
					};
	        },
			"no-redeclare": function(context) {
	                function reportRedeclaration(node, name) {
	                    context.report(node, ProblemMessages['no-redeclare'], {0:name});
	                }
	
	                function checkScope() {
	                    try {
	                        var scope = context.getScope();
	                        scope.variables.forEach(function(variable) {
	                            // If variable has multiple defs, every one after the 1st is a redeclaration
	                            variable.defs.slice(1).forEach(function(def) {
	                                reportRedeclaration(def.name, def.name.name);
	                            });
	                        });
	                    }
	                    catch(ex) {
	                        Logger.log(ex);
	                    }
	                }
	
	                return {
	                    "Program": checkScope,
	                    "FunctionDeclaration": checkScope,
	                    "FunctionExpression": checkScope,
	                    "ArrowFunctionExpression": checkScope
	                };
	        },
	        "no-regex-spaces": function(context) {
	
	                function reportSpaces(node) {
	                    var regex = /( {2,})/g;
	                    var val = null;
	                    while((val = regex.exec(node.raw)) !== null) {
	                        var start = node.range[0]+val.index;
	                        var len = val[0].length;
	                        context.report({type: 'Literal', range:[start, start+len], loc: node.loc},  //$NON-NLS-1$
	                                        ProblemMessages['no-regex-spaces'], {0:len});
	                    }
	                }
	
	                return {
	                    'Literal': function(node) {
	                        if(node.parent && node.parent.type === 'NewExpression') {
	                            if(node.parent.callee.name === 'RegExp') {
	                                reportSpaces(node);
	                            }
	                        }
	                        var tok = context.getFirstToken(node);
	                        if(tok && tok.type === 'RegularExpression') {
	                            reportSpaces(node);
	                        }
	                    }
	                };
	        },
	        "no-reserved-keys": function(context) {
	                return {
	                    'ObjectExpression': function(node) {
	                        if(node.properties) {
	                            for(var i = 0; i < node.properties.length; i++) {
	                                var prop = node.properties[i];
	                                if(prop.key.type === 'Identifier' && JsSyntax.keywords.indexOf(prop.key.name) > -1) {
	                                    context.report(prop.key, ProblemMessages['no-reserved-keys']);
	                                }
	                            }
	                        }
	                    }
	                };
	        },
	        "no-shadow": function(context) {
	                function addVariables(map, scope) {
	                    scope.variables.forEach(function(variable) {
	                        var name = variable.name;
	                        if (!variable.defs.length) { // Ignore the synthetic 'arguments' variable
	                            return;
	                        } if (!Object.prototype.hasOwnProperty.call(map, name)) {
	                            map[variable.name] = scope;
	                        }
	                    });
	                }
	
	                /**
	                 * @returns {Object} A map of {String} -> {Scope}. Keys are symbol names, values are the
	                 * uppermost scope that binds the name.
	                 */
	                function createSymbolMap(scope) {
	                    var upper = scope.upper;
	                    var symbols = Object.create(null);
	
	                    // Hack to walk past upper scope lacking a _namedFunctions map. This happens because escope generates
	                    // 2 scopes for a FunctionExpression. The first is never returned by context.getScope() as it is not
	                    // the innermost, so this rule never visits it.
	                    while (upper && !upper._symbols) { upper = upper.upper; }
	                    if (upper) {
	                        // Propagate upper scope's named functions to ours
	                        util.mixin(symbols, upper._symbols);
	                    }
	                    addVariables(symbols, scope);
	                    scope._symbols = symbols;
	                    return symbols;
	                }
	
	                function reportShadow(node, name) {
	                    context.report(node, ProblemMessages['no-shadow'], {0: name});
	                }
	
	                function isParameter(variable) {
	                    return variable.defs.some(function(def) {
	                        return def.type === "Parameter";
	                    });
	                }
	
	                function checkScope(node) {
	                    try {
	                        // Build map
	                        var scope = context.getScope();
	                        if (node.type === "FunctionExpression" && node.id && node.id.name) {
	                            scope  = scope.upper;
	                            if (scope.type === "global") {
		                            return; // No shadowing can occur in the global (Program) scope
		                        }
	                        }
	                        var symbolMap = createSymbolMap(scope);
	                        scope.variables.forEach(function(variable) {
	                            if (!variable.defs.length) {
	                                return; // Skip 'arguments'
	                            }
	                            // If variable's name was first bound in an upper scope, and the variable is not a parameter,
	                            // flag it.
	                            var bindingSource;
	                            if ((bindingSource = symbolMap[variable.name]) && bindingSource !== scope && !isParameter(variable)) {
	                                reportShadow(variable.defs[0].name, variable.name);
	                            }
	                        });
	                    } catch(ex) {
	                        Logger.log(ex);
	                    }
	                }
	                return {
	                    "Program": checkScope,
	                    "FunctionDeclaration": checkScope,
	                    "FunctionExpression": checkScope,
	                    "ArrowFunctionExpression": checkScope
	                };
	        },
	        "no-shadow-global": function(context) {
	
	                function checkShadow(node) {
	                    var env = context.env ? context.env : {};
	                    env.builtin = true;
	                    switch(node.type) {
	                        case 'VariableDeclarator': {
	                            if(env[Finder.findESLintEnvForMember(node.id.name)]) {
	                                context.report(node.id, ProblemMessages['no-shadow-global'], {0: node.id.name});
	                            }
	                            break;
	                        }
	                        case 'FunctionExpression':
	                        case 'FunctionDeclaration':
	                        case 'ArrowFunctionExpression': {
	                            node.params.forEach(function(param) {
	                                if(param.type === 'Identifier' && env[Finder.findESLintEnvForMember(param.name)]) {
	                                    context.report(param, ProblemMessages['no-shadow-global-param'], {0: param.name, nls:'no-shadow-global-param'}); //$NON-NLS-1$
	                                }
	                            });
	                            break;
	                        }
	                    }
	                }
	
	                return {
	                    'FunctionExpression': checkShadow,
	                    'FunctionDeclaration': checkShadow,
	                    'ArrowFunctionExpression': checkShadow,
	                    'VariableDeclarator': checkShadow
	                };
	        },
			'no-sparse-arrays': function(context) {
	        		return {
	        			'ArrayExpression' : function(node){
	        			    if(node.elements.indexOf(null) > -1) {
	        			        context.report(node, ProblemMessages['no-sparse-arrays']);
	        			    }
	        			}
	        		};
	        },
	        "no-throw-literal": function(context) {
	                return {
	                    "ThrowStatement": function(node) {
	                        try {
	                            var argument = node.argument;
	                            // We have no type analysis yet, so to avoid false positives, assume any expr that
	                            // *could* generate an Error actually does.
	                            switch (argument.type) {
	                                case "Identifier":
	                                    if (argument.name !== "undefined") {
	                                        return;
	                                    }
	                                //$FALLTHROUGH$
	                                case "Literal":
	                                case "ObjectExpression":
	                                case "ArrayExpression":
	                                    context.report(argument, ProblemMessages['no-throw-literal']);
	                            }
	                        } catch (ex) {
	                            Logger.log(ex);
	                        }
	                    }
	                };
	        },
			"no-undef": function(context) {
	                function isImplicitGlobal(variable) {
	                    return variable.defs.every(function(def) {
	                        return def.type === "ImplicitGlobalVariable";
	                    });
	                }
	
	                function getDeclaredGlobalVariable(scope, ref) {
	                    var declaredGlobal = null;
	                    scope.variables.some(function(variable) {
	                        if (variable.name === ref.identifier.name) {
	                            // If it's an implicit global, it must have a `writeable` field (indicating it was declared)
	                            if (!isImplicitGlobal(variable) || Object.hasOwnProperty.call(variable, "writeable")) {  //$NON-NLS-0$
	                                declaredGlobal = variable;
	                                return true;
	                            }
	                        }
	                        return false;
	                    });
	                    return declaredGlobal;
	                }
	
	                return {
	                    "Program": function(/*node*/) {
	            			try {
	            	            var globalScope = context.getScope();
	
	            	            globalScope.through.forEach(function(ref) {
	            	                var variable = getDeclaredGlobalVariable(globalScope, ref),
	            	                    name = ref.identifier.name;
	            	                if (!variable) {
	            	                	// Check if Tern knows about a definition in another file
	            	                	var env = Finder.findESLintEnvForMember(name);
	            	                    var tern = context.getTern();
										var query = tern.query;
										query.end = ref.identifier.start;
										var foundType = null;
										try {
											var expr = tern.findExpr(tern.file, query);
											var type = tern.findExprType(tern.server, query, tern.file, expr);
											// The origin could be a primitive in the same file (a=1;) which we still want to mark
											// The origin could be an environment, which we still want to mark (eslint-env directive is handled separately)
											if (type && type.origin && type.origin !== tern.file.name && type.origin !== env){
												foundType = type;
											}
										} catch(e) {
											//ignore
										}
		            	                if (!foundType){
		            	                    var inenv = env ? '-inenv' : ''; //$NON-NLS-1$
		            	                    var nls = 'no-undef-defined'; //$NON-NLS-1$
		            	                    context.report(ref.identifier, ProblemMessages['no-undef-defined'], {0:name, nls: nls, pid: nls+inenv});
	            	                    }
	            	                } else if (ref.isWrite() && variable.writeable === false) {
	            	                    context.report(ref.identifier, ProblemMessages['no-undef-readonly'], {0:name, nls: 'no-undef-readonly'}); //$NON-NLS-1$
	            	                }
	            	            });
	                    	}
	                    	catch(ex) {
	                    		Logger.log(ex);
	                    	}
	                    }
	                };
	        },
	        'no-undef-init': function(context) {
	        		return {
	        			'VariableDeclarator': function(node) {
	        				if(node.init && node.init.type === 'Identifier' && node.init.name === 'undefined') {
	    						context.report(node.init, ProblemMessages['no-undef-init']);
	        				}
	        			}
	        		};
	        },
			'no-unreachable': function(context) {
	                /**
	                 * @description Returns if the statement is 'hoisted'
	                 * @param {Object} node The AST node to check
	                 * @see http://www.adequatelygood.com/JavaScript-Scoping-and-Hoisting.html
	                 * @returns {Boolean} If the node is hoisted (allowed) after a returnable statement
	                 */
	                function hoisted(node) {
	                    switch(node.type) {
	                        case 'FunctionDeclaration':
	                        case 'VariableDeclaration':
	                            return true;
	                    }
	                    return false;
	                }
	
	                /**
	                 * @description Check the array of child nodes for any unreachable nodes
	                 * @param {Array} children The child nodes to check
	                 * @since 6.0
	                 */
	                function checkUnreachable(children) {
	                    try {
	                        var i = 0;
	                        for(i; i < children.length; i++) {
	                            if(util.returnableStatement(children[i])) {
	                                break;
	                            }
	                        }
	                        //mark all the remaining child statemnts as unreachable
	                        for(i++; i < children.length; i++) {
	                            var child = children[i];
	                            if(!hoisted(child) && child.type !== "EmptyStatement") {
	                                context.report(child, ProblemMessages['no-unreachable']);
	                            }
	                        }
	                    }
	                    catch(ex) {
	                        Logger.log(ex);
	                    }
	                }
	
	                return {
	                    "BlockStatement": function(node) {
	                        checkUnreachable(node.body);
	                    },
	
	                    "SwitchCase": function(node) {
	                        checkUnreachable(node.consequent);
	                    }
	                };
	        },
			"no-unused-params" : function(context) {
	                function hasCallbackComment(node) {
	                    if(node && node.leadingComments) {
	                        var len = node.leadingComments.length;
	                        for(var i = 0; i < len; i++) {
	                            var comment = node.leadingComments[i];
	                            if (comment.type === 'Block' && /\s*(?:@(callback|public))\s+/.test(comment.value)) {
	                                return true;
	                            }
	                        }
	                    }
	                    return false;
	                }
	
	        		function check(node) {
	        			try {
	        				var scope = context.getScope();
	        				var kids = scope.childScopes;
	        				if(scope.functionExpressionScope && kids && kids.length) {
	        					scope = kids[0];
	        				}
	        				scope.variables.forEach(function(variable) {
	        					if (!variable.defs.length || variable.defs[0].type !== "Parameter") { // only care about parameters
	        						return;
	        					}
	        					var defnode = variable.defs[0].name;
	        					if (!variable.references.length) {
	        					    var pid = 'no-unused-params'; //$NON-NLS-1$
	        					    if(node.type === 'FunctionExpression') {
	        					        pid += '-expr'; //$NON-NLS-1$
	        					        if(hasCallbackComment(node) || (node.params && node.params.length > 0 && hasCallbackComment(node.params[0]))) {
	        					            return;
	        					        }
	        					        var parent = node.parent;
	        					        switch(parent.type) {
	        					        	case 'Property': {
	        					        		if(hasCallbackComment(parent) || hasCallbackComment(parent.key)) {
	        					        			return;
	        					        		}
	        					        		break;
	        					        	}
	        					        	case 'MemberExpression': {
		        					        	//https://bugs.eclipse.org/bugs/show_bug.cgi?id=457067
		        					            // func epxrs part of call expressions, i.e. bind-like calls
		        					            //Esprima tags the root containing expression with the doc, not the func expr
		        					            parent = parent.parent;
		        					            if(parent.type === 'CallExpression' && hasCallbackComment(parent)) {
		        					               return;
		        					            }
	        					        		break;
	        					        	}
	        					        	case 'AssignmentExpression': {
	        					        		var left = parent.left;
		        					        	if(left.type === 'MemberExpression') {
		        					        		if(hasCallbackComment(left)) {
		        					        			return;
		        					        		}
		        					        	} else if(left.type === 'Identifier') {
		        					        		if(hasCallbackComment(left)) {
		        					        			return;
		        					        		}
		        					        	}
	        					        		break;
	        					        	}
	        					        	case 'VariableDeclarator': {
	        					        		if(hasCallbackComment(parent.id)) {
	        					        			return;
	        					        		}
	        					        		break;
	        					        	}
	        					        }
	        					    } else if(node.type === 'ArrowFunctionExpression') {
	        					    	pid += '-arrow'; //$NON-NLS-1$
	        					    	/*
	    					        	//check the parent: () => {a => {}}
	    					        	//the comment is attached to the ExpressionStatement
	    					        	if(node.parent.type === 'ExpressionStatement' && hasCallbackComment(node.parent)) {
	    					        		return;
	    					        	}
	        					        */
	        					    }
	        						context.report(defnode, ProblemMessages['no-unused-params'], {0:defnode.name, pid: pid}); //$NON-NLS-0
	        					}
	        				});
	        			}
	        			catch(ex) {
	        				Logger.log(ex);
	        			}
	        		}
	
	        		return {
	        			"FunctionDeclaration": check,
	        			"FunctionExpression": check,
	        			"ArrowFunctionExpression": check
	        		};
	        },
			"no-unused-vars": function(context) {
	        		function isRead(ref) {
	        			return ref.isRead();
	        		}
	
	        		function getReferences(scope, variable) {
	        			var refs = variable.references;
	        			if (scope.type === "global") {
	        				// For whatever reason, a reference to some variable 'x' defined in global scope does not cause an entry
	        				// in x.references or globalScope.references. So we append any refs in globalScope.through that mention x.
	        				refs = refs.concat(scope.through.filter(function(ref) {
	        					return ref.identifier.name === variable.name;
	        				}));
	        			}
	        			return refs;
	        		}
	
	        		function check(/**node*/) {
	        			try {
	        				var scope = context.getScope();
	        				scope.variables.forEach(function(variable) {
	        					if (!variable.defs.length || variable.defs[0].type === "Parameter") { // Don't care about parameters
	        						return;
	        					}
	        					var node = variable.defs[0].node;
	        					var references = getReferences(scope, variable), id = node.id;
	        					if (!references.length) {
	        					    if(node.type === 'FunctionDeclaration') {
	        					    	   var tern = context.getTern();
	        					    	   var refQuery = tern.query;
	        					    	   if (typeof refQuery.end === "undefined") {
										refQuery.end = node.id.end;
	        					    	   }
	        					    	   var refs = null;
	        					    	   var filename = tern.file.name;
	        					    	   try {
	        					    	       refs = tern.findRefs(tern.server, refQuery, tern.file);
	        					    	   } catch(e) {
	        					    	      //ignore
	        					    	   }
	        					    	   var result = [];
	        					    	   if (refs && Array.isArray(refs.refs)) {
	        					    	   		// filtering the refs from the current file - remove the one that matches the current node
	        					    	   		refs.refs.forEach(function(match) {
	        					    	   			if (match.file !== filename) {
	        					    	   				// any match in a different file is a good match
	        					    	   				result.push(match);
	        					    	   			}
	        					    	   		});
	        					    	   }
	        					    	   if (result === null || result.length === 0) {
	        					           context.report(id, ProblemMessages['no-unused-vars-unused-funcdecl'], {0:id.name, nls: 'no-unused-vars-unused-funcdecl'}); //$NON-NLS-1$
	        					       }
	        					    } else {
	        						   context.report(id, ProblemMessages['no-unused-vars-unused'], {0:id.name, nls: 'no-unused-vars-unused'}); //$NON-NLS-1$
	        						}
	        					} else if (!references.some(isRead)) {
	        						context.report(id, ProblemMessages['no-unused-vars-unread'], {0:id.name, nls: 'no-unused-vars-unread'}); //$NON-NLS-1$
	        					}
	        				});
	        			}
	        			catch(ex) {
	        				Logger.log(ex);
	        			}
	        		}
	
	        		return {
	        			"Program": check,
	        			"FunctionDeclaration": check,
	        			"FunctionExpression": check,
	        			"ArrowFunctionExpression": check
	        		};
	        },
			"no-use-before-define": function(context) {
	                function booleanOption(b, defaultValue) {
	            		return typeof b === "boolean" ? b : defaultValue;
	            	}
	
	        		var options = context.options,
	        		    flag_vars = booleanOption(options[0], true),   // by default, flag vars
	        		    flag_funcs = booleanOption(options[1], false); // ... but not funcs
	
	        		function check(/**node*/) {
	        				try {
	        				var scope = context.getScope();
	        				scope.references.forEach(function(ref) {
	        					var decl = util.getDeclaration(ref, scope), identifier = ref.identifier, name = identifier.name, defs;
	        					if (decl && (defs = decl.defs).length && identifier.range[0] < defs[0].node.range[0]) {
	        						var defType = defs[0].type;
	        						if ((!flag_funcs && defType === "FunctionName") || (!flag_vars && defType === "Variable")) {
	        							return;
	        						}
	        						context.report(identifier, ProblemMessages['no-use-before-define'], {0:name});
	        					}
	        				});
	        			}
	        			catch(ex) {
	        				Logger.log(ex);
	        			}
	        		}
	
	        		return {
	        			"Program": check,
	        			"FunctionExpression": check,
	        			"FunctionDeclaration": check
	        		};
	        },
	        "radix": function(context) {
	                function checkParseInt(call) {
	                    var callee = call.callee;
	                    if (callee.name === "parseInt" && callee.type === "Identifier" && call.arguments.length < 2) {
	                        // Ensure callee actually resolves to the global `parseInt`
	                        var shadowed = false;
	                        for (var scope = context.getScope(); scope; scope = scope.upper) {
	                            shadowed = scope.variables.some(function(variable) {
	                                // Found a `parseInt` that is not the builtin
	                                return variable.name === "parseInt" && variable.defs.length;
	                            });
	                            if (shadowed) {
	                                break;
	                            }
	                        }
	                        if (!shadowed) {
	                            context.report(callee, ProblemMessages['radix'], null);
	                        }
	                    }
	                }
	                return {
	                    "CallExpression": checkParseInt
	                };
	        },
			"no-mixed-spaces-and-tabs": function(context) {
					var ignoredLocations = [];
					// we define a regular expression that matches any line that starts with spaces after tabs before any other character
					// any space after a tab \            (not a problem with smart-tabs)
					//                        after any number of tabs or space at the beginning of the line (^)
					// any tab after a space /
					var lineStart = /^(?=[\t ]* \t)/; // smart-tabs enabled
					//var lineStart = /^(?=[\t ]*( \t|\t ))/; // smart-tabs disabled
	
					function rememberIgnoreElement(node) {
						ignoredLocations.push(node.loc);
					}
	
					function checkProgram(node) {
						var lines = context.getSourceLines();
						var allComments = context.getAllComments();
						
						// add all comments to the ignored elements
						allComments.forEach(rememberIgnoreElement);
						
						// now we check if the lines starts with a mix of tabs and spaces
						lines.forEach(function(line, index) {
							var match = lineStart.exec(line);
							if (match !== null) {
								// we got a match on the corresponding line
								// we need to see if the match is within an existing comment or a literal
								var currentLine = index + 1; // index is 0-based
								var currentColumn = match.index + 1; // column is 1-based
								if (searchInsideComments(ignoredLocations, { line: currentLine, column: currentColumn}) !== null) {
									// the position is inside a comment so we ignore it - move to the next one
									return;
								}
								context.report(node, { line: currentLine, column: currentColumn}, ProblemMessages['no-mixed-spaces-and-tabs']);
							}
						});
					}
					
					function searchInsideComments(locations, loc) {
						var min = 0;
						var max = locations.length - 1;
						var guess;
					
						while (min <= max) {
							guess = Math.floor(min + (max - min) / 2);
					
							var currentLocation = locations[guess];
							if (isLocationInside(loc, currentLocation)) {
								return currentLocation;
							}
							else if (isBefore(loc, currentLocation)) {
								max = guess - 1;
							} else {
								min = guess + 1;
							}
						}
						return null;
					}
					
					function isLocationInside(givenLocation, locations) {
						/**
						 * Return true if the given location is inside the locations, false otherwise 
						 */
						var start = locations.start;
						var end = locations.end;
						var line = givenLocation.line;
						var column = givenLocation.column;
						
						if (start.line < line) {
							if (end.line > line) {
								return true;
							} else if (end.line === line) {
								return end.column > column;
							}
						} else if (start.line === line) {
							if (start.column < column) {
								if (end.line > line) {
									return true;
								} else if (end.line === line) {
									return end.column > column;
								}
							}
						}
						return false;
					}
					
					function isBefore(givenLocation, locations) {
						/**
						 * Return true if the given location is before locations
						 */
						var start = locations.start;
						var line = givenLocation.line;
						var column = givenLocation.column;
						
						if (line < start.line) {
							return true;
						} else if (line === start.line) {
							return column < start.column;
						}
						return false;
					}
	
					return {
						"Program:exit": checkProgram
					};
			},
			"semi": function(context) {
	        		function checkForSemicolon(node) {
	        			try {
	        				var tokens = context.getTokens(node);
	        				var len = tokens.length;
	        				var t = tokens[len - 1];
	        				if (t && t.type === "Punctuator" && t.value === ";") {
	        					return;
	        				}
	        				context.report(node, ProblemMessages['semi'], null, t /* expose the bad token */);
	        			}
	        			catch(ex) {
	        				Logger.log(ex);
	        			}
	        		}
	
	        		function checkVariableDeclaration(node) {
	        			try {
	        				var ancestors = context.getAncestors(node),
	        				    parent = ancestors[ancestors.length - 1],
	        				    parentType = parent.type;
	        				if ((parentType === "ForStatement" && parent.init === node) || (parentType === "ForInStatement" && parent.left === node)){
	        					// One of these cases, no semicolon token is required after the VariableDeclaration:
	        					// for(var x;;)
	        					// for(var x in y)
	        					return;
	        				}
	        				checkForSemicolon(node);
	        			}
	        			catch(ex) {
	        				Logger.log(ex);
	        			}
	        		}
	
	        		return {
	        			"VariableDeclaration": checkVariableDeclaration,
	        			"ExpressionStatement": checkForSemicolon,
	        			"ReturnStatement": checkForSemicolon,
	        			"ThrowStatement": checkForSemicolon,
	        			"BreakStatement": checkForSemicolon,
	        			"ContinueStatement": checkForSemicolon
	        		};
	        },
			"use-isnan": function(context) {
	        		return {
	        			'BinaryExpression' : function(node) {
	        				try {
	        					if(node.left.type === 'Identifier' && node.left.name === 'NaN') {
	        						context.report(node.left, ProblemMessages['use-isnan'], null, node.left);
	        					} else if(node.right.type === 'Identifier' && node.right.name === 'NaN') {
	        						context.report(node.right, ProblemMessages['use-isnan'], null, node.right);
	        					}
	        				}
	        				catch(ex) {
	        					Logger.log(ex);
	        				}
	        			}
	        		};
	        },
			'valid-typeof': function(context) {
	        		//https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof
	        		var symbols = ['undefined', 'object', 'function', 'boolean', 'number', 'string', 'symbol']; //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ //$NON-NLS-5$ //$NON-NLS-6$ //$NON-NLS-7$
	        		var ops = ['==', '===', '!=', '!=='];
	
	        		return {
	        			'UnaryExpression' : function(node){
	        			    if(node.operator === 'typeof') {
	        			        var parent = node.parent;
	        			        if(parent && parent.type === 'BinaryExpression' &&
	        			            ops.indexOf(parent.operator) > -1) {
	           			            var val = parent.left === node ? parent.right : parent.left;
	        			            if (val.type !== 'Literal' || symbols.indexOf(val.value) < 0) {
	        			                context.report(val, ProblemMessages['valid-typeof']);
	        			            }
	        			        }
	        			    }
	        			}
	        		};
	        },
	        
	        // Rules consumed from ESLint 3rd party library
			'accessor-pairs': accessorPairs,
			'no-control-regex': noControlRegex,
			'no-duplicate-case': noDuplicateCase,
			'no-empty-character-class': noEmptyCharClasses,
			'no-extra-boolean-cast': noExtraBoolCast,
			'no-extra-parens': noExtraParens,
			'no-invalid-regexp': noInvalidRegExp,
			'no-negated-in-lhs': noNegatedInLhs,
			'no-obj-calls': noObjCalls,
			'no-eq-null' : noEqNull,
			'no-else-return': noElseReturn,
			'no-empty-label': noEmptyLabel,
			'no-self-compare': noSelfCompare,
			'no-irregular-whitespace': noIrregularWhitespace,
			'no-self-assign': function(context) {
					function checkVariableDeclarator(variableDeclarator) {
						var init = variableDeclarator.init;
						var id = variableDeclarator.id;
						if (init
								&& init.type === 'Identifier'
								&& id.type === 'Identifier'
								&& id.name === init.name) {
							context.report(variableDeclarator, ProblemMessages['no-self-assign']);
						}
					}
					function checkAssignmentExpression(assignment) {
						var left = assignment.left;
						var right = assignment.right;
						if (left.type === 'Identifier'
								&& right.type === 'Identifier'
								&& left.name === right.name) {
							context.report(assignment, ProblemMessages['no-self-assign']);
						}
					}
					return {
						"AssignmentExpression" : checkAssignmentExpression,
						"VariableDeclarator" : checkVariableDeclarator
					};
				},
			'type-checked-consistent-return' : function(context) {
					var functions = [];
				
					//--------------------------------------------------------------------------
					// Helpers
					//--------------------------------------------------------------------------
				
					/**
					 * Marks entrance into a function by pushing a new object onto the functions
					 * stack.
					 * @returns {void}
					 * @private
					 */
					function enterFunction() {
						functions.push({});
					}
				
					/**
					 * Marks exit of a function by popping off the functions stack.
					 * @returns {void}
					 * @private
					 */
					function exitFunction() {
						functions.pop();
					}
				
					function getValue(node) {
						if (node.argument) {
							var tern = context.getTern();
							var query = tern.query;
							query.end = node.argument.start;
							var foundType = null;
							try {
								var expr = tern.findExpr(tern.file, query);
								var type = tern.findExprType(tern.server, query, tern.file, expr);
								if (type) {
									foundType = type;
								}
							} catch(e) {
								//ignore
							}
							if (foundType) {
								var typeString = foundType.toString();
								switch(typeString) {
									case "bool" :
										return "boolean";
									case "{}" :
										return "object";
									case "?" :
										return "null";
									default :
										return typeString;
								}
							}
							return "object";
						}
						return "undefined";
					}
				
					//--------------------------------------------------------------------------
					// Public
					//--------------------------------------------------------------------------
				
					return {
				
						"Program": enterFunction,
						"FunctionDeclaration": enterFunction,
						"FunctionExpression": enterFunction,
						"ArrowFunctionExpression": enterFunction,
				
						"Program:exit": exitFunction,
						"FunctionDeclaration:exit": exitFunction,
						"FunctionExpression:exit": exitFunction,
						"ArrowFunctionExpression:exit": exitFunction,
				
						"ReturnStatement": function(node) {
							var returnInfo = functions[functions.length - 1];
							var returnTypeDefined = "type" in returnInfo;
				
							if (returnTypeDefined) {
								var typeOfReturnStatement = getValue(node);
								var storeType = returnInfo.type;
								if (storeType !== typeOfReturnStatement) {
									// "null" and "object" or "string" are compatible
									switch(storeType) {
										case "null" :
											if (typeOfReturnStatement !== "object" && typeOfReturnStatement !== "string") {
												context.report(node, ProblemMessages['inconsistent-return'], {type1: storeType, type2: typeOfReturnStatement});
											}
											break;
										case "string" :
											if (typeOfReturnStatement !== "null") {
												context.report(node, ProblemMessages['inconsistent-return'], {type1: storeType, type2: typeOfReturnStatement});
											}
											break;
										case "object" :
											if (typeOfReturnStatement !== "null") {
												context.report(node, ProblemMessages['inconsistent-return'], {type1: storeType, type2: typeOfReturnStatement});
											}
											break;
										default:
											context.report(node, ProblemMessages['inconsistent-return'], {type1: storeType, type2: typeOfReturnStatement});
									}
								}
							} else {
								returnInfo.type = getValue(node);
							}
						}
					};
				}
		};
	
		function _mapCallees(arr, obj) {
			for(var i = 0; i < arr.length; i++) {
				obj[arr[i]] = true;
			}
		}
	
		var _callees = Object.create(null);
		_mapCallees(['require', 'requirejs', 'importScripts', 'define', 'Worker', 'SharedWorker', 'addEventListener', 'RegExp', //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ //$NON-NLS-5$ //$NON-NLS-6$ //$NON-NLS-7$ //$NON-NLS-8$
		'removeEventListener'], _callees);  //$NON-NLS-1$
	    
	    function _collectLinesWithStringLiterals(node, lineMap){
	    	
	    	// Create a map of line numbers to a list of literal nodes
	    	if (typeof node.value === 'string' && node.value.length > 0){
	    		if (node.value.toLowerCase() === 'use strict'){
	    			return;
	    		}
	    		if(/^(?:[\.,-\/#!$%\^&\*;:{}=\-_`~()@\+\?><\[\]\+])$/.test(node.value)) {
	    			return; //don't nag about punctuation
	    		} else if(/^(?:==|!=|===|!==|=>)$/.test(node.value)) {
	    			return; //don't nag about operators
	    		}
	    		if (node.parent){
	    			switch(node.parent.type) {
	    				case 'UnaryExpression':
	    				case 'MemberExpression':
	    				case 'SwitchCase': {
	    					return;
	    				}
	    				case 'BinaryExpression': {
	    					if(node.parent.operator !== '+') {
	    						return;
	    					}
	    					break;
	    				}
	    				case 'Property': {
	    					if(node.parent.key === node) {
	    						return;
	    					}
							var _p = node.parent.parent.parent;
							if(_p && _p.type === 'CallExpression' && _p.callee && _p.callee.name === 'define') {
								return;
							}
	    					break;
	    				}
	    				case 'NewExpression':
	    				case 'CallExpression': {
	    					var callee = node.parent.callee;
	    					if(callee) {
	    						if(callee.type === 'MemberExpression' && callee.property && _callees[callee.property.name]) {
	    							return;
	    						} else if(_callees[callee.name]) {
	    							return;
	    						}
	    					}
	    					break;
	    				}
	    				case 'ArrayExpression': {
	    					_p = node.parent.parent;
	    					if(_p.type === 'CallExpression' && (_p.callee.name === 'define' || _p.callee.name === 'require' || _p.callee.name === 'requirejs')) {
	    						return;
	    					}
	    					break;
	    				}
	    			}
	    		}
	    		var lineNum = node.loc.end.line;
	    		if (!lineMap[lineNum]){
	    			lineMap[lineNum] = [];
	    		}
	    		lineMap[lineNum].push(node);
	    	}
	    }
	
		return {
			rules: rules
		};
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 38 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*eslint-env amd */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (module) {/**
	 * @fileoverview Rule to flag the use of empty character classes in regular expressions
	 * @author Ian Christian Myers
	 */
	
	"use strict";
	
	//------------------------------------------------------------------------------
	// Helpers
	//------------------------------------------------------------------------------
	
	/*
	plain-English description of the following regexp:
	0. `^` fix the match at the beginning of the string
	1. `\/`: the `/` that begins the regexp
	2. `([^\\[]|\\.|\[([^\\\]]|\\.)+\])*`: regexp contents; 0 or more of the following
	  2.0. `[^\\[]`: any character that's not a `\` or a `[` (anything but escape sequences and character classes)
	  2.1. `\\.`: an escape sequence
	  2.2. `\[([^\\\]]|\\.)+\]`: a character class that isn't empty
	3. `\/` the `/` that ends the regexp
	4. `[gimuy]*`: optional regexp flags
	5. `$`: fix the match at the end of the string
	*/
	var regex = /^\/([^\\[]|\\.|\[([^\\\]]|\\.)+\])*\/[gimuy]*$/;
	
	//------------------------------------------------------------------------------
	// Rule Definition
	//------------------------------------------------------------------------------
	
	__webpack_require__(39).exports = function(context) {
	
	    return {
	
	        "Literal": function(node) {
	            var token = context.getFirstToken(node);
	            if (token.type === "RegularExpression" && !regex.test(token.value)) {
	                context.report(node, "Empty class.");
	            }
	        }
	
	    };
	
	};
	
	__webpack_require__(39).exports.schema = [];
	
	return __webpack_require__(39).exports;
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 39 */
/***/ function(module, exports, __webpack_require__) {

	var map = {
		"./accessor-pairs": 40,
		"./accessor-pairs.js": 40,
		"./no-control-regex": 41,
		"./no-control-regex.js": 41,
		"./no-duplicate-case": 42,
		"./no-duplicate-case.js": 42,
		"./no-else-return": 43,
		"./no-else-return.js": 43,
		"./no-empty-character-class": 38,
		"./no-empty-character-class.js": 38,
		"./no-empty-label": 44,
		"./no-empty-label.js": 44,
		"./no-eq-null": 45,
		"./no-eq-null.js": 45,
		"./no-extra-boolean-cast": 46,
		"./no-extra-boolean-cast.js": 46,
		"./no-extra-parens": 47,
		"./no-extra-parens.js": 47,
		"./no-invalid-regexp": 48,
		"./no-invalid-regexp.js": 48,
		"./no-irregular-whitespace": 49,
		"./no-irregular-whitespace.js": 49,
		"./no-negated-in-lhs": 50,
		"./no-negated-in-lhs.js": 50,
		"./no-obj-calls": 51,
		"./no-obj-calls.js": 51,
		"./no-self-compare": 52,
		"./no-self-compare.js": 52
	};
	function webpackContext(req) {
		return __webpack_require__(webpackContextResolve(req));
	};
	function webpackContextResolve(req) {
		return map[req] || (function() { throw new Error("Cannot find module '" + req + "'.") }());
	};
	webpackContext.keys = function webpackContextKeys() {
		return Object.keys(map);
	};
	webpackContext.resolve = webpackContextResolve;
	module.exports = webpackContext;
	webpackContext.id = 39;


/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*eslint-env amd */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (module) {/**
	 * @fileoverview Rule to flag wrapping non-iife in parens
	 * @author Gyandeep Singh
	 * @copyright 2015 Gyandeep Singh. All rights reserved.
	 */
	
	"use strict";
	
	//------------------------------------------------------------------------------
	// Helpers
	//------------------------------------------------------------------------------
	
	/**
	 * Checks whether or not a given node is an `Identifier` node which was named a given name.
	 * @param {ASTNode} node - A node to check.
	 * @param {string} name - An expected name of the node.
	 * @returns {boolean} `true` if the node is an `Identifier` node which was named as expected.
	 */
	function isIdentifier(node, name) {
	    return node.type === "Identifier" && node.name === name;
	}
	
	/**
	 * Checks whether or not a given node is an argument of a specified method call.
	 * @param {ASTNode} node - A node to check.
	 * @param {number} index - An expected index of the node in arguments.
	 * @param {string} object - An expected name of the object of the method.
	 * @param {string} property - An expected name of the method.
	 * @returns {boolean} `true` if the node is an argument of the specified method call.
	 */
	function isArgumentOfMethodCall(node, index, object, property) {
	    var parent = node.parent;
	    return (
	        parent.type === "CallExpression" &&
	        parent.callee.type === "MemberExpression" &&
	        parent.callee.computed === false &&
	        isIdentifier(parent.callee.object, object) &&
	        isIdentifier(parent.callee.property, property) &&
	        parent.arguments[index] === node
	    );
	}
	
	/**
	 * Checks whether or not a given node is a property descriptor.
	 * @param {ASTNode} node - A node to check.
	 * @returns {boolean} `true` if the node is a property descriptor.
	 */
	function isPropertyDescriptor(node) {
	    // Object.defineProperty(obj, "foo", {set: ...})
	    if (isArgumentOfMethodCall(node, 2, "Object", "defineProperty") ||
	        isArgumentOfMethodCall(node, 2, "Reflect", "defineProperty")
	    ) {
	        return true;
	    }
	
	    // Object.defineProperties(obj, {foo: {set: ...}})
	    // Object.create(proto, {foo: {set: ...}})
	    node = node.parent.parent;
	    return node.type === "ObjectExpression" && (
	        isArgumentOfMethodCall(node, 1, "Object", "create") ||
	        isArgumentOfMethodCall(node, 1, "Object", "defineProperties")
	    );
	}
	
	//------------------------------------------------------------------------------
	// Rule Definition
	//------------------------------------------------------------------------------
	
	__webpack_require__(39).exports = function(context) {
	    var config = context.options[0] || {};
	    var checkGetWithoutSet = config.getWithoutSet === true;
	    var checkSetWithoutGet = config.setWithoutGet !== false;
	
	    /**
	     * Checks a object expression to see if it has setter and getter both present or none.
	     * @param {ASTNode} node The node to check.
	     * @returns {void}
	     * @private
	     */
	    function checkLonelySetGet(node) {
	        var isSetPresent = false;
	        var isGetPresent = false;
	        var isDescriptor = isPropertyDescriptor(node);
	
	        for (var i = 0, end = node.properties.length; i < end; i++) {
	            var property = node.properties[i];
	
	            var propToCheck = "";
	            if (property.kind === "init") {
	                if (isDescriptor && !property.computed) {
	                    propToCheck = property.key.name;
	                }
	            } else {
	                propToCheck = property.kind;
	            }
	
	            switch (propToCheck) {
	                case "set":
	                    isSetPresent = true;
	                    break;
	
	                case "get":
	                    isGetPresent = true;
	                    break;
	
	                default:
	                    // Do nothing
	            }
	
	            if (isSetPresent && isGetPresent) {
	                break;
	            }
	        }
	
	        if (checkSetWithoutGet && isSetPresent && !isGetPresent) {
	            context.report(node, "Getter is not present");
	        } else if (checkGetWithoutSet && isGetPresent && !isSetPresent) {
	            context.report(node, "Setter is not present");
	        }
	    }
	
	    return {
	        "ObjectExpression": function(node) {
	            if (checkSetWithoutGet || checkGetWithoutSet) {
	                checkLonelySetGet(node);
	            }
	        }
	    };
	
	};
	
	__webpack_require__(39).exports.schema = [
	    {
	        "type": "object",
	        "properties": {
	            "getWithoutSet": {
	                "type": "boolean"
	            },
	            "setWithoutGet": {
	                "type": "boolean"
	            }
	        },
	        "additionalProperties": false
	    }
	];
	return __webpack_require__(39).exports;
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 41 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*eslint-env amd */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (module) {
	/**
	 * @fileoverview Rule to forbid control charactes from regular expressions.
	 * @author Nicholas C. Zakas
	 */
	
	"use strict";
	
	//------------------------------------------------------------------------------
	// Rule Definition
	//------------------------------------------------------------------------------
	
	__webpack_require__(39).exports = function(context) {
	
	    /**
	     * Get the regex expression
	     * @param {ASTNode} node node to evaluate
	     * @returns {*} Regex if found else null
	     * @private
	     */
	    function getRegExp(node) {
	
	        if (node.value instanceof RegExp) {
	            return node.value;
	        } else if (typeof node.value === "string") {
	
	            var parent = context.getAncestors().pop();
	            if ((parent.type === "NewExpression" || parent.type === "CallExpression") &&
	            parent.callee.type === "Identifier" && parent.callee.name === "RegExp") {
	
	                // there could be an invalid regular expression string
	                try {
	                    return new RegExp(node.value);
	                } catch (ex) {
	                    return null;
	                }
	
	            }
	        } else {
	            return null;
	        }
	
	    }
	
	
	
	    return {
	
	        "Literal": function(node) {
	
	            var computedValue,
	                regex = getRegExp(node);
	
	            if (regex) {
	                computedValue = regex.toString();
	                if (/[\x00-\x1f]/.test(computedValue)) {
	                    context.report(node, "Unexpected control character in regular expression.");
	                }
	            }
	        }
	    };
	
	};
	
	__webpack_require__(39).exports.schema = [];
	
	return __webpack_require__(39).exports;
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 42 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*eslint-env amd */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (module) {
	/**
	 * @fileoverview Rule to disallow a duplicate case label.
	 * @author Dieter Oberkofler
	 * @author Burak Yigit Kaya
	 * @copyright 2015 Dieter Oberkofler. All rights reserved.
	 * @copyright 2015 Burak Yigit Kaya. All rights reserved.
	 */
	
	"use strict";
	
	//------------------------------------------------------------------------------
	// Rule Definition
	//------------------------------------------------------------------------------
	
	__webpack_require__(39).exports = function(context) {
	
	    return {
	        "SwitchStatement": function(node) {
	            var mapping = {};
	
	            node.cases.forEach(function(switchCase) {
	                var key = context.getSource(switchCase.test);
	                if (mapping[key]) {
	                    context.report(switchCase.test, "Duplicate case label.");
	                } else {
	                    mapping[key] = switchCase;
	                }
	            });
	        }
	    };
	};
	
	__webpack_require__(39).exports.schema = [];
	
	return __webpack_require__(39).exports;
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 43 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*eslint-env amd */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (module) {
	/**
	 * @fileoverview Rule to flag `else` after a `return` in `if`
	 * @author Ian Christian Myers
	 */
	
	"use strict";
	
	//------------------------------------------------------------------------------
	// Rule Definition
	//------------------------------------------------------------------------------
	
	__webpack_require__(39).exports = function(context) {
	
	    //--------------------------------------------------------------------------
	    // Helpers
	    //--------------------------------------------------------------------------
	
	    /**
	     * Display the context report if rule is violated
	     *
	     * @param {Node} node The 'else' node
	     * @returns {void}
	     */
	    function displayReport(node) {
	        context.report(node, "Unexpected 'else' after 'return'.");
	    }
	
	    /**
	     * Check to see if the node is a ReturnStatement
	     *
	     * @param {Node} node The node being evaluated
	     * @returns {boolean} True if node is a return
	     */
	    function checkForReturn(node) {
	        return node.type === "ReturnStatement";
	    }
	
	    /**
	     * Naive return checking, does not iterate through the whole
	     * BlockStatement because we make the assumption that the ReturnStatement
	     * will be the last node in the body of the BlockStatement.
	     *
	     * @param {Node} node The consequent/alternate node
	     * @returns {boolean} True if it has a return
	     */
	    function naiveHasReturn(node) {
	        if (node.type === "BlockStatement") {
	            var body = node.body,
	                lastChildNode = body[body.length - 1];
	
	            return lastChildNode && checkForReturn(lastChildNode);
	        }
	        return checkForReturn(node);
	    }
	
	    /**
	     * Check to see if the node is valid for evaluation,
	     * meaning it has an else and not an else-if
	     *
	     * @param {Node} node The node being evaluated
	     * @returns {boolean} True if the node is valid
	     */
	    function hasElse(node) {
	        return node.alternate && node.consequent && node.alternate.type !== "IfStatement";
	    }
	
	    /**
	     * If the consequent is an IfStatement, check to see if it has an else
	     * and both its consequent and alternate path return, meaning this is
	     * a nested case of rule violation.  If-Else not considered currently.
	     *
	     * @param {Node} node The consequent node
	     * @returns {boolean} True if this is a nested rule violation
	     */
	    function checkForIf(node) {
	        return node.type === "IfStatement" && hasElse(node) &&
	            naiveHasReturn(node.alternate) && naiveHasReturn(node.consequent);
	    }
	
	    /**
	     * Check the consequent/body node to make sure it is not
	     * a ReturnStatement or an IfStatement that returns on both
	     * code paths.
	     *
	     * @param {Node} node The consequent or body node
	     * @param {Node} alternate The alternate node
	     * @returns {boolean} `true` if it is a Return/If node that always returns.
	     */
	    function checkForReturnOrIf(node) {
	        return checkForReturn(node) || checkForIf(node);
	    }
	
	
	    /**
	     * Check whether a node returns in every codepath.
	     * @param {Node} node The node to be checked
	     * @returns {boolean} `true` if it returns on every codepath.
	     */
	    function alwaysReturns(node) {
	        // If we have a BlockStatement, check each consequent body node.
	        if (node.type === "BlockStatement") {
	            return node.body.some(checkForReturnOrIf);
	        // If not a block statement, make sure the consequent isn't a ReturnStatement
	        // or an IfStatement with returns on both paths
	        } else {
	            return checkForReturnOrIf(node);
	        }
	    }
	
	    //--------------------------------------------------------------------------
	    // Public API
	    //--------------------------------------------------------------------------
	
	    return {
	
	        "IfStatement": function(node) {
	            var parent = context.getAncestors().pop(),
	                consequents,
	                alternate;
	
	            // Only "top-level" if statements are checked, meaning the first `if`
	            // in a `if-else-if-...` chain.
	            if (parent.type === "IfStatement" && parent.alternate === node) {
	                return;
	            }
	
	            for (consequents = []; node.type === "IfStatement"; node = node.alternate) {
	                if (!node.alternate) {
	                    return;
	                }
	                consequents.push(node.consequent);
	                alternate = node.alternate;
	            }
	
	            if (consequents.every(alwaysReturns)) {
	                displayReport(alternate);
	            }
	        }
	
	    };
	
	};
	
	__webpack_require__(39).exports.schema = [];
	
	return __webpack_require__(39).exports;
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 44 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*eslint-env amd */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (module) {
	/**
	 * @fileoverview Rule to flag when label is not used for a loop or switch
	 * @author Ilya Volodin
	 */
	
	"use strict";
	
	//------------------------------------------------------------------------------
	// Rule Definition
	//------------------------------------------------------------------------------
	
	__webpack_require__(39).exports = function(context) {
	
	    return {
	
	        "LabeledStatement": function(node) {
	            var type = node.body.type;
	
	            if (type !== "ForStatement" && type !== "WhileStatement" && type !== "DoWhileStatement" && type !== "SwitchStatement" && type !== "ForInStatement" && type !== "ForOfStatement") {
	                context.report(node, "Unexpected label \"{{l}}\"", {l: node.label.name});
	            }
	        }
	    };
	
	};
	
	__webpack_require__(39).exports.schema = [];
	
	return __webpack_require__(39).exports;
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 45 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*eslint-env amd */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (module) {
	/**
	 * @fileoverview Rule to flag comparisons to null without a type-checking
	 * operator.
	 * @author Ian Christian Myers
	 */
	
	"use strict";
	
	//------------------------------------------------------------------------------
	// Rule Definition
	//------------------------------------------------------------------------------
	
	__webpack_require__(39).exports = function(context) {
	
		function getOperatorToken(context, node) {
			var tokens = context.getTokens(node), len = tokens.length, operator = node.operator;
			for (var i=0; i < len; i++) {
				var t = tokens[i];
				if (t.value === operator) {
					return t;
				}
			}
			return null;
		}
	
	    return {
	
	        "BinaryExpression": function(node) {
	            var badOperator = node.operator === "==" || node.operator === "!=";
	            if (node.right.type === "Literal" && node.right.raw === "null" && badOperator ||
	                    node.left.type === "Literal" && node.left.raw === "null" && badOperator) {
	                context.report(node, "Use '"+node.operator+"=' to compare with 'null'.", null, getOperatorToken(context, node)); //$NON-NLS-1$ //$NON-NLS-2$
	            }
	        }
	    };
	
	};
	
	__webpack_require__(39).exports.schema = [];
	
	return __webpack_require__(39).exports;
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 46 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*eslint-env amd */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (module) {
	/**
	 * @fileoverview Rule to flag unnecessary double negation in Boolean contexts
	 * @author Brandon Mills
	 */
	
	"use strict";
	
	//------------------------------------------------------------------------------
	// Rule Definition
	//------------------------------------------------------------------------------
	
	__webpack_require__(39).exports = function(context) {
	
	    return {
	        "UnaryExpression": function(node) {
	            var ancestors = context.getAncestors(),
	                parent = ancestors.pop(),
	                grandparent = ancestors.pop();
	
	            // Exit early if it's guaranteed not to match
	            if (node.operator !== "!" ||
	                    parent.type !== "UnaryExpression" ||
	                    parent.operator !== "!") {
	                return;
	            }
	
	            // if (<bool>) ...
	            if (grandparent.type === "IfStatement") {
	                context.report(node, "Redundant double negation in an if statement condition.");
	
	            // do ... while (<bool>)
	            } else if (grandparent.type === "DoWhileStatement") {
	                context.report(node, "Redundant double negation in a do while loop condition.");
	
	            // while (<bool>) ...
	            } else if (grandparent.type === "WhileStatement") {
	                context.report(node, "Redundant double negation in a while loop condition.");
	
	            // <bool> ? ... : ...
	            } else if ((grandparent.type === "ConditionalExpression" &&
	                    parent === grandparent.test)) {
	                context.report(node, "Redundant double negation in a ternary condition.");
	
	            // for (...; <bool>; ...) ...
	            } else if ((grandparent.type === "ForStatement" &&
	                    parent === grandparent.test)) {
	                context.report(node, "Redundant double negation in a for loop condition.");
	
	            // !<bool>
	            } else if ((grandparent.type === "UnaryExpression" &&
	                    grandparent.operator === "!")) {
	                context.report(node, "Redundant multiple negation.");
	
	            // Boolean(<bool>)
	            } else if ((grandparent.type === "CallExpression" &&
	                    grandparent.callee.type === "Identifier" &&
	                    grandparent.callee.name === "Boolean")) {
	                context.report(node, "Redundant double negation in call to Boolean().");
	
	            // new Boolean(<bool>)
	            } else if ((grandparent.type === "NewExpression" &&
	                    grandparent.callee.type === "Identifier" &&
	                    grandparent.callee.name === "Boolean")) {
	                context.report(node, "Redundant double negation in Boolean constructor call.");
	            }
	        }
	    };
	
	};
	
	__webpack_require__(39).exports.schema = [];
	
	return __webpack_require__(39).exports;
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 47 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*eslint-env amd */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (module) {
	/**
	 * @fileoverview Disallow parenthesising higher precedence subexpressions.
	 * @author Michael Ficarra
	 * @copyright 2014 Michael Ficarra. All rights reserved.
	 * See LICENSE file in root directory for full license.
	 */
	"use strict";
	
	//------------------------------------------------------------------------------
	// Rule Definition
	//------------------------------------------------------------------------------
	
	__webpack_require__(39).exports = function(context) {
	
	    var ALL_NODES = context.options[0] !== "functions";
	
	    /**
	     * Determines if this rule should be enforced for a node given the current configuration.
	     * @param {ASTNode} node - The node to be checked.
	     * @returns {boolean} True if the rule should be enforced for this node.
	     * @private
	     */
	    function ruleApplies(node) {
	        return ALL_NODES || node.type === "FunctionExpression" || node.type === "ArrowFunctionExpression";
	    }
	
	    /**
	     * Determines if a node is surrounded by parentheses.
	     * @param {ASTNode} node - The node to be checked.
	     * @returns {boolean} True if the node is parenthesised.
	     * @private
	     */
	    function isParenthesised(node) {
	        var previousToken = context.getTokenBefore(node),
	            nextToken = context.getTokenAfter(node);
	
	        return previousToken && nextToken &&
	            previousToken.value === "(" && previousToken.range[1] <= node.range[0] &&
	            nextToken.value === ")" && nextToken.range[0] >= node.range[1];
	    }
	
	    /**
	     * Determines if a node is surrounded by parentheses twice.
	     * @param {ASTNode} node - The node to be checked.
	     * @returns {boolean} True if the node is doubly parenthesised.
	     * @private
	     */
	    function isParenthesisedTwice(node) {
	        var previousToken = context.getTokenBefore(node, 1),
	            nextToken = context.getTokenAfter(node, 1);
	
	        return isParenthesised(node) && previousToken && nextToken &&
	            previousToken.value === "(" && previousToken.range[1] <= node.range[0] &&
	            nextToken.value === ")" && nextToken.range[0] >= node.range[1];
	    }
	
	    /**
	     * Determines if a node is surrounded by (potentially) invalid parentheses.
	     * @param {ASTNode} node - The node to be checked.
	     * @returns {boolean} True if the node is incorrectly parenthesised.
	     * @private
	     */
	    function hasExcessParens(node) {
	        return ruleApplies(node) && isParenthesised(node);
	    }
	
	    /**
	     * Determines if a node that is expected to be parenthesised is surrounded by
	     * (potentially) invalid extra parentheses.
	     * @param {ASTNode} node - The node to be checked.
	     * @returns {boolean} True if the node is has an unexpected extra pair of parentheses.
	     * @private
	     */
	    function hasDoubleExcessParens(node) {
	        return ruleApplies(node) && isParenthesisedTwice(node);
	    }
	
	    /**
	     * Checks whether or not a given node is located at the head of ExpressionStatement.
	     * @param {ASTNode} node - A node to check.
	     * @returns {boolean} `true` if the node is located at the head of ExpressionStatement.
	     */
	    function isHeadOfExpressionStatement(node) {
	        var parent = node.parent;
	        while (parent) {
	            switch (parent.type) {
	                case "SequenceExpression":
	                    if (parent.expressions[0] !== node || isParenthesised(node)) {
	                        return false;
	                    }
	                    break;
	
	                case "UnaryExpression":
	                case "UpdateExpression":
	                    if (parent.prefix || isParenthesised(node)) {
	                        return false;
	                    }
	                    break;
	
	                case "BinaryExpression":
	                case "LogicalExpression":
	                    if (parent.left !== node || isParenthesised(node)) {
	                        return false;
	                    }
	                    break;
	
	                case "ConditionalExpression":
	                    if (parent.test !== node || isParenthesised(node)) {
	                        return false;
	                    }
	                    break;
	
	                case "CallExpression":
	                    if (parent.callee !== node || isParenthesised(node)) {
	                        return false;
	                    }
	                    break;
	
	                case "MemberExpression":
	                    if (parent.object !== node || isParenthesised(node)) {
	                        return false;
	                    }
	                    break;
	
	                case "ExpressionStatement":
	                    return true;
	
	                default:
	                    return false;
	            }
	
	            node = parent;
	            parent = parent.parent;
	        }
	
	        /* istanbul ignore next */
	        throw new Error("unreachable");
	    }
	
	    /**
	     * Get the precedence level based on the node type
	     * @param {ASTNode} node node to evaluate
	     * @returns {int} precedence level
	     * @private
	     */
	    function precedence(node) {
	
	        switch (node.type) {
	            case "SequenceExpression":
	                return 0;
	
	            case "AssignmentExpression":
	            case "ArrowFunctionExpression":
	            case "YieldExpression":
	                return 1;
	
	            case "ConditionalExpression":
	                return 3;
	
	            case "LogicalExpression":
	                switch (node.operator) {
	                    case "||":
	                        return 4;
	                    case "&&":
	                        return 5;
	                    // no default
	                }
	
	                /* falls through */
	            case "BinaryExpression":
	                switch (node.operator) {
	                    case "|":
	                        return 6;
	                    case "^":
	                        return 7;
	                    case "&":
	                        return 8;
	                    case "==":
	                    case "!=":
	                    case "===":
	                    case "!==":
	                        return 9;
	                    case "<":
	                    case "<=":
	                    case ">":
	                    case ">=":
	                    case "in":
	                    case "instanceof":
	                        return 10;
	                    case "<<":
	                    case ">>":
	                    case ">>>":
	                        return 11;
	                    case "+":
	                    case "-":
	                        return 12;
	                    case "*":
	                    case "/":
	                    case "%":
	                        return 13;
	                    // no default
	                }
	                /* falls through */
	            case "UnaryExpression":
	                return 14;
	            case "UpdateExpression":
	                return 15;
	            case "CallExpression":
	                // IIFE is allowed to have parens in any position (#655)
	                if (node.callee.type === "FunctionExpression") {
	                    return -1;
	                }
	                return 16;
	            case "NewExpression":
	                return 17;
	            // no default
	        }
	        return 18;
	    }
	
	    /**
	     * Report the node
	     * @param {ASTNode} node node to evaluate
	     * @returns {void}
	     * @private
	     */
	    function report(node) {
	        var previousToken = context.getTokenBefore(node);
	        context.report(node, previousToken.loc.start, "Gratuitous parentheses around expression.");
	    }
	
	    /**
	     * Evaluate Unary update
	     * @param {ASTNode} node node to evaluate
	     * @returns {void}
	     * @private
	     */
	    function dryUnaryUpdate(node) {
	        if (hasExcessParens(node.argument) && precedence(node.argument) >= precedence(node)) {
	            report(node.argument);
	        }
	    }
	
	    /**
	     * Evaluate a new call
	     * @param {ASTNode} node node to evaluate
	     * @returns {void}
	     * @private
	     */
	    function dryCallNew(node) {
	        if (hasExcessParens(node.callee) && precedence(node.callee) >= precedence(node) && !(
	            node.type === "CallExpression" &&
	            node.callee.type === "FunctionExpression" &&
	            // One set of parentheses are allowed for a function expression
	            !hasDoubleExcessParens(node.callee)
	        )) {
	            report(node.callee);
	        }
	        if (node.arguments.length === 1) {
	            if (hasDoubleExcessParens(node.arguments[0]) && precedence(node.arguments[0]) >= precedence({type: "AssignmentExpression"})) {
	                report(node.arguments[0]);
	            }
	        } else {
	            [].forEach.call(node.arguments, function(arg) {
	                if (hasExcessParens(arg) && precedence(arg) >= precedence({type: "AssignmentExpression"})) {
	                    report(arg);
	                }
	            });
	        }
	    }
	
	    /**
	     * Evaluate binary logicals
	     * @param {ASTNode} node node to evaluate
	     * @returns {void}
	     * @private
	     */
	    function dryBinaryLogical(node) {
	        var prec = precedence(node);
	        if (hasExcessParens(node.left) && precedence(node.left) >= prec) {
	            report(node.left);
	        }
	        if (hasExcessParens(node.right) && precedence(node.right) > prec) {
	            report(node.right);
	        }
	    }
	
	    return {
	        "ArrayExpression": function(node) {
	            [].forEach.call(node.elements, function(e) {
	                if (e && hasExcessParens(e) && precedence(e) >= precedence({type: "AssignmentExpression"})) {
	                    report(e);
	                }
	            });
	        },
	        "ArrowFunctionExpression": function(node) {
	            if (node.body.type !== "BlockStatement") {
	                if (node.body.type !== "ObjectExpression" && hasExcessParens(node.body) && precedence(node.body) >= precedence({type: "AssignmentExpression"})) {
	                    report(node.body);
	                    return;
	                }
	
	                // Object literals *must* be parenthesized
	                if (node.body.type === "ObjectExpression" && hasDoubleExcessParens(node.body)) {
	                    report(node.body);
	                    return;
	                }
	            }
	        },
	        "AssignmentExpression": function(node) {
	            if (hasExcessParens(node.right) && precedence(node.right) >= precedence(node)) {
	                report(node.right);
	            }
	        },
	        "BinaryExpression": dryBinaryLogical,
	        "CallExpression": dryCallNew,
	        "ConditionalExpression": function(node) {
	            if (hasExcessParens(node.test) && precedence(node.test) >= precedence({type: "LogicalExpression", operator: "||"})) {
	                report(node.test);
	            }
	            if (hasExcessParens(node.consequent) && precedence(node.consequent) >= precedence({type: "AssignmentExpression"})) {
	                report(node.consequent);
	            }
	            if (hasExcessParens(node.alternate) && precedence(node.alternate) >= precedence({type: "AssignmentExpression"})) {
	                report(node.alternate);
	            }
	        },
	        "DoWhileStatement": function(node) {
	            if (hasDoubleExcessParens(node.test)) {
	                report(node.test);
	            }
	        },
	        "ExpressionStatement": function(node) {
	            var firstToken;
	            if (hasExcessParens(node.expression)) {
	                firstToken = context.getFirstToken(node.expression);
	
	                // Pure object literals ({}) do not need parentheses but
	                // member expressions do ({}.toString())
	                if ((
	                        firstToken.value !== "{" ||
	                        node.expression.type === "ObjectExpression"
	                    ) &&
	                    // For such as `(function(){}.foo.bar)`
	                    (
	                        firstToken.value !== "function" ||
	                        node.expression.type === "FunctionExpression"
	                    ) &&
	                    // For such as `(class{}.foo.bar)`
	                    (
	                        firstToken.value !== "class" ||
	                        node.expression.type === "ClassExpression"
	                    )
	                ) {
	                    report(node.expression);
	                }
	            }
	        },
	        "ForInStatement": function(node) {
	            if (hasExcessParens(node.right)) {
	                report(node.right);
	            }
	        },
	        "ForOfStatement": function(node) {
	            if (hasExcessParens(node.right)) {
	                report(node.right);
	            }
	        },
	        "ForStatement": function(node) {
	            if (node.init && hasExcessParens(node.init)) {
	                report(node.init);
	            }
	
	            if (node.test && hasExcessParens(node.test)) {
	                report(node.test);
	            }
	
	            if (node.update && hasExcessParens(node.update)) {
	                report(node.update);
	            }
	        },
	        "IfStatement": function(node) {
	            if (hasDoubleExcessParens(node.test)) {
	                report(node.test);
	            }
	        },
	        "LogicalExpression": dryBinaryLogical,
	        "MemberExpression": function(node) {
	            if (
	                hasExcessParens(node.object) &&
	                precedence(node.object) >= precedence(node) &&
	                (
	                    node.computed ||
	                    !(
	                        (node.object.type === "Literal" &&
	                        typeof node.object.value === "number" &&
	                        /^[0-9]+$/.test(context.getFirstToken(node.object).value))
	                        ||
	                        // RegExp literal is allowed to have parens (#1589)
	                        (node.object.type === "Literal" && node.object.regex)
	                    )
	                ) &&
	                !(
	                    (node.object.type === "FunctionExpression" || node.object.type === "ClassExpression") &&
	                    isHeadOfExpressionStatement(node) &&
	                    !hasDoubleExcessParens(node.object)
	                )
	            ) {
	                report(node.object);
	            }
	            if (node.computed && hasExcessParens(node.property)) {
	                report(node.property);
	            }
	        },
	        "NewExpression": dryCallNew,
	        "ObjectExpression": function(node) {
	            [].forEach.call(node.properties, function(e) {
	                var v = e.value;
	                if (v && hasExcessParens(v) && precedence(v) >= precedence({type: "AssignmentExpression"})) {
	                    report(v);
	                }
	            });
	        },
	        "ReturnStatement": function(node) {
	            if (node.argument && hasExcessParens(node.argument) &&
	                    // RegExp literal is allowed to have parens (#1589)
	                    !(node.argument.type === "Literal" && node.argument.regex)) {
	                report(node.argument);
	            }
	        },
	        "SequenceExpression": function(node) {
	            [].forEach.call(node.expressions, function(e) {
	                if (hasExcessParens(e) && precedence(e) >= precedence(node)) {
	                    report(e);
	                }
	            });
	        },
	        "SwitchCase": function(node) {
	            if (node.test && hasExcessParens(node.test)) {
	                report(node.test);
	            }
	        },
	        "SwitchStatement": function(node) {
	            if (hasDoubleExcessParens(node.discriminant)) {
	                report(node.discriminant);
	            }
	        },
	        "ThrowStatement": function(node) {
	            if (hasExcessParens(node.argument)) {
	                report(node.argument);
	            }
	        },
	        "UnaryExpression": dryUnaryUpdate,
	        "UpdateExpression": dryUnaryUpdate,
	        "VariableDeclarator": function(node) {
	            if (node.init && hasExcessParens(node.init) &&
	                    precedence(node.init) >= precedence({type: "AssignmentExpression"}) &&
	                    // RegExp literal is allowed to have parens (#1589)
	                    !(node.init.type === "Literal" && node.init.regex)) {
	                report(node.init);
	            }
	        },
	        "WhileStatement": function(node) {
	            if (hasDoubleExcessParens(node.test)) {
	                report(node.test);
	            }
	        },
	        "WithStatement": function(node) {
	            if (hasDoubleExcessParens(node.object)) {
	                report(node.object);
	            }
	        }
	    };
	
	};
	
	__webpack_require__(39).exports.schema = [
	    {
	        "enum": ["all", "functions"]
	    }
	];
	
	return __webpack_require__(39).exports;
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 48 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*eslint-env amd */
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	 __webpack_require__(4),
	 module
	], __WEBPACK_AMD_DEFINE_RESULT__ = function (parser, module) {/**
	 * @fileoverview Validate strings passed to the RegExp constructor
	 * @author Michael Ficarra
	 * @copyright 2014 Michael Ficarra. All rights reserved.
	 */
	"use strict";
	
	//------------------------------------------------------------------------------
	// Requirements
	//------------------------------------------------------------------------------
	
	//------------------------------------------------------------------------------
	// Rule Definition
	//------------------------------------------------------------------------------
	
	module.exports = function(context) {
	
	    /**
	     * Check if node is a string
	     * @param {ASTNode} node node to evaluate
	     * @returns {boolean} True if its a string
	     * @private
	     */
	    function isString(node) {
	        return node && node.type === "Literal" && typeof node.value === "string";
	    }
	
	    /**
	     * Validate strings passed to the RegExp constructor
	     * @param {ASTNode} node node to evaluate
	     * @returns {void}
	     * @private
	     */
	    function check(node) {
	        if (node.callee.type === "Identifier" && node.callee.name === "RegExp" && isString(node.arguments[0])) {
	            var flags = isString(node.arguments[1]) ? node.arguments[1].value : "";
	
	            try {
	                void new RegExp(node.arguments[0].value);
	            } catch (e) {
	                context.report(node, e.message);
	            }
	
	            if (flags) {
	
	                try {
	                    var result = parser.parse("/./" + flags, { ecmaFeatures: context.ecmaFeatures });
	                    if (result.body.length > 0) {
		                    var expressionStatement = result.body[0];
		                    var regexp = expressionStatement.expression;
		                    if (regexp && regexp.value === null) {
		                        context.report(node, "Invalid flags supplied to RegExp constructor '" + flags + "'");
		                    }
		                }
	                } catch (ex) {
	                    context.report(node, "Invalid flags supplied to RegExp constructor '" + flags + "'");
	                }
	            }
	
	        }
	    }
	
	    return {
	        "CallExpression": check,
	        "NewExpression": check
	    };
	
	};
	
	module.exports.schema = [];
	
	return module.exports;
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 49 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*eslint-env amd */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (module) {
	/**
	 * @fileoverview Rule to disalow whitespace that is not a tab or space, whitespace inside strings and comments are allowed
	 * @author Jonathan Kingston
	 * @copyright 2014 Jonathan Kingston. All rights reserved.
	 */
	
	"use strict";
	
	//------------------------------------------------------------------------------
	// Rule Definition
	//------------------------------------------------------------------------------
	
	__webpack_require__(39).exports = function(context) {
	
	    var irregularWhitespace = /[\u0085\u00A0\ufeff\f\v\u00a0\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u202f\u205f\u3000]+/mg,
	        irregularLineTerminators = /[\u2028\u2029]/mg;
	
	    // Module store of errors that we have found
	    var errors = [];
	
	    /**
	     * Removes errors that occur inside a string node
	     * @param {ASTNode} node to check for matching errors.
	     * @returns {void}
	     * @private
	     */
	    function removeStringError(node) {
	        var locStart = node.loc.start;
	        var locEnd = node.loc.end;
	
	        errors = errors.filter(function(error) {
	            var errorLoc = error[1];
	            if (errorLoc.line >= locStart.line && errorLoc.line <= locEnd.line) {
	                if (errorLoc.column >= locStart.column && (errorLoc.column <= locEnd.column || errorLoc.line < locEnd.line)) {
	                    return false;
	                }
	            }
	            return true;
	        });
	    }
	
	    /**
	     * Checks nodes for errors that we are choosing to ignore and calls the relevant methods to remove the errors
	     * @param {ASTNode} node to check for matching errors.
	     * @returns {void}
	     * @private
	     */
	    function removeInvalidNodeErrors(node) {
	        if (typeof node.value === "string") {
	            // If we have irregular characters remove them from the errors list
	            if (node.raw.match(irregularWhitespace) || node.raw.match(irregularLineTerminators)) {
	                removeStringError(node);
	            }
	        }
	    }
	
	    /**
	     * Checks the program source for irregular whitespace
	     * @param {ASTNode} node The program node
	     * @returns {void}
	     * @private
	     */
	    function checkForIrregularWhitespace(node) {
	        var sourceLines = context.getSourceLines();
	
	        sourceLines.forEach(function(sourceLine, lineIndex) {
	            var lineNumber = lineIndex + 1,
	                location,
	                match;
	
	            while ((match = irregularWhitespace.exec(sourceLine)) !== null) {
	                location = {
	                    line: lineNumber,
	                    column: match.index
	                };
	
	                errors.push([node, location, "Irregular whitespace not allowed"]);
	            }
	        });
	    }
	
	    /**
	     * Checks the program source for irregular line terminators
	     * @param {ASTNode} node The program node
	     * @returns {void}
	     * @private
	     */
	    function checkForIrregularLineTerminators(node) {
	        var source = context.getSource(),
	            sourceLines = context.getSourceLines(),
	            linebreaks = source.match(/\r\n|\r|\n|\u2028|\u2029/g),
	            lastLineIndex = -1,
	            lineIndex,
	            location,
	            match;
	
	        while ((match = irregularLineTerminators.exec(source)) !== null) {
	            lineIndex = linebreaks.indexOf(match[0], lastLineIndex + 1) || 0;
	
	            location = {
	                line: lineIndex + 1,
	                column: sourceLines[lineIndex].length
	            };
	
	            errors.push([node, location, "Irregular whitespace not allowed"]);
	            lastLineIndex = lineIndex;
	        }
	    }
	
	    return {
	        "Program": function(node) {
	            /**
	             * As we can easily fire warnings for all white space issues with all the source its simpler to fire them here
	             * This means we can check all the application code without having to worry about issues caused in the parser tokens
	             * When writing this code also evaluating per node was missing out connecting tokens in some cases
	             * We can later filter the errors when they are found to be not an issue in nodes we don't care about
	             */
	
	            checkForIrregularWhitespace(node);
	            checkForIrregularLineTerminators(node);
	        },
	
	        "Identifier": removeInvalidNodeErrors,
	        "Literal": removeInvalidNodeErrors,
	        "Program:exit": function() {
	
	            // If we have any errors remaining report on them
	            errors.forEach(function(error) {
	                context.report.apply(context, error);
	            });
	        }
	    };
	};
	
	__webpack_require__(39).exports.schema = [];
	
	return __webpack_require__(39).exports;
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 50 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*eslint-env amd */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (module) {
	/**
	 * @fileoverview A rule to disallow negated left operands of the `in` operator
	 * @author Michael Ficarra
	 */
	
	"use strict";
	
	//------------------------------------------------------------------------------
	// Rule Definition
	//------------------------------------------------------------------------------
	
	__webpack_require__(39).exports = function(context) {
	
	    return {
	
	        "BinaryExpression": function(node) {
	            if (node.operator === "in" && node.left.type === "UnaryExpression" && node.left.operator === "!") {
	                context.report(node, "The `in` expression's left operand is negated");
	            }
	        }
	    };
	
	};
	
	__webpack_require__(39).exports.schema = [];
	
	return __webpack_require__(39).exports;
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 51 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*eslint-env amd */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (module) {
	/**
	 * @fileoverview Rule to flag use of an object property of the global object (Math and JSON) as a function
	 * @author James Allardice
	 */
	
	"use strict";
	
	//------------------------------------------------------------------------------
	// Rule Definition
	//------------------------------------------------------------------------------
	
	__webpack_require__(39).exports = function(context) {
	
	    return {
	        "CallExpression": function(node) {
	
	            if (node.callee.type === "Identifier") {
	                var name = node.callee.name;
	                if (name === "Math" || name === "JSON") {
	                    context.report(node, "'{{name}}' is not a function.", { name: name });
	                }
	            }
	        }
	    };
	
	};
	
	__webpack_require__(39).exports.schema = [];
	
	return __webpack_require__(39).exports;
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 52 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*eslint-env amd */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (module) {
	/**
	 * @fileoverview Rule to flag comparison where left part is the same as the right
	 * part.
	 * @author Ilya Volodin
	 */
	
	"use strict";
	
	//------------------------------------------------------------------------------
	// Rule Definition
	//------------------------------------------------------------------------------
	
	__webpack_require__(39).exports = function(context) {
	
	    return {
	
	        "BinaryExpression": function(node) {
	            var operators = ["===", "==", "!==", "!=", ">", "<", ">=", "<="];
	            if (operators.indexOf(node.operator) > -1 &&
	                (node.left.type === "Identifier" && node.right.type === "Identifier" && node.left.name === node.right.name ||
	                node.left.type === "Literal" && node.right.type === "Literal" && node.left.value === node.right.value)) {
	                context.report(node, "Comparing to itself is potentially pointless.");
	            }
	        }
	    };
	
	};
	
	__webpack_require__(39).exports.schema = [];
	
	return __webpack_require__(39).exports;
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 53 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* eslint-env amd */
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	exports, 
	], __WEBPACK_AMD_DEFINE_RESULT__ = function(exports) {
	/**
	 * @fileoverview Common utilities.
	 */
	"use strict";
	
	//------------------------------------------------------------------------------
	// Constants
	//------------------------------------------------------------------------------
	
	var PLUGIN_NAME_PREFIX = "eslint-plugin-";
	
	//------------------------------------------------------------------------------
	// Public Interface
	//------------------------------------------------------------------------------
	/**
	 * Merges two objects together and assigns the result to the initial object. Can be used for shallow cloning.
	 * @param {Object} target of the cloning operation
	 * @param {Object} source object
	 * @returns {void}
	 */
	exports.mixin = function(target, source) {
	    Object.keys(source).forEach(function(key) {
	        target[key] = source[key];
	    });
	};
	
	/**
	 * Merges two config objects. This will not only add missing keys, but will also modify values to match.
	 * @param {Object} base config object
	 * @param {Object} custom config object. Overrides in this config object will take priority over base.
	 * @returns {Object} merged config object.
	 */
	exports.mergeConfigs = function mergeConfigs(base, custom) {
	
	    Object.keys(custom).forEach(function (key) {
	        var property = custom[key];
	
	        if (key === "plugins") {
	            if (!base[key]) {
	                base[key] = [];
	            }
	
	            property.forEach(function (plugin) {
	                // skip duplicates
	                if (base[key].indexOf(plugin) === -1) {
	                    base[key].push(plugin);
	                }
	            });
	            return;
	        }
	
	        if (Array.isArray(base[key]) && !Array.isArray(property) && typeof property === "number") {
	            // assume that we are just overriding first attribute
	            base[key][0] = custom[key];
	            return;
	        }
	
	        if (typeof property === "object" && !Array.isArray(property)) {
	            // base[key] might not exist, so be careful with recursion here
	            base[key] = mergeConfigs(base[key] || {}, custom[key]);
	        } else {
	            base[key] = custom[key];
	        }
	    });
	
	    return base;
	};
	
	/**
	 * Removes the prefix `eslint-plugin-` from a plugin name.
	 * @param {string} pluginName The name of the plugin which may has the prefix.
	 * @returns {string} The name of the plugin without prefix.
	 */
	exports.removePluginPrefix = function removePluginPrefix(pluginName) {
	    var nameWithoutPrefix;
	
	    if (pluginName.indexOf(PLUGIN_NAME_PREFIX) === 0) {
	        nameWithoutPrefix = pluginName.substring(PLUGIN_NAME_PREFIX.length);
	    } else {
	        nameWithoutPrefix = pluginName;
	    }
	
	    return nameWithoutPrefix;
	};
	
	exports.PLUGIN_NAME_PREFIX = PLUGIN_NAME_PREFIX;
	
	/**
	 * @description Looks up the given reference in the current scope and its parent scopes
	 * @param {Object} ref The AST node reference
	 * @param {Object} scope The current EScope object
	 * @returns The AST node the declares the given reference node or null if no declaration is found
	 * @since 6.0
	 */
	exports.getDeclaration = function(ref, scope) {
		for (var curScope = scope; true; ) {
			if (!curScope) {
				return null;
			}
			var name = (ref.name ? ref.name : ref.identifier.name);
			var decl;
			curScope.variables.some(function(v) {
				if (v.name === name) {
					decl = v;
					return true;
				}
				return false;
			});
			if (decl) {
				return decl;
			}
			curScope = curScope.upper;
		}
	};
	
	/**
	 * @description Returns if the node can lead to an unreachable statement
	 * @param {Object} node The AST node
	 * @returns {Boolean} If the node can lead to an unreachable warning
	 * @since 6.0
	 */
	exports.returnableStatement = function(node) {
	    switch (node.type) {
	        case "ReturnStatement":
	        case "ThrowStatement":
	        case "ContinueStatement":
	        case "BreakStatement":
	            return true;
	    }
	    return false;
	};
	
	    return exports;
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 54 */
/***/ function(module, exports) {

	var amdi18n={"__root":{"syntaxErrorIncomplete":"Syntax error, incomplete statement.","syntaxErrorBadToken":"Syntax error on token '${0}', delete this token.","esprimaParseFailure":"Esprima failed to parse this file because an error occurred: ${0}","eslintValidationFailure":"ESLint failed to validate this file because an error occurred: ${0}","curly":"Statement should be enclosed in braces.","curly-description":"Require curly braces for all control statements.","eqeqeq":"Expected '${0}' and instead saw '${1}'.","eqeqeq-description":"Require the use of === and !==.","missing-doc":"Missing documentation for function '${0}'.","missing-doc-description":"Require JSDoc for all functions.","missing-nls":"Non-externalized string literal '${0}'.","missing-nls-description":"Disallow non-externalized string literals.","new-parens":"Missing parentheses invoking constructor.","new-parens-description":"Require parenthesis for constructors.","no-caller":"'arguments.${0}' is deprecated.","no-caller-description":"Warn on use of arguments.callee or arguments.caller.","no-comma-dangle":"Trailing commas in object expressions are discouraged.","no-comma-dangle-description":"Report extra trailing comma in object expressions.","no-cond-assign":"Expected a conditional expression and instead saw an assignment.","no-cond-assign-description":"Disallow assignment statements in control statements like if-else, do-while, while and for statements.","no-console":"Discouraged use of console in browser-based code.","no-console-description":"Disallow the use of 'console' in browser-run code.","no-constant-condition":"Discouraged use of constant as a conditional expression.","no-constant-condition-description":"Disallow use of a constant value as a conditional expression.","no-debugger":"'debugger' statement use is discouraged.","no-debugger-description":"Disallow use of the debugger keyword.","no-dupe-keys":"Duplicate object key '${0}'.","no-dupe-keys-description":"Warn when object contains duplicate keys.","no-empty-block":"Empty block should be removed or commented.","no-empty-block-description":"Warn when a code block is empty.","no-eval":"${0} function calls are discouraged.","no-eval-description":"Disallow use of eval function.","no-extra-semi":"Unnecessary semicolon.","no-extra-semi-description":"Warn about extraneous semi colons.","no-fallthrough":"Switch case may be entered by falling through the previous case.","no-fallthrough-description":"Warn when a switch case falls through.","no-implied-eval":"${0} function calls are discouraged.","no-implied-eval-description":"Disallow use of implied eval function.","no-iterator":"Discouraged __iterator__ property use.","no-iterator-description":"Warn when the __iterator__ property is used.","no-proto":"Discouraged __proto__ property use.","no-proto-description":"Warn when the __proto__ property is used.","no-jslint":"The '${0}' directive is unsupported, please use eslint-env.","no-jslint-description":"Warn when the jslint/jshint directive is used.","no-mixed-spaces-and-tabs":"Mixed spaces and tabs.","no-mixed-spaces-and-tabs-description":"Warn about mixed spaces and tabs.","no-new-array":"Use the array literal notation '[]'.","no-new-array-description":"Disallow use of the Array constructor.","no-new-func":"The Function constructor is eval.","no-new-func-description":"Disallow use of the Function constructor.","no-new-object":"Use the object literal notation '{}' or Object.create(null).","no-new-object-description":"Disallow use of the Object constructor.","no-new-wrappers":"Do not use '${0}' as a constructor.","no-new-wrappers-description":"Disallow creating new String, Number or Boolean via their constructor.","no-redeclare":"'${0}' is already defined.","no-redeclare-description":"Warn when variable or function is redeclared.","no-regex-spaces":"Avoid multiple spaces in regular expressions. Use ' {${0}}' instead.","no-regex-spaces-description":"Warn when multiple spaces are used in regular expressions.","no-reserved-keys":"Reserved words should not be used as property keys.","no-reserved-keys-description":"Warn when a reserved word is used as a property key.","no-shadow":"'${0}' is already declared in the upper scope.","no-shadow-description":"Warn when shadowing variable from upper scope.","no-shadow-global":"Variable '${0}' shadows a global member.","no-shadow-global-description":"Warn when a variable or parameter shadows a member from the global environment.","no-shadow-global-param":"Parameter '${0}' shadows a global member.","no-sparse-arrays":"Sparse array declarations should be avoided.","no-sparse-arrays-description":"Warn when sparse arrays are defined.","no-throw-literal":"Throw an Error instead.","no-throw-literal-description":"Warn when a Literal is used in a throw statement.","no-undef-defined":"'${0}' is undefined.","no-undef-init":"Avoid explicitly initializing variables to 'undefined'.","no-undef-init-description":"Warn when variables are explicitly initialized to undefined.","no-undef-readonly":"'${0}' is read-only.","no-undef-description":"Warn when used variable or function has not been defined.","no-unreachable":"Unreachable code.","no-unreachable-description":"Warn when code is not reachable.","no-unused-params":"Parameter '${0}' is never used.","no-unused-params-description":"Warn when function parameters are not used.","no-unused-vars-unused":"'${0}' is unused.","no-unused-vars-unused-funcdecl":"Function '${0}' is unused.","no-unused-vars-unread":"'${0}' is unread.","no-unused-vars-description":"Warn when declared variables are not used.","no-use-before-define":"'${0}' was used before it was defined.","no-use-before-define-description":"Warn when a variable or function is used before it is defined.","no-with":"Discouraged use of 'with' statement.","no-with-description":"Warn when the with statement is used.","radix":"Missing radix parameter.","radix-description":"Warn when parseInt() is called without the 'radix' parameter.","semi":"Missing semicolon.","semi-description":"Warn about missing semicolons.","unnecessary-nls":"Unnecessary $NON-NLS$ tag.","unnecessary-nls-description":"Disallow unnecessary non-NLS comments.","use-isnan":"Use the isNaN function to compare with NaN.","use-isnan-description":"Disallow comparison to the value NaN.","valid-typeof":"Invalid typeof comparison.","valid-typeof-description":"Warn when incorrectly comparing the result of a typeof expression.","accessor-pairs-description":"Report when accessors don't come in pairs (getter, setter)","no-control-regex-description":"Disallow control characters in regular expressions","no-duplicate-case-description":"Disallow a duplicate case label","no-empty-character-class-description":"Disallow empty character classes","no-extra-boolean-cast-description":"Discourage redundant double negation","no-extra-parens-description":"Discourage redundant parentheses","no-invalid-regexp-description":"Report invalid regular expressions","no-negated-in-lhs-description":"Disallow negated left operand of in operator","no-obj-calls-description":"Disallow global object as function calls","no-eq-null-description":"Disallow null comparisons","no-else-return-description":"Report else after return","no-empty-label-description":"No empty labels","no-self-compare-description":"Disallow self compare","no-irregular-whitespace-description":"No irregular whitespace:","no-self-assign-description":"Disallow self assignment","no-self-assign":"Assigning to itself is pointless.","type-checked-consistent-return-description":"Detect inconsistent return values","inconsistent-return":"Inconsistent return types: '{{type1}}', '{{type2}}'","notNum":"'${0}' must be a number","notArray":"'${0}' must be an array of strings","notEmpty":"'${0}' should not be empty","onlyStrings":"'${0}' entries can only be strings","notObject":"'${0}' must be an object","pluginNotObject":"plugin '${0}' must be an object","noDupes":"Duplicate entries are not allowed","problemInFile":"There is a problem with your .tern-project-file.","openFile":"Open the .tern-project file","errorParsing":"There was an error parsing the JSON in your .tern-project file","multiAttrProblems":"Multiple problems were found with attributes in your .tern-project file.","attrProblem":"A problem with one of the attributes in your .tern-project file was found.","multipleFileMatchesProblem":"Multiple file matches found for: ${0}. Defaulting to: ${1}.","noFileMatchProblem":"No file match found for: ${0}.","tooManyFileMatchProblems":"... (${0} more)","fileMatchProblems":"Problems found in the loadEagerly attribute of your .tern-project file.","fileMatchProgress":"Validating loadEagerly paths in your .tern-project file.","failedWrite":"There was a problem writing to your .tern-project file."}};amdi18n.init=function (language){
	    if(!language){
	        if(window._i18n && window._i18n.locale){
	            language = window._i18n.locale;
	        }else{
	            language = 'root';
	        }
	    }
	    if (Object.assign) {
	        Object.assign(this,this.__root,this['__'+language]);
	    } else {
	        var target = this['__' + language] || this.__root;
	        if (target) {
	            for (var name in target) {
	                this[name] = target[name];
	            }
	        }
	    }
	  };amdi18n.init();module.exports=amdi18n;

/***/ },
/* 55 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*******************************************************************************
	 * @license
	 * Copyright (c) 2014 IBM Corporation and others.
	 * All rights reserved. This program and the accompanying materials are made 
	 * available under the terms of the Eclipse Public License v1.0 
	 * (http://www.eclipse.org/legal/epl-v10.html), and the Eclipse Distribution 
	 * License v1.0 (http://www.eclipse.org/org/documents/edl-v10.html). 
	 * 
	 * Contributors: IBM Corporation - initial API and implementation
	 ******************************************************************************/
	
	/*eslint-env browser, amd*/
	
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(56)], __WEBPACK_AMD_DEFINE_RESULT__ = function(mLib) {
		var keywords = [
			"class", "const",
			"debugger", "delete",
			"enum", "export", "extends",
			"function",
			"implements", "import", "in", "instanceof", "interface",
			"let",
			"new",
			"package", "private", "protected", "public",
			"static", "super",
			"typeof",
			"var", "void",
			"with"
		];
		var controlKeywords = [
			"break",
			"case", "catch", "continue",
			"default", "do",
			"else",
			"finally", "for",
			"if",
			"return",
			"switch",
			"throw", "try",
			"while",
			"yield"
		];
		var languageVariables = ["this"];
		var constants = [
			"false", "null", "true", "undefined"
		];
	
		var grammars = [];
		grammars.push.apply(grammars, mLib.grammars);
		grammars.push({
			id: "orion.js",
			contentTypes: ["application/javascript"],
			patterns: [
				{
					begin: "'(?:\\\\.|[^\\\\'])*\\\\$",
					end: "^(?:$|(?:\\\\.|[^\\\\'])*('|[^\\\\]$))",
					name: "string.quoted.single.js"
				}, {
					begin: '"(?:\\\\.|[^\\\\"])*\\\\$',
					end: '^(?:$|(?:\\\\.|[^\\\\"])*("|[^\\\\]$))',
					name: "string.quoted.double.js"
				},
				{include: "orion.lib#string_doubleQuote"},
				{include: "orion.lib#string_singleQuote"},
				{include: "orion.c-like#comment_singleLine"},
				{
					match: "/(?![\\s\\*])(?:\\\\.|[^/])+/(?:[gim]{0,3})",
					name: "string.regexp.js"
				},
				{include: "orion.lib#doc_block"},
				{include: "orion.c-like#comment_block"},
				{include: "#jsFunctionDef"},
				{include: "orion.lib#brace_open"},
				{include: "orion.lib#brace_close"},
				{include: "orion.lib#bracket_open"},
				{include: "orion.lib#bracket_close"},
				{include: "orion.lib#parenthesis_open"},
				{include: "orion.lib#parenthesis_close"},
				{include: "orion.lib#operator"},
				{include: "orion.lib#number_decimal"},
				{include: "orion.lib#number_hex"},
				{
					match: "\\b(?:" + keywords.join("|") + ")\\b",
					name: "keyword.operator.js"
				},
				{
					match: "\\b(?:" + controlKeywords.join("|") + ")\\b",
					name: "keyword.control.js"
				},
				{
					match: "\\b(?:" + constants.join("|") + ")\\b",
					name: "constant.language.js"
				},
				{
					match: "\\b(?:" + languageVariables.join("|") + ")\\b",
					name: "variable.language.js"
				}
			],
			repository: {
				jsFunctionDef: {
					/*
					 * http://stackoverflow.com/questions/2008279/validate-a-javascript-function-name/2008444#2008444
					 * was referenced in the composition of the "begin" pattern below.
					 */
					begin: "(function)(\\s+[_$a-zA-Z\\xA0-\\uFFFF][_$a-zA-Z0-9\\xA0-\\uFFFF]*)?\\s*\\(",
					end: "\\)",
					captures: {
						1: {name: "keyword.operator.js"},
						2: {name: "entity.name.function.js"}
					},
					patterns: [
						{include: "orion.c-like#comment_singleLine"},
						{include: "orion.c-like#comment_block"},
						{
							match: "[^\\s,]+",
							name: "variable.parameter.js"
						}
					]
				}
			}
		});
	
		return {
			id: grammars[grammars.length - 1].id,
			grammars: grammars,
			keywords: keywords.concat(controlKeywords).concat(languageVariables).concat(constants)
		};
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 56 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*******************************************************************************
	 * @license
	 * Copyright (c) 2014 IBM Corporation and others.
	 * All rights reserved. This program and the accompanying materials are made 
	 * available under the terms of the Eclipse Public License v1.0 
	 * (http://www.eclipse.org/legal/epl-v10.html), and the Eclipse Distribution 
	 * License v1.0 (http://www.eclipse.org/org/documents/edl-v10.html). 
	 * 
	 * Contributors: IBM Corporation - initial API and implementation
	 ******************************************************************************/
	
	/*eslint-env browser, amd*/
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
		return {
			id: "orion.lib",
			grammars: [{
				id: "orion.lib",
				repository: {
					brace_open: {
						match: "{",
						name: "punctuation.section.block.begin"
					},
					brace_close: {
						match: "}",
						name: "punctuation.section.block.end"
					},
					bracket_open: {
						match: "\\[",
						name: "punctuation.section.bracket.begin"
					},
					bracket_close: {
						match: "\\]",
						name: "punctuation.section.bracket.end"
					},
					parenthesis_open: {
						match: "\\(",
						name: "punctuation.section.parens.begin"
					},
					parenthesis_close: {
						match: "\\)",
						name: "punctuation.section.parens.end"
					},
					operator: {
						match: "(\\+|-|!|=|>|<|&|(\\|\\|))+",
						name: "punctuation.operator"
					},
					doc_block: {
						begin: "/\\*\\*",
						end: "\\*/",
						name: "comment.block.documentation",
						patterns: [
							{
								match: "@(?:(?!\\*/)\\S)*",
								name: "meta.documentation.annotation"
							}, {
								match: "<[^\\s>]*>",
								name: "meta.documentation.tag"
							}, {
								match: "(\\b)(TODO)(\\b)(((?!\\*/).)*)",
								name: "meta.annotation.task.todo",
								captures: {
									2: {name: "keyword.other.documentation.task"},
									4: {name: "comment.block"}
								}
							}
						]
					},
					number_decimal: {
						match: "\\b-?(?:\\.\\d+|\\d+\\.?\\d*)(?:[eE][+-]?\\d+)?\\b",
						name: "constant.numeric.number"
					},
					number_hex: {
						match: "\\b0[xX][0-9A-Fa-f]+\\b",
						name: "constant.numeric.hex"
					},
					string_doubleQuote: {
						match: '"(?:\\\\.|[^"])*"?',
						name: "string.quoted.double"
					},
					string_singleQuote: {
						match: "'(?:\\\\.|[^'])*'?",
						name: "string.quoted.single"
					},
					todo_comment_singleLine: {
						match: "(\\b)(TODO)(\\b)(.*)",
						name: "meta.annotation.task.todo",
						captures: {
							2: {name: "keyword.other.documentation.task"},
							4: {name: "comment.line"}
						}
					}
				}
			}, {
				id: "orion.c-like",
				repository: {
					comment_singleLine: {
						match: {match: "//.*", literal: "//"},
						name: "comment.line.double-slash",
						patterns: [
							{
								include: "orion.lib#todo_comment_singleLine"
							}
						]
					},
					comment_block: {
						begin: {match: "/\\*", literal: "/*"},
						end: {match: "\\*/", literal: "*/"}, 
						name: "comment.block",
						patterns: [
							{
								match: "(\\b)(TODO)(\\b)(((?!\\*/).)*)",
								name: "meta.annotation.task.todo",
								captures: {
									2: {name: "keyword.other.documentation.task"},
									4: {name: "comment.block"}
								}
							}
						]
					}
				}
			}],
			keywords: []
		};
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 57 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*******************************************************************************
	 * @license
	 * Copyright (c) 2013, 2015 IBM Corporation and others.
	 * All rights reserved. This program and the accompanying materials are made 
	 * available under the terms of the Eclipse Public License v1.0 
	 * (http://www.eclipse.org/legal/epl-v10.html), and the Eclipse Distribution 
	 * License v1.0 (http://www.eclipse.org/org/documents/edl-v10.html). 
	 *
	 * Contributors:
	 *     IBM Corporation - initial API and implementation
	 *******************************************************************************/
	/*eslint-env amd, node, browser*/
	/* eslint no-console:0*/
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
	
	    return {
	        /**
	         * @name log
	         * @description wraps logging in case we have the worker support turned on
	         * @function
	         * @since 7.0
	         */
	        log: function log() {
	            if(typeof console !== 'undefined' && console && console.log) {
	                console.log.apply(console, arguments);
	            } else if(postMessage) {
	                postMessage.apply(null, arguments);
	            }
	        },
	        
	        /**
	         * @name error
	         * @description wraps logging in case we have the worker support turned on
	         * @function
	         * @since 7.0
	         */
	        error: function error() {
	            if(typeof console !== 'undefined' && console && console.error) {
	                console.error.apply(console, arguments);
	            } else if(postMessage) {
	                postMessage.apply(null, arguments);
	            }
	        }
	    };
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 58 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* eslint-env amd */
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	__webpack_require__(59), 
	], __WEBPACK_AMD_DEFINE_RESULT__ = function(RuleFixer) {
	/**
	 * @fileoverview RuleContext utility for rules
	 * @author Nicholas C. Zakas
	 * @copyright 2013 Nicholas C. Zakas. All rights reserved.
	 * See LICENSE file in root directory for full license.
	 */
	"use strict";
	//------------------------------------------------------------------------------
	// Constants
	//------------------------------------------------------------------------------
	
	var PASSTHROUGHS = [
			"getAllComments",
			"getAncestors",
			"getComments",
			"getDeclaredVariables",
			"getFilename",
			"getFirstToken",
			"getFirstTokens",
			"getJSDocComment",
			"getLastToken",
			"getLastTokens",
			"getNodeByRangeIndex",
			"getScope",
			"getSource",
			"getSourceLines",
			"getTokenAfter",
			"getTokenBefore",
			"getTokenByRangeStart",
			"getTokens",
			"getTokensAfter",
			"getTokensBefore",
			"getTokensBetween",
			"markVariableAsUsed",
			"isMarkedAsUsed"
	];
	
	//------------------------------------------------------------------------------
	// Typedefs
	//------------------------------------------------------------------------------
	
	/**
	 * An error message description
	 * @typedef {Object} MessageDescriptor
	 * @property {string} nodeType The type of node.
	 * @property {Location} loc The location of the problem.
	 * @property {string} message The problem message.
	 * @property {Object} [data] Optional data to use to fill in placeholders in the
	 *      message.
	 * @property {Function} fix The function to call that creates a fix command.
	 */
	
	//------------------------------------------------------------------------------
	// Rule Definition
	//------------------------------------------------------------------------------
	
	/**
	 * Acts as an abstraction layer between rules and the main eslint object.
	 * @constructor
	 * @param {string} ruleId The ID of the rule using this object.
	 * @param {eslint} eslint The eslint object.
	 * @param {number} severity The configured severity level of the rule.
	 * @param {array} options The configuration information to be added to the rule.
	 * @param {object} settings The configuration settings passed from the config file.
	 * @param {object} ecmaFeatures The ecmaFeatures settings passed from the config file.
	 * @param {Object} env The backing environment 
	 */
	function RuleContext(ruleId, eslint, severity, options, settings, ecmaFeatures, env) { //ORION
	    /**
	     * ORION
	     */
	    Object.defineProperty(this, "env", {
	       value: env 
	    });
	
	    /**
	     * The read-only ID of the rule.
	     */
	    Object.defineProperty(this, "id", {
	        value: ruleId
	    });
	
	    /**
	     * The read-only options of the rule
	     */
	    Object.defineProperty(this, "options", {
	        value: options
	    });
	
	    /**
	     * The read-only settings shared between all rules
	     */
	    Object.defineProperty(this, "settings", {
	        value: settings
	    });
	
	    /**
	     * The read-only ecmaFeatures shared across all rules
	     */
	    Object.defineProperty(this, "ecmaFeatures", {
	        value: Object.create(ecmaFeatures)
	    });
	    Object.freeze(this.ecmaFeatures);
	
	    // copy over passthrough methods
	    PASSTHROUGHS.forEach(function(name) {
	        this[name] = function() {
	            return eslint[name].apply(eslint, arguments);
	        };
	    }, this);
	
	    /**
	     * Passthrough to eslint.report() that automatically assigns the rule ID and severity.
	     * @param {ASTNode|MessageDescriptor} nodeOrDescriptor The AST node related to the message or a message
	     *      descriptor.
	     * @param {Object=} location The location of the error.
	     * @param {string} message The message to display to the user.
	     * @param {Object} opts Optional template data which produces a formatted message
	     *     with symbols being replaced by this object's values.
	     * @returns {void}
	     */
	    this.report = function(nodeOrDescriptor, location, message, opts) {
	
	        var descriptor,
	            fix = null;
	
	        // check to see if it's a new style call
	        if (arguments.length === 1) {
	            descriptor = nodeOrDescriptor;
	
	            // if there's a fix specified, get it
	            if (typeof descriptor.fix === "function") {
	                fix = descriptor.fix(new RuleFixer());
	            }
	
	            eslint.report(
	                ruleId, severity, descriptor.node,
	                descriptor.loc || descriptor.node.loc.start,
	                descriptor.message, descriptor.data, fix
	            );
	
	            return;
	        }
	
	        // old style call
	        eslint.report(ruleId, severity, nodeOrDescriptor, location, message, opts);
	    };
	
	    /**
	     * Passthrough to eslint.getSourceCode().
	     * @returns {SourceCode} The SourceCode object for the code.
	     */
	    this.getSourceCode = function() {
	        return eslint.getSourceCode();
	    };
	
	    this.getTern = function() {
	    	    return settings.tern;
	    	};
	}
	
	RuleContext.prototype = {
	    constructor: RuleContext
	};
	
	
	 return RuleContext;
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	


/***/ },
/* 59 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* eslint-env amd */
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
	/**
	 * @fileoverview An object that creates fix commands for rules.
	 * @author Nicholas C. Zakas
	 * @copyright 2015 Nicholas C. Zakas. All rights reserved.
	 * See LICENSE file in root directory for full license.
	 */
	"use strict";
	//------------------------------------------------------------------------------
	// Helpers
	//------------------------------------------------------------------------------
	
	/**
	 * Creates a fix command that inserts text at the specified index in the source text.
	 * @param {int} index The 0-based index at which to insert the new text.
	 * @param {string} text The text to insert.
	 * @returns {Object} The fix command.
	 * @private
	 */
	function insertTextAt(index, text) {
	    return {
	        range: [index, index],
	        text: text
	    };
	}
	
	//------------------------------------------------------------------------------
	// Public Interface
	//------------------------------------------------------------------------------
	
	/**
	 * Creates code fixing commands for rules.
	 * @constructor
	 */
	function RuleFixer() {
	    Object.freeze(this);
	}
	
	RuleFixer.prototype = {
	    constructor: RuleFixer,
	
	    /**
	     * Creates a fix command that inserts text after the given node or token.
	     * The fix is not applied until applyFixes() is called.
	     * @param {ASTNode|Token} nodeOrToken The node or token to insert after.
	     * @param {string} text The text to insert.
	     * @returns {Object} The fix command.
	     */
	    insertTextAfter: function(nodeOrToken, text) {
	        return this.insertTextAfterRange(nodeOrToken.range, text);
	    },
	
	    /**
	     * Creates a fix command that inserts text after the specified range in the source text.
	     * The fix is not applied until applyFixes() is called.
	     * @param {int[]} range The range to replace, first item is start of range, second
	     *      is end of range.
	     * @param {string} text The text to insert.
	     * @returns {Object} The fix command.
	     */
	    insertTextAfterRange: function(range, text) {
	        return insertTextAt(range[1], text);
	    },
	
	    /**
	     * Creates a fix command that inserts text before the given node or token.
	     * The fix is not applied until applyFixes() is called.
	     * @param {ASTNode|Token} nodeOrToken The node or token to insert before.
	     * @param {string} text The text to insert.
	     * @returns {Object} The fix command.
	     */
	    insertTextBefore: function(nodeOrToken, text) {
	        return this.insertTextBeforeRange(nodeOrToken.range, text);
	    },
	
	    /**
	     * Creates a fix command that inserts text before the specified range in the source text.
	     * The fix is not applied until applyFixes() is called.
	     * @param {int[]} range The range to replace, first item is start of range, second
	     *      is end of range.
	     * @param {string} text The text to insert.
	     * @returns {Object} The fix command.
	     */
	    insertTextBeforeRange: function(range, text) {
	        return insertTextAt(range[0], text);
	    },
	
	    /**
	     * Creates a fix command that replaces text at the node or token.
	     * The fix is not applied until applyFixes() is called.
	     * @param {ASTNode|Token} nodeOrToken The node or token to remove.
	     * @param {string} text The text to insert.
	     * @returns {Object} The fix command.
	     */
	    replaceText: function(nodeOrToken, text) {
	        return this.replaceTextRange(nodeOrToken.range, text);
	    },
	
	    /**
	     * Creates a fix command that replaces text at the specified range in the source text.
	     * The fix is not applied until applyFixes() is called.
	     * @param {int[]} range The range to replace, first item is start of range, second
	     *      is end of range.
	     * @param {string} text The text to insert.
	     * @returns {Object} The fix command.
	     */
	    replaceTextRange: function(range, text) {
	        return {
	            range: range,
	            text: text
	        };
	    },
	
	    /**
	     * Creates a fix command that removes the node or token from the source.
	     * The fix is not applied until applyFixes() is called.
	     * @param {ASTNode|Token} nodeOrToken The node or token to remove.
	     * @returns {Object} The fix command.
	     */
	    remove: function(nodeOrToken) {
	        return this.removeRange(nodeOrToken.range);
	    },
	
	    /**
	     * Creates a fix command that removes the specified range of text from the source.
	     * The fix is not applied until applyFixes() is called.
	     * @param {int[]} range The range to remove, first item is start of range, second
	     *      is end of range.
	     * @returns {Object} The fix command.
	     */
	    removeRange: function(range) {
	        return {
	            range: range,
	            text: ""
	        };
	    }
	
	};
	
	return RuleFixer;
	
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 60 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*******************************************************************************
	 * @license
	 * Copyright (c) 2013, 2015 IBM Corporation and others.
	 * All rights reserved. This program and the accompanying materials are made 
	 * available under the terms of the Eclipse Public License v1.0 
	 * (http://www.eclipse.org/legal/epl-v10.html), and the Eclipse Distribution 
	 * License v1.0 (http://www.eclipse.org/org/documents/edl-v10.html). 
	 *
	 * Contributors:
	 *     IBM Corporation - initial API and implementation
	 *******************************************************************************/
	/*
	 * Shim for Node events API
	 * http://nodejs.org/api/events.html
	 */
	/*eslint-env amd */
	/*global console*/
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
		__webpack_require__(61),
		__webpack_require__(15)
	], __WEBPACK_AMD_DEFINE_RESULT__ = function(EventTarget, objects) {
		var DEFAULT_MAX_LISTENERS = 10;
	
		function EventEmitter() {
			this._eventTarget = new EventTarget();
		}
	
		function addListener(eventName, listener) {
			if (typeof listener !== "function") {
				throw new Error("addListener only takes instances of Function");
			}
			var max = typeof this._maxListeners !== "undefined" ? this._maxListeners : DEFAULT_MAX_LISTENERS;
			var count;
			if (max !== 0 && (count = EventEmitter.listenerCount(this, eventName) >= max)) {
				if (typeof console !== "undefined") {
					console.error("Possible EventEmitter memory leak: " + count + " listeners added.");
				}
			}
			this.emit("newListener", listener);
			this._eventTarget.addEventListener(eventName, listener);
			return this;
		}
	
		EventEmitter.prototype.constructor = EventEmitter;
		objects.mixin(EventEmitter.prototype, {
			_maxListeners: 10,
			addListener: addListener,
			on: addListener,
			once: function(eventName, listener) {
				var emitter = this;
				var oneTimeListener = /* @callback */ function(event) {
					try {
						listener.apply(this, Array.prototype.slice.call(arguments));
					} finally {
						emitter.removeListener(eventName, oneTimeListener);
					}
				};
				this.addListener(eventName, oneTimeListener);
				return this;
			},
			removeListener: function(eventName, listener) {
				if (typeof listener !== "function") {
					throw new Error("removeListener only takes instances of Function");
				}
				this._eventTarget.removeEventListener(eventName, listener);
				this.emit("removeListener", listener);
				return this;
			},
			removeAllListeners: function(eventName) {
				var namedListeners = this._eventTarget._namedListeners;
				var emitter = this;
				var removeAllListenersFor = function(eventName) {
					var listeners = namedListeners[eventName];
					if (!listeners) {
						return;
					}
					listeners.forEach(emitter.emit.bind(emitter, "removeListener"));
					delete namedListeners[eventName];
				};
				if (typeof eventName === "undefined") {
					Object.keys(namedListeners).forEach(removeAllListenersFor);
				} else {
					removeAllListenersFor(eventName);
				}
				return this;
			},
			setMaxListeners: function(n) {
				if (typeof n !== "number") {
					throw new Error("setMaxListeners only takes a number");
				}
				this._maxListeners = n;
			},
			listeners: function(eventName) {
				var listeners = this._eventTarget._namedListeners[eventName];
				return listeners ? listeners.slice() : [];
			},
			emit: function emit(eventName /*, arg1, arg2, ...*/) {
				var listeners = this._eventTarget._namedListeners[eventName];
				if (!listeners) {
					if (eventName === "error") {
						throw new Error("Uncaught, unspecified 'error' event.");
					}
					return false;
				}
				var args = Array.prototype.slice.call(arguments, 1);
				var emitter = this;
				listeners.forEach(function(listener) {
					// To match Node's behavior we intentionally allow an exception thrown by listener to blow up the stack.
					listener.apply(emitter, args);
				});
				return true;
			}
		});
		EventEmitter.listenerCount = function(emitter, eventName) {
			var listeners = emitter._eventTarget._namedListeners[eventName];
			return listeners ? listeners.length : 0;
		};
	
		return {
			EventEmitter: EventEmitter
		};
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 61 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*******************************************************************************
	 * @license
	 * Copyright (c) 2012 IBM Corporation and others.
	 * All rights reserved. This program and the accompanying materials are made 
	 * available under the terms of the Eclipse Public License v1.0 
	 * (http://www.eclipse.org/legal/epl-v10.html), and the Eclipse Distribution 
	 * License v1.0 (http://www.eclipse.org/org/documents/edl-v10.html). 
	 *
	 * Contributors:
	 *     IBM Corporation - initial API and implementation
	 *******************************************************************************/
	/*eslint-env browser, amd*/
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
		/**
		 * Creates an Event Target
		 *
		 * @name orion.EventTarget
		 * @class Base for creating an Orion event target
		 */
		function EventTarget() {
			this._namedListeners = {};
		}
	
		EventTarget.prototype = /** @lends orion.EventTarget.prototype */
		{
			/**
			 * Dispatches a named event along with an arbitrary set of arguments. Any arguments after <code>eventName</code>
			 * will be passed to the event listener(s).
			 * @param {Object} event The event to dispatch. The event object MUST have a type field
			 * @returns {boolean} false if the event has been canceled and any associated default action should not be performed
			 * listeners (if any) have resolved.
			 */
			dispatchEvent: function(event) {
				if (!event.type) {
					throw new Error("unspecified type");
				}
				var listeners = this._namedListeners[event.type];
				if (listeners) {
					listeners.forEach(function(listener) {
						try {
							if (typeof listener === "function") {
								listener(event);
							} else {
								listener.handleEvent(event);
							}
						} catch (e) {
							if (typeof console !== 'undefined') {
								console.log(e); // for now, probably should dispatch an ("error", e)
							}
						}			
					});
				}
				return !event.defaultPrevented;
			},
	
			/**
			 * Adds an event listener for a named event
			 * @param {String} eventName The event name
			 * @param {Function} listener The function called when an event occurs
			 */
			addEventListener: function(eventName, listener) {
				if (typeof listener === "function" || listener.handleEvent) {
					this._namedListeners[eventName] = this._namedListeners[eventName] || [];
					this._namedListeners[eventName].push(listener);
				}
			},
	
			/**
			 * Removes an event listener for a named event
			 * @param {String} eventName The event name
			 * @param {Function} listener The function called when an event occurs
			 */
			removeEventListener: function(eventName, listener) {
				var listeners = this._namedListeners[eventName];
				if (listeners) {
					for (var i = 0; i < listeners.length; i++) {
						if (listeners[i] === listener) {
							if (listeners.length === 1) {
								delete this._namedListeners[eventName];
							} else {
								listeners.splice(i, 1);
							}
							break;
						}
					}
				}
			}
		};
		EventTarget.prototype.constructor = EventTarget;
		
		EventTarget.attach = function(obj) {
			var eventTarget = new EventTarget();
			obj.dispatchEvent = eventTarget.dispatchEvent.bind(eventTarget);
			obj.addEventListener = eventTarget.addEventListener.bind(eventTarget);
			obj.removeEventListener = eventTarget.removeEventListener.bind(eventTarget);
		};
		
		return EventTarget;
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 62 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*
	  Copyright (C) 2012-2014 Yusuke Suzuki <utatane.tea@gmail.com>
	  Copyright (C) 2013 Alex Seville <hi@alexanderseville.com>
	  Copyright (C) 2014 Thiago de Arruda <tpadilha84@gmail.com>
	
	  Redistribution and use in source and binary forms, with or without
	  modification, are permitted provided that the following conditions are met:
	
	    * Redistributions of source code must retain the above copyright
	      notice, this list of conditions and the following disclaimer.
	    * Redistributions in binary form must reproduce the above copyright
	      notice, this list of conditions and the following disclaimer in the
	      documentation and/or other materials provided with the distribution.
	
	  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
	  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
	  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
	  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
	  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
	  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
	  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
	  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
	  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
	  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*/
	
	/**
	 * Escope (<a href="http://github.com/Constellation/escope">escope</a>) is an <a
	 * href="http://www.ecma-international.org/publications/standards/Ecma-262.htm">ECMAScript</a>
	 * scope analyzer extracted from the <a
	 * href="http://github.com/Constellation/esmangle">esmangle project</a/>.
	 * <p>
	 * <em>escope</em> finds lexical scopes in a source program, i.e. areas of that
	 * program where different occurrences of the same identifier refer to the same
	 * variable. With each scope the contained variables are collected, and each
	 * identifier reference in code is linked to its corresponding variable (if
	 * possible).
	 * <p>
	 * <em>escope</em> works on a syntax tree of the parsed source code which has
	 * to adhere to the <a
	 * href="https://developer.mozilla.org/en-US/docs/SpiderMonkey/Parser_API">
	 * Mozilla Parser API</a>. E.g. <a href="http://esprima.org">esprima</a> is a parser
	 * that produces such syntax trees.
	 * <p>
	 * The main interface is the {@link analyze} function.
	 * @module
	 */
	
	/*jslint bitwise:true */
	/* eslint-env amd, node */
	/* eslint-disable missing-nls */
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	__webpack_require__(63),
	__webpack_require__(32),
	__webpack_require__(15)
	], __WEBPACK_AMD_DEFINE_RESULT__ = function(esrecurse, estraverse, objects) {
		'use strict';
	
		/**
		 * ORION
		 * shim for node.js util.inherits
		 */
		function inherits(ctor, sctor) {
			ctor.prototype = Object.create(sctor.prototype);
			ctor._super = sctor;
		}
	
	    var Syntax = estraverse.Syntax;
	
	    function assert(cond, text) {
	        if (!cond) {
	            throw new Error(text);
	        }
	    }
	
	    function defaultOptions() {
	        return {
	            optimistic: false,
	            directive: false,
	            sourceType: 'script',  // one of ['script', 'module']
	            ecmaVersion: 5
	        };
	    }
	
	    function updateDeeply(target, override) {
	        var key, val;
	
	        function isHashObject(target) {
	            return typeof target === 'object' && target instanceof Object && !(target instanceof RegExp);
	        }
	
	        for (key in override) {
	            if (override.hasOwnProperty(key)) {
	                val = override[key];
	                if (isHashObject(val)) {
	                    if (isHashObject(target[key])) {
	                        updateDeeply(target[key], val);
	                    } else {
	                        target[key] = updateDeeply({}, val);
	                    }
	                } else {
	                    target[key] = val;
	                }
	            }
	        }
	        return target;
	    }
	
	    /**
	     * A Reference represents a single occurrence of an identifier in code.
	     * @class Reference
	     */
	    function Reference(ident, scope, flag, writeExpr, maybeImplicitGlobal, partial) {
	        /**
	         * Identifier syntax node.
	         * @member {esprima#Identifier} Reference#identifier
	         */
	        this.identifier = ident;
	        /**
	         * Reference to the enclosing Scope.
	         * @member {Scope} Reference#from
	         */
	        this.from = scope;
	        /**
	         * Whether the reference comes from a dynamic scope (such as 'eval',
	         * 'with', etc.), and may be trapped by dynamic scopes.
	         * @member {boolean} Reference#tainted
	         */
	        this.tainted = false;
	        /**
	         * The variable this reference is resolved with.
	         * @member {Variable} Reference#resolved
	         */
	        this.resolved = null;
	        /**
	         * The read-write mode of the reference. (Value is one of {@link
	         * Reference.READ}, {@link Reference.RW}, {@link Reference.WRITE}).
	         * @member {number} Reference#flag
	         * @private
	         */
	        this.flag = flag;
	        if (this.isWrite()) {
	            /**
	             * If reference is writeable, this is the tree being written to it.
	             * @member {esprima#Node} Reference#writeExpr
	             */
	            this.writeExpr = writeExpr;
	            /**
	             * Whether the Reference might refer to a partial value of writeExpr.
	             * @member {boolean} Reference#partial
	             */
	            this.partial = partial;
	        }
	        this.__maybeImplicitGlobal = maybeImplicitGlobal;
	    }
	
	    /**
	     * @constant Reference.READ
	     * @private
	     */
	    Reference.READ = 0x1;
	    /**
	     * @constant Reference.WRITE
	     * @private
	     */
	    Reference.WRITE = 0x2;
	    /**
	     * @constant Reference.RW
	     * @private
	     */
	    Reference.RW = Reference.READ | Reference.WRITE;
	
	    /**
	     * Whether the reference is static.
	     * @method Reference#isStatic
	     * @return {boolean}
	     */
	    Reference.prototype.isStatic = function isStatic() {
	        return !this.tainted && this.resolved && this.resolved.scope.isStatic();
	    };
	
	    /**
	     * Whether the reference is writeable.
	     * @method Reference#isWrite
	     * @return {boolean}
	     */
	    Reference.prototype.isWrite = function isWrite() {
	        return !!(this.flag & Reference.WRITE);
	    };
	
	    /**
	     * Whether the reference is readable.
	     * @method Reference#isRead
	     * @return {boolean}
	     */
	    Reference.prototype.isRead = function isRead() {
	        return !!(this.flag & Reference.READ);
	    };
	
	    /**
	     * Whether the reference is read-only.
	     * @method Reference#isReadOnly
	     * @return {boolean}
	     */
	    Reference.prototype.isReadOnly = function isReadOnly() {
	        return this.flag === Reference.READ;
	    };
	
	    /**
	     * Whether the reference is write-only.
	     * @method Reference#isWriteOnly
	     * @return {boolean}
	     */
	    Reference.prototype.isWriteOnly = function isWriteOnly() {
	        return this.flag === Reference.WRITE;
	    };
	
	    /**
	     * Whether the reference is read-write.
	     * @method Reference#isReadWrite
	     * @return {boolean}
	     */
	    Reference.prototype.isReadWrite = function isReadWrite() {
	        return this.flag === Reference.RW;
	    };
	
	    /**
	     * A Variable represents a locally scoped identifier. These include arguments to
	     * functions.
	     * @class Variable
	     */
	    function Variable(name, scope) {
	        /**
	         * The variable name, as given in the source code.
	         * @member {String} Variable#name
	         */
	        this.name = name;
	        /**
	         * List of defining occurrences of this variable (like in 'var ...'
	         * statements or as parameter), as AST nodes.
	         * @member {esprima.Identifier[]} Variable#identifiers
	         */
	        this.identifiers = [];
	        /**
	         * List of {@link Reference|references} of this variable (excluding parameter entries)
	         * in its defining scope and all nested scopes. For defining
	         * occurrences only see {@link Variable#defs}.
	         * @member {Reference[]} Variable#references
	         */
	        this.references = [];
	
	        /**
	         * List of defining occurrences of this variable (like in 'var ...'
	         * statements or as parameter), as custom objects.
	         * @typedef {Object} DefEntry
	         * @property {String} DefEntry.type - the type of the occurrence (e.g.
	         *      "Parameter", "Variable", ...)
	         * @property {esprima.Identifier} DefEntry.name - the identifier AST node of the occurrence
	         * @property {esprima.Node} DefEntry.node - the enclosing node of the
	         *      identifier
	         * @property {esprima.Node} [DefEntry.parent] - the enclosing statement
	         *      node of the identifier
	         * @member {DefEntry[]} Variable#defs
	         */
	        this.defs = [];
	
	        this.tainted = false;
	        /**
	         * Whether this is a stack variable.
	         * @member {boolean} Variable#stack
	         */
	        this.stack = true;
	        /**
	         * Reference to the enclosing Scope.
	         * @member {Scope} Variable#scope
	         */
	        this.scope = scope;
	    }
	
	    Variable.CatchClause = 'CatchClause';
	    Variable.Parameter = 'Parameter';
	    Variable.FunctionName = 'FunctionName';
	    Variable.ClassName = 'ClassName';
	    Variable.Variable = 'Variable';
	    Variable.ImportBinding = 'ImportBinding';
	    Variable.TDZ = 'TDZ';
	    Variable.ImplicitGlobalVariable = 'ImplicitGlobalVariable';
	
	    function isStrictScope(scope, block, isMethodDefinition, useDirective) {
	        var body, i, iz, stmt, expr;
	
	        // When upper scope is exists and strict, inner scope is also strict.
	        if (scope.upper && scope.upper.isStrict) {
	            return true;
	        }
	
	        // ArrowFunctionExpression's scope is always strict scope.
	        if (block.type === Syntax.ArrowFunctionExpression) {
	            return true;
	        }
	
	        if (isMethodDefinition) {
	            return true;
	        }
	
	        if (scope.type === 'class' || scope.type === 'module') {
	            return true;
	        }
	
	        if (scope.type === 'block' || scope.type === 'switch') {
	            return false;
	        }
	
	        if (scope.type === 'function') {
	            body = block.body;
	        } else if (scope.type === 'global') {
	            body = block;
	        } else {
	            return false;
	        }
	
	        // Search 'use strict' directive.
	        if (useDirective) {
	            for (i = 0, iz = body.body.length; i < iz; ++i) {
	                stmt = body.body[i];
	                if (stmt.type !== 'DirectiveStatement') {
	                    break;
	                }
	                if (stmt.raw === '"use strict"' || stmt.raw === '\'use strict\'') {
	                    return true;
	                }
	            }
	        } else {
	            for (i = 0, iz = body.body.length; i < iz; ++i) {
	                stmt = body.body[i];
	                if (stmt.type !== Syntax.ExpressionStatement) {
	                    break;
	                }
	                expr = stmt.expression;
	                if (expr.type !== Syntax.Literal || typeof expr.value !== 'string') {
	                    break;
	                }
	                if (expr.raw != null) {
	                    if (expr.raw === '"use strict"' || expr.raw === '\'use strict\'') {
	                        return true;
	                    }
	                } else {
	                    if (expr.value === 'use strict') {
	                        return true;
	                    }
	                }
	            }
	        }
	        return false;
	    }
	
	    function registerScope(scopeManager, scope) {
	        var scopes;
	
	        scopeManager.scopes.push(scope);
	
	        scopes = scopeManager.__nodeToScope.get(scope.block);
	        if (scopes) {
	            scopes.push(scope);
	        } else {
	            scopeManager.__nodeToScope.set(scope.block, [ scope ]);
	        }
	    }
	
	    /* Special Scope types. */
	    var SCOPE_NORMAL = 0,
	        SCOPE_MODULE = 1,
	        SCOPE_FUNCTION_EXPRESSION_NAME = 2,
	        SCOPE_TDZ = 3;
	
	    /**
	     * @class Scope
	     */
	    function Scope(scopeManager, block, isMethodDefinition, scopeType) {
	        /**
	         * One of 'catch', 'with', 'function', 'global' or 'block'.
	         * @member {String} Scope#type
	         */
	        this.type =
	            (scopeType === SCOPE_TDZ) ? 'TDZ' :
	            (scopeType === SCOPE_MODULE) ? 'module' :
	            (block.type === Syntax.BlockStatement) ? 'block' :
	            (block.type === Syntax.SwitchStatement) ? 'switch' :
	            (block.type === Syntax.FunctionExpression || block.type === Syntax.FunctionDeclaration || block.type === Syntax.ArrowFunctionExpression) ? 'function' :
	            (block.type === Syntax.CatchClause) ? 'catch' :
	            (block.type === Syntax.ForInStatement || block.type === Syntax.ForOfStatement || block.type === Syntax.ForStatement) ? 'for' :
	            (block.type === Syntax.WithStatement) ? 'with' :
	            (block.type === Syntax.ClassExpression || block.type === Syntax.ClassDeclaration) ? 'class' : 'global';
	         /**
	         * The scoped {@link Variable}s of this scope, as <code>{ Variable.name
	         * : Variable }</code>.
	         * @member {Map} Scope#set
	         */
	        this.set = new Map();
	        /**
	         * The tainted variables of this scope, as <code>{ Variable.name :
	         * boolean }</code>.
	         * @member {Map} Scope#taints */
	        this.taints = new Map();
	        /**
	         * Generally, through the lexical scoping of JS you can always know
	         * which variable an identifier in the source code refers to. There are
	         * a few exceptions to this rule. With 'global' and 'with' scopes you
	         * can only decide at runtime which variable a reference refers to.
	         * Moreover, if 'eval()' is used in a scope, it might introduce new
	         * bindings in this or its prarent scopes.
	         * All those scopes are considered 'dynamic'.
	         * @member {boolean} Scope#dynamic
	         */
	        this.dynamic = this.type === 'global' || this.type === 'with';
	        /**
	         * A reference to the scope-defining syntax node.
	         * @member {esprima.Node} Scope#block
	         */
	        this.block = block;
	         /**
	         * The {@link Reference|references} that are not resolved with this scope.
	         * @member {Reference[]} Scope#through
	         */
	        this.through = [];
	         /**
	         * The scoped {@link Variable}s of this scope. In the case of a
	         * 'function' scope this includes the automatic argument <em>arguments</em> as
	         * its first element, as well as all further formal arguments.
	         * @member {Variable[]} Scope#variables
	         */
	        this.variables = [];
	         /**
	         * Any variable {@link Reference|reference} found in this scope. This
	         * includes occurrences of local variables as well as variables from
	         * parent scopes (including the global scope). For local variables
	         * this also includes defining occurrences (like in a 'var' statement).
	         * In a 'function' scope this does not include the occurrences of the
	         * formal parameter in the parameter list.
	         * @member {Reference[]} Scope#references
	         */
	        this.references = [];
	
	         /**
	         * For 'global' and 'function' scopes, this is a self-reference. For
	         * other scope types this is the <em>variableScope</em> value of the
	         * parent scope.
	         * @member {Scope} Scope#variableScope
	         */
	        this.variableScope =
	            (this.type === 'global' || this.type === 'function' || this.type === 'module') ? this : scopeManager.__currentScope.variableScope;
	         /**
	         * Whether this scope is created by a FunctionExpression.
	         * @member {boolean} Scope#functionExpressionScope
	         */
	        this.functionExpressionScope = false;
	         /**
	         * Whether this is a scope that contains an 'eval()' invocation.
	         * @member {boolean} Scope#directCallToEvalScope
	         */
	        this.directCallToEvalScope = false;
	         /**
	         * @member {boolean} Scope#thisFound
	         */
	        this.thisFound = false;
	
	        this.__left = [];
	
	        if (scopeType === SCOPE_FUNCTION_EXPRESSION_NAME) {
	            this.__define(block.id, {
	                type: Variable.FunctionName,
	                name: block.id,
	                node: block
	            });
	            this.functionExpressionScope = true;
	        } else {
	            // section 9.2.13, FunctionDeclarationInstantiation.
	            // NOTE Arrow functions never have an arguments objects.
	            if (this.type === 'function' && this.block.type !== Syntax.ArrowFunctionExpression) {
	                this.__defineArguments();
	            }
	
	            if (block.type === Syntax.FunctionExpression && block.id) {
	                scopeManager.__nestFunctionExpressionNameScope(block, isMethodDefinition);
	            }
	        }
	
	         /**
	         * Reference to the parent {@link Scope|scope}.
	         * @member {Scope} Scope#upper
	         */
	        this.upper = scopeManager.__currentScope;
	         /**
	         * Whether 'use strict' is in effect in this scope.
	         * @member {boolean} Scope#isStrict
	         */
	        this.isStrict = isStrictScope(this, block, isMethodDefinition, scopeManager.__useDirective());
	
	         /**
	         * List of nested {@link Scope}s.
	         * @member {Scope[]} Scope#childScopes
	         */
	        this.childScopes = [];
	        if (scopeManager.__currentScope) {
	            scopeManager.__currentScope.childScopes.push(this);
	        }
	
	
	        // RAII
	        scopeManager.__currentScope = this;
	        if (this.type === 'global') {
	            scopeManager.globalScope = this;
	            scopeManager.globalScope.implicit = {
	                set: new Map(),
	                variables: [],
	                /**
	                * List of {@link Reference}s that are left to be resolved (i.e. which
	                * need to be linked to the variable they refer to).
	                * @member {Reference[]} Scope#implicit#left
	                */
	                left: []
	            };
	        }
	
	        registerScope(scopeManager, this);
	    }
	
	    Scope.prototype.__close = function __close(scopeManager) {
	        var i, iz, ref, current, implicit, info;
	
	        // Because if this is global environment, upper is null
	        if (!this.dynamic || scopeManager.__isOptimistic()) {
	            // static resolve
	            for (i = 0, iz = this.__left.length; i < iz; ++i) {
	                ref = this.__left[i];
	                if (!this.__resolve(ref)) {
	                    this.__delegateToUpperScope(ref);
	                }
	            }
	        } else {
	            // this is "global" / "with" / "function with eval" environment
	            if (this.type === 'with') {
	                for (i = 0, iz = this.__left.length; i < iz; ++i) {
	                    ref = this.__left[i];
	                    ref.tainted = true;
	                    this.__delegateToUpperScope(ref);
	                }
	            } else {
	                for (i = 0, iz = this.__left.length; i < iz; ++i) {
	                    // notify all names are through to global
	                    ref = this.__left[i];
	                    current = this;
	                    do {
	                        current.through.push(ref);
	                        current = current.upper;
	                    } while (current);
	                }
	            }
	        }
	
	        if (this.type === 'global') {
	            implicit = [];
	            for (i = 0, iz = this.__left.length; i < iz; ++i) {
	                ref = this.__left[i];
	                if (ref.__maybeImplicitGlobal && !this.set.has(ref.identifier.name)) {
	                    implicit.push(ref.__maybeImplicitGlobal);
	                }
	            }
	
	            // create an implicit global variable from assignment expression
	            for (i = 0, iz = implicit.length; i < iz; ++i) {
	                info = implicit[i];
	                this.__defineImplicit(info.pattern, {
	                    type: Variable.ImplicitGlobalVariable,
	                    name: info.pattern,
	                    node: info.node
	                });
	            }
	
	            this.implicit.left = this.__left;
	        }
	
	        this.__left = null;
	        scopeManager.__currentScope = this.upper;
	    };
	
	    Scope.prototype.__resolve = function __resolve(ref) {
	        var variable, name;
	        name = ref.identifier.name;
	        if (this.set.has(name)) {
	            variable = this.set.get(name);
	            variable.references.push(ref);
	            variable.stack = variable.stack && ref.from.variableScope === this.variableScope;
	            if (ref.tainted) {
	                variable.tainted = true;
	                this.taints.set(variable.name, true);
	            }
	            ref.resolved = variable;
	            return true;
	        }
	        return false;
	    };
	
	    Scope.prototype.__delegateToUpperScope = function __delegateToUpperScope(ref) {
	        if (this.upper) {
	            this.upper.__left.push(ref);
	        }
	        this.through.push(ref);
	    };
	
	    Scope.prototype.__defineGeneric = function (name, set, variables, node, info) {
	        var variable;
	
	        variable = set.get(name);
	        if (!variable) {
	            variable = new Variable(name, this);
	            set.set(name, variable);
	            variables.push(variable);
	        }
	
	        if (info) {
	            variable.defs.push(info);
	        }
	        if (node) {
	            variable.identifiers.push(node);
	        }
	    };
	
	    Scope.prototype.__defineArguments = function () {
	        this.__defineGeneric('arguments', this.set, this.variables);
	        this.taints.set('arguments', true);
	    };
	
	    Scope.prototype.__defineImplicit = function (node, info) {
	        if (node && node.type === Syntax.Identifier) {
	            this.__defineGeneric(node.name, this.implicit.set, this.implicit.variables, node, info);
	        }
	    };
	
	    Scope.prototype.__define = function (node, info) {
	        if (node && node.type === Syntax.Identifier) {
	            this.__defineGeneric(node.name, this.set, this.variables, node, info);
	        }
	    };
	
	    Scope.prototype.__referencing = function __referencing(node, assign, writeExpr, maybeImplicitGlobal, partial) {
	        var ref;
	        // because Array element may be null
	        if (node && node.type === Syntax.Identifier) {
	            ref = new Reference(node, this, assign || Reference.READ, writeExpr, maybeImplicitGlobal, !!partial);
	            this.references.push(ref);
	            this.__left.push(ref);
	        }
	    };
	
	    Scope.prototype.__detectEval = function __detectEval() {
	        var current;
	        current = this;
	        this.directCallToEvalScope = true;
	        do {
	            current.dynamic = true;
	            current = current.upper;
	        } while (current);
	    };
	
	    Scope.prototype.__detectThis = function __detectThis() {
	        this.thisFound = true;
	    };
	
	    Scope.prototype.__isClosed = function isClosed() {
	        return this.__left === null;
	    };
	
	    // API Scope#resolve(name)
	    // returns resolved reference
	    Scope.prototype.resolve = function resolve(ident) {
	        var ref, i, iz;
	        assert(this.__isClosed(), 'scope should be closed');
	        assert(ident.type === Syntax.Identifier, 'target should be identifier');
	        for (i = 0, iz = this.references.length; i < iz; ++i) {
	            ref = this.references[i];
	            if (ref.identifier === ident) {
	                return ref;
	            }
	        }
	        return null;
	    };
	
	    // API Scope#isStatic
	    // returns this scope is static
	    Scope.prototype.isStatic = function isStatic() {
	        return !this.dynamic;
	    };
	
	    // API Scope#isArgumentsMaterialized
	    // return this scope has materialized arguments
	    Scope.prototype.isArgumentsMaterialized = function isArgumentsMaterialized() {
	        // TODO(Constellation)
	        // We can more aggressive on this condition like this.
	        //
	        // function t() {
	        //     // arguments of t is always hidden.
	        //     function arguments() {
	        //     }
	        // }
	        var variable;
	
	        // This is not function scope
	        if (this.type !== 'function') {
	            return true;
	        }
	
	        if (!this.isStatic()) {
	            return true;
	        }
	
	        variable = this.set.get('arguments');
	        assert(variable, 'always have arguments variable');
	        return variable.tainted || variable.references.length  !== 0;
	    };
	
	    // API Scope#isThisMaterialized
	    // return this scope has materialized `this` reference
	    Scope.prototype.isThisMaterialized = function isThisMaterialized() {
	        // This is not function scope
	        if (this.type !== 'function') {
	            return true;
	        }
	        if (!this.isStatic()) {
	            return true;
	        }
	        return this.thisFound;
	    };
	
	    Scope.prototype.isUsedName = function (name) {
	        if (this.set.has(name)) {
	            return true;
	        }
	        for (var i = 0, iz = this.through.length; i < iz; ++i) {
	            if (this.through[i].identifier.name === name) {
	                return true;
	            }
	        }
	        return false;
	    };
	
	    /**
	     * @class ScopeManager
	     */
	    function ScopeManager(options) {
	        this.scopes = [];
	        this.globalScope = null;
	        this.__nodeToScope = new WeakMap();
	        this.__currentScope = null;
	        this.__options = options;
	    }
	
	    ScopeManager.prototype.__useDirective = function () {
	        return this.__options.directive;
	    };
	
	    ScopeManager.prototype.__isOptimistic = function () {
	        return this.__options.optimistic;
	    };
	
	    ScopeManager.prototype.__ignoreEval = function () {
	        return this.__options.ignoreEval;
	    };
	
	    ScopeManager.prototype.isModule = function () {
	        return this.__options.sourceType === 'module';
	    };
	
	    // Returns appropliate scope for this node.
	    ScopeManager.prototype.__get = function __get(node) {
	        return this.__nodeToScope.get(node);
	    };
	
	    ScopeManager.prototype.acquire = function acquire(node, inner) {
	        var scopes, scope, i, iz;
	
	        function predicate(scope) {
	            if (scope.type === 'function' && scope.functionExpressionScope) {
	                return false;
	            }
	            if (scope.type === 'TDZ') {
	                return false;
	            }
	            return true;
	        }
	
	        scopes = this.__get(node);
	        if (!scopes || scopes.length === 0) {
	            return null;
	        }
	
	        // Heuristic selection from all scopes.
	        // If you would like to get all scopes, please use ScopeManager#acquireAll.
	        if (scopes.length === 1) {
	            return scopes[0];
	        }
	
	        if (inner) {
	            for (i = scopes.length - 1; i >= 0; --i) {
	                scope = scopes[i];
	                if (predicate(scope)) {
	                    return scope;
	                }
	            }
	        } else {
	            for (i = 0, iz = scopes.length; i < iz; ++i) {
	                scope = scopes[i];
	                if (predicate(scope)) {
	                    return scope;
	                }
	            }
	        }
	
	        return null;
	    };
	
	    ScopeManager.prototype.acquireAll = function acquire(node) {
	        return this.__get(node);
	    };
	
	    ScopeManager.prototype.release = function release(node, inner) {
	        var scopes, scope;
	        scopes = this.__get(node);
	        if (scopes && scopes.length) {
	            scope = scopes[0].upper;
	            if (!scope) {
	                return null;
	            }
	            return this.acquire(scope.block, inner);
	        }
	        return null;
	    };
	
	    ScopeManager.prototype.attach = function attach() { };
	
	    ScopeManager.prototype.detach = function detach() { };
	
	    ScopeManager.prototype.__nestScope = function (node, isMethodDefinition) {
	        return new Scope(this, node, isMethodDefinition, SCOPE_NORMAL);
	    };
	
	    ScopeManager.prototype.__nestModuleScope = function (node) {
	        return new Scope(this, node, false, SCOPE_MODULE);
	    };
	
	    ScopeManager.prototype.__nestTDZScope = function (node) {
	        return new Scope(this, node, false, SCOPE_TDZ);
	    };
	
	    ScopeManager.prototype.__nestFunctionExpressionNameScope = function (node, isMethodDefinition) {
	        return new Scope(this, node, isMethodDefinition, SCOPE_FUNCTION_EXPRESSION_NAME);
	    };
	
	    ScopeManager.prototype.__isES6 = function () {
	        return this.__options.ecmaVersion >= 6;
	    };
	
	    function traverseIdentifierInPattern(rootPattern, callback) {
	        estraverse.traverse(rootPattern, {
	            enter: function (pattern, parent) {
	                var i, iz, element, property;
	
	                switch (pattern.type) {
	                    case Syntax.Identifier:
	                        // Toplevel identifier.
	                        if (parent === null) {
	                            callback(pattern, true);
	                        }
	                        break;
	
	                    case Syntax.SpreadElement:
	                        if (pattern.argument.type === Syntax.Identifier) {
	                            callback(pattern.argument, false);
	                        }
	                        break;
	
	                    case Syntax.ObjectPattern:
	                        for (i = 0, iz = pattern.properties.length; i < iz; ++i) {
	                            property = pattern.properties[i];
	                            if (property.shorthand) {
	                                callback(property.key, false);
	                                continue;
	                            }
	                            if (property.value.type === Syntax.Identifier) {
	                                callback(property.value, false);
	                                continue;
	                            }
	                        }
	                        break;
	
	                    case Syntax.ArrayPattern:
	                        for (i = 0, iz = pattern.elements.length; i < iz; ++i) {
	                            element = pattern.elements[i];
	                            if (element && element.type === Syntax.Identifier) {
	                                callback(element, false);
	                            }
	                        }
	                        break;
	                }
	            }
	        });
	    }
	
	    function isPattern(node) {
	        var nodeType = node.type;
	        return nodeType === Syntax.Identifier || nodeType === Syntax.ObjectPattern || nodeType === Syntax.ArrayPattern || nodeType === Syntax.SpreadElement;
	    }
	
	    // Importing ImportDeclaration.
	    // http://people.mozilla.org/~jorendorff/es6-draft.html#sec-moduledeclarationinstantiation
	    // FIXME: Now, we don't create module environment, because the context is
	    // implementation dependent.
	
	    function Importer(declaration, referencer) {
	        esrecurse.Visitor.call(this, this);
	        this.declaration = declaration;
	        this.referencer = referencer;
	    }
	    /*ORION util.inherits*/inherits(Importer, esrecurse.Visitor);
	
	    Importer.prototype.visitImport = function (id, specifier) {
	        var that = this;
	        that.referencer.visitPattern(id, function (pattern) {
	            that.referencer.currentScope().__define(pattern, {
	                type: Variable.ImportBinding,
	                name: pattern,
	                node: specifier,
	                parent: that.declaration
	            });
	        });
	    };
	
	    Importer.prototype.ImportNamespaceSpecifier = function (node) {
	        if (node.id) {
	            this.visitImport(node.id, node);
	        }
	    };
	
	    Importer.prototype.ImportDefaultSpecifier = function (node) {
	        this.visitImport(node.id, node);
	    };
	
	    Importer.prototype.ImportSpecifier = function (node) {
	        if (node.name) {
	            this.visitImport(node.name, node);
	        } else {
	            this.visitImport(node.id, node);
	        }
	    };
	
	    // Referencing variables and creating bindings.
	
	    function Referencer(scopeManager) {
	        esrecurse.Visitor.call(this, this);
	        this.scopeManager = scopeManager;
	        this.parent = null;
	        this.isInnerMethodDefinition = false;
	    }
	
	    /*ORION util.inherits*/inherits(Referencer, esrecurse.Visitor);
	
	    /*ORION extend*/objects.mixin(Referencer.prototype, {
	        currentScope: function () {
	            return this.scopeManager.__currentScope;
	        },
	
	        close: function (node) {
	            while (this.currentScope() && node === this.currentScope().block) {
	                this.currentScope().__close(this.scopeManager);
	            }
	        },
	
	        pushInnerMethodDefinition: function (isInnerMethodDefinition) {
	            var previous = this.isInnerMethodDefinition;
	            this.isInnerMethodDefinition = isInnerMethodDefinition;
	            return previous;
	        },
	
	        popInnerMethodDefinition: function (isInnerMethodDefinition) {
	            this.isInnerMethodDefinition = isInnerMethodDefinition;
	        },
	
	        materializeTDZScope: function (node, iterationNode) {
	            // http://people.mozilla.org/~jorendorff/es6-draft.html#sec-runtime-semantics-forin-div-ofexpressionevaluation-abstract-operation
	            // TDZ scope hides the declaration's names.
	            this.scopeManager.__nestTDZScope(node, iterationNode);
	            this.visitVariableDeclaration(this.currentScope(), Variable.TDZ, iterationNode.left, 0);
	        },
	
	        materializeIterationScope: function (node) {
	            // Generate iteration scope for upper ForIn/ForOf Statements.
	            // parent node for __nestScope is only necessary to
	            // distinguish MethodDefinition.
	            var letOrConstDecl, that = this;
	            this.scopeManager.__nestScope(node, false);
	            letOrConstDecl = node.left;
	            this.visitVariableDeclaration(this.currentScope(), Variable.Variable, letOrConstDecl, 0);
	            this.visitPattern(letOrConstDecl.declarations[0].id, function (pattern) {
	                that.currentScope().__referencing(pattern, Reference.WRITE, node.right, null, true);
	            });
	        },
	
	        visitPattern: function (node, callback) {
	            traverseIdentifierInPattern(node, callback);
	        },
	
	        visitFunction: function (node) {
	            var i, iz, that = this;
	            // FunctionDeclaration name is defined in upper scope
	            // NOTE: Not referring variableScope. It is intended.
	            // Since
	            //  in ES5, FunctionDeclaration should be in FunctionBody.
	            //  in ES6, FunctionDeclaration should be block scoped.
	            if (node.type === Syntax.FunctionDeclaration) {
	                // id is defined in upper scope
	                this.currentScope().__define(node.id, {
	                    type: Variable.FunctionName,
	                    name: node.id,
	                    node: node
	                });
	            }
	
	            // Consider this function is in the MethodDefinition.
	            this.scopeManager.__nestScope(node, this.isInnerMethodDefinition);
	
	            for (i = 0, iz = node.params.length; i < iz; ++i) {
	                this.visitPattern(node.params[i], function (pattern) {
	                    that.currentScope().__define(pattern, {
	                        type: Variable.Parameter,
	                        name: pattern,
	                        node: node,
	                        index: i
	                    });
	                });
	            }
	
	            // Skip BlockStatement to prevent creating BlockStatement scope.
	            if (node.body.type === Syntax.BlockStatement) {
	                this.visitChildren(node.body);
	            } else {
	                this.visit(node.body);
	            }
	
	            this.close(node);
	        },
	
	        visitClass: function (node) {
	            if (node.type === Syntax.ClassDeclaration) {
	                this.currentScope().__define(node.id, {
	                    type: Variable.ClassName,
	                    name: node.id,
	                    node: node
	                });
	            }
	
	            // FIXME: Maybe consider TDZ.
	            this.visit(node.superClass);
	
	            this.scopeManager.__nestScope(node);
	
	            if (node.id) {
	                this.currentScope().__define(node.id, {
	                    type: Variable.ClassName,
	                    name: node.id,
	                    node: node
	                });
	            }
	            this.visit(node.body);
	
	            this.close(node);
	        },
	
	        visitProperty: function (node) {
	            var previous, isMethodDefinition;
	            if (node.computed) {
	                this.visit(node.key);
	            }
	
	            isMethodDefinition = node.type === Syntax.MethodDefinition || node.method;
	            if (isMethodDefinition) {
	                previous = this.pushInnerMethodDefinition(true);
	            }
	            this.visit(node.value);
	            if (isMethodDefinition) {
	                this.popInnerMethodDefinition(previous);
	            }
	        },
	
	        visitForIn: function (node) {
	            var that = this;
	            if (node.left.type === Syntax.VariableDeclaration && node.left.kind !== 'var') {
	                this.materializeTDZScope(node.right, node);
	                this.visit(node.right);
	                this.close(node.right);
	
	                this.materializeIterationScope(node);
	                this.visit(node.body);
	                this.close(node);
	            } else {
	                if (node.left.type === Syntax.VariableDeclaration) {
	                    this.visit(node.left);
	                    this.visitPattern(node.left.declarations[0].id, function (pattern) {
	                        that.currentScope().__referencing(pattern, Reference.WRITE, node.right, null, true);
	                    });
	                } else {
	                    if (!isPattern(node.left)) {
	                        this.visit(node.left);
	                    }
	                    this.visitPattern(node.left, function (pattern) {
	                        var maybeImplicitGlobal = null;
	                        if (!that.currentScope().isStrict) {
	                            maybeImplicitGlobal = {
	                                pattern: pattern,
	                                node: node
	                            };
	                        }
	                        that.currentScope().__referencing(pattern, Reference.WRITE, node.right, maybeImplicitGlobal, true);
	                    });
	                }
	                this.visit(node.right);
	                this.visit(node.body);
	            }
	        },
	
	        visitVariableDeclaration: function (variableTargetScope, type, node, index) {
	            var decl, init, that = this;
	
	            decl = node.declarations[index];
	            init = decl.init;
	            // FIXME: Don't consider initializer with complex patterns.
	            // Such as,
	            // var [a, b, c = 20] = array;
	            this.visitPattern(decl.id, function (pattern, toplevel) {
	                variableTargetScope.__define(pattern, {
	                    type: type,
	                    name: pattern,
	                    node: decl,
	                    index: index,
	                    kind: node.kind,
	                    parent: node
	                });
	
	                if (init) {
	                    that.currentScope().__referencing(pattern, Reference.WRITE, init, null, !toplevel);
	                }
	            });
	        },
	
	        AssignmentExpression: function (node) {
	            var that = this;
	            if (isPattern(node.left)) {
	                if (node.operator === '=') {
	                    this.visitPattern(node.left, function (pattern, toplevel) {
	                        var maybeImplicitGlobal = null;
	                        if (!that.currentScope().isStrict) {
	                            maybeImplicitGlobal = {
	                                pattern: pattern,
	                                node: node
	                            };
	                        }
	                        that.currentScope().__referencing(pattern, Reference.WRITE, node.right, maybeImplicitGlobal, !toplevel);
	                    });
	                } else {
	                    that.currentScope().__referencing(node.left, Reference.RW, node.right);
	                }
	            } else {
	                this.visit(node.left);
	            }
	            this.visit(node.right);
	        },
	
	        CatchClause: function (node) {
	            var that = this;
	            this.scopeManager.__nestScope(node);
	
	            this.visitPattern(node.param, function (pattern) {
	                that.currentScope().__define(pattern, {
	                    type: Variable.CatchClause,
	                    name: node.param,
	                    node: node
	                });
	            });
	            this.visit(node.body);
	
	            this.close(node);
	        },
	
	        Program: function (node) {
	            this.scopeManager.__nestScope(node);
	
	            if (this.scopeManager.__isES6() && this.scopeManager.isModule()) {
	                this.scopeManager.__nestModuleScope(node);
	            }
	
	            this.visitChildren(node);
	            this.close(node);
	        },
	
	        Identifier: function (node) {
	            this.currentScope().__referencing(node);
	        },
	
	        UpdateExpression: function (node) {
	            if (isPattern(node.argument)) {
	                this.currentScope().__referencing(node.argument, Reference.RW, null);
	            } else {
	                this.visitChildren(node);
	            }
	        },
	
	        MemberExpression: function (node) {
	            this.visit(node.object);
	            if (node.computed) {
	                this.visit(node.property);
	            }
	        },
	
	        Property: function (node) {
	            this.visitProperty(node);
	        },
	
	        MethodDefinition: function (node) {
	            this.visitProperty(node);
	        },
	
	        BreakStatement: function () {},
	
	        ContinueStatement: function () {},
	
	        LabeledStatement: function (node) {
	            this.visit(node.body);
	        },
	
	        ForStatement: function (node) {
	            // Create ForStatement declaration.
	            // NOTE: In ES6, ForStatement dynamically generates
	            // per iteration environment. However, escope is
	            // a static analyzer, we only generate one scope for ForStatement.
	            if (node.init && node.init.type === Syntax.VariableDeclaration && node.init.kind !== 'var') {
	                this.scopeManager.__nestScope(node);
	            }
	
	            this.visitChildren(node);
	
	            this.close(node);
	        },
	
	        ClassExpression: function (node) {
	            this.visitClass(node);
	        },
	
	        ClassDeclaration: function (node) {
	            this.visitClass(node);
	        },
	
	        CallExpression: function (node) {
	            // Check this is direct call to eval
	            if (!this.scopeManager.__ignoreEval() && node.callee.type === Syntax.Identifier && node.callee.name === 'eval') {
	                // NOTE: This should be `variableScope`. Since direct eval call always creates Lexical environment and
	                // let / const should be enclosed into it. Only VariableDeclaration affects on the caller's environment.
	                this.currentScope().variableScope.__detectEval();
	            }
	            this.visitChildren(node);
	        },
	
	        BlockStatement: function (node) {
	            if (this.scopeManager.__isES6()) {
	                this.scopeManager.__nestScope(node);
	            }
	
	            this.visitChildren(node);
	
	            this.close(node);
	        },
	
	        ThisExpression: function () {
	            this.currentScope().variableScope.__detectThis();
	        },
	
	        WithStatement: function (node) {
	            this.visit(node.object);
	            // Then nest scope for WithStatement.
	            this.scopeManager.__nestScope(node);
	
	            this.visit(node.body);
	
	            this.close(node);
	        },
	
	        VariableDeclaration: function (node) {
	            var variableTargetScope, i, iz, decl;
	            variableTargetScope = (node.kind === 'var') ? this.currentScope().variableScope : this.currentScope();
	            for (i = 0, iz = node.declarations.length; i < iz; ++i) {
	                decl = node.declarations[i];
	                this.visitVariableDeclaration(variableTargetScope, Variable.Variable, node, i);
	                if (decl.init) {
	                    this.visit(decl.init);
	                }
	            }
	        },
	
	        // sec 13.11.8
	        SwitchStatement: function (node) {
	            var i, iz;
	
	            this.visit(node.discriminant);
	
	            if (this.scopeManager.__isES6()) {
	                this.scopeManager.__nestScope(node);
	            }
	
	            for (i = 0, iz = node.cases.length; i < iz; ++i) {
	                this.visit(node.cases[i]);
	            }
	
	            this.close(node);
	        },
	
	        FunctionDeclaration: function (node) {
	            this.visitFunction(node);
	        },
	
	        FunctionExpression: function (node) {
	            this.visitFunction(node);
	        },
	
	        ForOfStatement: function (node) {
	            this.visitForIn(node);
	        },
	
	        ForInStatement: function (node) {
	            this.visitForIn(node);
	        },
	
	        ArrowFunctionExpression: function (node) {
	            this.visitFunction(node);
	        },
	
	        ImportDeclaration: function (node) {
	            var importer;
	
	            assert(this.scopeManager.__isES6() && this.scopeManager.isModule());
	
	            importer = new Importer(node, this);
	            importer.visit(node);
	        },
	
	        ExportDeclaration: function (node) {
	            if (node.source) {
	                return;
	            }
	            if (node.declaration) {
	                this.visit(node.declaration);
	                return;
	            }
	
	            this.visitChildren(node);
	        },
	
	        ExportSpecifier: function (node) {
	            this.visit(node.id);
	        }
	    });
	
	    /**
	     * Main interface function. Takes an Esprima syntax tree and returns the
	     * analyzed scopes.
	     * @function analyze
	     * @param {esprima.Tree} tree
	     * @param {Object} providedOptions - Options that tailor the scope analysis
	     * @param {boolean} [providedOptions.optimistic=false] - the optimistic flag
	     * @param {boolean} [providedOptions.directive=false]- the directive flag
	     * @param {boolean} [providedOptions.ignoreEval=false]- whether to check 'eval()' calls
	     * @param {string} [providedOptions.sourceType='script']- the source type of the script. one of 'script' and 'module'
	     * @param {number} [providedOptions.ecmaVersion=5]- which ECMAScript version is considered
	     * @return {ScopeManager}
	     */
	    function analyze(tree, providedOptions) {
	        var scopeManager, referencer, options;
	
	        options = updateDeeply(defaultOptions(), providedOptions);
	
	        scopeManager = new ScopeManager(options);
	
	        referencer = new Referencer(scopeManager);
	        referencer.visit(tree);
	
	        assert(scopeManager.__currentScope === null);
	
	        return scopeManager;
	    }
	
		return {
		    /** @name module:escope.version */
		    version: '2.0.4',
		    /** @name module:escope.Reference */
		    Reference: Reference,
		    /** @name module:escope.Variable */
		    Variable: Variable,
		    /** @name module:escope.Scope */
		    Scope: Scope,
		    /** @name module:escope.ScopeManager */
		    ScopeManager: ScopeManager,
		    /** @name module:escope.analyze */
		    analyze: analyze
	    };
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 63 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*
	  Copyright (C) 2014 Yusuke Suzuki <utatane.tea@gmail.com>
	
	  Redistribution and use in source and binary forms, with or without
	  modification, are permitted provided that the following conditions are met:
	
	    * Redistributions of source code must retain the above copyright
	      notice, this list of conditions and the following disclaimer.
	    * Redistributions in binary form must reproduce the above copyright
	      notice, this list of conditions and the following disclaimer in the
	      documentation and/or other materials provided with the distribution.
	
	  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
	  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
	  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
	  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
	  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
	  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
	  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
	  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
	  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
	  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*/
	/* eslint-env amd */
	/* eslint-disable missing-nls */
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
		'use strict';
	
	    var isArray,
	        objectKeys;
	
	    var estraverse = __webpack_require__(32);
	
	    isArray = Array.isArray;
	    if (!isArray) {
	        isArray = function isArray(array) {
	            return Object.prototype.toString.call(array) === '[object Array]';
	        };
	    }
	
	    objectKeys = Object.keys || function (o) {
	        var keys = [], key;
	        for (key in o) {
	            keys.push(key);
	        }
	        return keys;
	    };
	
	    function isNode(node) {
	        if (node == null) {
	            return false;
	        }
	        return typeof node === 'object' && typeof node.type === 'string';
	    }
	
	    function isProperty(nodeType, key) {
	        return (nodeType === estraverse.Syntax.ObjectExpression || nodeType === estraverse.Syntax.ObjectPattern) && key === 'properties';
	    }
	
	    function Visitor(visitor) {
	        this.__visitor = visitor;
	    }
	
	    /* Default method for visiting children.
	     * When you need to call default visiting operation inside custom visiting
	     * operation, you can use it with `this.visitChildren(node)`.
	     */
	    Visitor.prototype.visitChildren = function (node) {
	        var type, children, i, iz, j, jz, child;
	
	        if (node == null) {
	            return;
	        }
	
	        type = node.type || estraverse.Syntax.Property;
	
	        children = estraverse.VisitorKeys[type];
	        if (!children) {
	            children = objectKeys(node);
	        }
	
	        for (i = 0, iz = children.length; i < iz; ++i) {
	            child = node[children[i]];
	            if (child) {
	                if (Array.isArray(child)) {
	                    for (j = 0, jz = child.length; j < jz; ++j) {
	                        if (child[j]) {
	                            if (isNode(child[j]) || isProperty(type, children[i])) {
	                                this.visit(child[j]);
	                            }
	                        }
	                    }
	                } else if (isNode(child)) {
	                    this.visit(child);
	                }
	            }
	        }
	    };
	
	    /* Dispatching node. */
	    Visitor.prototype.visit = function (node) {
	        var type;
	
	        if (node == null) {
	            return;
	        }
	
	        type = node.type || estraverse.Syntax.Property;
	        if (this.__visitor[type]) {
	            this.__visitor[type].call(this, node);
	            return;
	        }
	        this.visitChildren(node);
	    };
	
		return {
		    version: '1.2.0',
		    Visitor: Visitor,
		    visit: function (node, visitor) {
		        var v = new Visitor(visitor);
		        v.visit(node);
		    }
	    };
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 64 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* eslint-env amd */
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
		__webpack_require__(65),
		__webpack_require__(32),
		__webpack_require__(35)
	], __WEBPACK_AMD_DEFINE_RESULT__ = function(createTokenStore, estraverse, eslint) {
		/**
	 * @fileoverview Abstraction of JavaScript source code.
	 * @author Nicholas C. Zakas
	 * @copyright 2015 Nicholas C. Zakas. All rights reserved.
	 * See LICENSE file in root directory for full license.
	 */
	"use strict";
	/* eslint no-underscore-dangle: 0*/
	//------------------------------------------------------------------------------
	// Private
	//------------------------------------------------------------------------------
	
	/**
	 * Validates that the given AST has the required information.
	 * @param {ASTNode} ast The Program node of the AST to check.
	 * @throws {Error} If the AST doesn't contain the correct information.
	 * @returns {void}
	 * @private
	 */
	function validate(ast) {
	
	    if (!ast.tokens) {
	        throw new Error("AST is missing the tokens array.");
	    }
	
	    if (!ast.comments) {
	        throw new Error("AST is missing the comments array.");
	    }
	
	    if (!ast.loc) {
	        throw new Error("AST is missing location information.");
	    }
	
	    if (!ast.range) {
	        throw new Error("AST is missing range information");
	    }
	}
	
	/**
	 * Finds a JSDoc comment node in an array of comment nodes.
	 * @param {ASTNode[]} comments The array of comment nodes to search.
	 * @param {int} line Line number to look around
	 * @returns {ASTNode} The node if found, null if not.
	 * @private
	 */
	function findJSDocComment(comments, line) {
	
	    if (comments) {
	        for (var i = comments.length - 1; i >= 0; i--) {
	            if (comments[i].type === "Block" && comments[i].value.charAt(0) === "*") {
	
	                if (line - comments[i].loc.end.line <= 1) {
	                    return comments[i];
	                } else {
	                    break;
	                }
	            }
	        }
	    }
	
	    return null;
	}
	
	/**
	 * Check to see if its a ES6 export declaration
	 * @param {ASTNode} astNode - any node
	 * @returns {boolean} whether the given node represents a export declaration
	 * @private
	 */
	function looksLikeExport(astNode) {
	    return astNode.type === "ExportDefaultDeclaration" || astNode.type === "ExportNamedDeclaration" ||
	        astNode.type === "ExportAllDeclaration" || astNode.type === "ExportSpecifier";
	}
	
	
	//------------------------------------------------------------------------------
	// Public Interface
	//------------------------------------------------------------------------------
	
	/**
	 * Represents parsed source code.
	 * @param {string} text The source code text.
	 * @param {ASTNode} ast The Program node of the AST representing the code.
	 * @constructor
	 */
	function SourceCode(text, ast) {
	
	    validate(ast);
	
	    /**
	     * The original text source code.
	     * @type string
	     */
	    this.text = text;
	
	    /**
	     * The parsed AST for the source code.
	     * @type ASTNode
	     */
	    this.ast = ast;
	
	    /**
	     * The source code split into lines according to ECMA-262 specification.
	     * This is done to avoid each rule needing to do so separately.
	     * @type string[]
	     */
	    this.lines = text.split(/\r\n|\r|\n|\u2028|\u2029/g);
	
	    this.tokensAndComments = ast.tokens.concat(ast.comments).sort(function(left, right) {
	        return left.range[0] - right.range[0];
	    });
	
	    // create token store methods
	    var tokenStore = createTokenStore(ast.tokens);
	    Object.keys(tokenStore).forEach(function(methodName) {
	        this[methodName] = tokenStore[methodName];
	    }, this);
	
	    // don't allow modification of this object
	    Object.freeze(this);
	    Object.freeze(this.lines);
	}
	
	SourceCode.prototype = {
	    constructor: SourceCode,
	
	    /**
	     * Gets the source code for the given node.
	     * @param {ASTNode=} node The AST node to get the text for.
	     * @param {int=} beforeCount The number of characters before the node to retrieve.
	     * @param {int=} afterCount The number of characters after the node to retrieve.
	     * @returns {string} The text representing the AST node.
	     */
	    getText: function(node, beforeCount, afterCount) {
	        if (node) {
	            return (this.text !== null) ? this.text.slice(Math.max(node.range[0] - (beforeCount || 0), 0),
	                node.range[1] + (afterCount || 0)) : null;
	        } else {
	            return this.text;
	        }
	
	    },
	
	    /**
	     * Gets the entire source text split into an array of lines.
	     * @returns {Array} The source text as an array of lines.
	     */
	    getLines: function() {
	        return this.lines;
	    },
	
	    /**
	     * Retrieves an array containing all comments in the source code.
	     * @returns {ASTNode[]} An array of comment nodes.
	     */
	    getAllComments: function() {
	        return this.ast.comments;
	    },
	
	    /**
	     * Gets all comments for the given node.
	     * @param {ASTNode} node The AST node to get the comments for.
	     * @returns {Object} The list of comments indexed by their position.
	     * @public
	     */
	    getComments: function(node) {
	
	        var leadingComments = node.leadingComments || [],
	            trailingComments = node.trailingComments || [];
	
	        /*
	         * espree adds a "comments" array on Program nodes rather than
	         * leadingComments/trailingComments. Comments are only left in the
	         * Program node comments array if there is no executable code.
	         */
	        if (node.type === "Program") {
	            if (node.body.length === 0) {
	                leadingComments = node.comments;
	            }
	        }
	
	        return {
	            leading: leadingComments,
	            trailing: trailingComments
	        };
	    },
	
	    /**
	     * Retrieves the JSDoc comment for a given node.
	     * @param {ASTNode} node The AST node to get the comment for.
	     * @returns {ASTNode} The BlockComment node containing the JSDoc for the
	     *      given node or null if not found.
	     * @public
	     */
	    getJSDocComment: function(node) {
	
	        var parent = node.parent,
	            line = node.loc.start.line;
	
	        switch (node.type) {
	            case "FunctionDeclaration":
	                if (looksLikeExport(parent)) {
	                    return findJSDocComment(parent.leadingComments, line);
	                } else {
	                    return findJSDocComment(node.leadingComments, line);
	                }
	                break;
	
	            case "ClassDeclaration":
	                return findJSDocComment(node.leadingComments, line);
	
	            case "ClassExpression":
	                return findJSDocComment(parent.parent.leadingComments, line);
	
	            case "ArrowFunctionExpression":
	            case "FunctionExpression":
	
	                if (parent.type !== "CallExpression" && parent.type !== "NewExpression") {
	                    while (parent && !parent.leadingComments && !/Function/.test(parent.type)) {
	                        parent = parent.parent;
	                    }
	
	                    return parent && (parent.type !== "FunctionDeclaration") ? findJSDocComment(parent.leadingComments, line) : null;
	                }
	
	            // falls through
	
	            default:
	                return null;
	        }
	    },
	
	    /**
	     * Gets the deepest node containing a range index.
	     * @param {int} index Range index of the desired node.
	     * @returns {ASTNode} The node if found or null if not found.
	     */
	    getNodeByRangeIndex: function(index) {
	        var result = null;
	
	        estraverse.traverse(this.ast, {
	            enter: function(node, parent) {
	                if (node.range[0] <= index && index < node.range[1]) {
	                    result = eslint.assign({ parent: parent }, node);
	                } else {
	                    this.skip();
	                }
	            },
	            leave: function(node) {
	                if (node === result) {
	                    this.break();
	                }
	            }
	        });
	
	        return result;
	    },
	
	    /**
	     * Determines if two tokens have at least one whitespace character
	     * between them. This completely disregards comments in making the
	     * determination, so comments count as zero-length substrings.
	     * @param {Token} first The token to check after.
	     * @param {Token} second The token to check before.
	     * @returns {boolean} True if there is only space between tokens, false
	     *  if there is anything other than whitespace between tokens.
	     */
	    isSpaceBetweenTokens: function(first, second) {
	        var text = this.text.slice(first.range[1], second.range[0]);
	        return /\s/.test(text.replace(/\/\*.*?\*\//g, ""));
	    }
	};
		return SourceCode;
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 65 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* eslint-env amd */
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
	    /**
	 * @fileoverview Object to handle access and retrieval of tokens.
	 * @author Brandon Mills
	 * @copyright 2014 Nicholas C. Zakas. All rights reserved.
	 * @copyright 2014 Brandon Mills. All rights reserved.
	 */
	//------------------------------------------------------------------------------
	// Implementation
	//------------------------------------------------------------------------------
	
	return function(tokens) {
	    var api = {},
	        starts = Object.create(null),
	        ends = Object.create(null),
	        index, length, range;
	
	    /**
	     * Gets tokens in a given interval.
	     * @param {int} start Inclusive index of the first token. 0 if negative.
	     * @param {int} end Exclusive index of the last token.
	     * @returns {Token[]} Tokens in the interval.
	     */
	    function get(start, end) {
	        var result = [],
	            i;
	
	        for (i = Math.max(0, start); i < end && i < length; i++) {
	            result.push(tokens[i]);
	        }
	
	        return result;
	    }
	
	    /**
	     * Gets the index in the tokens array of the last token belonging to a node.
	     * Usually a node ends exactly at a token, but due to ASI, sometimes a
	     * node's range extends beyond its last token.
	     * @param {ASTNode} node The node for which to find the last token's index.
	     * @returns {int} Index in the tokens array of the node's last token.
	     */
	    function lastTokenIndex(node) {
	        var end = node.range[1],
	            cursor = ends[end];
	
	        // If the node extends beyond its last token, get the token before the
	        // next token
	        if (typeof cursor === "undefined") {
	            cursor = starts[end] - 1;
	        }
	
	        // If there isn't a next token, the desired token is the last one in the
	        // array
	        if (isNaN(cursor)) {
	            cursor = length - 1;
	        }
	
	        return cursor;
	    }
	
	    // Map tokens' start and end range to the index in the tokens array
	    for (index = 0, length = tokens.length; index < length; index++) {
	        range = tokens[index].range;
	        starts[range[0]] = index;
	        ends[range[1]] = index;
	    }
	
	    /**
	     * Gets a number of tokens that precede a given node or token in the token
	     * stream.
	     * @param {(ASTNode|Token)} node The AST node or token.
	     * @param {int} [beforeCount=0] The number of tokens before the node or
	     *     token to retrieve.
	     * @returns {Token[]} Array of objects representing tokens.
	     */
	    api.getTokensBefore = function(node, beforeCount) {
	        var first = starts[node.range[0]];
	        return get(first - (beforeCount || 0), first);
	    };
	
	    /**
	     * Gets the token that precedes a given node or token in the token stream.
	     * @param {(ASTNode|Token)} node The AST node or token.
	     * @param {int} [skip=0] A number of tokens to skip before the given node or
	     *     token.
	     * @returns {Token} An object representing the token.
	     */
	    api.getTokenBefore = function(node, skip) {
	        return tokens[starts[node.range[0]] - (skip || 0) - 1];
	    };
	
	    /**
	     * Gets a number of tokens that follow a given node or token in the token
	     * stream.
	     * @param {(ASTNode|Token)} node The AST node or token.
	     * @param {int} [afterCount=0] The number of tokens after the node or token
	     *     to retrieve.
	     * @returns {Token[]} Array of objects representing tokens.
	     */
	    api.getTokensAfter = function(node, afterCount) {
	        var start = lastTokenIndex(node) + 1;
	        return get(start, start + (afterCount || 0));
	    };
	
	    /**
	     * Gets the token that follows a given node or token in the token stream.
	     * @param {(ASTNode|Token)} node The AST node or token.
	     * @param {int} [skip=0] A number of tokens to skip after the given node or
	     *     token.
	     * @returns {Token} An object representing the token.
	     */
	    api.getTokenAfter = function(node, skip) {
	        return tokens[lastTokenIndex(node) + (skip || 0) + 1];
	    };
	
	    /**
	     * Gets all tokens that are related to the given node.
	     * @param {ASTNode} node The AST node.
	     * @param {int} [beforeCount=0] The number of tokens before the node to retrieve.
	     * @param {int} [afterCount=0] The number of tokens after the node to retrieve.
	     * @returns {Token[]} Array of objects representing tokens.
	     */
	    api.getTokens = function(node, beforeCount, afterCount) {
	        return get(
	            starts[node.range[0]] - (beforeCount || 0),
	            lastTokenIndex(node) + (afterCount || 0) + 1
	        );
	    };
	
	    /**
	     * Gets the first `count` tokens of the given node's token stream.
	     * @param {ASTNode} node The AST node.
	     * @param {int} [count=0] The number of tokens of the node to retrieve.
	     * @returns {Token[]} Array of objects representing tokens.
	     */
	    api.getFirstTokens = function(node, count) {
	        var first = starts[node.range[0]];
	        return get(
	            first,
	            Math.min(lastTokenIndex(node) + 1, first + (count || 0))
	        );
	    };
	
	    /**
	     * Gets the first token of the given node's token stream.
	     * @param {ASTNode} node The AST node.
	     * @param {int} [skip=0] A number of tokens to skip.
	     * @returns {Token} An object representing the token.
	     */
	    api.getFirstToken = function(node, skip) {
	        return tokens[starts[node.range[0]] + (skip || 0)];
	    };
	
	    /**
	     * Gets the last `count` tokens of the given node.
	     * @param {ASTNode} node The AST node.
	     * @param {int} [count=0] The number of tokens of the node to retrieve.
	     * @returns {Token[]} Array of objects representing tokens.
	     */
	    api.getLastTokens = function(node, count) {
	        var last = lastTokenIndex(node) + 1;
	        return get(Math.max(starts[node.range[0]], last - (count || 0)), last);
	    };
	
	    /**
	     * Gets the last token of the given node's token stream.
	     * @param {ASTNode} node The AST node.
	     * @param {int} [skip=0] A number of tokens to skip.
	     * @returns {Token} An object representing the token.
	     */
	    api.getLastToken = function(node, skip) {
	        return tokens[lastTokenIndex(node) - (skip || 0)];
	    };
	
	    /**
	     * Gets all of the tokens between two non-overlapping nodes.
	     * @param {ASTNode} left Node before the desired token range.
	     * @param {ASTNode} right Node after the desired token range.
	     * @param {int} [padding=0] Number of extra tokens on either side of center.
	     * @returns {Token[]} Tokens between left and right plus padding.
	     */
	    api.getTokensBetween = function(left, right, padding) {
	        padding = padding || 0;
	        return get(
	            lastTokenIndex(left) + 1 - padding,
	            starts[right.range[0]] + padding
	        );
	    };
	
	    /**
	     * Gets the token starting at the specified index.
	     * @param {int} startIndex Index of the start of the token's range.
	     * @returns {Token} The token starting at index, or null if no such token.
	     */
	    api.getTokenByRangeStart = function(startIndex) {
	        return (tokens[starts[startIndex]] || null);
	    };
	
	    return api;
	};
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 66 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* eslint-env amd */
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
	/**
	 * @fileoverview The event generator for AST nodes.
	 * @author Toru Nagashima
	 * @copyright 2015 Toru Nagashima. All rights reserved.
	 * See LICENSE file in root directory for full license.
	 */
	
	"use strict";
	
	//------------------------------------------------------------------------------
	// Public Interface
	//------------------------------------------------------------------------------
	
	/**
	 * The event generator for AST nodes.
	 * This implements below interface.
	 *
	 * ```ts
	 * interface EventGenerator {
	 *     emitter: EventEmitter;
	 *     enterNode(node: ASTNode): void;
	 *     leaveNode(node: ASTNode): void;
	 * }
	 * ```
	 *
	 * @param {EventEmitter} emitter - An event emitter which is the destination of events.
	 * @returns {NodeEventGenerator} new instance.
	 */
	function NodeEventGenerator(emitter) {
	    this.emitter = emitter;
	}
	
	NodeEventGenerator.prototype = {
	    constructor: NodeEventGenerator,
	
	    /**
	     * Emits an event of entering AST node.
	     * @param {ASTNode} node - A node which was entered.
	     * @returns {void}
	     */
	    enterNode: function enterNode(node) {
	        this.emitter.emit(node.type, node);
	    },
	
	    /**
	     * Emits an event of leaving AST node.
	     * @param {ASTNode} node - A node which was left.
	     * @returns {void}
	     */
	    leaveNode: function leaveNode(node) {
	        this.emitter.emit(node.type + ":exit", node);
	    }
	};
	
	return NodeEventGenerator;
	
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 67 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* eslint-env amd */
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
	/**
	 * @fileoverview The event generator for comments.
	 * @author Toru Nagashima
	 * @copyright 2015 Toru Nagashima. All rights reserved.
	 * See LICENSE file in root directory for full license.
	 */
	
	"use strict";
	
	//------------------------------------------------------------------------------
	// Helpers
	//------------------------------------------------------------------------------
	
	/**
	 * Check collection of comments to prevent double event for comment as
	 * leading and trailing, then emit event if passing
	 * @param {ASTNode[]} comments - Collection of comment nodes
	 * @param {EventEmitter} emitter - The event emitter which is the destination of events.
	 * @param {Object[]} locs - List of locations of previous comment nodes
	 * @param {string} eventName - Event name postfix
	 * @returns {void}
	 */
	function emitComments(comments, emitter, locs, eventName) {
	    if (comments.length > 0) {
	        comments.forEach(function(node) {
	            var index = locs.indexOf(node.loc);
	            if (index >= 0) {
	                locs.splice(index, 1);
	            } else {
	                locs.push(node.loc);
	                emitter.emit(node.type + eventName, node);
	            }
	        });
	    }
	}
	
	/**
	 * Shortcut to check and emit enter of comment nodes
	 * @param {CommentEventGenerator} generator - A generator to emit.
	 * @param {ASTNode[]} comments - Collection of comment nodes
	 * @returns {void}
	 */
	function emitCommentsEnter(generator, comments) {
	    emitComments(
	        comments,
	        generator.emitter,
	        generator.commentLocsEnter,
	        "Comment");
	}
	
	/**
	 * Shortcut to check and emit exit of comment nodes
	 * @param {CommentEventGenerator} generator - A generator to emit.
	 * @param {ASTNode[]} comments Collection of comment nodes
	 * @returns {void}
	 */
	function emitCommentsExit(generator, comments) {
	    emitComments(
	        comments,
	        generator.emitter,
	        generator.commentLocsExit,
	        "Comment:exit");
	}
	
	//------------------------------------------------------------------------------
	// Public Interface
	//------------------------------------------------------------------------------
	
	/**
	 * The event generator for comments.
	 * This is the decorator pattern.
	 * This generates events of comments before/after events which are generated the original generator.
	 *
	 * @param {EventGenerator} originalEventGenerator - An event generator which is the decoration target.
	 * @param {SourceCode} sourceCode - A source code which has comments.
	 * @returns {CommentEventGenerator} new instance.
	 */
	function CommentEventGenerator(originalEventGenerator, sourceCode) {
	    this.original = originalEventGenerator;
	    this.emitter = originalEventGenerator.emitter;
	    this.sourceCode = sourceCode;
	    this.commentLocsEnter = [];
	    this.commentLocsExit = [];
	}
	
	CommentEventGenerator.prototype = {
	    constructor: CommentEventGenerator,
	
	    /**
	     * Emits an event of entering comments.
	     * @param {ASTNode} node - A node which was entered.
	     * @returns {void}
	     */
	    enterNode: function enterNode(node) {
	        var comments = this.sourceCode.getComments(node);
	
	        emitCommentsEnter(this, comments.leading);
	        this.original.enterNode(node);
	        emitCommentsEnter(this, comments.trailing);
	    },
	
	    /**
	     * Emits an event of leaving comments.
	     * @param {ASTNode} node - A node which was left.
	     * @returns {void}
	     */
	    leaveNode: function leaveNode(node) {
	        var comments = this.sourceCode.getComments(node);
	
	        emitCommentsExit(this, comments.trailing);
	        this.original.leaveNode(node);
	        emitCommentsExit(this, comments.leading);
	    }
	};
	return CommentEventGenerator;
	
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 68 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* eslint-env amd */
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	__webpack_require__(33),
	__webpack_require__(36),
	module,
	], __WEBPACK_AMD_DEFINE_RESULT__ = function(environments, rules, module) {
	/**
	 * @fileoverview Validates configs.
	 * @author Brandon Mills
	 * @copyright 2015 Brandon Mills
	 */
	
	"use strict";
	var validators = {
	    rules: Object.create(null)
	};
	
	/**
	 * Gets a complete options schema for a rule.
	 * @param {string} id The rule's unique name.
	 * @returns {object} JSON Schema for the rule's options.
	 */
	function getRuleOptionsSchema(id) {
	    var rule = rules.get(id),
	        schema = rule && rule.schema;
	
	    if (!schema) {
	        return {
	            "type": "array",
	            "items": [
	                {
	                    "enum": [0, 1, 2]
	                }
	            ],
	            "minItems": 1
	        };
	    }
	
	    // Given a tuple of schemas, insert warning level at the beginning
	    if (Array.isArray(schema)) {
	        return {
	            "type": "array",
	            "items": [
	                {
	                    "enum": [0, 1, 2]
	                }
	            ].concat(schema),
	            "minItems": 1,
	            "maxItems": schema.length + 1
	        };
	    }
	
	    // Given a full schema, leave it alone
	    return schema;
	}
	
	/**
	 * Validates a rule's options against its schema.
	 * @param {string} id The rule's unique name.
	 * @param {array|number} options The given options for the rule.
	 * @param {string} source The name of the configuration source.
	 * @returns {void}
	 */
	function validateRuleOptions(id, options, source) {
	    var validateRule = validators.rules[id],
	        message;
	
		// ORION we would need a CQ for the module is-my-json-valid
	/*    if (!validateRule) {
	        validateRule = schemaValidator(getRuleOptionsSchema(id), { verbose: true });
	        validators.rules[id] = validateRule;
	    }*/
	
		if (!validateRule) {
			return;
		}
	    if (typeof options === "number") {
	        options = [options];
	    }
	
	    validateRule(options);
	
	    if (validateRule.errors) {
	        message = [
	            source, ":\n",
	            "\tConfiguration for rule \"", id, "\" is invalid:\n"
	        ];
	        validateRule.errors.forEach(function(error) {
	            if (error.field === "data[\"0\"]") {  // better error for severity
	                message.push(
	                    "\tSeverity should be one of the following: 0 = off, 1 = warning, 2 = error (you passed \"", error.value, "\").\n");
	            } else {
	                message.push(
	                    "\tValue \"", error.value, "\" ", error.message, ".\n"
	                );
	            }
	        });
	
	        throw new Error(message.join(""));
	    }
	}
	
	/**
	 * Validates an environment object
	 * @param {object} environment The environment config object to validate.
	 * @param {string} source The location to report with any errors.
	 * @returns {void}
	 */
	function validateEnvironment(environment, source) {
	
	    // not having an environment is ok
	    if (!environment) {
	        return;
	    }
	
	    if (Array.isArray(environment)) {
	        throw new Error("Environment must not be an array");
	    }
	
	    if (typeof environment === "object") {
	        Object.keys(environment).forEach(function(env) {
	            if (!environments[env]) {
	                var message = [
	                    source, ":\n",
	                    "\tEnvironment key \"", env, "\" is unknown\n"
	                ];
	                throw new Error(message.join(""));
	            }
	        });
	    } else {
	        throw new Error("Environment must be an object");
	    }
	}
	
	/**
	 * Validates an entire config object.
	 * @param {object} config The config object to validate.
	 * @param {string} source The location to report with any errors.
	 * @returns {void}
	 */
	function validate(config, source) {
	
	    if (typeof config.rules === "object") {
	        Object.keys(config.rules).forEach(function(id) {
	            validateRuleOptions(id, config.rules[id], source);
	        });
	    }
	
	    validateEnvironment(config.env, source);
	}
	
	module.exports = {
	    getRuleOptionsSchema: getRuleOptionsSchema,
	    validate: validate,
	    validateRuleOptions: validateRuleOptions
	};
	return module.exports;
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 69 */
/***/ function(module, exports) {

	module.exports = {
		"rules": {
			"generator-star": [
				"generator-star-spacing"
			],
			"global-strict": [
				"strict"
			],
			"no-comma-dangle": [
				"comma-dangle"
			],
			"no-empty-class": [
				"no-empty-character-class"
			],
			"no-extra-strict": [
				"strict"
			],
			"no-reserved-keys": [
				"quote-props"
			],
			"no-space-before-semi": [
				"semi-spacing"
			],
			"no-wrap-func": [
				"no-extra-parens"
			],
			"space-after-function-name": [
				"space-before-function-paren"
			],
			"space-before-function-parentheses": [
				"space-before-function-paren"
			],
			"space-in-brackets": [
				"object-curly-spacing",
				"array-bracket-spacing",
				"computed-property-spacing"
			],
			"space-unary-word-ops": [
				"space-unary-ops"
			],
			"spaced-line-comment": [
				"spaced-comment"
			]
		}
	};

/***/ },
/* 70 */
/***/ function(module, exports, __webpack_require__) {

	var map = {
		"./comment-event-generator": 67,
		"./comment-event-generator.js": 67,
		"./config-validator": 68,
		"./config-validator.js": 68,
		"./eslint": 35,
		"./eslint.js": 35,
		"./events": 60,
		"./events.js": 60,
		"./load-rules-async": 37,
		"./load-rules-async.js": 37,
		"./node-event-generator": 66,
		"./node-event-generator.js": 66,
		"./rule-context": 58,
		"./rule-context.js": 58,
		"./rule-fixer": 59,
		"./rule-fixer.js": 59,
		"./rules": 36,
		"./rules.js": 36,
		"./rules/accessor-pairs": 40,
		"./rules/accessor-pairs.js": 40,
		"./rules/no-control-regex": 41,
		"./rules/no-control-regex.js": 41,
		"./rules/no-duplicate-case": 42,
		"./rules/no-duplicate-case.js": 42,
		"./rules/no-else-return": 43,
		"./rules/no-else-return.js": 43,
		"./rules/no-empty-character-class": 38,
		"./rules/no-empty-character-class.js": 38,
		"./rules/no-empty-label": 44,
		"./rules/no-empty-label.js": 44,
		"./rules/no-eq-null": 45,
		"./rules/no-eq-null.js": 45,
		"./rules/no-extra-boolean-cast": 46,
		"./rules/no-extra-boolean-cast.js": 46,
		"./rules/no-extra-parens": 47,
		"./rules/no-extra-parens.js": 47,
		"./rules/no-invalid-regexp": 48,
		"./rules/no-invalid-regexp.js": 48,
		"./rules/no-irregular-whitespace": 49,
		"./rules/no-irregular-whitespace.js": 49,
		"./rules/no-negated-in-lhs": 50,
		"./rules/no-negated-in-lhs.js": 50,
		"./rules/no-obj-calls": 51,
		"./rules/no-obj-calls.js": 51,
		"./rules/no-self-compare": 52,
		"./rules/no-self-compare.js": 52,
		"./source-code": 64,
		"./source-code.js": 64,
		"./token-store": 65,
		"./token-store.js": 65,
		"./util": 53,
		"./util.js": 53
	};
	function webpackContext(req) {
		return __webpack_require__(webpackContextResolve(req));
	};
	function webpackContextResolve(req) {
		return map[req] || (function() { throw new Error("Cannot find module '" + req + "'.") }());
	};
	webpackContext.keys = function webpackContextKeys() {
		return Object.keys(map);
	};
	webpackContext.resolve = webpackContextResolve;
	module.exports = webpackContext;
	webpackContext.id = 70;


/***/ },
/* 71 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*******************************************************************************
	 * @license
	 * Copyright (c) 2014 IBM Corporation and others.
	 * All rights reserved. This program and the accompanying materials are made
	 * available under the terms of the Eclipse Public License v1.0
	 * (http://www.eclipse.org/legal/epl-v10.html), and the Eclipse Distribution
	 * License v1.0 (http://www.eclipse.org/org/documents/edl-v10.html).
	 *
	 * Contributors: IBM Corporation - initial API and implementation
	 ******************************************************************************/
	
	/*eslint-env browser, amd*/
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
	
		var _services = [];
	
		function init(services, args) {
			/* the following definitions are from https://developers.google.com/analytics/devguides/collection/analyticsjs/pages */
			var href = window.location.protocol + '//' + window.location.hostname + window.location.pathname + window.location.search; //$NON-NLS-0$
			var page = window.location.pathname + window.location.search;
			var title = document.title;
	
			_services = services;
			_services.forEach(function(current) {
				current.pageLoad(href, page, title, args);
			});
		}
	
		function initFromRegistry(serviceRegistry, args) {
			var refs = serviceRegistry.getServiceReferences("orion.metrics"); //$NON-NLS-0$
			var services = [];
			refs.forEach(function(current) {
				services.push(serviceRegistry.getService(current));
			});
			init(services, args);
		}
	
		function logEvent(category, action, label, value, details) {
			_services.forEach(function(current) {
				current.logEvent(category, action, label || "", value, details);
			});
		}
	
		var timingVars = {};
		function logPageLoadTiming(timingVar, timingLabel) {
			/* 
			 * The level of window.performance implementation varies across the browsers,
			 * so check for the existence of all utilized functions up-front.
			 */
			if (window.performance) {
				 /* ensure that no more timings of this type are logged for this page */
				if (window.performance.getEntriesByName && window.performance.mark) {
					if (window.performance.getEntriesByName(timingVar).length) {
						return;
					}
					window.performance.mark(timingVar);
				} else {
					if (timingVars[timingVar]) {
						return;
					}
					timingVars[timingVar] = new Date();				
				}
				logTiming("page", timingVar, window.performance.now(), timingLabel); //$NON-NLS-0$
			}
		}
	
		function logTiming(timingCategory, timingVar, timingValue, timingLabel) {
			_services.forEach(function(current) {
				current.logTiming(timingCategory, timingVar, timingValue, timingLabel);
			});
		}
	
		return {
			init: init,
			initFromRegistry: initFromRegistry,
			logEvent: logEvent,
			logPageLoadTiming: logPageLoadTiming,
			logTiming: logTiming
		};
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 72 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*******************************************************************************
	 * @license
	 * Copyright (c) 2013, 2015 IBM Corporation and others.
	 * All rights reserved. This program and the accompanying materials are made
	 * available under the terms of the Eclipse Public License v1.0
	 * (http://www.eclipse.org/legal/epl-v10.html), and the Eclipse Distribution
	 * License v1.0 (http://www.eclipse.org/org/documents/edl-v10.html).
	 *
	 * Contributors:
	 *     IBM Corporation - initial API and implementation
	 *******************************************************************************/
	/*eslint-env amd*/
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
		__webpack_require__(13),
		__webpack_require__(15),
		__webpack_require__(73),
		__webpack_require__(71),
		__webpack_require__(8)
	], __WEBPACK_AMD_DEFINE_RESULT__ = function(Deferred, Objects, LRU, Metrics, Util) {
		/**
		 * @description Object of error types
		 * @since 5.0
		 */
		var ErrorTypes = {
			/**
			 * @description Something unexpected has been found while parsing, most commonly a syntax error
			 */
			Unexpected: 1,
			/**
			 * @description A Syntax problem that reports the last entered token as the problem
			 */
			EndOfInput: 2
		};
	
		/**
		 * Provides a shared AST.
		 * @name javascript.ASTManager
		 * @class Provides a shared AST.
		 * @param {Object} esprima The esprima parser that this ASTManager will use.
		 */
		function ASTManager(esprima) {
			this.parser = esprima;
			this.cache = new LRU(10);
			if (!this.parser) {
				throw new Error("Missing parser"); //$NON-NLS-1$
			}
		}
	
		Objects.mixin(ASTManager.prototype, /** @lends javascript.ASTManager.prototype */ {
			/**
			 * @param {orion.editor.EditorContext} editorContext
			 * @returns {orion.Promise} A promise resolving to the AST.
			 */
			getAST: function(editorContext) {
				var _self = this;
				return editorContext.getFileMetadata().then(function(metadata) {
					var loc = _self._getKey(metadata);
					var ast = _self.cache.get(loc);
					if (ast) {
						return new Deferred().resolve(ast);
					}
					return editorContext.getText().then(function(text) {
						ast = _self.parse(text, metadata ? metadata.location : 'unknown'); //$NON-NLS-1$
						_self.cache.put(loc, ast);
						return ast;
					});
				});
			},
			/**
			 * Returns the key to use when caching
			 * @param {Object} metadata The file infos
			 * @since 8.0
			 */
			_getKey: function _getKey(metadata) {
			      if(!metadata || !metadata.location) {
			          return 'unknown'; //$NON-NLS-1$
			      }
			      return metadata.location;
			},
			/**
			 * @private
			 * @param {String} text The code to parse.
			 * @param {String} file The file name that we parsed
			 * @returns {Object} The AST.
			 */
			parse: function(text, file) {
			    var start = Date.now();
				try {
					var ast = this.parser.parse(text, {
						range: true,
						loc: true,
						tolerant: true,
						tokens: true,
						attachComment: true,
						directSourceFile: file,
						deps: true
					});
				} catch (e) {
					ast = Util.errorAST(e, file, text);
				}
				var end = Date.now() - start;
				Metrics.logTiming('language tools', 'parse', end, 'application/javascript'); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
				ast.errors = Util.serializeAstErrors(ast);
			    ast.fileLocation = file;
				ast.source = text;
				return ast;
			},
			
			/**
			 * Callback from the orion.edit.model service
			 * @param {Object} event An <tt>orion.edit.model</tt> event.
			 * @see https://wiki.eclipse.org/Orion/Documentation/Developer_Guide/Plugging_into_the_editor#orion.edit.model
			 */
			onModelChanging: function(event) {
			    if(this.inputChanged) {
			        //TODO haxxor, eat the first model changing event which immediately follows
			        //input changed
			        this.inputChanged = null;
			    } else {
			        this.cache.remove(this._getKey(event.file));
			    }
			},
			/**
			 * Callback from the orion.edit.model service
			 * @param {Object} event An <tt>orion.edit.model</tt> event.
			 * @see https://wiki.eclipse.org/Orion/Documentation/Developer_Guide/Plugging_into_the_editor#orion.edit.model
			 */
			onInputChanged: function(event) {
			    this.inputChanged = event;
			}
		});
		return {
				ASTManager : ASTManager,
				ErrorTypes : ErrorTypes};
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 73 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*******************************************************************************
	 * @license
	 * Copyright (c) 2014 IBM Corporation and others.
	 * All rights reserved. This program and the accompanying materials are made 
	 * available under the terms of the Eclipse Public License v1.0 
	 * (http://www.eclipse.org/legal/epl-v10.html), and the Eclipse Distribution 
	 * License v1.0 (http://www.eclipse.org/org/documents/edl-v10.html). 
	 *
	 * Contributors:
	 *     IBM Corporation - initial API and implementation
	 *******************************************************************************/
	/*eslint-env amd*/
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
	
	    function node(key, value) {
	        var n = Object.create(null);
	        n._p = null;
	        n._n = null;
	        n._v = {key: key, value:value};
	        return n;
	    }
	
		/**
		 * @description Creates a new LRU cache with the given maximum size. If no size is given 
		 * an unbounded cache is created.
		 * 
		 * @constructor 
		 * @param {Number} size The maximum size of the LRU or -1 for an unbounded cache
		 * @returns {javascript.LRU} A new LRU instance
		 * @since 8.0
		 */
		function LRU(size) {
		    if(typeof size === 'undefined') {
		       this._max = -1;
		    } else {
		       this._max = size; 
		    }
		    this._start = this._end = null;
		    this._size = 0;
		    this._cache = Object.create(null);
		}
		
		/**
		 * @description Clears the entire cache
		 * @function
		 */
		LRU.prototype.clear = function clear() {
		    this._cache = Object.create(null);
		    this._start = null;
		    this._end = null;
		    this._size = 0;
		};
		/**
		 * @description Returns the current size of the map
		 * @function
		 * @returns {Number} The size of the map
		 */
		LRU.prototype.size = function size() {
		  return this._size;  
		};
		/**
		 * @description If the map contains the given key
		 * @function
		 * @param {String} key The key to check
		 * @returns {Boolean} If the map contains the key or not
		 */
		LRU.prototype.containsKey = function containsKey(key) {
		    return typeof this._cache[key] !== 'undefined';
		};
		/**
		 * @description Adds the given key / value pair to the map. If the addition is
		 * greater than the given maximum map size, the last entry will be removed 
		 * and the new entry added to the head of the map.
		 * 
		 * Putting a value that already exists in the map will move it to the head
		 * of the LRU discarding the existing value.
		 * 
		 * @function
		 * @param {String} key The key to map the given value to
		 * @param {*} value The value to map to the given key
		 */
		LRU.prototype.put = function put(key, value) {
		    if(this._max !== -1 && this._size+1 > this._max) {
		        //shuffle one off the end
		       this.remove(this._end._v.key);
		    }
		    this.remove(key);  //torch the existing value
		    var entry = node(key, value);
		    if(!this._start) {
		        this._start = this._end = entry;
		    } else {
		        entry = node(key, value);
		        entry._n = this._start;
		        this._start._p = entry;
		        this._start = entry;
		    }
		    this._cache[key] = entry;
		    this._size++;
		};
		/**
		 * @description Gets the value from the map with the given key. Returns
		 * null if no mapping exists.
		 * @function
		 * @param {String} key The key to look up
		 * @returns {*} The value mapped to the given key
		 */
		LRU.prototype.get = function get(key) {
		    if(this._size > 0) {
		        var entry = this._cache[key];
		        if(entry && entry._v) {
		          return entry._v.value;
		        }
		    }
		    return null;
		};
	 		/**
			  * @description Removes the key and mapped value from the map and returnns
			  * the removed value or null if nothign was removed.
			  * @function
			  * @param {String} key The key to remove
			  * @returns {*} The removed value or null
			  */
			 LRU.prototype.remove = function remove(key) {
	 		    if(this._size === 0) {
	 		        return null;
	 		    }
	 		    var entry = this._cache[key];
	 		    if(entry) {
	 		        var p = entry._p;
	 		        if(this._end === entry) {
	 		        	this._end = p;
	 		        }
	 		        var n = entry._n;
	 		        if(this._start === entry) {
	 		        	this._start = entry._n;
	 		        }
	 		        if(p) {
	 		            p._n = n;
	 		        }
	 		        if(n) {
	 		            n._p = p;
	 		        }
	 		        delete this._cache[key];
	 		        this._size--;
	 		        return entry._v.value;
	 		    }
	 		    return null;
	 		};
	 		/**
			  * @description Returns the array of keys found in the map in the order they were inserted,
			  * so for this LRU map the first key would be the oldest mapped value
			  * @function
			  * @returns {String[]} The keys in the map in insertion order
			  */
			 LRU.prototype.keys = function keys() {
			    var keys = [];
			    if(this._end) {
			       var n = this._end;
			       while(n) {
			           keys.push(n._v.key);
			           n = n._p;
			       }
			    }
			    return keys;
	 		};
		
		return LRU;
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 74 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*******************************************************************************
	 * @license
	 * Copyright (c) 2015 IBM Corporation and others.
	 * All rights reserved. This program and the accompanying materials are made 
	 * available under the terms of the Eclipse Public License v1.0 
	 * (http://www.eclipse.org/legal/epl-v10.html), and the Eclipse Distribution 
	 * License v1.0 (http://www.eclipse.org/org/documents/edl-v10.html). 
	 *
	 * Contributors:
	 *     IBM Corporation - initial API and implementation
	 *******************************************************************************/
	/*eslint-env node, amd*/
	/*globals infer tern resolver*/
	/**
	 * Tern type index and templates for ExpressJS node support
	 */
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
		__webpack_require__(3), 
		__webpack_require__(9), 
		__webpack_require__(10)
	], __WEBPACK_AMD_DEFINE_RESULT__ = function(infer, tern, resolver) {
	
		var templates = [
		/* eslint-disable missing-nls */
			{
				prefix: "express",
				name: "express",
				nodes: {top:true, member:false, prop:false},
				description: " - Node.js require statement for Express",
				template: "var ${name} = require('express');"
			},
			{
				prefix: "express",
				name: "express app",
				description: " - create a new Express app",
				template: "var express = require('express');\n" +
						  "var ${app} = express();\n" + 
						  "${cursor}\n"+ 
						  "app.listen(${timeout});\n"
			},
			{
				prefix: "express",
				name: "express configure",
				nodes: {top:true, member:false, prop:false},
				description: " - create an Express app configure statement",
				template: "app.configure(function() {\n" + 
	  					  "\tapp.set(${id}, ${value});\n" + 
						  "});"
			},
			{
				prefix: "express",
				name: "express specific configure",
				nodes: {top:true, member:false, prop:false},
				description: " - create a specific Express app configure statement",
				template: "app.configure(${name}, function() {\n" + 
	  					  "\tapp.set(${id}, ${value});\n" + 
						  "});"
			},
			{
				prefix: "express",
				name: "express app get",
				nodes: {top:true, member:false, prop:false},
				description: " - create a new Express app.get call",
				template: "var value = app.get(${id}, function(request, result){\n" +
						  "\t${cursor}\n});\n"
			},
			{
				prefix: "express",
				name: "express app set",
				nodes: {top:true, member:false, prop:false},
				description: " - create a new Express app set call",
				template: "app.set(${id}, ${value});\n"
			},
			{
				prefix: "express",
				name: "express app use",
				nodes: {top:true, member:false, prop:false},
				description: " - create a new Express app use statement",
				template: "app.use(${fnOrObject});\n"
			},
			{
				prefix: "express",
				name: "express app engine",
				nodes: {top:true, member:false, prop:false},
				description: " - create a new Express app engine statement",
				template: "app.engine(${fnOrObject});\n"
			},
			{
			    prefix: "express",
				name: "express app param",
				nodes: {top:true, member:false, prop:false},
				description: " - create a new Express app param statement",
				template: "app.param(${id}, ${value});\n"
			},
			{
				prefix: "express",
				name: "express app error use",
				nodes: {top:true, member:false, prop:false},
				description: " - create a new Express app error handling use statement",
				template: "app.use(function(error, request, result, next) {\n" + 
	  					  "\tresult.send(${code}, ${message});\n" + 
						  "});\n"
			}
			/* eslint-enable missing-nls */
		];
		
		/**
		 * @description Gets the templates that apply to given context
		 * @param {tern.File} file The backing file object from Tern
		 * @param {Number} wordStart The start of the word to complete
		 * @param {Number} wordEnd The end of the word to complete
		 * @param {Function} gather The collector function to call when wanting to add a proposal
		 * @since 9.0
		 * @callback
		 */
		function getTemplates(file, wordStart, wordEnd, gather) {  //file, start, end, completions) {
			var expr = infer.findExpressionAround(file.ast, wordStart, wordEnd, file.scope);
			var tmps = resolver.getTemplatesForNode(templates, expr, wordStart);
			if(tmps) {
				tmps.forEach(function(template) {
					gather(template.name, null, 0, function(c) {
						c.prefix = template.prefix;
						c.description = template.description;
						c.template = template.template;
						c.segments = template.segments;
						c.origin = 'express'; //$NON-NLS-1$
						c.type = 'template'; //$NON-NLS-1$
					});
				});
		    }
		}
		
		/* eslint-enable missing-nls */
		tern.registerPlugin("express", /* @callback */ function(server, options) { //$NON-NLS-1$
		    return {
		      defs : defs,
		      passes: {
		      	variableCompletion: getTemplates
		      }
		    };
		});
		
		/* eslint-disable missing-nls */
		var defs = {
		  "express": {
		    "IRoute": {
		      "path": "string",
		      "stack": "?",
		      "all": "fn(handler: [RequestHandler]) -> IRoute",
		      "get": "fn(handler: [RequestHandler]) -> IRoute",
		      "post": "fn(handler: [RequestHandler]) -> IRoute",
		      "put": "fn(handler: [RequestHandler]) -> IRoute",
		      "delete": "fn(handler: [RequestHandler]) -> IRoute",
		      "patch": "fn(handler: [RequestHandler]) -> IRoute",
		      "options": "fn(handler: [RequestHandler]) -> IRoute"
		    },
		    "Router": {
		      "!type": "fn(options?: ?) -> Router",
		      "prototype": {
			      "param": "fn(name: string, handler: RequestParamHandler) -> T",
			      "all": "?",
			      "get": "?",
			      "post": "?",
			      "put": "?",
			      "delete": "?",
			      "patch": "?",
			      "options": "?",
			      "route": "fn(path: string) -> IRoute",
			      "use": "fn(handler: [RequestHandler]) -> T"
			    }
		    },
		    "CookieOptions": {
		      "maxAge": "number",
		      "signed": "bool",
		      "expires": "Date",
		      "httpOnly": "bool",
		      "path": "string",
		      "domain": "string",
		      "secure": "bool"
		    },
		    "Errback": {},
		    "Request": {
		      "get": "fn(name: string) -> string",
		      "header": "fn(name: string) -> string",
		      "headers": {},
		      "accepts": "fn(type: string) -> string",
		      "acceptsCharset": "fn(charset: string) -> bool",
		      "acceptsLanguage": "fn(lang: string) -> bool",
		      "range": "fn(size: number) -> [?]",
		      "accepted": "[MediaType]",
		      "acceptedLanguages": "[?]",
		      "acceptedCharsets": "[?]",
		      "param": "fn(name: string, defaultValue?: ?) -> string",
		      "is": "fn(type: string) -> bool",
		      "protocol": "string",
		      "secure": "bool",
		      "ip": "string",
		      "ips": "[string]",
		      "subdomains": "[string]",
		      "path": "string",
		      "hostname": "string",
		      "host": "string",
		      "fresh": "bool",
		      "stale": "bool",
		      "xhr": "bool",
		      "body": "?",
		      "cookies": "?",
		      "method": "string",
		      "params": "?",
		      "user": "?",
		      "authenticatedUser": "?",
		      "files": "?",
		      "clearCookie": "fn(name: string, options?: ?) -> Response",
		      "query": "?",
		      "route": "?",
		      "signedCookies": "?",
		      "originalUrl": "string",
		      "url": "string"
		    },
		    "MediaType": {
		      "value": "string",
		      "quality": "number",
		      "type": "string",
		      "subtype": "string"
		    },
		    "Send": {},
		    "Response": {
		      "status": "fn(code: number) -> Response",
		      "sendStatus": "fn(code: number) -> Response",
		      "links": "fn(links: ?) -> Response",
		      "send": "Send",
		      "json": "Send",
		      "jsonp": "Send",
		      "sendFile": "fn(path: string)",
		      "sendfile": "fn(path: string)",
		      "download": "fn(path: string)",
		      "contentType": "fn(type: string) -> Response",
		      "type": "fn(type: string) -> Response",
		      "format": "fn(obj: ?) -> Response",
		      "attachment": "fn(filename?: string) -> Response",
		      "set": "fn(field: ?) -> Response",
		      "header": "fn(field: ?) -> Response",
		      "headersSent": "bool",
		      "get": "fn(field: string) -> string",
		      "clearCookie": "fn(name: string, options?: ?) -> Response",
		      "cookie": "fn(name: string, val: string, options: CookieOptions) -> Response",
		      "location": "fn(url: string) -> Response",
		      "redirect": "fn(url: string)",
		      "render": "fn(view: string, options?: Object, callback?: fn(err: Error, html: string))",
		      "locals": "?",
		      "charset": "string"
		    },
		    "ErrorRequestHandler": {},
		    "RequestHandler": {},
		    "Handler": {},
		    "RequestParamHandler": {},
		    "Application": {
		      "init": "fn()",
		      "defaultConfiguration": "fn()",
		      "engine": "fn(ext: string, fn: Function) -> Application",
		      "set": "fn(setting: string, val: ?) -> Application",
		      "get": {},
		      "path": "fn() -> string",
		      "enabled": "fn(setting: string) -> bool",
		      "disabled": "fn(setting: string) -> bool",
		      "enable": "fn(setting: string) -> Application",
		      "disable": "fn(setting: string) -> Application",
		      "configure": "fn(fn: Function) -> Application",
		      "render": "fn(name: string, options?: Object, callback?: fn(err: Error, html: string))",
		      "listen": "fn(port: number, hostname: string, backlog: number, callback?: Function) -> http.Server",
		      "route": "fn(path: string) -> IRoute",
		      "router": "string",
		      "settings": "?",
		      "resource": "?",
		      "map": "?",
		      "locals": "?",
		      "routes": "?"
		    },
		    "Express": {
		      "version": "string",
		      "mime": "string",
		      "createApplication": "fn() -> Application",
		      "createServer": "fn() -> Application",
		      "application": "?",
		      "request": "Request",
		      "response": "Response"
		    },
		    "static": "fn(root: string, options?: ?) -> RequestHandler"
		  },
		  "!name": "express",
		  "!define": {
		  	"!node": {
		        express: {
		          "!type": "fn() -> express.Application",
		          "!url": "http://expressjs.com",
		          "!doc": "Creates an express application.",
		          Router: {
		            "!type": "fn(options?: express.RouterOptions) -> +express.Router"
		          }
		        }
		      }
		  }
		};
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 75 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*******************************************************************************
	 * @license
	 * Copyright (c) 2015 IBM Corporation and others.
	 * All rights reserved. This program and the accompanying materials are made 
	 * available under the terms of the Eclipse Public License v1.0 
	 * (http://www.eclipse.org/legal/epl-v10.html), and the Eclipse Distribution 
	 * License v1.0 (http://www.eclipse.org/org/documents/edl-v10.html). 
	 *
	 * Contributors:
	 *     IBM Corporation - Allow original requirejs plugin to find files in Orion workspace
	 *******************************************************************************/
	/* eslint-disable missing-nls */
	/*eslint-env node, amd*/
	/*globals tern tern*/
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
		__webpack_require__(3), 
		__webpack_require__(9), 
		__webpack_require__(10), 
		__webpack_require__(76), 
		__webpack_require__(31)
	], __WEBPACK_AMD_DEFINE_RESULT__ = function(infer, tern, resolver, CU, Finder) {
	
	  tern.registerPlugin("html", /* @callback */ function(server, options) {
		server._htmlDeps = Object.create(null);
		server._htmlDeps.map = Object.create(null);
		
		server.on("beforeLoad", function(file) {
	      this._htmlDeps.file  = file.name;
	    });
	    server.on("reset", function() {
	      	server._htmlDeps = Object.create(null);
			server._htmlDeps.map = Object.create(null);
	    });
		
		function isHTML(name) {
			return /(?:html|htm|xhtml)$/g.test(name);
		}
		
	    return {
	      passes: {
	        /**
			 * @callback
			 */
			postParse: function postParse(ast, text) {
				if(isHTML(ast.sourceFile.name)) {
					var deps = server._htmlDeps.map[server._htmlDeps.file];
					if(Array.isArray(deps)) {
						ast.dependencies = deps.slice(0);
					}
					resolver.doPostParse(server, ast, infer.cx().definitions);
				}
			},
			/**
			 * @callback
			 */
			preInfer: function preInfer(ast, scope) {
				if(isHTML(ast.sourceFile.name)) {
					resolver.doPreInfer(server);
					//should all be resolved by now, add them to the file mapping
					if(Array.isArray(ast.dependencies)) {
						for(var i = 0; i < ast.dependencies.length; i++) {
							var dep = ast.dependencies[i];
							var _f = resolver.getResolved(dep);
							if(_f) {
								server.addFile(_f.file, _f.contents, server._htmlDeps.file);
							}
						}
					}
				}
			},
			/**
			 * @callback
			 */
			preParse: function preParse(text, options) {
				var f = options.directSourceFile.name;
				if(isHTML(f)) {
					// TODO We want to use a cuProvider to cache the CU, but there are no onModelChange events in the Tern server to recognize that the file contents have changed.
					var blocks = Finder.findScriptBlocks(text);
					if(Array.isArray(blocks)) {
						var cu = new CU(blocks, {location: f});
						server._htmlDeps.file = f;
						server._htmlDeps.map[f] = cu.getDependencies(); 
						return cu.getSource();
					}
				}
			}
	      }
	    };
	  });
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 76 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*******************************************************************************
	 * @license
	 * Copyright (c) 2015 IBM Corporation and others.
	 * All rights reserved. This program and the accompanying materials are made
	 * available under the terms of the Eclipse Public License v1.0
	 * (http://www.eclipse.org/legal/epl-v10.html), and the Eclipse Distribution
	 * License v1.0 (http://www.eclipse.org/org/documents/edl-v10.html).
	 *
	 * Contributors:
	 *     IBM Corporation - initial API and implementation
	 *******************************************************************************/
	/* eslint-env amd */
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	__webpack_require__(13)
	], __WEBPACK_AMD_DEFINE_RESULT__ = function(Deferred) {
	
	    /**
	     * @name CompilationUnit
	     * @description Creates a new CompilationUint instance. These instances should not be cached as they do
	     * not respond to model change events.
	     * @constructor
	     * @param {Array.<String>} sourceblocks The blocks of source to combine into one unit
	     * @param {Object} metadata The metadata describing the file this unit represents
	     * @param {Object} editorContext Optional editor context for the source file. Delegated to for setText and to get line information
	     * @returns {CompilationUnit} The new CompiationUnit instance
	     * @since 8.0
	     */
	    function CompilationUnit(sourceblocks, metadata, editorContext) {
	        this._blocks = sourceblocks;
	        this._metadata = metadata;
	        this._ec = editorContext;
	        this._deps = [];
	    }
	
	    /**
	     * @description Builds the backing source for the compilation unit
	     * @function
	     * @private
	     */
	    CompilationUnit.prototype._init = function _init() {
			var wrappedFunctionCallPrefix = "";  // Previously to avoid ESLint warnings we prefixed function calls with 'this.' See Bug 481137
	        var _cursor = 0;
	        this._source = '';
	        this._blocks.sort(function(a, b){
	        	var _a = a.offset ? a.offset : 0;
	        	var _b = b.offset ? b.offset : 0;
	        	return _a - _b;
	        });
	        for(var i = 0; i < this._blocks.length; i++) {
	            var block = this._blocks[i];
	            if(block.dependencies) {
	            	this._deps.push(block.dependencies);
	            }
	            var pad = block.offset - _cursor;
	            if(block.isWrappedFunctionCall){
					if (pad < wrappedFunctionCallPrefix.length){
						continue;
					}
					pad -= wrappedFunctionCallPrefix.length;
					while(pad > 0) {
	                	this._source += ' '; //$NON-NLS-1$
	                	pad--;
	            	}
	            	this._source += wrappedFunctionCallPrefix;
	            	this._source += block.text;
	            	if (block.text && block.text.charAt(block.text.length-1) !== ';'){
	            		this._source += ';';
	            	}
	            } else {
		            while(pad > 0) {
		                this._source += ' '; //$NON-NLS-1$
		                pad--;
		            }
		            this._source += block.text;
	            }
	
	            _cursor = this._source.length;
	        }
	    };
	
	    /**
	     * @description Returns the source of this compilation unit
	     * @function
	     * @returns {String} The source of the compilation unit
	     */
	    CompilationUnit.prototype.getSource = function getSource() {
	    	if(!this._source) {
	            this._init();
	        }
	        return this._source;
	    };
	
	    /**
	     * @description Returns if the given offset is valid compared to the blocks of code
	     * that make up this unit
	     * @function
	     * @param {Number} offset The offset to check
	     * @returns {Boolean} If the given offset is within any of the backing code blocks
	     */
	    CompilationUnit.prototype.validOffset = function validOffset(offset) {
	        if(!this._blocks || this._blocks.length < 1 || offset < 0) {
		        return false;
		    }
		    for(var i = 0; i < this._blocks.length; i++) {
		        var block = this._blocks[i];
		        var idx = block.offset;
		        if(offset >= idx && offset <= idx+block.text.length) {
		            return true;
		        }
		    }
		    return false;
	    };
	
	    /**
	     * @description Returns an EditorContext-like object that can resolve promises for <code>getText</code> and <code>getFileMetadata</code>
	     * @function
	     * @returns {Object} The EditorContext object to use when parsing
	     */
	   CompilationUnit.prototype.getEditorContext = function getEditorContext() {
	        var proxy = Object.create(null);
	        var that = this;
	        proxy.getText = function() {
	            return new Deferred().resolve(that.getSource());
	        };
	        proxy.getFileMetadata = function() {
	            return new Deferred().resolve(that._metadata);
	        };
	        proxy.setText = function(text, start, end) {
	            if(that._ec) {
	                return that._ec.setText(text, start, end);
	            } else {
	                return new Deferred().resolve(null);
	            }
	        };
	        return proxy;
	    };
	
	    /**
	     * @description Returns the computed list of dependencies
	     * @function
	     * @returns {Array.<string>} Returns the array of dependencies, or an empty array, never null
	     * @since 9.0
	     */
	    CompilationUnit.prototype.getDependencies = function getDependencies() {
	    	return this._deps;
	    };
	
	    return CompilationUnit;
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 77 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*******************************************************************************
	 * @license
	 * Copyright (c) 2015 IBM Corporation and others.
	 * All rights reserved. This program and the accompanying materials are made 
	 * available under the terms of the Eclipse Public License v1.0 
	 * (http://www.eclipse.org/legal/epl-v10.html), and the Eclipse Distribution 
	 * License v1.0 (http://www.eclipse.org/org/documents/edl-v10.html). 
	 *
	 * Contributors:
	 *     IBM Corporation - Allow original requirejs plugin to find files in Orion workspace
	 *******************************************************************************/
	/* eslint-disable missing-nls */
	/*eslint-env node, amd*/
	/*globals tern tern */
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
		__webpack_require__(9),
		__webpack_require__(15),
		__webpack_require__(31),
		__webpack_require__(78),
		__webpack_require__(8),
		__webpack_require__(79),
		__webpack_require__(33),
		__webpack_require__(16)
	], __WEBPACK_AMD_DEFINE_RESULT__ = function(tern, objects, Finder, Signatures, Util, Rules, ESLintEnvs, Messages) {
		
		var allEnvs = {};
		var envNames = {
			browser: Messages['browser'],
			node: Messages['node'],
			commonjs: Messages['commonjs'],
			worker: Messages['worker'],
			amd: Messages['amd'],
			mocha: Messages['mocha'],
			jasmine: Messages['jasmine'],
			jest: Messages['jest'],
			phantomjs: Messages['phantomjs'],
			protractor: Messages['protractor'],
			qunit: Messages['qunit'],
			jquery: Messages['jquery'],
			prototypejs: Messages['prototypejs'],
			shelljs: Messages['shelljs'],
			meteor: Messages['meteor'],
			mongo: Messages['mongo'],
			applescript: Messages['applescript'],
			nashorn: Messages['nashorn'],
			serviceworker: Messages['serviceworker'],
			embertest: Messages['embertest'],
			webextensions: Messages['webextension'],
			es6: Messages['es6']
		};
		
		tern.registerPlugin("jsdoc", /* @callback */ function(server, options) {
			return {
	     		passes: {
			      	/**
			      	 * @callback
			      	 */
			      	completion: function(file, options, expr, type) {
			      		var comment = Finder.findComment(options.end, file.ast);
			      		if(comment) {
			      			objects.mixin(allEnvs, ESLintEnvs);
			      			fetchPluginEnvs(server);
			      			if(comment.type === 'Line') {
			      				return findLineCompletions(comment, options, file);
			      			}
			      			return findBlockCompletions(comment, options, file);
			      		}
			      		return null;
			      	}
	      		}
	    	};
		});
		
		function fetchPluginEnvs(server) {
			if(server.options && server.options.plugins) {
				var keys = Object.keys(server.options.plugins);
				for(var i = 0, len = keys.length; i < len; i++) {
					var env = server.options.plugins[keys[i]].env;
					if(env) {
						allEnvs[env] = true;
					}			
				}
			}
		}
		
		/**
		 * @description Finds completions for line comments: //-prefixed
		 * @param {Object} comment The comment AST node
		 * @param {Object} options The options object
		 * @param {File} file The Tern file object
		 * @returns {Array.<Object>} The array of completion objects
		 * @since 11.0
		 */
		function findLineCompletions(comment, options, file) {
			var proposals = [];
			var prefix = getPrefix(options.end, file.text), char = file.text.charAt(options.end-prefix.length-1);
			if(char === '{') {
				proposals = computeTypeCompletions(prefix, comment, file);
			}
			return {completions: proposals};
	
		}
		
		/**
		 * @description Finds the completions for block comments: /**- or /*-prefixed 
		 * @param {Object} comment The comment AST node
		 * @param {Object} options The options object
		 * @param {File} file The Tern file object
		 * @returns {Array.<Object>} The array of completion objects
		 * @since 11.0
		 */
		function findBlockCompletions(comment, options, file) {
			var proposals = [];
			var prefix = getPrefix(options.end, file.text), char = file.text.charAt(options.end-prefix.length-1);
			if(char === '{') {
				// TODO When to use @link vs {}
				proposals = computeTypeCompletions(prefix, comment, file);
			} else if(char === '.') {
				proposals = computeMemberCompletions(prefix, comment, options);
			} else if(char === '*' || char === ' ') {
				proposals = computeBlockCompletions(prefix, comment, options, file);
			}
			return {completions: proposals};
		}
		
		/**
	     * @description Get the prefix to use for the proposal, handles @-based prefixes
	     * @param {Number} pos The activation context
	     * @param {String} buffer The text
	     * @returns {String} The prefix to use
	     */
	    function getPrefix(pos, buffer) {
	        var index = pos-1;
	        var word = '', char = buffer.charAt(index);
	        if('{*,'.indexOf(char) > -1) {
	            return word;
	        }
	        if(char === '@') {
	            return char;
	        } else if(char === '/' && buffer.charAt(index-1) === '/') {
	        	return word;
	    	}
	        while(index >= 0 && /\S/.test(char)) {
	            word = char+word;
	            if(char === '@' || char === '*' || char === '{') {
	                //we want the prefix to include the '@'
		            return word;
		        } else if(char === '/' && buffer.charAt(index-1) === '/') {
		        	return word;
		        }
	            index--;
	            char = buffer.charAt(index);
	            if('{*,'.indexOf(char) > -1) {
	                // we don't want the prefix to include the '*'
	                return word;
	            }
	        }
	        return word;
	    }
		/**
		 * @description Computes the reachable type names from the given scope
		 * @param {String} prefix The prefix
		 * @returns {Array.<Object>} The array of completion objects
		 */
		function computeTypeCompletions(prefix, comment, file) {
			var theType, proposal, key;
			var proposals = [];
			
			var defaultEnvs = {ecma5: true, ecma6: true};
			if (isHTML(file.name)){
				defaultEnvs.browser = true;
			}
			var envs = getActiveEnvironments(file.ast, defaultEnvs);
			var existingCompletions = Object.create(null); // Tern separates proto and non-proto props into two entries, we only want to see one
	
			var node = Finder.findNodeAfterComment(comment, file.ast);
			var scope = file.scope;
			if (node){
				if (node.scope){
					scope = node.scope;
				} else if (node.parents) {
					for (var i=node.parents.length-1; i>=0; i--) {
						if (node.parents[i] && node.parents[i].scope){
							scope = node.parents[i].scope;
							break;
						}
					}
				}
			}
			while (scope){
				for (key in scope.props){
					theType = scope.props[key];
					// TODO How to handle union types?
					if (theType && theType.types && theType.types.length > 0){
						proposal = getProposalForType(theType.types[0], envs, existingCompletions, prefix);
						if (proposal){
							proposals.push(proposal);
						}
					}
		
				}
				scope = scope.prev;
			}
			return proposals;
		}
		
		/**
		 * Return whether the given file name is an html file
		 * @param name file name to look at
		 * @returns returns whether the file name is html
		 */
		function isHTML(name) {
			return /(?:html|htm|xhtml)$/g.test(name);
		}
		
		/**
		 * @name getProposalForType
		 * @description Returns a completion proposal for the given type object or <code>null<code> if no proposal should be added
		 * @param theType {Object} type to make a proposal for
		 * @param envs {Object} list of active environments
		 * @param existingCompletions {Object} list of existing completion names
		 * @param prefix {String} preceding characters to the completion
		 * @returns returns a proposal or null
		 */
		function getProposalForType(theType, envs, existingCompletions, prefix){
			if (theType && typeof theType === 'object' && theType.name && theType.origin){
				if (envs[theType.origin] || theType.origin.indexOf('/') >= 0){
					var name = theType.name;
					
					// Top level scope can't be a return type in Browser or Node
					if (name === '<top>'){
						return null;
					}
					// We only want type completions not functions returning primitives, but include the actual primitive types
					var prims = ['bool', 'boolean', 'string', 'number', 'regexp'];
					if (theType.retval && prims.indexOf(theType.retval.name) >= 0 && prims.indexOf(theType.name.toLowerCase()) < 0){
						return null;
					}
					// Different scopes may have same properties
					if (existingCompletions[name]){
						return null;
					}
					
					existingCompletions[name] = true;
					var _p = createProposal(name, '', prefix);
					_p.origin = theType.origin;
					_p.doc = theType.doc;
					_p.url = theType.url;
					return _p;
				}
			}
			return null;
		}
		
		/**
		 * @name getActiveEnvironments
		 * @description Return an {Object} containing all active environments in the given ast based on eslint env and global settings
		 * @param ast File AST to get environments for
		 * @param defenvs {Object} containing environments that should be included in the active list by default
		 * @returns returns {Object} will all active environments set to <code>true</code>
		 */
		function getActiveEnvironments(ast, defenvs) {
			var env = Object.create(null);
			objects.mixin(env, defenvs);
			if(ast.comments) {
				for(var i = 0; i < ast.comments.length; i++) {
					var comment = ast.comments[i];
					if (comment.type === "Block") {
			            var value = comment.value.trim();
			            var match = /^(eslint-\w+|eslint|globals?)(\s|$)/.exec(value);
						if (match) {
			                value = value.substring(match.index + match[1].length);
			                if(match[1] === 'eslint-env') {
			                	// Collapse whitespace around ,
							    var string = value.replace(/\s*,\s*/g, ",");
							    string.split(/,+/).forEach(function(_name) {
							        _name = _name.trim();
							        if (!_name) {
							            return;
							        }
							        env[_name] = true;
							    });
			                }
			            }
			        }
				}
			}
		    return env;
		}
		
		/**
		 * @description Computes the reachable type member names for completions
		 * @param {String} prefix The prefix
		 * @returns {Array.<Object>} The array of completion objects
		 */
		function computeMemberCompletions(prefix) {
			//TODO
			return [];
		}
		/**
		 * @description Computes the proposals for the block
		 * @param {String} prefix The prefix
		 * @param {Object} comment The AST node for the comment
		 * @param {Object} options The activation options
		 * @param {File} file The mapped file from Tern
		 * @returns {Array.<Object>} The array of completion objects
		 */
		function computeBlockCompletions(prefix, comment, options, file) {
			var proposals = [];
			var keys, val, _p;
			var line = getLine(options.end, file);
			var preamble = line.line.slice(0, options.end-line.start-prefix.length-1);
			
			if(/^\/\*$/.test(preamble.trim())) {
				// Provide a eslint-env template with set list of environments for the user to choose from
				if (Util.looselyMatches(prefix, "eslint-env")){
					var envsListTemplate = getEnvsListForTemplate();
					var template = "eslint-env ${library:" + envsListTemplate +"}";
					_p = createProposal("eslint-env", "", prefix, template);
					_p.doc = Messages['eslintEnvDirective'];
					_p.url = "http://eslint.org/docs/user-guide/configuring.html#specifying-environments";
					proposals.push(_p);
				}
				keys = Object.keys(block);
				for(var len = keys.length, i = 0; i < len; i++) {
					var tag = block[keys[i]];
					if(Util.looselyMatches(prefix, tag.name)) {
						_p = createProposal(tag.name, '', prefix, tag.template);
						_p.url = tag.url;
						_p.doc = tag.desc;
						proposals.push(_p);
					}
				}
			} else if((val = /\s*\*\s*\@name\s*(\w*)/ig.exec(line.line)) !== null) {
				if(val[1] === prefix) {
					var node = Finder.findNodeAfterComment(comment, file.ast);
					var _name = getFunctionName(node);
					if(_name) {
						proposals.push(createProposal(_name, Messages['funcProposalDescription'], prefix));
					}
				}
			} else if((val = /\s*\*\s*\@param\s*(?:\{[\w.]*\})?\s*(\w*)/ig.exec(line.line)) !== null) {
				if(val[1] === prefix) {
					node = Finder.findNodeAfterComment(comment, file.ast);
					if(node) {
						var prms = getFunctionParams(node);
						if(Array.isArray(prms)) {
							for(i = 0; i < prms.length; i++) {
								_name = prms[i].name;
								if(Util.looselyMatches(prefix, _name)) {
									proposals.push(createProposal(_name, Messages['funcParamProposalDescription'], prefix));
								}
							}
						}
					}
				}
			} else if(/^\s*(?:\/\*)?\s*eslint(?:-enable|-disable)?\s+/gi.test(line.line)) {
				//eslint eslint-enable eslint-disable
				var rules = Rules.metadata;
				var rulekeys = Object.keys(rules).sort();
				for(i = 0; i < rulekeys.length; i++) {
					var rulekey = rulekeys[i];
					if(Util.looselyMatches(prefix, rulekey)) {
						var rule = rules[rulekey];
						_p = createProposal(rulekey, '', prefix);
						_p.doc = rule.description ? rule.description : Messages['eslintRuleProposalDescripton'];
						if(rule.url) {
							_p.url = rule.url;
						}
						proposals.push(_p);
					}
				}
			} else if(/^\s*(?:\/\*)?\s*eslint-env\s+/gi.test(line.line)) {
				//eslint-env (comma-separated list)
				keys = Object.keys(allEnvs).sort();
				for(i = 0; i < keys.length; i++) {
					var key = keys[i];
					if(key !== 'builtin' && Util.looselyMatches(prefix, key)) {
						_p = createProposal(key, "", prefix);
						_p.doc = envNames[key];
						if(!_p.doc) {
							_p.doc = Messages['eslintEnvProposalDescription'];
						}
						_p.url = "http://eslint.org/docs/user-guide/configuring.html#specifying-environments";
						proposals.push(_p);
					}
				}
			} else {
					keys = Object.keys(tags);
					for(len = keys.length, i = 0; i < len; i++) {
						tag = tags[keys[i]];
						if(Util.looselyMatches(prefix, tag.name)) {
							if(tag.template) {
								_p = createProposal(tag.name, "", prefix, tag.template);
							} else {
								_p = createProposal(tag.name, "", prefix);
							}
							_p.url = tag.url;
							_p.doc = tag.desc;
							proposals.push(_p);
						}
					}
			}
			return proposals;
		}
		
		/**
		 * @description Finds the line of text the completion is happening on - this mimics 
		 * an option we used to get from the client
		 * @param {Number} offset The offset in text the completion is happening at
		 * @param {File} file The file obejct from Tern
		 * @returns {String} The line of text
		 * @since 11.0
		 */
		function getLine(offset, file) {
			var line = '', idx = offset;
			if(idx > 0 && idx <= file.text.length) {
				var c = file.text.charAt(idx);
				if(c === '\n') {
					//started at the end, walk back to the next end
					idx--;
					c = file.text.charAt(idx);
				}
				while(c !== '\n' && idx > -1) {
					line = c+line;
					idx--;
					c = file.text.charAt(idx);
				}
			}
			return {line: line, start: idx};
		}
		
		/**
		 * @description Returns the function name from the given node if it relates to a function in some way
		 * @param {Object} node The AST node
		 * @returns {String} The name of he related function or null
		 * @since 10.0
		 */
		function getFunctionName(node) {
			switch(node.type) {
				case 'FunctionDeclaration': {
					return node.id.name;
				}
				case 'Property': {
					if(node.value.type === 'FunctionExpression') {
						return node.value.id ? node.value.id.name : node.key.name;
					}
					break;
				}
				case 'ExpressionStatement': {
					var _n = node.expression;
					if(_n && _n.type === 'AssignmentExpression' && _n.right.type === 'FunctionExpression') {
						if(_n.right.id) {
							return _n.right.id.name;
						}
						if(_n.left.type === 'Identifier') {
							return _n.left.name;
						}
						if(_n.left.type === 'MemberExpression') {
							return Signatures.expandMemberExpression(_n.left, '');
						}
					}
					break;
				}
				case 'VariableDeclaration': {
					if(node.declarations.length > 0) {
						//always pick the first one to attach the comment to
						var decl = node.declarations[0];
						if(decl.init && decl.init.type === 'FunctionExpression') {
							if(decl.init.id) {
								return decl.init.id.name;
							}
							return decl.id.name;
						}
					}
					break;
				}
			}
			return null;
		}
	
		/**
		 * @description Returns the parameters from the related function
		 * @param {Object} node The AST node
		 * @returns {Array.<Object>} The parameters from the related function or an empty array
		 * @since 10.0
		 */
		function getFunctionParams(node) {
			switch(node.type) {
				case 'FunctionDeclaration': {
					return node.params;
				}
				case 'Property': {
					if(node.value.type === 'FunctionExpression') {
						return node.value.params;
					}
					break;
				}
				case 'ExpressionStatement': {
					var _n = node.expression;
					if(_n && _n.type === 'AssignmentExpression' && _n.right.type === 'FunctionExpression') {
						return _n.right.params;
					}
					break;
				}
				case 'VariableDeclaration': {
					if(node.declarations.length > 0) {
						//always pick the first one to attach the comment to
						var decl = node.declarations[0];
						if(decl.init && decl.init.type === 'FunctionExpression') {
							return decl.init.params;
						}
					}
					break;
				}
			}
			return [];
		}
		
		/**
		 * Takes the allEnvs object, extracts the envs list and formats it into a JSON string that the template
		 * computer will accept.
		 * @returns {String} A string list of eslint environment directives that the template computer will accept
		 */
		function getEnvsListForTemplate(){
			var envsList = [];
			var keys = Object.keys(allEnvs).sort();
			for(var j = 0; j < keys.length; j++) {
				var key = keys[j];
				if(key !== 'builtin'){
					envsList.push(key);
				}
			}
			var templateList = {
				type: "link", //$NON-NLS-0$
				values: envsList,
				title: 'ESLint Environments',
				style: 'no_emphasis' //$NON-NLS-1$
			};
			return JSON.stringify(templateList).replace("}", "\\}");
		}
		
		/**
		 * @description Helper function to create a new proposal object
		 * @param {String} name The name of the proposal
		 * @param {String} description The description
		 * @param {String} prefix The optional prefix to pass along
		 * @param {String} template The optional code template for the proposal
		 * @returns {Object} A new proposal object
		 */
		function createProposal(name, description, prefix, template) {
			var p = Object.create(null);
			if(typeof template === 'string') {
				p.type = 'jsdoc_template';
				p.template = template;
				p.isTemplate = true;
			} else {
				p.type = 'doc';
			}
			p.name = name;
			p.proposal = name.slice(prefix.length);
			p.description = description;
			if(typeof prefix === 'string') {
				p.prefix = prefix;
			}
			return p;
		}
		
		/**
		 * These are templates / entries that apply to blocks starting with /* vs. /**
		 */
		var block = {
			"eslint": {
				name: "eslint",  //$NON-NLS-0$
				desc: Messages['eslintRuleEnableDisable'],
				template: "eslint ${rule-id}:${0/1} ${cursor}", //$NON-NLS-0$  
				url: "http://eslint.org/docs/user-guide/configuring.html#configuring-rules"
		    },
		    "eslint-enable": {
				name: "eslint-enable",  //$NON-NLS-0$
				desc: Messages['eslintRuleEnable'],
				template: "eslint-enable ${rule-id} ${cursor}", //$NON-NLS-0$  
				url: "http://eslint.org/docs/user-guide/configuring.html#configuring-rules"
		    },
		    "eslint-disable": {
				name: "eslint-disable",  //$NON-NLS-0$
				desc: Messages['eslintRuleDisable'],
				template: "eslint-disable ${rule-id} ${cursor}", //$NON-NLS-0$
				url: "http://eslint.org/docs/user-guide/configuring.html#configuring-rules"
		    }
		};
		
		var tags = {
			"abstract": {
				"name": "@abstract",
				"url": "http://usejsdoc.org/tags-abstract.html",
				"desc": "This member must be implemented (or overridden) by the inheritor."
			},
			"access": {
				"name": "@access",
				"url": "http://usejsdoc.org/tags-access.html",
				"desc": "Specify the access level of this member (private, public, or protected)."
			},
			"alias": {
				"name": "@alias",
				"url": "http://usejsdoc.org/tags-alias.html",
				"desc": "Treat a member as if it had a different name."
			},
			"augments": {
				"name": "@augments",
				"url": "http://usejsdoc.org/tags-augments.html",
				"desc": "Indicate that a symbol inherits from, ands adds to, a parent symbol."
			},
			"author": {
				"name": "@author",
				"url": "http://usejsdoc.org/tags-author.html",
				"desc": "Identify the author of an item.",
				"template": "@author ${cursor}"
			},
			"borrows": {
				"name": "@borrows",
				"url": "http://usejsdoc.org/tags-borrows.html",
				"desc": "This object uses something from another object."
			},
			"callback": {
				"name": "@callback",
				"url": "http://usejsdoc.org/tags-callback.html",
				"desc": "Document a callback function.",
				"template": "@callback ${cursor}"
			},
			"class": {
				"name": "@class",
				"url": "http://usejsdoc.org/tags-class.html",
				"desc": "This function is intended to be called with the \"new\" keyword.",
				"template": "@class ${cursor}"
			},
			"classdesc": {
				"name": "@classdesc",
				"url": "http://usejsdoc.org/tags-classdesc.html",
				"desc": "Use the following text to describe the entire class."
			},
			"constant": {
				"name": "@constant",
				"url": "http://usejsdoc.org/tags-constant.html",
				"desc": "Document an object as a constant."
			},
			"constructs": {
				"name": "@constructs",
				"url": "http://usejsdoc.org/tags-constructs.html",
				"desc": "This function member will be the constructor for the previous class."
			},
			"copyright": {
				"name": "@copyright",
				"url": "http://usejsdoc.org/tags-copyright.html",
				"desc": "Document some copyright information."
			},
			"default": {
				"name": "@default",
				"url": "http://usejsdoc.org/tags-default.html",
				"desc": "Document the default value."
			},
			"deprecated": {
				"name": "@deprecated",
				"url": "http://usejsdoc.org/tags-deprecated.html",
				"desc": "Document that this is no longer the preferred way.",
				"template": "@deprecated ${cursor}"
			},
			"description": {
				"name": "@description",
				"url": "http://usejsdoc.org/tags-description.html",
				"desc": "Describe a symbol.",
				"template": "@description ${cursor}"
			},
			"enum": {
				"name": "@enum",
				"url": "http://usejsdoc.org/tags-enum.html",
				"desc": "Document a collection of related properties."
			},
			"event": {
				"name": "@event",
				"url": "http://usejsdoc.org/tags-event.html",
				"desc": "Document an event."
			},
			"example": {
				"name": "@example",
				"url": "http://usejsdoc.org/tags-example.html",
				"desc": "Provide an example of how to use a documented item."
			},
			"exports": {
				"name": "@exports",
				"url": "http://usejsdoc.org/tags-exports.html",
				"desc": "Identify the member that is exported by a JavaScript module."
			},
			"external": {
				"name": "@external",
				"url": "http://usejsdoc.org/tags-external.html",
				"desc": "Identifies an external class, namespace, or module."
			},
			"file": {
				"name": "@file",
				"url": "http://usejsdoc.org/tags-file.html",
				"desc": "Describe a file."
			},
			"fires": {
				"name": "@fires",
				"url": "http://usejsdoc.org/tags-fires.html",
				"desc": "Describe the events this method may fire."
			},
			"function": {
				"name": "@function",
				"url": "http://usejsdoc.org/tags-function.html",
				"desc": "Describe a function or method.",
				"template": "@function ${cursor}"
			},
			"global": {
				"name": "@global",
				"url": "http://usejsdoc.org/tags-global.html",
				"desc": "Document a global object."
			},
			"ignore": {
				"name": "@ignore",
				"url": "http://usejsdoc.org/tags-ignore.html",
				"desc": "Omit a symbol from the documentation."
			},
			"implements": {
				"name": "@implements",
				"url": "http://usejsdoc.org/tags-implements.html",
				"desc": "This symbol implements an interface."
			},
			"inheritdoc": {
				"name": "@inheritdoc",
				"url": "http://usejsdoc.org/tags-inheritdoc.html",
				"desc": "Indicate that a symbol should inherit its parent's documentation."
			},
			"inner": {
				"name": "@inner",
				"url": "http://usejsdoc.org/tags-inner.html",
				"desc": "Document an inner object."
			},
			"instance": {
				"name": "@instance",
				"url": "http://usejsdoc.org/tags-instance.html",
				"desc": "Document an instance member."
			},
			"interface": {
				"name": "@interface",
				"url": "http://usejsdoc.org/tags-interface.html",
				"desc": "This symbol is an interface that others can implement."
			},
			"kind": {
				"name": "@kind",
				"url": "http://usejsdoc.org/tags-kind.html",
				"desc": "What kind of symbol is this?"
			},
			"lends": {
				"name": "@lends",
				"url": "http://usejsdoc.org/tags-lends.html",
				"desc": "Document properties on an object literal as if they belonged to a symbol with a given name.",
				"template": "@lends ${cursor}"
			},
			"license": {
				"name": "@license",
				"url": "http://usejsdoc.org/tags-license.html",
				"desc": "Identify the license that applies to this code.",
				"template": "@license ${cursor}"
			},
			"listens": {
				"name": "@listens",
				"url": "http://usejsdoc.org/tags-listens.html",
				"desc": "List the events that a symbol listens for."
			},
			"member": {
				"name": "@member",
				"url": "http://usejsdoc.org/tags-member.html",
				"desc": "Document a member."
			},
			"memberof": {
				"name": "@memberof",
				"url": "http://usejsdoc.org/tags-memberof.html",
				"desc": "This symbol belongs to a parent symbol."
			},
			"mixes": {
				"name": "@mixes",
				"url": "http://usejsdoc.org/tags-mixes.html",
				"desc": "This object mixes in all the members from another object."
			},
			"mixin": {
				"name": "@mixin",
				"url": "http://usejsdoc.org/tags-mixin.html",
				"desc": "Document a mixin object."
			},
			"module": {
				"name": "@module",
				"url": "http://usejsdoc.org/tags-module.html",
				"desc": "Document a JavaScript module."
			},
			"name": {
				"name": "@name",
				"url": "http://usejsdoc.org/tags-name.html",
				"desc": "Document the name of an object.",
				"template": "@name ${cursor}"
			},
			"namespace": {
				"name": "@namespace",
				"url": "http://usejsdoc.org/tags-namespace.html",
				"desc": "Document a namespace object."
			},
			"override": {
				"name": "@override",
				"url": "http://usejsdoc.org/tags-override.html",
				"desc": "Indicate that a symbol overrides its parent."
			},
			"param": {
				"name": "@param",
				"url": "http://usejsdoc.org/tags-param.html",
				"desc": "Document the parameter to a function.",
				"template": "@param {${type}} ${cursor}"
			},
			"private": {
				"name": "@private",
				"url": "http://usejsdoc.org/tags-private.html",
				"desc": "This symbol is meant to be private.",
				"template": "@private ${cursor}"
			},
			"property": {
				"name": "@property",
				"url": "http://usejsdoc.org/tags-property.html",
				"desc": "Document a property of an object."
			},
			"protected": {
				"name": "@protected",
				"url": "http://usejsdoc.org/tags-protected.html",
				"desc": "This symbol is meant to be protected."
			},
			"public": {
				"name": "@public",
				"url": "http://usejsdoc.org/tags-public.html",
				"desc": "This symbol is meant to be public.",
				"template": "@public ${cursor}"
			},
			"readonly": {
				"name": "@readonly",
				"url": "http://usejsdoc.org/tags-readonly.html",
				"desc": "This symbol is meant to be read-only."
			},
			"requires": {
				"name": "@requires",
				"url": "http://usejsdoc.org/tags-requires.html",
				"desc": "This file requires a JavaScript module."
			},
			"returns": {
				"name": "@returns",
				"url": "http://usejsdoc.org/tags-returns.html",
				"desc": "Document the return value of a function.",
				"template": "@returns {${type}} ${cursor}"
			},
			"see": {
				"name": "@see",
				"url": "http://usejsdoc.org/tags-see.html",
				"desc": "Refer to some other documentation for more information.",
				"template": "@see ${cursor}"
			},
			"since": {
				"name": "@since",
				"url": "http://usejsdoc.org/tags-since.html",
				"desc": "When was this feature added?",
				"template": "@since ${cursor}"
			},
			"static": {
				"name": "@static",
				"url": "http://usejsdoc.org/tags-static.html",
				"desc": "Document a static member."
			},
			"summary": {
				"name": "@summary",
				"url": "http://usejsdoc.org/tags-summary.html",
				"desc": "A shorter version of the full description."
			},
			"this": {
				"name": "@this",
				"url": "http://usejsdoc.org/tags-this.html",
				"desc": "What does the 'this' keyword refer to here?"
			},
			"throws": {
				"name": "@throws",
				"url": "http://usejsdoc.org/tags-throws.html",
				"desc": "Describe what errors could be thrown.",
				"template": "@throws {${type}} ${cursor}"
			},
			"todo": {
				"name": "@todo",
				"url": "http://usejsdoc.org/tags-todo.html",
				"desc": "Document tasks to be completed."
			},
			"tutorial": {
				"name": "@tutorial",
				"url": "http://usejsdoc.org/tags-tutorial.html",
				"desc": "Insert a link to an included tutorial file."
			},
			"type": {
				"name": "@type",
				"url": "http://usejsdoc.org/tags-type.html",
				"desc": "Document the type of an object."
			},
			"typedef": {
				"name": "@typedef",
				"url": "http://usejsdoc.org/tags-typedef.html",
				"desc": "Document a custom type."
			},
			"variation": {
				"name": "@variation",
				"url": "http://usejsdoc.org/tags-variation.html",
				"desc": "Distinguish different objects with the same name."
			},
			"version": {
				"name": "@version",
				"url": "http://usejsdoc.org/tags-version.html",
				"desc": "Documents the version number of an item."
			},
			"link": {
				"name": "{@link}",
				"url": "http://usejsdoc.org/tags-inline-link.html",
				"desc": "Link to another item in the documentation."
			},
			"inline-tutorial": {
				"name": "{@tutorial}",
				"url": "http://usejsdoc.org/tags-inline-tutorial.html",
				"desc": "Link to a tutorial."
			}
		};
		
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 78 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*******************************************************************************
	 * @license
	 * Copyright (c) 2013, 2015 IBM Corporation and others.
	 * All rights reserved. This program and the accompanying materials are made 
	 * available under the terms of the Eclipse Public License v1.0 
	 * (http://www.eclipse.org/legal/epl-v10.html), and the Eclipse Distribution 
	 * License v1.0 (http://www.eclipse.org/org/documents/edl-v10.html). 
	 *
	 * Contributors:
	 *     IBM Corporation - initial API and implementation
	 *******************************************************************************/
	/*eslint-env amd*/
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
	
		var Signatures = {
		
			/**
			 * @name computeSignature
			 * @description Computes a signature object from the given AST node. The object holds two properties:
			 * <code>sig</code> - the human readable signature and <code>range</code> 
			 * @function
			 * @public
			 * @memberof javascript.Signatures.prototype
			 * @param {Object} astnode The AST node to parse and compute the signature from
			 * @returns {Object} The computed signature object or <code>null</code> if the computation fails
			 */
			computeSignature: function(astnode) {
				if(astnode) {
					if(astnode.sig) {
						return astnode.sig;
					}
					var val = this.getNameFrom(astnode);
					return {
						sig: val.name,
						details: val.details,
						range: this.getSignatureSourceRangeFrom(astnode)
					};
				}
				return null;
			},
			
			/**
			 * @name getParamsFrom
			 * @description Retrieves the parameters from the given AST node iff it a function declaration. If there is an attached doc node
			 * it will be consulted to help compute the types of the parameters
			 * @function
			 * @public
			 * @memberof javascript.Signatures.prototype
			 * @param {Object} astnode The AST node to compute the parameters from
			 * @returns {Array} An array of parameter names suitable for display, in the order they are defined in source. If no parameters
			 * can be computed an empty array is returned, never <code>null</code>
			 */
			getParamsFrom: function(astnode) {
				if(astnode) {
					var params = astnode.params;
					//TODO with the attached doc node we can augment this infos
					if(params && params.length > 0) {
						var length = params.length;
						var value = '';
						for(var i = 0; i < length; i++) {
							if(params[i].name) {
								value += params[i].name;
							}
							else {
								value += 'Object';  //$NON-NLS-0$
							}
							if(i < length -1) {
								value += ', ';  //$NON-NLS-0$
							}
						}
						return value;
					} 
				}
			},
			
			/**
			 * @name getPropertyListFrom
			 * @description Retrieves the properties from the given AST node iff it is a object declaration.
			 * @function
			 * @public
			 * @memberof javascript.Signatures.prototype
			 * @param {Object} astnode The AST node to compute the parameters from
			 * @param {Integer} maxLength maximum length of string to return,  defaults to 50
			 * @returns {String} A list of named properties, comma separated in source defined order, surrounded by {}. 
			 * 			Ellipsis will be added if no properties are available or max length reached.
			 */
			getPropertyListFrom: function(astnode, maxLength) {
				if (!maxLength){
					maxLength = 50;
				}
				if (maxLength < 0){
					maxLength = 0;
				}
				if(astnode) {
					var props = astnode.properties;
					if(props && props.length > 0) {
						var length = props.length;
						var name;
						var value = '{';
						for(var i = 0; i < length; i++) {
							if(props[i].key && props[i].key.name) {
								name = props[i].key.name;
							} else {
								name = 'Object';  //$NON-NLS-0$
							}
							
							if ((value.length + name.length) > (maxLength+1)){
								value += '...';   //$NON-NLS-0$
								break;
							} else {
								value += name;
								if(i < length -1) {
									value += ', ';  //$NON-NLS-0$
								}
							}
						}
						value += '}';
						return value;
					}
				}
				return '{...}';  //$NON-NLS-0$
			},
			
			/**
			 * @name getNameFrom
			 * @description Returns an object describing what to display for the given AST node. If there is an attached doc node it
			 * will be consulted to help compute the name to display
			 * @function
			 * @public
			 * @memberof javascript.Signatures.prototype
			 * @param {Object} astnode The AST node to compute the name from
			 * @returns {String} An object containing 'name', the computed name to display for the node or <code>null</code> if one could not be 
			 * 					computed and possibly 'details' if optional display information is computed
			 */
			getNameFrom: function(astnode) {
				var name = "Anonyous " + astnode.type;  //$NON-NLS-0$
				var details;
				if(astnode && astnode.type) {
					if(astnode.type === 'FunctionDeclaration') {
						//TODO with the attached doc node we can augment this infos
						if(astnode.id && astnode.id.name) {
							name = astnode.id.name+'(';
							var fparams = this.getParamsFrom(astnode);
							if(fparams) {
								name += fparams;
							}
							name += ')';
						}
					}
					else if(astnode.type === 'FunctionExpression') {
						name = 'function(';  //$NON-NLS-0$
						var feparams = this.getParamsFrom(astnode);
						if(feparams) {
							name += feparams;
						}
						name += ')';
					}
					else if(astnode.type === 'ObjectExpression') {
						name = 'closure ';  //$NON-NLS-0$
						details = this.getPropertyListFrom(astnode);
					}
					else if(astnode.type === 'Property') {
						if(astnode.value) {
							if(astnode.value.type === 'FunctionExpression') {
								if(astnode.key) {
									if(astnode.key.name) {
										name = astnode.key.name + '(';
									}
									else if(astnode.key.value) {
										name = astnode.key.value + '(';
									}
								}
								else {
									name = 'function(';  //$NON-NLS-0$
								}
								var pparams = this.getParamsFrom(astnode.value);
								if(pparams) {
									name += pparams;
								}
								name += ')';
							}
							else if(astnode.value.type === 'ObjectExpression') {
								if(astnode.key) {
									if(astnode.key.name) {
										name = astnode.key.name + ' ';  //$NON-NLS-0$
									}
									else if(astnode.key.value) {
										name = astnode.key.value + ' ';  //$NON-NLS-0$
									}
									details = this.getPropertyListFrom(astnode.value);
								}
							}
							else if(astnode.key) {
								if(astnode.key.name) {
									name = astnode.key.name;
								}
								else if(astnode.key.value) {
									name = astnode.key.value;
								}
							}
						}
					}
					else if(astnode.type === 'VariableDeclarator') {
						if(astnode.init) {
							if(astnode.init.type === 'ObjectExpression') {
								if(astnode.id && astnode.id.name) {
									name = 'var '+astnode.id.name+ ' = ';  //$NON-NLS-1$ //$NON-NLS-2$
									details = this.getPropertyListFrom(astnode.init);
								}
							}
							else if(astnode.init.type === 'FunctionExpression') {
								if(astnode.id && astnode.id.name) {
									name = astnode.id.name + '(';
									var vparams = this.getParamsFrom(astnode.init);
									if(vparams) {
										name += vparams;
									}
									name += ')';
								}
								else {
									name = this.getNameFrom(astnode.init);
								}
							}
						}
					}
					else if(astnode.type === 'AssignmentExpression') {
						if(astnode.left && astnode.right) {
							var isobject = astnode.right.type === 'ObjectExpression';
							if(isobject || astnode.right.type === 'FunctionExpression') {
								if(astnode.left.name) {
									name = astnode.left.name;
								}
								else if(astnode.left.type === 'MemberExpression') {
									name = this.expandMemberExpression(astnode.left, '');
								}
								if(name) {
									//append the right stuff
									if(isobject) {
										name += ' ';  //$NON-NLS-0$
										details = this.getPropertyListFrom(astnode.right); 
									}
									else {
										name += '(';
										var aparams = this.getParamsFrom(astnode.right);
										if(aparams) {
											name += aparams;
										}
										name += ')';
									}
								}
								else {
									name = this.getNameFrom(astnode.right);
								}
							}
						}
					}
					else if(astnode.type === 'ReturnStatement') {
						if(astnode.argument) {
							if(astnode.argument.type === 'ObjectExpression' ||
								astnode.argument.type === 'FunctionExpression') {
									name = 'return ';  //$NON-NLS-0$
									details = this.getPropertyListFrom(astnode.argument);
							}
						}
					}
				}
				return {name: name, details: details};
			},
			
			/**
			 * @name expandMemberExpression
			 * @description Given a MemberExpression node this function will recursively compute the complete name from the node
			 * by visiting all of the child MemberExpressions, if any
			 * @function
			 * @private
			 * @memberof javascript.Signatures.prototype
			 * @param {Object} astnode The MemberExpression AST node
			 * @returns {String} The name to use for the node
			 */
			expandMemberExpression: function(astnode, name) {
				if(astnode.type === 'MemberExpression') {
					if(astnode.property) {
					    var propname = astnode.property.name;
					    if(astnode.property.type === 'Literal') {
					        propname = astnode.property.value;
					    }
					    if(propname) {
	    					if(name && name.length > 0) {
	    						name = propname+'.' + name;
	    					}
	    					else {
	    						name = propname;
	    					}
						}
					}
					if(astnode.object && astnode.object.name) {
						name = astnode.object.name +'.'+ name;
					}
					//TODO recursion
					return this.expandMemberExpression(astnode.object, name);
				}
				return name;
			},
			
			/**
			 * @name getSignatureSourceRangeFrom
			 * @description Computes the signature source range (start, end) for the given node 
			 * @function
			 * @ppublic
			 * @memberof javascript.Signatures.prototype
			 * @param {Object} astnode The AST node to compute the range from
			 * @returns {Array} The computed signature source range as an array [start, end] or <code>[-1, -1]</code> if it could not
			 * be computed
			 */
			getSignatureSourceRangeFrom: function(astnode) {
				var range = [0, 0];
				if(astnode) {
					if(astnode.type === 'AssignmentExpression') {
						if(astnode.left && astnode.left.range) {
							range = astnode.left.range;
						}
					}
					else if(astnode.type === 'Property') {
						if(astnode.key && astnode.key.range) {
							range = astnode.key.range;
						}
					}
					else if(astnode.type === 'ReturnStatement') {
						range[0] = astnode.range[0];
						range[1] = range[0] + 6;
					}
					else if(astnode.id && astnode.id.range) {
						range = astnode.id.range;
					}
					else if(astnode.range) {
						range = astnode.range;
						if(astnode.type === 'FunctionExpression') {
							range[1] = range[0]+8;
						}
					}
					if(range[0] < 1) {
						//TODO hack since passing in a range starting with 0 causes no selection to be made
						range[0] = 1;
					}
				}
				return range;
			}
			
		};
		
		return Signatures;
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 79 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*******************************************************************************
	 * @license
	 * Copyright (c) 2015 IBM Corporation and others.
	 * All rights reserved. This program and the accompanying materials are made
	 * available under the terms of the Eclipse Public License v1.0
	 * (http://www.eclipse.org/legal/epl-v10.html), and the Eclipse Distribution
	 * License v1.0 (http://www.eclipse.org/org/documents/edl-v10.html).
	 *
	 * Contributors:
	 *	 IBM Corporation - initial API and implementation
	 *******************************************************************************/
	/* eslint-env amd */
	/* eslint-disable missing-nls */
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
		__webpack_require__(54)
	], __WEBPACK_AMD_DEFINE_RESULT__ = function(Messages) {
		
		var rules = {
			defaults: {
				"accessor-pairs" : 1,
				"curly" : 0,
				"eqeqeq": 1,
				"missing-doc" : 0, 
				"missing-nls" : 0,
				"new-parens" : 1,
				"no-caller": 1,
				"no-comma-dangle" : 0, 
				"no-cond-assign" : 2,
				"no-console" : 0, 
				"no-constant-condition" : 2,
				"no-control-regex" : 2,
				"no-debugger" : 1,
				"no-dupe-keys" : 2,
				"no-duplicate-case": 2,
				"no-else-return" : 1,
				"no-empty-block" : 0,
				"no-empty-character-class" : 2,
				"no-empty-label" : 2,
				"no-eq-null" : 1,
				"no-eval" : 0,
				"no-extra-boolean-cast" : 2,
				"no-extra-parens" : 1,
				"no-extra-semi": 1,
				"no-fallthrough" : 2, 
				"no-implied-eval" : 0,
				"no-invalid-regexp": 2,
				"no-irregular-whitespace" : 0,
				"no-iterator": 2, 
				"no-jslint" : 1, 
				"no-mixed-spaces-and-tabs" : 0,
				"no-negated-in-lhs" : 2,
				"no-new-array": 1,
				"no-new-func" : 1,
				"no-new-object" : 1,
				"no-new-wrappers" : 1,
				"no-obj-calls" : 2,
				"no-proto" : 2, 
				"no-redeclare" : 1,
				"no-regex-spaces" : 2,
				"no-reserved-keys" : 2,
				"no-self-compare" : 2,
				"no-self-assign" : 2,
				"no-shadow" : 1,
				"no-shadow-global" : 1,
				"no-sparse-arrays" : 1, 
				"no-throw-literal" : 1,
				"no-undef" : 2,
				"no-undef-init" : 1,
				"no-unreachable" : 2, 
				"no-unused-params" : 1,
				"no-unused-vars" : 1,
				"no-use-before-define" : 1,
				"no-with" : 1,
				"radix" : 1,
				"semi" : 1,
				"type-checked-consistent-return" : 0,
				"unnecessary-nls" : 0,
				"use-isnan" : 2,
				"valid-typeof" : 2
			},
	
			metadata: {
				"accessor-pairs" : {
					description: Messages['accessor-pairs-description'],
					url: 'http://eslint.org/docs/rules/accessor-pairs'
				},
				"curly" : {
					description: Messages['curly-description'],
		            url: 'http://eslint.org/docs/rules/curly'
				},
				"eqeqeq": {
					description: Messages['eqeqeq-description'],
				    url: "http://eslint.org/docs/rules/eqeqeq"
				},
		
				"missing-doc" : {
					description: Messages['missing-doc-description'],
				    url: 'http://eslint.org/docs/rules/valid-jsdoc'
				},
				"missing-nls" : {
					description: Messages['missing-nls-description']
				},
				"new-parens" : {
					description: Messages['new-parens-description'],
				    url: 'http://eslint.org/docs/rules/new-parens'
				},
				"no-caller": {
					description: Messages['no-caller-description'],
		            url: 'http://eslint.org/docs/rules/no-caller'
		        },
				"no-comma-dangle" : {
					description: Messages['no-comma-dangle-description'],
		            url: 'http://eslint.org/docs/rules/no-comma-dangle'
		        },
				"no-cond-assign" : {
					description: Messages['no-cond-assign-description'],
		            url: 'http://eslint.org/docs/rules/no-cond-assign'
		        },
				"no-console" : {
					description: Messages['no-console-description'],
		            url: 'http://eslint.org/docs/rules/no-console'
				}, 
				"no-constant-condition" : {
					description: Messages['no-constant-condition-description'],
		            url: 'http://eslint.org/docs/rules/no-constant-condition'
				},
				"no-control-regex" : {
					description: Messages['no-control-regex-description'],
					url: 'http://eslint.org/docs/rules/no-control-regex'
				},
				"no-debugger" : {
					description: Messages['no-debugger-description'],
			    	url: 'http://eslint.org/docs/rules/no-debugger'
				},
				"no-dupe-keys" : {
					description: Messages['no-dupe-keys-description'],
				    url: 'http://eslint.org/docs/rules/no-dupe-keys'
				},
				"no-duplicate-case": {
					description: Messages['no-duplicate-case-description'],
					url: 'http://eslint.org/docs/rules/no-duplicate-case'
				},
				"no-else-return" : {
					description: Messages['no-else-return-description'],
					url: 'http://eslint.org/docs/rules/no-else-return'
				},
				"no-empty-block" : {
					description: Messages['no-empty-block-description'],
				    url: 'http://eslint.org/docs/rules/no-empty'
				},
				"no-empty-character-class" : {
					description: Messages['no-empty-character-class-description'],
					url: 'http://eslint.org/docs/rules/no-empty-character-class'
				},
				"no-empty-label" : {
					description: Messages['no-empty-label-description'],
					url: 'http://eslint.org/docs/rules/no-empty-label'
				},
				"no-eq-null" : {
					description: Messages['no-eq-null-description'],
					url: 'http://eslint.org/docs/rules/no-eq-null'
				},
				"no-eval" : {
					description: Messages['no-eval-description'],
			    	url: 'http://eslint.org/docs/rules/no-eval'
				},
				"no-extra-boolean-cast" : {
					description: Messages['no-extra-boolean-cast-description'],
					url: 'http://eslint.org/docs/rules/no-extra-boolean-cast'
				},
				"no-extra-parens" : {
					description: Messages['no-extra-parens-description'],
					url: 'http://eslint.org/docs/rules/no-extra-parens'
				},
				"no-extra-semi": {
					description: Messages['no-extra-semi-description'],
			    	url: 'http://eslint.org/docs/rules/no-extra-semi'
				},
				"no-fallthrough" : {
					description: Messages['no-fallthrough-description'],
				    url: 'http://eslint.org/docs/rules/no-fallthrough'
				}, 
				"no-implied-eval" : {
					description: Messages['no-implied-eval-description'],
	        		url: 'http://eslint.org/docs/rules/no-implied-eval'
				},
				"no-invalid-regexp": {
					description: Messages['no-invalid-regexp-description'],
					url: 'http://eslint.org/docs/rules/no-invalid-regexp'
				},
				"no-irregular-whitespace" : {
					description: Messages['no-irregular-whitespace-description'],
					url: 'http://eslint.org/docs/rules/no-irregular-whitespace'
				},
				"no-iterator": {
					description: Messages['no-iterator-description'],
	            	url: 'http://eslint.org/docs/rules/no-iterator'
				}, 
				"no-jslint" : {
					description: Messages['no-jslint-description']
				}, 
				"no-mixed-spaces-and-tabs" : {
					description: Messages['no-mixed-spaces-and-tabs-description'],
					url: 'http://eslint.org/docs/rules/no-mixed-spaces-and-tabs'
				},
				"no-negated-in-lhs" : {
					description: Messages['no-negated-in-lhs-description'],
					url: 'http://eslint.org/docs/rules/no-negated-in-lhs'
				},
				"no-new-array": {
					description: Messages['no-new-array-description'],
					url: 'http://eslint.org/docs/rules/no-array-constructor.html'
				},
				"no-new-func" : {
					description: Messages['no-new-func-description'],
				    url: 'http://eslint.org/docs/rules/no-new-func'
				},
				"no-new-object" : {
					description: Messages['no-new-object-description'],
				    url: 'http://eslint.org/docs/rules/no-new-object'
				},
				"no-new-wrappers" : {
					description: Messages['no-new-wrappers-description'],
				    url: 'http://eslint.org/docs/rules/no-new-wrappers'
				},
				"no-obj-calls" : {
					description: Messages['no-obj-calls-description'],
					url: 'http://eslint.org/docs/rules/no-obj-calls'
				},
				"no-proto" : {
					description: Messages['no-proto-description'],
		            url: 'http://eslint.org/docs/rules/no-proto.html'
				}, 
				"no-redeclare" : {
					description: Messages['no-redeclare-description'],
				    url: 'http://eslint.org/docs/rules/no-redeclare'
				},
				"no-regex-spaces" : {
					description: Messages['no-regex-spaces-description'],
		            url: 'http://eslint.org/docs/rules/no-regex-spaces'
				},
				"no-reserved-keys" : {
					description: Messages['no-reserved-keys-description'],
		            url: 'http://eslint.org/docs/rules/no-reserved-keys'
				},
				"no-self-compare" : {
					description: Messages['no-self-compare-description'],
					url: 'http://eslint.org/docs/rules/no-self-compare'
				},
				"no-self-assign" : {
					description: Messages['no-self-assign-description'],
					url: 'http://eslint.org/docs/rules/no-self-assign'
				},
				"no-shadow" : {
					description: Messages['no-shadow-description'],
		            url: 'http://eslint.org/docs/rules/no-shadow'
				},
				"no-shadow-global" : {
					description: Messages['no-shadow-global-description']
				},
				"no-sparse-arrays" : {
					description: Messages['no-sparse-arrays-description'],
				    url: 'http://eslint.org/docs/rules/no-sparse-arrays'
				}, 
				"no-throw-literal" : {
					description: Messages['no-throw-literal-description'],
		            url: 'http://eslint.org/docs/rules/no-throw-literal'
				},
				"no-undef" : {
					description: Messages['no-undef-description'],
				    url: 'http://eslint.org/docs/rules/no-undef'
				},
				"no-undef-init" : {
					description: Messages['no-undef-init-description'],
		        	url: 'http://eslint.org/docs/rules/no-undef-init.html'
				},
				"no-unreachable" : {
					description: Messages['no-unreachable-description'],
				    url: 'http://eslint.org/docs/rules/no-unreachable'
				}, 
				"no-unused-params" : {
					description: Messages['no-unused-params-description']
				},
				"no-unused-vars" : {
					description: Messages['no-unused-vars-description'],
				    url: 'http://eslint.org/docs/rules/no-unused-vars'
				},
				"no-use-before-define" : {
					description: Messages['no-use-before-define-description'],
				    url: 'http://eslint.org/docs/rules/no-use-before-define'
				},
				"no-with" : {
					description: Messages['no-with-description'],
		        	url: 'http://eslint.org/docs/rules/no-with'
				},
				"radix" : {
					description: Messages['radix-description'],
		            url: 'http://eslint.org/docs/rules/radix'
				},
				"semi" : {
					description: Messages['semi-description'],
				    url: 'http://eslint.org/docs/rules/semi'
				},
				"unnecessary-nls" : {
					description: Messages['unnecessary-nls-description']
				},
				"use-isnan" : {
					description: Messages['use-isnan-description'],
				    url: 'http://eslint.org/docs/rules/use-isnan'
				},
				"valid-typeof" : {
					description: Messages['valid-typeof-description'],
				    url: 'http://eslint.org/docs/rules/valid-typeof'
				},
				"type-checked-consistent-return" : {
					description: Messages['type-checked-consistent-return-description']
				}
			}
		};
		return rules;
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 80 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*******************************************************************************
	 * @license
	 * Copyright (c) 2015 IBM Corporation and others.
	 * All rights reserved. This program and the accompanying materials are made 
	 * available under the terms of the Eclipse Public License v1.0 
	 * (http://www.eclipse.org/legal/epl-v10.html), and the Eclipse Distribution 
	 * License v1.0 (http://www.eclipse.org/org/documents/edl-v10.html). 
	 *
	 * Contributors:
	 *     IBM Corporation - initial API and implementation
	 *******************************************************************************/
	/*eslint-env node, amd*/
	/*globals infer tern resolver*/
	/**
	 * Tern type index and templates for MongoDB node support
	 */
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
		__webpack_require__(3), 
		__webpack_require__(9), 
		__webpack_require__(10)
	], __WEBPACK_AMD_DEFINE_RESULT__ = function(infer, tern, resolver) {
	
		var templates = [
		/* eslint-disable missing-nls */
			{
				prefix: "mongodb",
				name: "mongodb",
				nodes: {top:true, member:false, prop:false},
				description: " - Node.js require statement for MongoDB",
				template: "var ${name} = require('mongodb');\n"
			},
			{
				prefix: "mongodb",
				name: "mongodb client",
				nodes: {top:true, member:false, prop:false},
				description: " - create a new MongoDB client",
				template: "var MongoClient = require('mongodb').MongoClient;\n" +
						  "var Server = require('mongodb').Server;\n${cursor}"
			},
			{
				prefix: "mongodb",
				name: "mongodb open",
				nodes: {top:true, member:false, prop:false},
				description: " - create a new MongoDB client and open a connection",
				template: "var MongoClient = require('mongodb').MongoClient;\n" +
						  "var Server = require('mongodb').Server;\n"+ 
						  "var ${client} = new MongoClient(new Server(${host}, ${port}));\n"+
						  "try {\n" +
						  "\t${client}.open(function(error, ${client}) {\n" +
	  					  "\t\tvar ${db} = ${client}.db(${name});\n" +
	  					  "\t\t${cursor}\n" +
	  					  "\t});\n" + 
	  					  "} finally {\n" +
	  					  "\t${client}.close();\n" +
	  					  "};"
			},
			{
				prefix: "mongodb",
				name: "mongodb connect",
				nodes: {top:true, member:false, prop:false},
				description: " - connect to an existing MongoDB database",
				template: "var MongoClient = require('mongodb').MongoClient;\n" +
						  "MongoClient.connect(${url}, function(error, db) {\n"+ 
						  "\t${cursor}\n"+
	  					  "});\n"
			},
			{
				prefix: "mongodb",
				name: "mongodb connect (Cloud Foundry)",
				nodes: {top:true, member:false, prop:false},
				description: " - connect to an existing MongoDB database using Cloud Foundry",
				template: "if (${process}.env.VCAP_SERVICES) {\n" + 
	   					  "\tvar env = JSON.parse(${process}.env.VCAP_SERVICES);\n" + 
	   					  "\tvar mongo = env[\'${mongo-version}\'][0].credentials;\n" + 
						  "} else {\n" + 
						  "\tvar mongo = {\n" + 
						  "\t\tusername : \'username\',\n" + 
						  "\t\tpassword : \'password\',\n" + 
						  "\t\turl : \'mongodb://username:password@localhost:27017/database\'\n" + 
						  "\t};\n}\n" + 
						  "var MongoClient = require('mongodb').MongoClient;\n" +
						  "MongoClient.connect(mongo.url, function(error, db) {\n"+ 
						  "\t${cursor}\n"+
	  					  "});\n"
			},
			{
				prefix: "mongodb",
				name: "mongodb collection",
				nodes: {top:true, member:false, prop:false},
				description: " - create a MongoDB database collection",
				template: "${db}.collection(${id}, function(${error}, collection) {\n"+
						  "\t${cursor}\n" + 
					  "});"
			},
			{
				prefix: "mongodb",
				name: "mongodb strict collection",
				nodes: {top:true, member:false, prop:false},
				description: " - create a MongoDB database strict collection",
				template: "${db}.collection(${id}, {strict:true}, function(${error}, collection) {\n"+
						  "\t${cursor}\n" + 
						  "});"
			}
			/* eslint-enable missing-nls */
		];
		
		/**
		 * @description Gets the templates that apply to given context
		 * @param {tern.File} file The backing file object from Tern
		 * @param {Number} wordStart The start of the word to complete
		 * @param {Number} wordEnd The end of the word to complete
		 * @param {Function} gather The collector function to call when wanting to add a proposal
		 * @since 9.0
		 * @callback
		 */
		function getTemplates(file, wordStart, wordEnd, gather) {  //file, start, end, completions) {
			var expr = infer.findExpressionAround(file.ast, wordStart, wordEnd, file.scope);
			var tmps = resolver.getTemplatesForNode(templates, expr, wordStart);
			if(tmps) {
				tmps.forEach(function(template) {
					gather(template.name, null, 0, function(c) {
						c.prefix = template.prefix;
						c.description = template.description;
						c.template = template.template;
						c.segments = template.segments;
						c.origin = 'mongodb'; //$NON-NLS-1$
						c.type = 'template'; //$NON-NLS-1$
					});
				});
		    }
		} 
		
		/* eslint-enable missing-nls */
		tern.registerPlugin("mongodb", /* @callback */ function(server, options) { //$NON-NLS-1$
		    return {
		      defs : defs,
		      passes: {
		      	variableCompletion: getTemplates
		      }
		    };
		});
		
		/* eslint-disable missing-nls */
		var defs = {
			"mongodb": {
			    "MongoClient": {
			      "!type": "fn(serverConfig: ?, options: ?)",
			      "connect": "fn(uri: string, options: ?, callback: fn(err: Error, db: Db))",
			      "prototype": {}
			    },
			    "Server": {
			      "!type": "fn(host: string, port: number, opts?: ServerOptions)",
			      "prototype": {
			        "connect": "fn() -> ?"
			      }
			    },
			    "Db": {
			      "!type": "fn(databaseName: string, serverConfig: Server, dbOptions?: DbCreateOptions)",
			      "prototype": {
			        "db": "fn(dbName: string) -> Db",
			        "open": "fn(callback: fn(err: Error, db: Db))",
			        "close": "fn(forceClose?: bool, callback?: fn(err: Error, result: ?))",
			        "admin": "fn(callback: fn(err: Error, result: ?)) -> ?",
			        "collectionsInfo": "fn(collectionName: string, callback?: fn(err: Error, result: ?))",
			        "collectionNames": "fn(collectionName: string, options: ?, callback?: fn(err: Error, result: ?))",
			        "collection": "fn(collectionName: string) -> Collection",
			        "collections": "fn(callback: fn(err: Error, collections: [Collection]))",
			        "eval": "fn(code: ?, parameters: [?], options?: ?, callback?: fn(err: Error, result: ?))",
			        "logout": "fn(options: ?, callback?: fn(err: Error, result: ?))",
			        "authenticate": "fn(userName: string, password: string, callback?: fn(err: Error, result: ?))",
			        "addUser": "fn(username: string, password: string, callback?: fn(err: Error, result: ?))",
			        "removeUser": "fn(username: string, callback?: fn(err: Error, result: ?))",
			        "createCollection": "fn(collectionName: string, callback?: fn(err: Error, result: Collection))",
			        "command": "fn(selector: Object, callback?: fn(err: Error, result: ?))",
			        "dropCollection": "fn(collectionName: string, callback?: fn(err: Error, result: ?))",
			        "renameCollection": "fn(fromCollection: string, toCollection: string, callback?: fn(err: Error, result: ?))",
			        "lastError": "fn(options: Object, connectionOptions: ?, callback: fn(err: Error, result: ?))",
			        "previousError": "fn(options: Object, callback: fn(err: Error, result: ?))",
			        "executeDbCommand": "fn(command_hash: ?, callback?: fn(err: Error, result: ?))",
			        "executeDbAdminCommand": "fn(command_hash: ?, callback?: fn(err: Error, result: ?))",
			        "resetErrorHistory": "fn(callback?: fn(err: Error, result: ?))",
			        "createIndex": "fn(collectionName: ?, fieldOrSpec: ?, options: IndexOptions, callback: Function)",
			        "ensureIndex": "fn(collectionName: ?, fieldOrSpec: ?, options: IndexOptions, callback: Function)",
			        "cursorInfo": "fn(options: ?, callback: Function)",
			        "dropIndex": "fn(collectionName: string, indexName: string, callback: Function)",
			        "reIndex": "fn(collectionName: string, callback: Function)",
			        "indexInformation": "fn(collectionName: string, options: ?, callback: Function)",
			        "dropDatabase": "fn(callback: fn(err: Error, result: ?))",
			        "stats": "fn(options: ?, callback: Function)",
			        "_registerHandler": "fn(db_command: ?, raw: ?, connection: ?, exhaust: ?, callback: Function)",
			        "_reRegisterHandler": "fn(newId: ?, object: ?, callback: Function)",
			        "_callHandler": "fn(id: ?, document: ?, err: ?) -> ?",
			        "_hasHandler": "fn(id: ?) -> ?",
			        "_removeHandler": "fn(id: ?) -> ?",
			        "_findHandler": "fn(id: ?) -> ret",
			        "__executeQueryCommand": "fn(self: ?, db_command: ?, options: ?, callback: ?)",
			        "DEFAULT_URL": "string",
			        "connect": "fn(url: string, options: Object, callback: fn(err: Error, result: ?))",
			        "addListener": "fn(event: string, handler: fn(param: ?)) -> ?"
			      }
			    },
			    "SocketOptions": {
			      "timeout": "number",
			      "noDelay": "bool",
			      "keepAlive": "number",
			      "encoding": "string"
			    },
			    "ServerOptions": {
			      "auto_reconnect": "bool",
			      "poolSize": "number",
			      "socketOptions": "?"
			    },
			    "PKFactory": {
			      "counter": "number",
			      "createPk": "fn()"
			    },
			    "DbCreateOptions": {
			      "w": "?",
			      "wtimeout": "number",
			      "fsync": "bool",
			      "journal": "bool",
			      "readPreference": "string",
			      "native_parser": "bool",
			      "forceServerObjectId": "bool",
			      "pkFactory": "PKFactory",
			      "serializeFunctions": "bool",
			      "raw": "bool",
			      "recordQueryStats": "bool",
			      "retryMiliSeconds": "number",
			      "numberOfRetries": "number",
			      "logger": "Object",
			      "slaveOk": "number",
			      "promoteLongs": "bool"
			    },
			    "ReadPreference": {
			      "PRIMARY": "string",
			      "PRIMARY_PREFERRED": "string",
			      "SECONDARY": "string",
			      "SECONDARY_PREFERRED": "string",
			      "NEAREST": "string",
			      "prototype": {}
			    },
			    "CollectionCreateOptions": {
			      "readPreference": "string",
			      "slaveOk": "bool",
			      "serializeFunctions": "bool",
			      "raw": "bool",
			      "pkFactory": "PKFactory"
			    },
			    "CollStats": {
			      "ns": "string",
			      "count": "number",
			      "size": "number",
			      "avgObjSize": "number",
			      "storageSize": "number",
			      "numExtents": "number",
			      "nindexes": "number",
			      "lastExtentSize": "number",
			      "paddingFactor": "number",
			      "flags": "number",
			      "totalIndexSize": "number",
			      "indexSizes": {
			        "_id_": "number",
			        "username": "number"
			      }
			    },
			    "Collection": {
			      "insert": "fn(query: ?, callback: fn(err: Error, result: ?))",
			      "remove": "fn(selector: Object, callback?: fn(err: Error, result: ?))",
			      "rename": "fn(newName: String, callback?: fn(err: Error, result: ?))",
			      "save": "fn(doc: ?, callback: fn(err: Error, result: ?))",
			      "update": "fn(selector: Object, document: ?, callback?: fn(err: Error, result: ?))",
			      "distinct": "fn(key: string, query: Object, callback: fn(err: Error, result: ?))",
			      "count": "fn(callback: fn(err: Error, result: ?))",
			      "drop": "fn(callback?: fn(err: Error, result: ?))",
			      "findAndModify": "fn(query: Object, sort: [?], doc: Object, callback: fn(err: Error, result: ?))",
			      "findAndRemove": "fn(query: Object, sort?: [?], callback?: fn(err: Error, result: ?))",
			      "find": "fn(callback?: fn(err: Error, result: Cursor)) -> Cursor",
			      "findOne": "fn(callback?: fn(err: Error, result: ?)) -> Cursor",
			      "createIndex": "fn(fieldOrSpec: ?, callback: fn(err: Error, indexName: string))",
			      "ensureIndex": "fn(fieldOrSpec: ?, callback: fn(err: Error, indexName: string))",
			      "indexInformation": "fn(options: ?, callback: Function)",
			      "dropIndex": "fn(name: string, callback: Function)",
			      "dropAllIndexes": "fn(callback: Function)",
			      "reIndex": "fn(callback: Function)",
			      "mapReduce": "fn(map: Function, reduce: Function, options: MapReduceOptions, callback: Function)",
			      "group": "fn(keys: Object, condition: Object, initial: Object, reduce: Function, finalize: Function, command: bool, options: Object, callback: Function)",
			      "options": "fn(callback: Function)",
			      "isCapped": "fn(callback: Function)",
			      "indexExists": "fn(indexes: string, callback: Function)",
			      "geoNear": "fn(x: number, y: number, callback: Function)",
			      "geoHaystackSearch": "fn(x: number, y: number, callback: Function)",
			      "indexes": "fn(callback: Function)",
			      "aggregate": "fn(pipeline: [?], callback: fn(err: Error, results: ?))",
			      "stats": "fn(options: Object, callback: fn(err: Error, results: CollStats))",
			      "hint": "?"
			    },
			    "MapReduceOptions": {
			      "out": "Object",
			      "query": "Object",
			      "sort": "Object",
			      "limit": "number",
			      "keeptemp": "bool",
			      "finalize": "?",
			      "scope": "Object",
			      "jsMode": "bool",
			      "verbose": "bool",
			      "readPreference": "string"
			    },
			    "IndexOptions": {
			      "w": "?",
			      "wtimeout": "number",
			      "fsync": "bool",
			      "journal": "bool",
			      "unique": "bool",
			      "sparse": "bool",
			      "background": "bool",
			      "dropDups": "bool",
			      "min": "number",
			      "max": "number",
			      "v": "number",
			      "expireAfterSeconds": "number",
			      "name": "string"
			    },
			    "Cursor": {
			      "INIT": "number",
			      "OPEN": "number",
			      "CLOSED": "number",
			      "GET_MORE": "number",
			      "prototype": {
			        "rewind": "fn() -> Cursor",
			        "toArray": "fn(callback: fn(err: Error, results: [?]))",
			        "each": "fn(callback: fn(err: Error, item: ?))",
			        "count": "fn(applySkipLimit: bool, callback: fn(err: Error, count: number))",
			        "sort": "fn(keyOrList: ?, callback?: fn(err: Error, result: ?)) -> Cursor",
			        "limit": "fn(limit: number, callback?: fn(err: Error, result: ?)) -> Cursor",
			        "setReadPreference": "fn(preference: string, callback?: Function) -> Cursor",
			        "skip": "fn(skip: number, callback?: fn(err: Error, result: ?)) -> Cursor",
			        "batchSize": "fn(batchSize: number, callback?: fn(err: Error, result: ?)) -> Cursor",
			        "nextObject": "fn(callback: fn(err: Error, doc: ?))",
			        "explain": "fn(callback: fn(err: Error, result: ?))",
			        "stream": "fn() -> CursorStream",
			        "close": "fn(callback: fn(err: Error, result: ?))",
			        "isClosed": "fn() -> bool"
			      }
			    },
			    "CursorStream": {
			      "!type": "fn(cursor: Cursor)",
			      "prototype": {
			        "pause": "fn() -> ?",
			        "resume": "fn() -> ?",
			        "destroy": "fn() -> ?"
			      }
			    },
			    "CollectionFindOptions": {
			      "limit": "number",
			      "sort": "?",
			      "fields": "Object",
			      "skip": "number",
			      "hint": "Object",
			      "explain": "bool",
			      "snapshot": "bool",
			      "timeout": "bool",
			      "tailtable": "bool",
			      "tailableRetryInterval": "number",
			      "numberOfRetries": "number",
			      "awaitdata": "bool",
			      "oplogReplay": "bool",
			      "exhaust": "bool",
			      "batchSize": "number",
			      "returnKey": "bool",
			      "maxScan": "number",
			      "min": "number",
			      "max": "number",
			      "showDiskLoc": "bool",
			      "comment": "String",
			      "raw": "bool",
			      "readPreference": "String",
			      "partial": "bool"
			    },
			    "MongoCollectionOptions": {
			      "safe": "?",
			      "serializeFunctions": "?",
			      "raw": "bool",
			      "pkFactory": "?",
			      "readPreference": "string"
			    }
		  },
		  "!name": "mongodb",
		  "!define": {
		  	"!node": {
			   "mongodb": {
			   	"!doc": "MongoDB",
			   	"!url": "https://www.mongodb.org/",
			    "MongoClient": "mongodb.MongoClient",
			    "Db": "mongodb.Db",
			    "Server": "mongodb.Server",
			    "SocketOptions": "mongodb.SocketOptions",
			    "ServerOptions": "mongodb.ServerOptions",
			    "CollectionFindOptions": "mongodb.CollectionFindOptions",
			    "MongoCollectionOptions": "mongodb.MongoCollectionOptions",
			    "IndexOptions": "mongodb.IndexOptions",
			    "CollectionCreateOptions": "mongodb.CollectionCreateOptions",
			    "DbCreateOptions": "mongodb.DbCreateOptions",
			    "MapReduceOptions": "mongodb.MapReduceOptions",
			    "CollStats": "mongodb.CollStats",
			    "ReadPreference": "mongodb.ReadPreference",
			    "Collection": "mongodb.Collection",
			    "Cursor": "mongodb.Cursor",
			    "PKFactory": "mongodb.PKFactory"
			   }
			 }
			}
		};
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 81 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*******************************************************************************
	 * @license
	 * Copyright (c) 2015 IBM Corporation and others.
	 * All rights reserved. This program and the accompanying materials are made 
	 * available under the terms of the Eclipse Public License v1.0 
	 * (http://www.eclipse.org/legal/epl-v10.html), and the Eclipse Distribution 
	 * License v1.0 (http://www.eclipse.org/org/documents/edl-v10.html). 
	 *
	 * Contributors:
	 *     IBM Corporation - initial API and implementation
	 *******************************************************************************/
	/*eslint-env node, amd*/
	/*globals infer tern resolver*/
	/**
	 * Tern type index and templates for AMQP node support
	 */
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
		__webpack_require__(3), 
		__webpack_require__(9), 
		__webpack_require__(10)
	], __WEBPACK_AMD_DEFINE_RESULT__ = function(infer, tern, resolver) {
	
		var templates = [
		/* eslint-disable missing-nls */
			{
				prefix: "mysql", 
				name: "mysql", 
				nodes: {top:true, member:false, prop:false},
				description: " - Node.js require statement for MySQL DB", 
				template: "var mysql = require('mysql');\n"
			},
			{
				prefix: "mysql", 
				name: "mysql connection", 
				nodes: {top:true, member:false, prop:false},
				description: " - create a new MySQL DB connection", 
				template: "var mysql = require('mysql');\n" + 
						  "var ${connection} = mysql.createConnection({\n" +  
	  					  "\thost : ${host},\n" +  
	  					  "\tuser : ${username},\n" +  
	  					  "\tpassword : ${password}\n" +  
						  "});\n" + 
						  "try {\n" +  
						  "\t${connection}.connect();\n" +  
						  "\t${cursor}\n" +  
						  "} finally {\n" +  
						  "\t${connection}.end();\n" +  
						  "}"
			},
			{
				prefix: "mysql", 
				name: "mysql query", 
				nodes: {top:true, member:false, prop:false},
				description: " - create a new MySQL DB query statement", 
				template: "${connection}.query(${sql}, function(error, rows, fields) {\n" + 
						  "\t${cursor}\n" +  
						  "});\n"
			}
			/* eslint-enable missing-nls */
		];
		
		/**
		 * @description Gets the templates that apply to given context
		 * @param {tern.File} file The backing file object from Tern
		 * @param {Number} wordStart The start of the word to complete
		 * @param {Number} wordEnd The end of the word to complete
		 * @param {Function} gather The collector function to call when wanting to add a proposal
		 * @since 9.0
		 * @callback
		 */
		function getTemplates(file, wordStart, wordEnd, gather) {  //file, start, end, completions) {
			var expr = infer.findExpressionAround(file.ast, wordStart, wordEnd, file.scope);
			var tmps = resolver.getTemplatesForNode(templates, expr, wordStart);
			if(tmps) {
				tmps.forEach(function(template) {
					gather(template.name, null, 0, function(c) {
						c.prefix = template.prefix;
						c.description = template.description;
						c.template = template.template;
						c.segments = template.segments;
						c.origin = 'mysql'; //$NON-NLS-1$
						c.type = 'template'; //$NON-NLS-1$
					});
				});
		    }
		} 
		
		/* eslint-enable missing-nls */
		tern.registerPlugin("mysql", /* @callback */ function(server, options) { //$NON-NLS-1$
		    return {
		      defs : defs,
		      passes: {
		      	variableCompletion: getTemplates
		      }
		    };
		});
		
		/* eslint-disable missing-nls */
		var defs = {
			
				  "mysql": {
				    "createConnection": "fn(connectionUri: string) -> Connection",
				    "createPool": "fn(config: PoolConfig) -> Pool",
				    "createPoolCluster": "fn(config?: PoolClusterConfig) -> PoolCluster",
				    "escape": "fn(value: ?) -> string",
				    "format": "fn(sql: string) -> string",
				    "MySql": {
				      "createConnection": "fn(connectionUri: string) -> Connection",
				      "createPool": "fn(config: PoolConfig) -> Pool",
				      "createPoolCluster": "fn(config?: PoolClusterConfig) -> PoolCluster",
				      "escape": "fn(value: ?) -> string",
				      "format": "fn(sql: string) -> string"
				    },
				    "ConnectionStatic": {
				      "createQuery": "fn(sql: string) -> Query"
				    },
				    "Connection": {
				      "config": "ConnectionConfig",
				      "threadId": "number",
				      "beginTransaction": "fn(callback: fn(err: Error))",
				      "connect": "fn()",
				      "commit": "fn(callback: fn(err: Error))",
				      "changeUser": "fn(options: ConnectionOptions)",
				      "query": "QueryFunction",
				      "end": "fn()",
				      "destroy": "fn()",
				      "pause": "fn()",
				      "release": "fn()",
				      "resume": "fn()",
				      "escape": "fn(value: ?) -> string",
				      "escapeId": "fn(value: string) -> string",
				      "format": "fn(sql: string) -> string",
				      "on": "fn(ev: string, callback: fn(args: [?])) -> Connection",
				      "rollback": "fn(callback: fn())"
				    },
				    "Pool": {
				      "config": "PoolConfig",
				      "getConnection": "fn(callback: fn(err: Error, connection: Connection))",
				      "query": "QueryFunction",
				      "end": "fn()",
				      "on": "fn(ev: string, callback: fn(args: [?])) -> Pool"
				    },
				    "PoolCluster": {
				      "config": "PoolClusterConfig",
				      "add": "fn(config: PoolConfig)",
				      "end": "fn()",
				      "getConnection": "fn(callback: fn(err: Error, connection: Connection))",
				      "of": "fn(pattern: string) -> Pool",
				      "on": "fn(ev: string, callback: fn(args: [?])) -> PoolCluster"
				    },
				    "Query": {
				      "sql": "string",
				      "start": "fn()",
				      "determinePacket": "fn(firstByte: number, parser: ?) -> ?",
				      "stream": "fn(options: StreamOptions) -> stream.Readable",
				      "pipe": "fn(callback: fn(args: [?])) -> Query",
				      "on": "fn(ev: string, callback: fn(args: [?])) -> Query"
				    },
				    "QueryFunction": {},
				    "QueryOptions": {
				      "sql": "string",
				      "timeout": "number",
				      "nestTables": "?",
				      "typeCast": "?"
				    },
				    "StreamOptions": {
				      "highWaterMark": "number",
				      "objectMode": "?"
				    },
				    "ConnectionOptions": {
				      "user": "string",
				      "password": "string",
				      "database": "string",
				      "charset": "string"
				    },
				    "ConnectionConfig": {
				      "host": "string",
				      "port": "number",
				      "localAddress": "string",
				      "socketPath": "string",
				      "timezone": "string",
				      "connectTimeout": "number",
				      "stringifyObjects": "bool",
				      "insecureAuth": "bool",
				      "typeCast": "?",
				      "queryFormat": "fn(query: string, values: ?)",
				      "supportBigNumbers": "bool",
				      "bigNumberStrings": "bool",
				      "dateStrings": "bool",
				      "debug": "?",
				      "trace": "bool",
				      "multipleStatements": "bool",
				      "flags": "?",
				      "ssl": "?"
				    },
				    "PoolConfig": {
				      "acquireTimeout": "number",
				      "waitForConnections": "bool",
				      "connectionLimit": "number",
				      "queueLimit": "number"
				    },
				    "PoolClusterConfig": {
				      "canRetry": "bool",
				      "removeNodeErrorCount": "number",
				      "defaultSelector": "string"
				    },
				    "SslCredentials": {
				      "pfx": "string",
				      "key": "string",
				      "passphrase": "string",
				      "cert": "string",
				      "ca": "?",
				      "crl": "?",
				      "ciphers": "string"
				    },
				    "Error": {
				      "code": "string",
				      "errno": "number",
				      "sqlStateMarker": "string",
				      "sqlState": "string",
				      "fieldCount": "number",
				      "stack": "string",
				      "fatal": "bool"
				    }
		  },
		  "!name": "mysql",
		  "!define": {
				"!node": {
					"mysql": {
						"createConnection": "fn(connectionUri: string) -> mysql.Connection",
					    "createPool": "fn(config: mysql.PoolConfig) -> mysql.Pool",
					    "createPoolCluster": "fn(config?: mysql.PoolClusterConfig) -> mysql.PoolCluster",
					    "escape": "fn(value: ?) -> string",
					    "format": "fn(sql: string) -> string"
				    }
				}
			}
		};
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 82 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*******************************************************************************
	 * @license
	 * Copyright (c) 2015 IBM Corporation and others.
	 * All rights reserved. This program and the accompanying materials are made 
	 * available under the terms of the Eclipse Public License v1.0 
	 * (http://www.eclipse.org/legal/epl-v10.html), and the Eclipse Distribution 
	 * License v1.0 (http://www.eclipse.org/org/documents/edl-v10.html). 
	 *
	 * Contributors:
	 *     IBM Corporation - initial API and implementation
	 *******************************************************************************/
	/*eslint-env amd*/
	/*globals infer tern resolver*/
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
		__webpack_require__(3), 
		__webpack_require__(9), 
		__webpack_require__(31)
	], __WEBPACK_AMD_DEFINE_RESULT__ = function(infer, tern, Finder) {
		
		tern.registerPlugin("open_impl", /* @callback */ function(server, options) { //$NON-NLS-1$
		    return {};
		});
		
		tern.defineQueryType('implementation', { //$NON-NLS-1$
			/**
			 * @callback
			 */
			run: function run(server, query) {
				if (query.end && !query.start) {
					query.start = query.end;
				}
				var theFile = server.fileMap[query.file];
				var impl = this.findImplRecurse(query.end, theFile, {implementation: {}}, server);
				if(!query.guess && infer.didGuess()) {
					return null;
				}
				impl.implementation.guess = infer.didGuess();
				return impl;
			},
			
			/**
			 * Looks at the given offset in the given file and returns the implementation if one can be found.
			 * Otherwise returns the given candidateImpl.  This function will run recursively until it finds a node
			 * that is the implementation or findDef returns the same node.
			 * @param offset offset in the file where the node/caret is
			 * @param serverFile the server file containing the ast and filename
			 * @param candidateImpl the value to return if an implementation can't be found
			 * @param server the server to lookup other files in
			 * @returns {Object} Implementation object containing a single 'implementation' property with start/end/file info
			 */
			findImplRecurse: function findImplRecurse(offset, serverFile, candidateImpl, server){
				var query, typeDef, newServerFile;
				if (serverFile) {
					var node = Finder.findNode(offset, serverFile.ast, {parents: true});
					if (node){
						if (node.type === 'Identifier') {
							var parent = node.parents[node.parents.length-1];
							if (parent){
								if (parent.type === 'MemberExpression' && node.parents.length >= 2) {
									// See if the member expression is an assignment a.b=1 that we can follow, otherwise fallthrough and lookup typeDef for the property node
									parent = node.parents[node.parents.length-2];
								}
								
								var rhs;
								if (parent.type === 'VariableDeclarator' && parent.init){
									rhs = parent.init;
								} else if (parent.type === 'AssignmentExpression' && parent.right){
									rhs = parent.right;
								} else if (parent.type === 'Property' && parent.value){
									rhs = parent.value;
								}
								if (rhs){
									if (rhs.type === 'Literal' || rhs.type === 'FunctionExpression') {
										// Literals count as implementations
										// Function expressions are implementations of a function
										// Short circuit and use the current node
										return {implementation: {start: node.start, end: node.end, file: serverFile.name}};
									}
									// Find the implementation of the RHS identifier
									query = {start: rhs.start, end: rhs.end, file: serverFile.name, guess: true};
									typeDef = tern.findDef(server, query, serverFile);
									if (typeDef && typeof typeDef.start === 'number' && typeof typeDef.end === 'number' && (typeDef.start !== node.start || typeDef.end !== node.end)){
										newServerFile = server.fileMap[typeDef.file];
										return this.findImplRecurse(typeDef.end, newServerFile, {implementation: {start: typeDef.start, end: typeDef.end, file: typeDef.file}}, server);
									}
								}
							}
							// There are many parents of an identifier, rather than list them all, default to look up the typeDef of the identifier
							query = {start: node.start, end: node.end, file: serverFile.name, guess: true};
							typeDef = tern.findDef(server, query, serverFile);
							if (typeDef && typeof typeDef.start === 'number' && typeof typeDef.end === 'number' && (typeDef.start !== node.start || typeDef.end !== node.end)){
								newServerFile = server.fileMap[typeDef.file];
								return this.findImplRecurse(typeDef.end, newServerFile, {implementation: {start: typeDef.start, end: typeDef.end, file: typeDef.file}}, server);
							}
							
							// The typeDef couldn't be found or matches the current node, just return the node
							return {implementation: {start: node.start, end: node.end, file: serverFile.name}};
						}
					}
				}
				// Fall back on the last candidate implementation
				return candidateImpl;
			}
		});
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 83 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*******************************************************************************
	 * @license
	 * Copyright (c) 2015 IBM Corporation and others.
	 * All rights reserved. This program and the accompanying materials are made 
	 * available under the terms of the Eclipse Public License v1.0 
	 * (http://www.eclipse.org/legal/epl-v10.html), and the Eclipse Distribution 
	 * License v1.0 (http://www.eclipse.org/org/documents/edl-v10.html). 
	 *
	 * Contributors:
	 *     IBM Corporation - initial API and implementation
	 *******************************************************************************/
	/*eslint-env amd*/
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
		__webpack_require__(9), 
		__webpack_require__(32),
		__webpack_require__(78)
	], __WEBPACK_AMD_DEFINE_RESULT__ = function(tern, Estraverse, Signatures) {
	
		tern.registerPlugin("outliner", /* @callback */ function(server, options) { //$NON-NLS-1$
			return {}; //no phases
		});
		
		tern.defineQueryType("outline", { //$NON-NLS-1$
			takesFile: true,
			/**
			 * @callback
			 */
			run: function(server, query, file) {
				if(file.ast) {
					var outline = [], scope = [];
					/**
					 * @description Appends the given signature object to the running outline
					 * @function
					 * @private
					 * @param {Object} sig The signature object
					 */
					function addElement(sig) {
						if(sig) {
							var item = {
								label: sig.sig,
								labelPost: sig.details,
								start: sig.range[0],
								end: sig.range[1]
							};
							if(scope.length < 1) {
								outline.push(item);
							}
							else {
								var parent = scope[scope.length-1];
								if(!parent.children) {
									parent.children = [];
								}
								parent.children.push(item);
							}
							return item;
						}
					}
					Estraverse.traverse(file.ast, {
						/**
						 * @description Callback from estraverse when a node is starting to be visited
						 * @function
						 * @private
						 * @param {Object} node The AST node currently being visited
						 */
						enter: function(node) {
							var item;
							switch(node.type) {
								case Estraverse.Syntax.FunctionDeclaration: {
									item = addElement(Signatures.computeSignature(node));
									if(item) {
										scope.push(item);
									}
									break;
								}
								case Estraverse.Syntax.FunctionExpression: {
									item = addElement(Signatures.computeSignature(node));
									if(item) {
										scope.push(item);
									}
									delete node.sig;
									break;
								}
								case Estraverse.Syntax.ObjectExpression: {
									item = addElement(Signatures.computeSignature(node));
									if(item) {
										scope.push(item);
									}
									delete node.sig;
									if(node.properties) {
										node.properties.forEach(function(property) {
											if(property.value) {
												if(property.value.type === Estraverse.Syntax.FunctionExpression || 
													property.value.type === Estraverse.Syntax.ObjectExpression) {
													property.value.sig = Signatures.computeSignature(property);
												}
												else {
													addElement(Signatures.computeSignature(property));
												}
											}
										});
									}
									break;
								}
								case Estraverse.Syntax.VariableDeclaration: {
									if(node.declarations) {
										node.declarations.forEach(function(declaration) {
											if(declaration.init) {
												if(declaration.init.type === Estraverse.Syntax.ObjectExpression) {
													declaration.init.sig = Signatures.computeSignature(declaration);
												}
											}
										});
									}
									break;
								}
								case Estraverse.Syntax.AssignmentExpression: {
									if(node.left && node.right) {
										if(node.right.type === Estraverse.Syntax.ObjectExpression || 
											node.right.type === Estraverse.Syntax.FunctionExpression) {
											node.right.sig = Signatures.computeSignature(node);
										}
									}
									break;
								}
								case Estraverse.Syntax.ReturnStatement: {
									if(node.argument) {
										if(node.argument.type === Estraverse.Syntax.ObjectExpression ||
											node.argument.type === Estraverse.Syntax.FunctionExpression) {
											node.argument.sig = Signatures.computeSignature(node);
										}
									}
									break;
								}
							}
						},
						
						/**
						 * @description Callback from estraverse when visitation of a node has completed
						 * @function
						 * @private
						 * @param {Object} node The AST node that ended its visitation
						 */
						leave: function(node) {
							if(node.type === Estraverse.Syntax.ObjectExpression || 
								node.type === Estraverse.Syntax.FunctionDeclaration || 
								node.type === Estraverse.Syntax.FunctionExpression) {
								scope.pop();
							}
						}
					});
				}
				return outline;
			}
		});
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 84 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*******************************************************************************
	 * @license
	 * Copyright (c) 2015 IBM Corporation and others.
	 * All rights reserved. This program and the accompanying materials are made 
	 * available under the terms of the Eclipse Public License v1.0 
	 * (http://www.eclipse.org/legal/epl-v10.html), and the Eclipse Distribution 
	 * License v1.0 (http://www.eclipse.org/org/documents/edl-v10.html). 
	 *
	 * Contributors:
	 *     IBM Corporation - initial API and implementation
	 *******************************************************************************/
	/*eslint-env amd*/
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
		__webpack_require__(9)
	], __WEBPACK_AMD_DEFINE_RESULT__ = function(tern) {
		
		tern.registerPlugin('plugins', /* @callback */ function(server, options) { //$NON-NLS-1$
			return {};
		});
		
		tern.defineQueryType('installed_plugins', { //$NON-NLS-1$
			/**
			 * @callback
			 */
			run: function run(server, query) {
				if(server.options && typeof server.options.plugins === 'object') {
					return server.options.plugins;
				}
				return null;
			}
		});
		
		tern.defineQueryType('installed_defs', { //$NON-NLS-1$
			/**
			 * @callback
			 */
			run: function run(server, query) {
				if(server.options && typeof server.options.defs === 'object') {
					return server.options.defs;
				}
				return null;
			}
		});
		
		tern.defineQueryType('environments', { //$NON-NLS-1$
			/**
			 * @callback
			 */
			run: function run(server, query) {
				if(server.options && typeof server.options.plugins === 'object') {
					var plugins = server.options.plugins;
					var keys = Object.keys(plugins);
					var envs = Object.create(null);
					for(var i = 0; i < keys.length; i++) {
						var key = keys[i];
						var env = plugins[key].env;
						if(env) {
							envs[env] = true;
						}
					}
					return envs;
				}
				return null;
			}
		});
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); 

/***/ },
/* 85 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*******************************************************************************
	 * @license
	 * Copyright (c) 2015 IBM Corporation and others.
	 * All rights reserved. This program and the accompanying materials are made 
	 * available under the terms of the Eclipse Public License v1.0 
	 * (http://www.eclipse.org/legal/epl-v10.html), and the Eclipse Distribution 
	 * License v1.0 (http://www.eclipse.org/org/documents/edl-v10.html). 
	 *
	 * Contributors:
	 *     IBM Corporation - initial API and implementation
	 *******************************************************************************/
	/*eslint-env node, amd*/
	/*globals infer tern resolver*/
	/**
	 * Tern type index and templates for PostgreSQL node support
	 */
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
		__webpack_require__(3), 
		__webpack_require__(9), 
		__webpack_require__(10)
	], __WEBPACK_AMD_DEFINE_RESULT__ = function(infer, tern, resolver) {
	
		var templates = [
		/* eslint-disable missing-nls */
			{
				prefix: "postgres", 
				name: "postgres", 
				nodes: {top:true, member:false, prop:false},
				description: " - Node.js require statement for Postgres DB", 
				template: "var pg = require('pg');\n"
			},
			{
				prefix: "postgres", 
				name: "postgres client", 
				nodes: {top:true, member:false, prop:false},
				description: " - create a new Postgres DB client", 
				template: "var pg = require('pg');\n" + 
						  "var url = \"postgres://postgres:${port}@${host}/${database}\";\n" +  
						  "var ${client} = new pg.Client(url);\n"
			},
			{
				prefix: "postgres", 
				name: "postgres connect", 
				nodes: {top:true, member:false, prop:false},
				description: " - create a new Postgres DB client and connect", 
				template: "var pg = require('pg');\n" + 
						  "var url = \"postgres://postgres:${port}@${host}/${database}\";\n" +  
						  "var ${client} = new pg.Client(url);\n" + 
						  "${client}.connect(function(error) {\n" +  
						  "\t${cursor}\n" +  
						  "});\n"
			},
			{
				prefix: "postgres", 
				name: "postgres query", 
				nodes: {top:true, member:false, prop:false},
				description: " - create a new Postgres DB query statement", 
				template: "${client}.query(${sql}, function(error, result) {\n" + 
						  "\t${cursor}\n" +  
						  "});\n"
			}
			/* eslint-enable missing-nls */
		];
		
		/**
		 * @description Gets the templates that apply to given context
		 * @param {tern.File} file The backing file object from Tern
		 * @param {Number} wordStart The start of the word to complete
		 * @param {Number} wordEnd The end of the word to complete
		 * @param {Function} gather The collector function to call when wanting to add a proposal
		 * @since 9.0
		 * @callback
		 */
		function getTemplates(file, wordStart, wordEnd, gather) {  //file, start, end, completions) {
			var expr = infer.findExpressionAround(file.ast, wordStart, wordEnd, file.scope);
			var tmps = resolver.getTemplatesForNode(templates, expr, wordStart);
			if(tmps) {
				tmps.forEach(function(template) {
					gather(template.name, null, 0, function(c) {
						c.prefix = template.prefix;
						c.description = template.description;
						c.template = template.template;
						c.segments = template.segments;
						c.origin = 'postgres'; //$NON-NLS-1$
						c.type = 'template'; //$NON-NLS-1$
					});
				});
		    }
		} 
		
		/* eslint-enable missing-nls */
		tern.registerPlugin("postgres", /* @callback */ function(server, options) { //$NON-NLS-1$
		    return {
		      defs : defs,
		      passes: {
		      	variableCompletion: getTemplates
		      }
		    };
		});
		
		/* eslint-disable missing-nls */
		var defs = {
		  "pg": {
		    "connect": "fn(connection: string, callback: fn(err: Error, client: Client, done: fn()))",
		    "end": "fn()",
		    "ConnectionConfig": {
		      "user": "string",
		      "database": "string",
		      "password": "string",
		      "port": "number",
		      "host": "string"
		    },
		    "Defaults": {
		      "poolSize": "number",
		      "poolIdleTimeout": "number",
		      "reapIntervalMillis": "number",
		      "binary": "bool",
		      "parseInt8": "bool"
		    },
		    "ClientConfig": {
		      "ssl": "bool"
		    },
		    "QueryConfig": {
		      "name": "string",
		      "text": "string",
		      "values": "[?]"
		    },
		    "QueryResult": {
		      "rows": "[?]"
		    },
		    "ResultBuilder": {
		      "command": "string",
		      "rowCount": "number",
		      "oid": "number",
		      "addRow": "fn(row: ?)"
		    },
		    "Client": {
		      "!type": "fn(connection: string)",
		      "prototype": {
		        "connect": "fn(callback?: fn(err: Error))",
		        "end": "fn()",
		        "query": "fn(queryText: string, callback?: fn(err: Error, result: QueryResult)) -> Query",
		        "copyFrom": "fn(queryText: string) -> stream.Writable",
		        "copyTo": "fn(queryText: string) -> stream.Readable",
		        "pauseDrain": "fn()",
		        "resumeDrain": "fn()",
		        "on": "fn(event: string, listener: fn()) -> Client"
		      }
		    },
		    "Query": {
		      "prototype": {
		        "on": "fn(event: string, listener: fn(row: ?, result?: ResultBuilder)) -> Query"
		      }
		    },
		    "Events": {
		      "prototype": {
		        "on": "fn(event: string, listener: fn(err: Error, client: Client)) -> Events"
		      }
		    }
		  },
		  "!name": "pg",
		  "!define": {
		  	"!node": {
		  		"pg": {
		  			"connect": "fn(connection: string, callback: fn(err: Error, client: Client, done: fn()))",
		    		"end": "fn()",
		    		"Client": "pg.Client"
		  		}
		  	}
		  }
		};
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 86 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*******************************************************************************
	 * @license
	 * Copyright (c) 2015 IBM Corporation and others.
	 * All rights reserved. This program and the accompanying materials are made 
	 * available under the terms of the Eclipse Public License v1.0 
	 * (http://www.eclipse.org/legal/epl-v10.html), and the Eclipse Distribution 
	 * License v1.0 (http://www.eclipse.org/org/documents/edl-v10.html). 
	 *
	 * Contributors:
	 *     IBM Corporation - initial API and implementation
	 *******************************************************************************/
	/*eslint-env node, amd*/
	/*globals infer tern resolver*/
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
		__webpack_require__(3), 
		__webpack_require__(9), 
		__webpack_require__(10)
	], __WEBPACK_AMD_DEFINE_RESULT__ = function(infer, tern, resolver) {
	
		var templates = [
		/* eslint-disable missing-nls */
			{
				prefix: "redis",
				name: "redis",
				nodes: {top:true, member:false, prop:false},
				description: " - Node.js require statement for Redis",
				template: "var ${name} = require('redis');\n"
			},
			{
				prefix: "redis",
				name: "redis client",
				nodes: {top:true, member:false, prop:false},
				description: " - create a new Redis client",
				template: "var ${name} = require('redis');\n" +
						  "var ${client} = ${name}.createClient(${port}, ${host}, ${options});\n"
			},
			{
				prefix: "redis",
				name: "redis connect",
				nodes: {top:true, member:false, prop:false},
				description: " - create a new Redis client and connect",
				template: "var ${name} = require('redis');\n" +
						  "var ${client} = ${name}.createClient(${port}, ${host}, ${options});\n" + 
					  "try {\n" + 
						  "\t${cursor}\n"+ 
						  "} finally {\n"+ 
						  "\t${client}.close();\n"+ 
					  "}\n"
			},
			{
				prefix: "redis",
				name: "redis set",
				nodes: {top:true, member:false, prop:false},
				description: " - create a new Redis client set call",
				template: "client.set(${key}, ${value});\n"
			},
			{
				prefix: "redis",
				name: "redis get",
				nodes: {top:true, member:false, prop:false},
				description: " - create a new Redis client get call",
				template: "client.get(${key}, function(${error}, ${reply}) {\n"+ 
						  "\t${cursor}\n" + 
						  "});\n"
			},
			{
				prefix: "redis",
				name: "redis on",
				nodes: {top:true, member:false, prop:false},
				description: " - create a new Redis client event handler",
				template: "client.on(${event}, function(${arg}) {\n"+ 
						  "\t${cursor}" + 
						  "});\n"
			}
			/* eslint-enable missing-nls */
		];
		
		/**
		 * @description Gets the templates that apply to given context
		 * @param {tern.File} file The backing file object from Tern
		 * @param {Number} wordStart The start of the word to complete
		 * @param {Number} wordEnd The end of the word to complete
		 * @param {Function} gather The collector function to call when wanting to add a proposal
		 * @since 9.0
		 * @callback
		 */
		function getTemplates(file, wordStart, wordEnd, gather) {  //file, start, end, completions) {
			var expr = infer.findExpressionAround(file.ast, wordStart, wordEnd, file.scope);
			var tmps = resolver.getTemplatesForNode(templates, expr, wordStart);
			if(tmps) {
				tmps.forEach(function(template) {
					gather(template.name, null, 0, function(c) {
						c.prefix = template.prefix;
						c.description = template.description;
						c.template = template.template;
						c.segments = template.segments;
						c.origin = 'redis'; //$NON-NLS-1$
						c.type = 'template'; //$NON-NLS-1$
					});
				});
		    }
		} 
		
		tern.registerPlugin("redis", /* @callback */ function(server, options) { //$NON-NLS-1$
		    return {
		      defs : defs,
		      passes: {
		      	variableCompletion: getTemplates
		      }
		    };
		});
		
		/* eslint-disable missing-nls */
		var defs = {
			"!name": "redis",
			"!define": {
				"!node": {
					"redis": {
						"createClient": "fn(port_arg: number, host_arg?: string, options?: ClientOpts) -> RedisClient",
						"print": "fn(err: Error, reply: ?)",
						"debug_mode": "bool",
						"ClientOpts": "redis.ClientOpts"
					}
				}
			},
		    "ClientOpts": {
		      "parser": "string",
		      "return_buffers": "bool",
		      "detect_buffers": "bool",
		      "socket_nodelay": "bool",
		      "no_ready_check": "bool",
		      "enable_offline_queue": "bool",
		      "retry_max_delay": "number",
		      "connect_timeout": "number",
		      "max_attempts": "number",
		      "auth_pass": "string"
		    },
		    "RedisClient": {
		      "connected": "bool",
		      "retry_delay": "number",
		      "retry_backoff": "number",
		      "command_queue": "[?]",
		      "offline_queue": "[?]",
		      "server_info": "ServerInfo",
		      "end": "fn()",
		      "auth": "fn(password: string, callback?: ?)",
		      "ping": "fn(callback?: ?)",
		      "append": "fn(key: string, value: string, callback?: ?)",
		      "bitcount": "fn(key: string, callback?: ?)",
		      "set": "fn(key: string, value: string, callback?: ?)",
		      "get": "fn(key: string, callback?: ?)",
		      "exists": "fn(key: string, value: string, callback?: ?)",
		      "publish": "fn(channel: string, value: ?)",
		      "subscribe": "fn(channel: string)",
		      "setnx": "fn(args: [?], callback?: ?)",
		      "setex": "fn(args: [?], callback?: ?)",
		      "strlen": "fn(args: [?], callback?: ?)",
		      "del": "fn(args: [?], callback?: ?)",
		      "setbit": "fn(args: [?], callback?: ?)",
		      "getbit": "fn(args: [?], callback?: ?)",
		      "setrange": "fn(args: [?], callback?: ?)",
		      "getrange": "fn(args: [?], callback?: ?)",
		      "substr": "fn(args: [?], callback?: ?)",
		      "incr": "fn(args: [?], callback?: ?)",
		      "decr": "fn(args: [?], callback?: ?)",
		      "mget": "fn(args: [?], callback?: ?)",
		      "rpush": "fn(args: [?])",
		      "lpush": "fn(args: [?], callback?: ?)",
		      "rpushx": "fn(args: [?], callback?: ?)",
		      "lpushx": "fn(args: [?], callback?: ?)",
		      "linsert": "fn(args: [?], callback?: ?)",
		      "rpop": "fn(args: [?], callback?: ?)",
		      "lpop": "fn(args: [?], callback?: ?)",
		      "brpop": "fn(args: [?], callback?: ?)",
		      "brpoplpush": "fn(args: [?], callback?: ?)",
		      "blpop": "fn(args: [?], callback?: ?)",
		      "llen": "fn(args: [?], callback?: ?)",
		      "lindex": "fn(args: [?], callback?: ?)",
		      "lset": "fn(args: [?], callback?: ?)",
		      "lrange": "fn(args: [?], callback?: ?)",
		      "ltrim": "fn(args: [?], callback?: ?)",
		      "lrem": "fn(args: [?], callback?: ?)",
		      "rpoplpush": "fn(args: [?], callback?: ?)",
		      "sadd": "fn(args: [?], callback?: ?)",
		      "srem": "fn(args: [?], callback?: ?)",
		      "smove": "fn(args: [?], callback?: ?)",
		      "sismember": "fn(args: [?], callback?: ?)",
		      "scard": "fn(args: [?], callback?: ?)",
		      "spop": "fn(args: [?], callback?: ?)",
		      "srandmember": "fn(args: [?], callback?: ?)",
		      "sinter": "fn(args: [?], callback?: ?)",
		      "sinterstore": "fn(args: [?], callback?: ?)",
		      "sunion": "fn(args: [?], callback?: ?)",
		      "sunionstore": "fn(args: [?], callback?: ?)",
		      "sdiff": "fn(args: [?], callback?: ?)",
		      "sdiffstore": "fn(args: [?], callback?: ?)",
		      "smembers": "fn(args: [?], callback?: ?)",
		      "zadd": "fn(args: [?], callback?: ?)",
		      "zincrby": "fn(args: [?], callback?: ?)",
		      "zrem": "fn(args: [?], callback?: ?)",
		      "zremrangebyscore": "fn(args: [?], callback?: ?)",
		      "zremrangebyrank": "fn(args: [?], callback?: ?)",
		      "zunionstore": "fn(args: [?], callback?: ?)",
		      "zinterstore": "fn(args: [?], callback?: ?)",
		      "zrange": "fn(args: [?], callback?: ?)",
		      "zrangebyscore": "fn(args: [?], callback?: ?)",
		      "zrevrangebyscore": "fn(args: [?], callback?: ?)",
		      "zcount": "fn(args: [?], callback?: ?)",
		      "zrevrange": "fn(args: [?], callback?: ?)",
		      "zcard": "fn(args: [?], callback?: ?)",
		      "zscore": "fn(args: [?], callback?: ?)",
		      "zrank": "fn(args: [?], callback?: ?)",
		      "zrevrank": "fn(args: [?], callback?: ?)",
		      "hset": "fn(args: [?], callback?: ?)",
		      "hsetnx": "fn(args: [?], callback?: ?)",
		      "hget": "fn(args: [?], callback?: ?)",
		      "hmset": "fn(args: [?], callback?: ?)",
		      "hmget": "fn(args: [?], callback?: ?)",
		      "hincrby": "fn(args: [?], callback?: ?)",
		      "hdel": "fn(args: [?], callback?: ?)",
		      "hlen": "fn(args: [?], callback?: ?)",
		      "hkeys": "fn(args: [?], callback?: ?)",
		      "hvals": "fn(args: [?], callback?: ?)",
		      "hgetall": "fn(args: [?], callback?: ?)",
		      "hexists": "fn(args: [?], callback?: ?)",
		      "incrby": "fn(args: [?], callback?: ?)",
		      "decrby": "fn(args: [?], callback?: ?)",
		      "getset": "fn(args: [?], callback?: ?)",
		      "mset": "fn(args: [?], callback?: ?)",
		      "msetnx": "fn(args: [?], callback?: ?)",
		      "randomkey": "fn(args: [?], callback?: ?)",
		      "select": "fn(args: [?], callback?: ?)",
		      "move": "fn(args: [?], callback?: ?)",
		      "rename": "fn(args: [?], callback?: ?)",
		      "renamenx": "fn(args: [?], callback?: ?)",
		      "expire": "fn(args: [?], callback?: ?)",
		      "expireat": "fn(args: [?], callback?: ?)",
		      "keys": "fn(args: [?], callback?: ?)",
		      "dbsize": "fn(args: [?], callback?: ?)",
		      "echo": "fn(args: [?], callback?: ?)",
		      "save": "fn(args: [?], callback?: ?)",
		      "bgsave": "fn(args: [?], callback?: ?)",
		      "bgrewriteaof": "fn(args: [?], callback?: ?)",
		      "shutdown": "fn(args: [?], callback?: ?)",
		      "lastsave": "fn(args: [?], callback?: ?)",
		      "type": "fn(args: [?], callback?: ?)",
		      "multi": "fn(args: [?], callback?: ?)",
		      "exec": "fn(args: [?], callback?: ?)",
		      "discard": "fn(args: [?], callback?: ?)",
		      "sync": "fn(args: [?], callback?: ?)",
		      "flushdb": "fn(args: [?], callback?: ?)",
		      "flushall": "fn(args: [?], callback?: ?)",
		      "sort": "fn(args: [?], callback?: ?)",
		      "info": "fn(args: [?], callback?: ?)",
		      "monitor": "fn(args: [?], callback?: ?)",
		      "ttl": "fn(args: [?], callback?: ?)",
		      "persist": "fn(args: [?], callback?: ?)",
		      "slaveof": "fn(args: [?], callback?: ?)",
		      "debug": "fn(args: [?], callback?: ?)",
		      "config": "fn(args: [?], callback?: ?)",
		      "unsubscribe": "fn(args: [?], callback?: ?)",
		      "psubscribe": "fn(args: [?], callback?: ?)",
		      "punsubscribe": "fn(args: [?], callback?: ?)",
		      "watch": "fn(args: [?], callback?: ?)",
		      "unwatch": "fn(args: [?], callback?: ?)",
		      "cluster": "fn(args: [?], callback?: ?)",
		      "restore": "fn(args: [?], callback?: ?)",
		      "migrate": "fn(args: [?], callback?: ?)",
		      "dump": "fn(args: [?], callback?: ?)",
		      "object": "fn(args: [?], callback?: ?)",
		      "client": "fn(args: [?], callback?: ?)",
		      "eval": "fn(args: [?], callback?: ?)",
		      "evalsha": "fn(args: [?], callback?: ?)",
		      "quit": "fn(args: [?], callback?: ?)"
		    },
		    "createClient": "fn(port_arg: number, host_arg?: string, options?: ClientOpts) -> RedisClient",
		    "print": "fn(err: Error, reply: ?)",
		    "debug_mode": "bool",
		    "MessageHandler": {},
		    "ServerInfo": {
		      "redis_version": "string",
		      "versions": "[number]"
		    }
			};
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 87 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*******************************************************************************
	 * @license
	 * Copyright (c) 2015 IBM Corporation and others.
	 * All rights reserved. This program and the accompanying materials are made 
	 * available under the terms of the Eclipse Public License v1.0 
	 * (http://www.eclipse.org/legal/epl-v10.html), and the Eclipse Distribution 
	 * License v1.0 (http://www.eclipse.org/org/documents/edl-v10.html). 
	 *
	 * Contributors:
	 *     IBM Corporation - initial API and implementation
	 *******************************************************************************/
	/*eslint-env node, amd*/
	/*globals infer tern walk*/
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
		__webpack_require__(3), 
		__webpack_require__(9), 
		__webpack_require__(31)
	], __WEBPACK_AMD_DEFINE_RESULT__ = function(infer, tern, finder) {
		
		tern.registerPlugin('refs', /* @callback */ function(server, options) { //$NON-NLS-1$
			return {};
		});
			
		tern.defineQueryType('checkRef', { //$NON-NLS-1$
			takesFile: true,
			/**
			 * @callback
			 */
			run: function run(server, query, file) {
				return doCheck(query, file, server);
			}
		});
		
		function doCheck(query, file, server) {
			var comment = finder.findComment(query.end, file.ast), result;
			if(comment) {
				result = {
			    	guess: false,
			        type: undefined,
			        name: undefined,
			        category: comment.type === 'Block' ? 'blockcomments': 'linecomments' //$NON-NLS-1$ //$NON-NLS-2$
			    };
			} else {
				var expr = tern.findExpr(file, query), exprName, type, exprType;
				try {
				    type = tern.findExprType(server, query, file, expr);
				    exprType = type;
				    if (query.preferFunction) {
						type = type.getFunctionType() || type.getType();
					} else {
						type = type.getType();
					}
				    if (expr) {
						if (expr.node.type === "Identifier") {
				        	exprName = expr.node.name;
			        	} else if (expr.node.type === "MemberExpression" && !expr.node.computed) {
				        	exprName = expr.node.property.name;
			        	}
				    }
			    }
				catch(er) {
					//do nothing tag the result later and do a static check
				}
			    result = {
			    	guess: infer.didGuess(),
			        type: infer.toString(exprType),
			        name: type && type.name,
			        exprName: exprName
			    };
			    categorize(query, file, result);
			    if (type) {
			    	tern.storeTypeDocs(query, type, result);
		    	} else {
		    		staticCheck(query, file, result);
		    	}
			    if (!result.doc && exprType && exprType.doc) {
			    	result.doc = tern.parseDoc(query, exprType.doc);
				}
		    }
		    return result;
		}
		
		/**
		 * @description Tags the match with the category is belongs to
		 * @function
		 * @private
		 * @param {Object} node The AST node
		 * @param {Object} result The result
		 */
		function categorize(query, file, result) {
			if(Array.isArray(file.ast.errors) && file.ast.errors.length > 0) {
				result.category = 'parseerrors'; //$NON-NLS-1$
				return;
			}
			var node = finder.findNode(query.end-1, file.ast, {parents:true});
			if(node) {
				if(node.type === 'Identifier') {
					var p = node.parents.pop();
					p.parents = node.parents;
					node = p;
				} 
				if(node.type !== 'RecoveredNode') {
					switch(node.type) {
						case 'Program': {
							result.category = 'uncategorized'; //$NON-NLS-1$
							break;
						}
						case 'FunctionDeclaration':
						case 'FunctionExpression': {
							for(var i = 0, len = node.params.length; i< len; i++) {
								if(encloses(query.end, node.params[i])) {
									result.category = 'vardecls'; //$NON-NLS-1$
									break;
								}
							}
							if(!result.category) {
								result.category = 'funcdecls'; //$NON-NLS-1$
							}
							break;
						}
						case 'Property': {
							if(encloses(query.end, node.key)) {
								if(node.value && node.value.type === 'FunctionExpression') {
									result.category = 'funcdecl'; //$NON-NLS-1$
								} else {
									result.category = 'propwrite'; //$NON-NLS-1$
								}
							} else if(encloses(query.end, node.value)) {
								if(node.value.type === 'FunctionExpression') {
									result.category = 'funcdecls'; //$NON-NLS-1$
								} else if(node.value.type === 'Identifier') {
									result.category = 'varaccess'; //$NON-NLS-1$
								} else {
									result.category = 'propwrite'; //$NON-NLS-1$
								}
							}
							break;
						}
						case 'CallExpression': {
							if(encloses(query.end, node.callee)) {
								result.category = 'funccalls'; //$NON-NLS-1$
							} 
							if(node.arguments.length > 0) {
								for(i = 0, len = node.arguments.length; i < len; i++) {
									var param = node.arguments[i];
									if(encloses(query.end, param)) {
										if(param.type === 'Identifier') {
											result.category = 'varaccess'; //$NON-NLS-1$
										} else if(param.type === 'MemberExpression') {
											result.category = 'propaccess'; //$NON-NLS-1$
										}
									}
								}
							}
							break;
						}
						case 'AssignmentExpression': {
							if(encloses(query.end, node.left)) {
								//on the left, write
								if(node.left.type === 'Identifier') {
									result.category = 'varwrite'; //$NON-NLS-1$
								} else {
									result.category = 'propwrite'; //$NON-NLS-1$
								}
							} else if(encloses(query.end, node.right)) {
								if(node.right.type === 'Identifier') {
									result.category = 'varaccess'; //$NON-NLS-1$
								} else if(node.right.type === 'MemberExpression') {
									result.category = 'propaccess'; //$NON-NLS-1$
								} 
							}
							break;
						}
						case 'VariableDeclarator': {
							if(encloses(query.end, node.id)) {
								result.category = 'vardecls'; //$NON-NLS-1$
							} else if(encloses(query.end, node.init)) {
								result.category = 'varaccess';						 //$NON-NLS-1$
							}
							break;
						}
						case 'Literal': {
							if(node.regex) {
								result.category = 'regex'; //$NON-NLS-1$
							} else if(typeof(node.value) === "string") {
								result.category = 'strings'; //$NON-NLS-1$
							}
							break;
						}
						case 'NewExpression': {
							if(node.callee && encloses(query.end, node.callee)) {
								result.category = 'funccalls'; //$NON-NLS-1$
							}
							break;
						}
						case 'MemberExpression': {
							//if we are talking about the root object, it will be a var access
							if(node.object && node.object.type === 'Identifier' && encloses(query.end, node.object)) {
								result.category = 'varaccess'; //$NON-NLS-1$
								break;
							}
							var prop;
							//walk up to find first non-member expression
							while(node.type === 'MemberExpression') {
								prop = node.property;
								p = node.parents.pop();
								p.parents = node.parents;
								node = p;
							}
							if(node && (node.type === 'CallExpression' || node.type === 'NewExpression') && encloses(query.end, prop)) {
								if(node.callee && encloses(query.end, node.callee)) {
									result.category = 'funccalls'; //$NON-NLS-1$
								} else if(node.arguments && node.arguments.length > 0) {
									//check args
									for(i = 0, len = node.arguments.length; i < len; i++) {
										if(encloses(query.end, node.arguments[i])) {
											result.category = 'propaccess'; //$NON-NLS-1$
										}
									}
								}
								
							} else if(node && node.type === 'AssignmentExpression') {
								if(encloses(query.end, node.left)) {
									if(node.right && node.right.type === 'FunctionExpression') {
										result.category = 'funcdecls'; //$NON-NLS-1$
									} else if(encloses(query.end, prop)) {
										result.category = 'propwrite'; //$NON-NLS-1$
									} else {
										result.category = 'propaccess'; //$NON-NLS-1$
									}
								} else {
									result.category = 'propaccess'; //$NON-NLS-1$
								}
							} else {
								result.category = 'propaccess'; //$NON-NLS-1$
							}
							break;
						}
						case 'UpdateExpression': {
							if(node.argument.type === 'Identifier') {
								result.category = 'varaccess'; //$NON-NLS-1$
							} else if(node.argument.type === 'MemberExpression') {
								result.category = 'propaccess'; //$NON-NLS-1$
							}
							break;
						}
						case 'BinaryExpression': {
							if(node.left.type === 'Identifier' && encloses(query.end, node.left)) {
								result.category = 'varaccess'; //$NON-NLS-1$
							} else if(node.right.type === 'Identifier' && encloses(query.end, node.right)) {
								result.category = 'varaccess'; //$NON-NLS-1$
							}
							break;
						}
						case 'BreakStatement':
						case 'ConditionalExpression':
						case 'ContinueStatement':
						case 'IfStatement': 
						case 'DoWhileStatement':
						case 'ForInStatement':
						case 'ForStatement':
						case 'LogicalExpression':
						case 'SwitchStatement':
						case 'SwitchCase':
						case 'WithStatement': 
						case 'WhileStatement': {
							result.category = 'varaccess'; //$NON-NLS-1$
							break;
						}
						case 'LetStatement':
						case 'LabeledStatement': {
							result.category = 'varwrite'; //$NON-NLS-1$
							break;
						}
						case 'Block': {
							result.category = 'blockcomments'; //$NON-NLS-1$
							break;
						}
						case 'Line': {
							result.category = 'linecomments'; //$NON-NLS-1$
							break;
						}
						case 'UnaryExpression': {
							if(node.argument && encloses(query.end, node.argument)) {
								result.category = 'varaccess'; //$NON-NLS-1$
							}
							break;
						}
					}
				}
			}
			if(!result.category) {
				result.category = 'uncategorized'; //$NON-NLS-1$
			}
		}
		
		function encloses(offset, node) {
			return node && (node.range[0] <= offset && offset <= node.range[1]);
		}
		
		function staticCheck(query, file, result) {
			var node = finder.findNode(query.end, file.ast, {parents: true});
			if(node) {
				checkNode(query, node, result);
			} else {
				result.staticCheck = {
					confidence: 0
				};
			}
		}
			
		function checkNode(query, node, result) {
			switch(node.type) {
				case 'FunctionDeclaration':
				case 'FunctionExpression':
				case 'VariableDeclarator': 
				case 'Literal': {
					//a re-decl cannot be a reference
					result.staticCheck = {
						confidence: 0
					};
					break;
				}
				case 'Identifier': {
					if(Array.isArray(node.parents)) {
						var p = node.parents.slice(node.parents.length-1)[0];
						checkNode(query, p, result);
					} else {
						result.staticCheck = {
							confidence: 25
						};
					}
					break;
				}
				case 'AssignmentExpression': {
					if(node.left.type === 'Identifier' && node.left.name === query.origin.type.exprName) {
						result.staticCheck = {
							confidence: 25
						};
					} else if(node.right.type === 'Identifier' && node.right.name === query.origin.type.exprName) {
						result.staticCheck = {
							confidence: 25
						};
					} else {
						//TODO catch all
						result.staticCheck = {
							confidence: 5
						};
					}
					break;
				}
				case 'MemberExpression': {
					//if part of the expression, maybe relevant
					result.staticCheck = {
						confidence: 10
					};
					break;
				}
				case 'CallExpression': {
					if(node.callee.name === query.origin.type.exprName) {
						if(query.origin.type.type === 'fn()') {
							result.staticCheck = {
								confidence: 25
							};
						} else {
							result.staticCheck = {
								confidence: 0
							};
						}
					}
					for(var i = 0, l = node.arguments.length; i < l; i++) {
						var arg = node.arguments[i];
						if(arg.type === 'Identifier') {
							if(query.origin.type.type === 'fn()') {
								//orig type is function, this is not relevant
								result.staticCheck = {
									confidence: 0
								};
							} else {
								//with no type infos we have no idea if this is the same one
								result.staticCheck = {
									confidence: 40
								};
							}
						} else if(arg.type === 'FunctionExpression') {
							if(arg.id === query.origin.type.exprName) {
								//redecl, not relevant
								result.staticCheck = {
									confidence: 0
								};
							}
						}
					}
					break;
				}
				default: {
					result.staticCheck = {
						confidence: 0
					};
				}
			}
		}
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); 


/***/ },
/* 88 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__; /*******************************************************************************
	 * @license
	 * Copyright (c) 2013, 2015 IBM Corporation and others.
	 * All rights reserved. This program and the accompanying materials are made 
	 * available under the terms of the Eclipse Public License v1.0 
	 * (http://www.eclipse.org/legal/epl-v10.html), and the Eclipse Distribution 
	 * License v1.0 (http://www.eclipse.org/org/documents/edl-v10.html). 
	 *
	 * Contributors:
	 *     IBM Corporation - initial API and implementation
	 *******************************************************************************/
	/*eslint-env amd*/
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	__webpack_require__(15),
	__webpack_require__(31),
	__webpack_require__(32)
	], __WEBPACK_AMD_DEFINE_RESULT__ = function(Objects, Finder, Estraverse) {
		
		/**
		 * make sure we are skipping the recovered node
		 * @since 9.0
		 */
		Estraverse.VisitorKeys.RecoveredNode = []; //do not visit
	
		/**
		 * @name javascript.Visitor
		 * @description The AST visitor passed into estraverse
		 * @constructor
		 * @private
		 * @since 5.0
		 */
		function Visitor() {
		    //constructor
		}
		
		Objects.mixin(Visitor.prototype, /** @lends javascript.Visitor.prototype */ {
			occurrences: [],
			scopes: [],
			context: null,
			thisCheck: false,
			objectPropCheck: false,
			
			/**
			 * @name enter
			 * @description Callback from estraverse when a node is starting to be visited
			 * @function
			 * @private
			 * @memberof javascript.Visitor.prototype
			 * @param {Object} node The AST node currently being visited
			 * @param {Object} parent The last node we visited
			 * @returns The status if we should continue visiting
			 */
			enter: function(node, parent) {
				var len, idx;
				node.parent = parent;
				switch(node.type) {
					case Estraverse.Syntax.Program:
						this.occurrences = [];
						this.scopes = [{range: node.range, occurrences: [], kind:'p'}];   //$NON-NLS-0$
						this.defscope = null;
						this.skipScope = null;
						break;
					case Estraverse.Syntax.FunctionDeclaration:
						this.checkId(node.id, node, true);
						this._enterScope(node);
						if (this.skipScope){
							// If the function decl was a redefine, checkId may set skipScope and we can skip processing the contents
							return Estraverse.VisitorOption.Skip;
						}
						
						if (node.params) {
							len = node.params.length;
							for (idx = 0; idx < len; idx++) {
								if(this.checkId(node.params[idx], node, true)) {
									return Estraverse.VisitorOption.Skip;
								}
							}
						}
						break;
					case Estraverse.Syntax.FunctionExpression:
					case Estraverse.Syntax.ArrowFunctionExpression:
						if(this._enterScope(node)) {
							return Estraverse.VisitorOption.Skip;
						}
						this.checkId(node.id, node, true); // Function expressions can be named expressions
						if (node.params) {
							len = node.params.length;
							for (idx = 0; idx < len; idx++) {
								if(this.checkId(node.params[idx], node, true)) {
									return Estraverse.VisitorOption.Skip;
								}
							}
						}
						break;
					case Estraverse.Syntax.AssignmentExpression:
						this.checkId(node.left, node);
						this.checkId(node.right, node);
						break;
					case Estraverse.Syntax.ExpressionStatement:
						this.checkId(node.expression, node);
						break;
					case Estraverse.Syntax.ArrayExpression: 
						if (node.elements) {
							len = node.elements.length;
							for (idx = 0; idx < len; idx++) {
								this.checkId(node.elements[idx], node);
							}
						}
						break;
					case Estraverse.Syntax.MemberExpression:
						this.checkId(node.object, node);
						if (node.computed) { //computed = true for [], false for . notation
							this.checkId(node.property, node);
						} else {
							this.checkId(node.property, node, false, true);
						}
						break;
					case Estraverse.Syntax.BinaryExpression:
						this.checkId(node.left, node);
						this.checkId(node.right, node);
						break;
					case Estraverse.Syntax.UnaryExpression:
						this.checkId(node.argument, node);
						break;
					case Estraverse.Syntax.SwitchStatement:
						this.checkId(node.discriminant, node);
						break;
					case Estraverse.Syntax.UpdateExpression:
						this.checkId(node.argument, node);
						break;
					case Estraverse.Syntax.ConditionalExpression:
						this.checkId(node.test, node);
						this.checkId(node.consequent, node);
						this.checkId(node.alternate, node);
						break;
					case Estraverse.Syntax.CallExpression:
						this.checkId(node.callee, node, false);
						if (node.arguments) {
							len = node.arguments.length;
							for (idx = 0; idx < len; idx++) {
								this.checkId(node.arguments[idx], node);
							}
						}
						break;
					case Estraverse.Syntax.ReturnStatement:
						this.checkId(node.argument, node);
						break;
					case Estraverse.Syntax.ObjectExpression:
						if(this._enterScope(node)) {
							return Estraverse.VisitorOption.Skip;
						}
						if(node.properties) {
							len = node.properties.length;
							for (idx = 0; idx < len; idx++) {
								var prop = node.properties[idx];
								if (prop.value && prop.value.type === Estraverse.Syntax.FunctionExpression){
									if(this.thisCheck) {
										//tag it 
										prop.value.isprop = true;
									} else {
										this.checkId(prop.value.id, node, false, true);
									}
								}
								this.checkId(prop.key, node, true, true);
								this.checkId(prop.value, node);
							}
						}
						break;
					case Estraverse.Syntax.VariableDeclarator:
						this.checkId(node.id, node, true);
						this.checkId(node.init, node);
						break;
					case Estraverse.Syntax.NewExpression:
						this.checkId(node.callee, node, false);
						if(node.arguments) {
							len = node.arguments.length;
							for(idx = 0; idx < len; idx++) {
								this.checkId(node.arguments[idx], node);
							}
						}
						break;
					case Estraverse.Syntax.LogicalExpression:
						this.checkId(node.left, node);
						this.checkId(node.right, node);
						break;
					case Estraverse.Syntax.ThisExpression:
						if(this.thisCheck) {
							var scope = this.scopes[this.scopes.length-1];
							scope.occurrences.push({
								start: node.range[0],
								end: node.range[1]
							});
							// if this node is the selected this we are in the right scope
							if (node.range[0] === this.context.token.range[0]){
								this.defscope = scope;
							}
						}
						break;
					case Estraverse.Syntax.IfStatement:
					case Estraverse.Syntax.DoWhileStatement:
					case Estraverse.Syntax.WhileStatement:
						this.checkId(node.test, node);
						break;
					case Estraverse.Syntax.ForStatement:
						this.checkId(node.init, node);
						break;
					case Estraverse.Syntax.ForInStatement:
	                    this.checkId(node.left, node);
	                    this.checkId(node.right, node);
	                    break;
					case Estraverse.Syntax.WithStatement:
	                    this.checkId(node.object, node);
	                    break;
	                case Estraverse.Syntax.ThrowStatement:
	                    this.checkId(node.argument, node);
	                    break;
	                case Estraverse.Syntax.LabeledStatement:
	               		this._enterScope(node);
	                    this.checkId(node.label, node, true, false, true);
	                    break;
	                case Estraverse.Syntax.ContinueStatement :
	                    this.checkId(node.label, node, false, false, true);
	                    break;
	                case Estraverse.Syntax.BreakStatement:
	                    this.checkId(node.label, node, false, false, true);
	                    break;
				}
			},
			
			/**
			 * @description Enters and records the current scope onthe scope stack
			 * @function
			 * @private
			 * @param {Object} node The AST node
			 * @returns {Boolean} If we should skip visiting children of the scope node
			 */
			_enterScope: function(node) {
				if(this.thisCheck) {
					switch(node.type) {
						case Estraverse.Syntax.ObjectExpression:
							this.scopes.push({range: node.range, occurrences: [], kind:'o'});  //$NON-NLS-0$
							if (this.defscope){
								return true;
							}
							break;
						case Estraverse.Syntax.FunctionExpression:
							if (!node.isprop){
								this.scopes.push({range: node.body.range, occurrences: [], kind:'fe'});  //$NON-NLS-0$
								// If the outer scope has the selected 'this' we can skip the inner scope
								if (this.defscope){
									return true;
								}
							}
							break;
					}
				} else if (this.objectPropCheck){
					switch(node.type) {
						case Estraverse.Syntax.ObjectExpression:
							this.scopes.push({range: node.range, occurrences: [], kind:'o'});  //$NON-NLS-0$
					}
				} else if (this.labeledStatementCheck){
					switch(node.type) {
						case Estraverse.Syntax.LabeledStatement:
							this.scopes.push({range: node.range, occurrences: [], kind:'ls'});  //$NON-NLS-0$
							// Skip labelled loops that don't contain the selection
							if(node.range[0] > this.context.start || node.range[1] < this.context.end) {
								return true;
							}						
					}
				} else {
					var kind;
					var rangeStart = node.range[0];
					if (node.body){
						rangeStart = node.body.range[0];
					}
					switch(node.type) {
						case Estraverse.Syntax.FunctionDeclaration:
							kind = 'fd';  //$NON-NLS-0$
							// Include the params and body in the scope, but not the identifier
							if (node.params && (node.params.length > 0)){
								rangeStart = node.params[0].range[0];
							}
							break;
						case Estraverse.Syntax.FunctionExpression:
						case Estraverse.Syntax.ArrowFunctionExpression:
							kind = 'fe';  //$NON-NLS-0$
							// Include the params, body and identifier (if available) See Bug 447413
							if (node.id) {
								rangeStart = node.id.range[0];
							} else if (node.params && (node.params.length > 0)){
								rangeStart = node.params[0].range[0];
							}
							break;
					}
					if (kind){
						this.scopes.push({range: [rangeStart,node.range[1]], occurrences: [], kind:kind});	
					}
				}
				return false;
			},
			
			/**
			 * @name leave
			 * @description Callback from estraverse when visitation of a node has completed
			 * @function
			 * @private
			 * @memberof javascript.Visitor.prototype
			 * @param {Object} node The AST node that ended its visitation
			 * @return The status if we should continue visiting
			 */
			leave: function(node) {
				if(this.thisCheck) {
					switch(node.type) {
						case Estraverse.Syntax.FunctionExpression:
							if(node.isprop) {
								delete node.isprop; //remove the tag
								break;
							}
						//$FALLTHROUGH$
						case Estraverse.Syntax.ObjectExpression:
						case Estraverse.Syntax.Program:
							if(this._popScope()) {
								//we left an object closure, end
								return Estraverse.VisitorOption.Break;
							}
							break;
					}
				} else if (this.objectPropCheck) {
					switch(node.type){
						case Estraverse.Syntax.ObjectExpression:
						case Estraverse.Syntax.Program:
							if(this._popScope()) {
								return Estraverse.VisitorOption.Break;
							}
							break;
					}
				} else if (this.labeledStatementCheck) {
					switch(node.type){
						case Estraverse.Syntax.LabeledStatement:
							if(this._popScope()) {
								return Estraverse.VisitorOption.Break;
							}
							break;
					}
				} else {
					switch(node.type) {
						case Estraverse.Syntax.FunctionExpression:
						case Estraverse.Syntax.FunctionDeclaration: 
						case Estraverse.Syntax.ArrowFunctionExpression: {
						    if(this._popScope()) {
								return Estraverse.VisitorOption.Break;
							}
							break;
						}
						case Estraverse.Syntax.Program: {
						    this._popScope(); // pop the last scope
							break;
						}
					}
				}
			},
			
			/**
			 * @description Pops the tip of the scope stack off, adds occurrences (if any) and returns if we should
			 * quit visiting
			 * @function
			 * @private
			 * @returns {Boolean} If we should quit visiting
			 */
			_popScope: function() {
				var scope = this.scopes.pop();
				
				if (this.skipScope){
					if (this.skipScope === scope){
						this.skipScope = null;
					}
					return false;
				}
				
				var len = scope.occurrences.length;
				var i, j;
				// Move all occurrences into the defining scope in case an inner scope redefines (Bug 448535)
				if(this.defscope && this.defscope === scope) {
					for(i = 0; i < len; i++) {
						this.occurrences.push(scope.occurrences[i]);
					}
					if(this.defscope.range[0] === scope.range[0] && this.defscope.range[1] === scope.range[1] &&
						this.defscope.kind === scope.kind) {
						//we just popped out of the scope the node was defined in, we can quit
						return true;
					}
				} else {
					if (this.scopes.length > 0){
						// We popped out of a scope but don't know where the define is, treat the occurrences like they belong to the outer scope (Bug 445410)
						for (j=0; j< len; j++) {
							this.scopes[this.scopes.length - 1].occurrences.push(scope.occurrences[j]);
						}
					} else {
						// We are leaving the AST, add the occurrences if we never found a defining scope
						this.occurrences = [];
						for (j=0; j< len; j++) {
							this.occurrences.push(scope.occurrences[j]);
						}
					}
				}
				return false;
			},
			
			/**
			 * @description Checks if the given node is a parameter specifying an AMD define dependency.  If so, mark the matching dependency path.
			 * @function
			 * @private
			 * @param {ASTNode} node The AST node we are inspecting
			 * @param {Array} occurrencesList The array of occurrences to add the new occurrence to
			 */
			_markDefineStatementOccurrences: function(node, occurrencesList){
				var parent = node.parent;
				if (parent && parent.type === Estraverse.Syntax.FunctionExpression) {
					var parent2 = parent.parent;
					if (parent2 && parent2.type === Estraverse.Syntax.CallExpression && parent2.callee && parent2.callee.name === "define"){
						var funcExpression = parent;
						for (var i=0; i<funcExpression.params.length; i++) {
							if (funcExpression.params[i] === node){
								if (parent2.arguments.length === 2 || parent2.arguments.length === 3){
									var pathsNode = parent2.arguments[parent2.arguments.length-2];
									if (pathsNode.elements && pathsNode.elements.length > i){
										occurrencesList.push({
											start: pathsNode.elements[i].range[0],
											end: pathsNode.elements[i].range[1]
										});
									}
								}
								break;
							}
						}
					}
				}
			},
			
			/**
			 * @name checkId
			 * @description Checks if the given identifier matches the occurrence we are looking for
			 * @function
			 * @private
			 * @memberof javascript.JavaScriptOccurrences.prototype
			 * @param {Object} node The AST node we are inspecting
			 * @param {Object} parent The parent for the node we are currently going to visit 
			 * @param {Boolean} candefine If the given node can define the word we are looking for
			 * @param {Boolean} isObjectProp Whether the given node is only an occurrence if we are searching for object property occurrences
			 * @param {Boolean} isLabeledStatement Whether the given node is only an occurrence if we are searching for labeled statements
			 * @returns {Boolean} <code>true</code> if we should skip the next nodes, <code>false</code> otherwise
			 */
			checkId: function(node, parent, candefine, isObjectProp, isLabeledStatement) {
				if (this.skipScope){
					return true;
				}
				if (this.thisCheck){
					return false;
				}
				if ((isObjectProp && !this.objectPropCheck) || (!isObjectProp && this.objectPropCheck)){
					return false;
				}
				if ((isLabeledStatement && !this.labeledStatementCheck) || (!isLabeledStatement && this.labeledStatementCheck)){
					return false;
				}
				if(node) {
					//have to tag the node here since we don't visit these nodes via the estraverse API
					node.parent = parent;
				}
				if (node && node.type === Estraverse.Syntax.Identifier) {
					if (node.name === this.context.word) {
						var scope = this.scopes[this.scopes.length-1]; // Always will have at least the program scope
						if(candefine) {
							// Check if we are redefining
							if(this.defscope) {
								if((scope.range[0] <= this.context.start) && (scope.range[1] >= this.context.end)) {
									// Selection inside this scope, use this scope as the defining scope
									this.occurrences = []; // Clear any occurrences in sibling scopes
									this.defscope = scope;
									scope.occurrences.push({
										start: node.range[0],
										end: node.range[1]
									});
									return false;
								} else {
									// Selection belongs to an outside scope so use the outside definition
									scope.occurrences = []; // Clear any occurrences we have found in this scope
									this.skipScope = scope;  // Skip this scope and all inner scopes
									return true;  // Where possible we short circuit checking this scope
								}
							}
							//does the scope enclose it?
							if((scope.range[0] <= this.context.start) && (scope.range[1] >= this.context.end)) {
								this.defscope = scope;
								
								// If identifier is an argument of a define statement, also mark the matching dependency
								this._markDefineStatementOccurrences(node, scope.occurrences);
							} else {
								// Selection belongs to an outside scope so use the outside definition (Bug 447962)
								scope.occurrences = [];
								this.skipScope = scope;
								return true;
							}
						}
						scope.occurrences.push({
							start: node.range[0],
							end: node.range[1]
						});
					}
				}
				return false;
			}
		});
		
		Visitor.prototype.constructor = Visitor;
		
		/**
		 * @description Finds all of the occurrences of the token / ranges / text from the context within the given AST
		 * @function 
		 * @public 
		 * @param {Object} ast The editor context to get the AST from
		 * @param {Object} ctxt The context object {start:number, end:number, contentType:string}
		 * @returns {orion.Promise} The promise to compute occurrences
		 * @since 6.0
		 */
		function findOccurrences(ast, ctxt) {
			if(ast && ctxt) {
				var start = ctxt.selection.start;
				var end = ctxt.selection.end;
				var token = _getToken(start, ast);
				if (token) {
					// The token ignores punctuators, but the node is required for context
					// TODO Look for a more efficient way to move between node/token, see Bug 436191
					var node = Finder.findNode(start, ast, {parents: true});
					if(!_skip(node)) {
						if (token.range[0] >= node.range[0] && token.range[1] <= node.range[1]){
							
							// Check if the user has selected a AMD define statement dependency path.  If so run findOccurrences on matching dependency param instead
							if (node.type === Estraverse.Syntax.Literal){
								var amdNode = checkNodeDefineStatement(node, ast);
								if (amdNode){
									node = amdNode;
									start = node.range[0];
									end = node.range[1];
								} else {
									// No other literals can have occurrences so bail
									return [];
								}
							}
							
							var context = {
								start: start,
								end: end,
								word: _nameFromNode(node),
								token: node
							};
							var visitor = _getVisitor(context);
							Estraverse.traverse(ast, visitor);
							return visitor.occurrences;
						}
					}
				}
			}
			return [];
		}
	
		function checkNodeDefineStatement(node, ast) {
			var parent = node.parent ? node.parent : (node.parents && node.parents.length > 0 ? node.parents[node.parents.length-1] : null);
			if (parent && parent.type === Estraverse.Syntax.ArrayExpression){
				var parent2 = parent.parent ? parent.parent : (node.parents && node.parents.length > 1 ? node.parents[node.parents.length-2] : null);
				if (parent2 && parent2.type === Estraverse.Syntax.CallExpression && parent2.callee && parent2.callee.name === "define"){
					var elements = parent.elements;
					for (var i=0; i<elements.length; i++) {
						if (elements[i] === node){
							var deps = parent2;
							if (deps && deps.arguments && (deps.arguments.length === 2 || deps.arguments.length === 3)){
								deps = deps.arguments[deps.arguments.length-1];
								if (deps.params && deps.params.length > i){
									return Finder.findNode(deps.params[i].range[0], ast, {parents: true});
								}
							}
							break;
						}
					}
				}
			}
			return null;
		}
		
		/**
		 * @description Gets the token from the given offset or the proceeding token if the found token 
		 * is a punctuator
		 * @function
		 * @private
		 * @param {Number} offset The offset into the source
		 * @param {Object} ast The AST
		 * @return {Object} The token for the given offset or null
		 * @since 6.0
		 */
		function _getToken(offset, ast) {
			if(ast.tokens && ast.tokens.length > 0) {
				var token = Finder.findToken(offset, ast.tokens);
				if(token) {
					if(token.type === 'Punctuator') {
						var index = token.index;
						//only check back if we are at the start of the punctuator i.e. here -> {
						if(offset === token.range[0] && index != null && index > 0) {
							var prev = ast.tokens[index-1];
							if(prev.range[1] !== token.range[0]) {
								return null;
							}
							else {
								token = prev;
							}
						}
					}
					if(token.type === 'Identifier' || token.type === "String" || (token.type === 'Keyword' && token.value === 'this')) {
						return token;
					}
				}
			}
			return null;
		}
		
		/**
		 * @description Computes the node name to use while searching
		 * @function
		 * @private
		 * @param {Object} node The AST token
		 * @returns {String} The node name to use while seraching
		 * @since 6.0
		 */
		function _nameFromNode(node) {
			switch(node.type) {
				case Estraverse.Syntax.Identifier: return node.name;
				case Estraverse.Syntax.ThisExpression: return 'this'; //$NON-NLS-0$
			}
		}
		
		/**
		 * @description If we should skip marking occurrences
		 * @function
		 * @private
		 * @param {Object} node The AST node
		 * @returns {Boolean} True if we shoud skip computing occurrences
		 * @since 6.0
		 */
		function _skip(node) {
			if(!node) {
				return true;
			}
			if(node.type === Estraverse.Syntax.ThisExpression) {
				return false;
			}
			
			if (node.type === Estraverse.Syntax.Literal){
				return false;
			}
			
			return node.type !== Estraverse.Syntax.Identifier;
		}
		
		/**
		 * @name getVisitor
		 * @description Delegate function to get the visitor
		 * @function
		 * @private
		 * @memberof javascript.JavaScriptOccurrences.prototype
		 * @param {Object} context The context (item) to find occurrences for
		 * @returns The instance of {Visitor} to use
		 * @since 6.0
		 */
		function _getVisitor(context) {
			if(!this.visitor) {
				this.visitor = new Visitor();
				this.visitor.enter = this.visitor.enter.bind(this.visitor);
				this.visitor.leave = this.visitor.leave.bind(this.visitor);
			}
			
			if (context.token){
				var parent = context.token.parent ? context.token.parent : (context.token.parents && context.token.parents.length > 0 ? context.token.parents[context.token.parents.length-1] : null);
				
				// See if a 'this' keyword was selected
				this.visitor.thisCheck = context.token.type === Estraverse.Syntax.ThisExpression;
				
				// See if we are doing an object property check
				this.visitor.objectPropCheck = false;
				if (parent && parent.type === Estraverse.Syntax.Property){
					// Object property key is selected
					this.visitor.objectPropCheck = context.token === parent.key;
				} else if (parent && (parent.type === Estraverse.Syntax.MemberExpression)){
					if (parent.object && parent.object.type === Estraverse.Syntax.ThisExpression){
						// Usage of this within an object
						this.visitor.objectPropCheck = true;
					} else if (!parent.computed && parent.property && context.start >= parent.property.range[0] && context.end <= parent.property.range[1]){
					 	// Selecting the property key of a member expression that is not computed (foo.a vs foo[a])
						this.visitor.objectPropCheck = true;
					}
				} else if (parent && parent.type === Estraverse.Syntax.FunctionExpression && context.token.parents && context.token.parents.length > 1 && context.token.parents[context.token.parents.length-2].type === Estraverse.Syntax.Property){
					// Both the name and the params have the same parent
					if (parent.id && parent.id.range === context.token.range){
						// Named function expresison as the child of a property
						this.visitor.objectPropCheck = true;
					}
				}
				
				// See if a labeled statement is selected
				this.visitor.labeledStatementCheck = parent && (parent.type === Estraverse.Syntax.LabeledStatement || parent.type === Estraverse.Syntax.ContinueStatement || parent.type === Estraverse.Syntax.BreakStatement);
			}
				
			this.visitor.context = context;
			return this.visitor;			
		}
		
		/**
		 * @name javascript.JavaScriptOccurrences
		 * @description creates a new instance of the outliner
		 * @constructor
		 * @public
		 * @param {javascript.ASTManager} astManager
		 * @param {javascript.CUProvider} cuProvider
		 */
		function JavaScriptOccurrences(astManager, cuProvider) {
			this.astManager = astManager;
			this.cuprovider = cuProvider;
		}
		
		Objects.mixin(JavaScriptOccurrences.prototype, /** @lends javascript.JavaScriptOccurrences.prototype*/ {
			
			/**
			 * @name computeOccurrences
			 * @description Callback from the editor to compute the occurrences
			 * @function
			 * @public 
			 * @memberof javascript.JavaScriptOccurrences.prototype
			 * @param {Object} editorContext The current editor context
			 * @param {Object} ctxt The current selection context
			 */
			computeOccurrences: function(editorContext, ctxt) {
				return editorContext.getFileMetadata().then(function(meta) {
				    if(meta.contentType.id === 'application/javascript') {
				        return this.astManager.getAST(editorContext).then(function(ast) {
							return findOccurrences(ast, ctxt);
						});
				    }
				    return editorContext.getText().then(function(text) {
			            var cu = this.cuprovider.getCompilationUnit(function(){
			            		return Finder.findScriptBlocks(text);
			            	}, meta);
			            if(cu.validOffset(ctxt.selection.start)) {
	    		            return this.astManager.getAST(cu.getEditorContext()).then(function(ast) {
	            				return findOccurrences(ast, ctxt);
	            			});
	        			}
	        			return [];
	    			}.bind(this));
				}.bind(this));
			}
		});
		
		JavaScriptOccurrences.prototype.contructor = JavaScriptOccurrences;
		
		return {
			findOccurrences: findOccurrences,
			JavaScriptOccurrences: JavaScriptOccurrences
		};
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 89 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*******************************************************************************
	 * @license
	 * Copyright (c) 2015 IBM Corporation and others.
	 * All rights reserved. This program and the accompanying materials are made
	 * available under the terms of the Eclipse Public License v1.0
	 * (http://www.eclipse.org/legal/epl-v10.html), and the Eclipse Distribution
	 * License v1.0 (http://www.eclipse.org/org/documents/edl-v10.html).
	 *
	 * Contributors:
	 *     IBM Corporation - initial API and implementation
	 *******************************************************************************/
	/* eslint-env amd */
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	__webpack_require__(73),
	__webpack_require__(76)
	], __WEBPACK_AMD_DEFINE_RESULT__ = function(LRU, CU) {
	
		var _cache = new LRU(10);
		var _useCache = true;
		var inputChanged = null;
	
		/**
		 * @description fetches or creates a compilation unit for the given information
		 * @param {Function} sourceblocks a function that returns the blocks of source
		 * @param {Object} metadata The file metadata
		 * @param {orion.editor.EditorContext} editorContext The editor context
		 * @returns {javascript.CompilationUnit} The compilation unit for the given information
		 */
		function getCompilationUnit(getSourceBlocks, metadata, editorContext) {
			if (_useCache){
				var cu = _cache.get(metadata.location);
				if(cu) {
					return cu;
				}
			}
			var blocks = getSourceBlocks();
			if (!blocks){
				blocks = [];
			}
			cu = new CU(blocks, metadata, editorContext);
			if (_useCache){
				_cache.put(metadata.location, cu);
			}
			return cu;
		}
	
		/**
		 * Callback from the orion.edit.model service
		 * @param {Object} event An <tt>orion.edit.model</tt> event.
		 * @see https://wiki.eclipse.org/Orion/Documentation/Developer_Guide/Plugging_into_the_editor#orion.edit.model
		 */
		function onModelChanging(evnt) {
			if(inputChanged) {
				//TODO haxxor, eat the first model changing event which immediately follows
				//input changed
				inputChanged = null;
			} else {
				_cache.remove(_getKey(evnt.file));
			}
		}
		
		/**
		 * Allows a caller to turn off the cache cuProvider is using, creating a new CU each time one is requested.
		 * Intended for use in testing where no onModelChanging events are fired.
		 * @param useCache whether to use the cache (default) or not
		 */
		function setUseCache(useCache){
			_useCache = useCache;
		}
	
		/**
		 * Returns the key to use when caching
		 * @param {Object} metadata The file infos
		 * @since 8.0
		 */
		function _getKey(metadata) {
		  if(!metadata || !metadata.location) {
			  return 'unknown'; //$NON-NLS-1$
		  }
		  return metadata.location;
		}
	
		/**
		 * Callback from the orion.edit.model service
		 * @param {Object} event An <tt>orion.edit.model</tt> event.
		 * @see https://wiki.eclipse.org/Orion/Documentation/Developer_Guide/Plugging_into_the_editor#orion.edit.model
		 */
		function onInputChanged(evnt) {
			inputChanged = evnt;
		}
	
		return {
			getCompilationUnit: getCompilationUnit,
			onModelChanging: onModelChanging,
			onInputChanged: onInputChanged,
			setUseCache: setUseCache
		};
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 90 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__; /*******************************************************************************
	 * @license
	 * Copyright (c) 2014, 2016 IBM Corporation and others.
	 * All rights reserved. This program and the accompanying materials are made 
	 * available under the terms of the Eclipse Public License v1.0 
	 * (http://www.eclipse.org/legal/epl-v10.html), and the Eclipse Distribution 
	 * License v1.0 (http://www.eclipse.org/org/documents/edl-v10.html). 
	 *
	 * Contributors:
	 *     IBM Corporation - initial API and implementation
	 *******************************************************************************/
	/*eslint-env amd*/
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	__webpack_require__(15),
	__webpack_require__(13),
	__webpack_require__(91),
	__webpack_require__(31),
	__webpack_require__(76),
	__webpack_require__(71)
	], __WEBPACK_AMD_DEFINE_RESULT__ = function(Objects, Deferred, TextModel, Finder, CU, Metrics) {
		
		/**
		 * @description Creates a new JavaScript quick fix computer
		 * @param {javascript.ASTManager} astManager The AST manager
		 * @returns {javascript.JavaScriptQuickfixes} The new quick fix computer instance
		 * @since 8.0
		 */
		function JavaScriptQuickfixes(astManager) {
			var vm = this;
		   	vm.astManager = astManager;

		   	vm.retrieveFix = function(ruleID) {
				return this.fixes[ruleID];
			},
			vm.fixes = {
				"radix": function(data) {
					text = data["text"];
					currentAnnotation = data["annotation"];					
					astManager = vm.astManager;
					ast = astManager.parse(text, 'unknown');
					var node = Finder.findNode(currentAnnotation.start, ast, {parents:true});
					if(node && node.type === 'Identifier') {
						node = node.parents[node.parents.length-1];
						if(node.type === 'CallExpression' && Array.isArray(node.arguments)) {
							var arg = node.arguments[node.arguments.length-1];
							return {
								text: ", 10", //$NON-NLS-1$
								start: arg.range[1],
								end: arg.range[1]
							};
						}
					}
					return {};
				}
			}
		}
		
		/**
	    * @description Finds the start of the line in the given text starting at the given offset
	    * @param {String} text The text
	    * @param {Number} offset The offset
	    * @returns {Number} The offset in the text of the new line
	    */
	   function getLineStart(text, offset) {
	       if(!text) {
	           return 0;
	       }
	       if(offset < 0) {
	           return 0;
	       }
	       var off = offset;
	       var char = text[off];
	       while(off > -1 && !/[\r\n]/.test(char)) {
	           char = text[--off];
	       }
	       return off+1; //last char inspected will be @ -1 or the new line char
		}
			
		/**
	    * @description Finds the end of the line in the given text starting at the given offset
	    * @param {String} text The text
	    * @param {Number} offset The offset
	    * @returns {Number} The offset in the text before the new line or end of file
	    */
	   function getLineEnd(text, offset) {
	       if(!text) {
	           return 0;
	       }
	       if(offset < 0) {
	           return 0;
	       }
	       var off = offset;
	       var char = text[off];
	       while(off < text.length && !/[\r\n]/.test(char)) {
	           char = text[++off];
	       }
	       return off;
		}
			
		/**
		 * @description Computes the indent to use in the editor
		 * @param {String} text The editor text
		 * @param {Number} linestart The start of the line
		 * @param {Boolean} extraIndent If we should add an extra indent
		 * @returns {String} The ammount of indent / formatting for the start of the string
		 */
		function computeIndent(text, linestart, extraIndent) {
		    if(!text || linestart < 0) {
		        return '';
		    }
		    var off = linestart;
		    var char = text[off];
		    var preamble = extraIndent ? '\t' : ''; //$NON-NLS-1$
		    //walk the proceeding whitespace so we will insert formatted at the same level
		    while(char === ' ' || char === '\t') {
		       preamble += char;
		       char = text[++off];
		    }
		    return preamble;
		}
	
	    /**
	     * @description Computes the formatting for the trailing part of the fix
	     * @param {String} text The editor text
	     * @param {Object} annotation The annotation object
	     * @param {String} indent Additional formatting to apply after the fix
	     * @returns {String} The formatting to apply after the fix
	     */
	    function computePostfix(text, annotation, indent) {
	        if(!text || !annotation) {
	            return '';
	        }
	        var off = annotation.start;
	        var char = text[off];
		    var val = '';
		    var newline = false;
		    //walk the trailing whitespace so we can see if we need axtra whitespace
		    while(off >= annotation.start && off <= annotation.end) {
			    if(char === '\n') {
			        newline = true;
			        break;
			    }
			    char = text[off++];
		    }
		    if(!newline) {
			    val += '\n'; //$NON-NLS-1$
		    }
		    if(typeof indent !== 'undefined') {
			    val += indent;
		    }
		    return val;
	    }
	    
	    /**
	     * @description Computes the offset for the block comment. i.e. 2 if the block starts with /*, 3 if it starts with /**
	     * @param {String} text The file text
	     * @param {Number} offset The doc node offset
	     * @returns {Number} 2 or 3 depending on the start of the comment block
	     */
	    function getDocOffset(text, offset) {
	        if(text.charAt(offset+1) === '*') {
	            if(text.charAt(offset+2) === '*') {
	                return 3;
	            }
	            return 2;
	        }
	        return 0;
	    }
		
		function updateDirective(text, directive, name, usecommas) {
	        if(usecommas) {
		        if(text.slice(directive.length).trim() !== '') {
		            return text.trim() + ', '+name; //$NON-NLS-1$
		        }
		        return text.trim() + ' '+name;  //$NON-NLS-1$
	        }
		    return text.trim() + ' '+name;  //$NON-NLS-1$
	    }
		
		function indexOf(list, item) {
		    if(list && list.length) {
	            for(var i = 0; i < list.length; i++) {
	                var p = list[i];
	                if(item.range[0] === p.range[0] && item.range[1] === p.range[1]) {
	                    return i;
	                }
	            }
	        }
	        return -1;
		}
		
		function removeIndexedItem(list, index, editorContext) {
	        if(index < 0 || index > list.length) {
	            return;
	        }
	        var node = list[index];
	        if(list.length === 1) {
	            return editorContext.setText('', node.range[0], node.range[1]);
	        } else if(index === list.length-1) {
	            return editorContext.setText('', list[index-1].range[1], node.range[1]);
	        } else if(node) {
	            return editorContext.setText('', node.range[0], list[index+1].range[0]);
	        }
	        return null;
	    }
	    
	    function updateDoc(node, source, editorContext, name) {
	        if(node.leadingComments && node.leadingComments.length > 0) {
	            for(var i = node.leadingComments.length-1; i > -1; i--) {
	                var comment = node.leadingComments[i];
	                var edit = new RegExp("(\\s*[*]+\\s*(?:@param)\\s*(?:\\{.*\\})?\\s*(?:"+name+")+.*)").exec(comment.value); //$NON-NLS-1$ //$NON-NLS-2$
	                if(edit) {
	                    var start = comment.range[0] + edit.index + getDocOffset(source, comment.range[0]);
	                    return editorContext.setText('', start, start+edit[1].length);
	                }
	            }
	        }
	        return null;
	    }
		
		function hasDocTag(tags, node) {
			// tags contains all tags that have to be checked
		    if(node.leadingComments) {
		        for(var i = 0; i < node.leadingComments.length; i++) {
		            var comment = node.leadingComments[i];
		            for (var j = 0, len = tags.length; j < len; j++) {
		            		var tag = tags[j];
			            	if(comment.value.indexOf(tag) > -1) {
			                return true;
			            }
			        }
		        }
		    }
		    return false;
		}
		
		function getDirectiveInsertionPoint(node) {
		    if(node.type === 'Program' && node.body && node.body.length > 0) {
	            var n = node.body[0];
	            var val = -1;
	            switch(n.type) {
	                case 'FunctionDeclaration': {
	                    val = getCommentStart(n);
	                    if(val > -1) {
	                        return val;
	                    }
	                    //TODO see https://github.com/jquery/esprima/issues/1071
	                    val = getCommentStart(n.id);
	                    if(val > -1) {
	                        return val;
	                    }
	                    break;
	                }
	                case 'ExpressionStatement': {
	                    if(n.expression && n.expression.right && n.expression.right.type === 'FunctionExpression') {
	                        val = getCommentStart(n);
	                        if(val > -1) {
	                            return val;
	                        }
	                        //TODO see https://github.com/jquery/esprima/issues/1071
	                        val = getCommentStart(n.expression.left);
	                        if(val > -1) {
	                            return val;
	                        }
	                    }   
	                }
	            }
		    }
		    return node.range[0];
		}
		
		/**
		 * @description Returns the offset to use when inserting a comment directive
		 * @param {Object} node The node to check for comments
		 * @returns {Number} The offset to insert the comment
		 * @sicne 9.0
		 */
		function getCommentStart(node) {
		    if(node.leadingComments && node.leadingComments.length > 0) {
	            var comment = node.leadingComments[node.leadingComments.length-1];
	            if(/(?:@param|@return|@returns|@type|@constructor|@name|@description)/ig.test(comment.value)) {
	                //if the immediate comment has any of the tags we use for inferencing, add the directive before it instead of after
	                return comment.range[0];
	            }
	        }
	        return -1;
		}
		
		var controlStatements = ['IfStatement', 'WhileStatement', 'ForStatement', 'ForInStatement', 'WithStatement', 'DoWhileStatement', 'ForOfStatement']; //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ //$NON-NLS-5$ //$NON-NLS-6$ //$NON-NLS-7$
		
		/**
		 * @description Walks the parents array and checks to see if there is a control statement as a direct parent
		 * @param {Object} node The AST node to check
		 * @returns {Object} The AST node that is a direct control statement parent of the given node, or null
		 * @since 11.0
		 */
		function getControlStatementParent(node) {
			if(node && node.parents) {
				var i = node.parents.length-1,
					p = node.parents[i];
				while(p && i > -1) {
					if(controlStatements.indexOf(p.type) > -1) {
						return p;
					}
					p = node.parents[--i];
				}
			}
			else {
				return null;
			}
		}
				
		JavaScriptQuickfixes.prototype.contructor = JavaScriptQuickfixes;
		
		return {
			JavaScriptQuickfixes: JavaScriptQuickfixes
		};
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 91 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*******************************************************************************
	 * @license
	 * Copyright (c) 2010, 2012 IBM Corporation and others.
	 * All rights reserved. This program and the accompanying materials are made 
	 * available under the terms of the Eclipse Public License v1.0 
	 * (http://www.eclipse.org/legal/epl-v10.html), and the Eclipse Distribution 
	 * License v1.0 (http://www.eclipse.org/org/documents/edl-v10.html). 
	 * 
	 * Contributors: 
	 *		Felipe Heidrich (IBM Corporation) - initial API and implementation
	 *		Silenio Quarti (IBM Corporation) - initial API and implementation
	 ******************************************************************************/
	 
	/*eslint-env browser, amd*/
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(92), __webpack_require__(93)], __WEBPACK_AMD_DEFINE_RESULT__ = function(mEventTarget, mRegex) { //$NON-NLS-2$  //$NON-NLS-1$ //$NON-NLS-0$
	
		/**
		 * Constructs a new TextModel with the given text and default line delimiter.
		 *
		 * @param {String} [text=""] the text that the model will store
		 * @param {String} [lineDelimiter=platform delimiter] the line delimiter used when inserting new lines to the model.
		 *
		 * @name orion.editor.TextModel
		 * @class The TextModel is an interface that provides text for the view. Applications may
		 * implement the TextModel interface to provide a custom store for the view content. The
		 * view interacts with its text model in order to access and update the text that is being
		 * displayed and edited in the view. This is the default implementation.
		 * <p>
		 * <b>See:</b><br/>
		 * {@link orion.editor.TextView}<br/>
		 * {@link orion.editor.TextView#setModel}
		 * </p>
		 * @borrows orion.editor.EventTarget#addEventListener as #addEventListener
		 * @borrows orion.editor.EventTarget#removeEventListener as #removeEventListener
		 * @borrows orion.editor.EventTarget#dispatchEvent as #dispatchEvent
		 */
		function TextModel(text, lineDelimiter) {
			this._lastLineIndex = -1;
			this._text = [""];
			this._lineOffsets = [0];
			this.setText(text);
			this.setLineDelimiter(lineDelimiter);
		}
	
		TextModel.prototype = /** @lends orion.editor.TextModel.prototype */ {
			/**
			 * Destroys this text model.
			 */
			destroy: function() {
			},
			/**
			 * @class This object describes the options to use while finding occurrences of a string in a text model.
			 * @name orion.editor.FindOptions
			 *
			 * @property {String} string the search string to be found.
			 * @property {Boolean} [regex=false] whether or not the search string is a regular expression.
			 * @property {Boolean} [wrap=false] whether or not to wrap search.
			 * @property {Boolean} [wholeWord=false] whether or not to search only whole words.
			 * @property {Boolean} [caseInsensitive=false] whether or not search is case insensitive.
			 * @property {Boolean} [reverse=false] whether or not to search backwards.
			 * @property {Number} [start=0] The start offset to start searching
			 * @property {Number} [end=charCount] The end offset of the search. Used to search in a given range.
			 */
			/**
			 * @class This object represents a find occurrences iterator.
			 * <p>
			 * <b>See:</b><br/>
			 * {@link orion.editor.TextModel#find}<br/>
			 * </p>		 
			 * @name orion.editor.FindIterator
			 * 
			 * @property {Function} hasNext Determines whether there are more occurrences in the iterator.
			 * @property {Function} next Returns the next matched range {start,end} in the iterator.
			 */	
			/**
			 * Finds occurrences of a string in the text model.
			 *
			 * @param {orion.editor.FindOptions} options the search options
			 * @return {orion.editor.FindIterator} the find occurrences iterator.
			 */
			find: function(options) {
				if (this._text.length > 1) {
					this._text = [this._text.join("")];
				}
				var string = options.string;
				var regex = options.regex;
				var pattern = string;
				var flags = "";
				var caseInsensitive = options.caseInsensitive;
				if (pattern) {
					if (regex) {
						var parsed = mRegex.parse(pattern);
						if (parsed) {
							pattern = parsed.pattern;
							flags = parsed.flags;
						}
					} else {
						pattern = string.replace(/([\\$\^*\/+?\.\(\)|{}\[\]])/g, "\\$&"); //$NON-NLS-0$
						/*
						* Bug in JS RegEx. In a Turkish locale, dotless i (u0131) capitalizes to I (u0049) and i (u0069) 
						* capitalizes to dot I (u0130). The JS RegEx does not match correctly the Turkish i's in case
						* insensitive mode. The fix is to detect the presence of Turkish i's in the search pattern and 
						* to modify the pattern to search for both upper and lower case.
						*/
						if (caseInsensitive) {  //$NON-NLS-1$ //$NON-NLS-0$
							pattern = pattern.replace(/[iI\u0130\u0131]/g, "[Ii\u0130\u0131]"); //$NON-NLS-0$
						}
					}
				}
				var current = null, skip;
				if (pattern) {
					var reverse = options.reverse;
					var wrap = options.wrap;
					var wholeWord = options.wholeWord;
					var start = options.start || 0;
					var end = options.end;
					var isRange = (end !== null && end !== undefined);
					if (flags.indexOf("g") === -1) { flags += "g"; } //$NON-NLS-1$ //$NON-NLS-0$
					if (flags.indexOf("m") === -1) { flags += "m"; } //$NON-NLS-1$ //$NON-NLS-0$
					if (caseInsensitive) {
						if (flags.indexOf("i") === -1) { flags += "i"; } //$NON-NLS-1$ //$NON-NLS-0$
					}
					if (wholeWord) {
						pattern = "\\b" + pattern + "\\b"; //$NON-NLS-1$ //$NON-NLS-0$
					}
					var text = this._text[0], result, lastIndex, offset = 0;
					if (isRange) {
						var s = start < end ? start : end;
						var e = start < end ? end : start;
						text = text.substring(s, e);
						offset = s;
					}
					var re = new RegExp(pattern, flags);
					if (reverse) {
						skip = function() {
							var match = null;
							re.lastIndex = 0;
							while (true) {
								lastIndex = re.lastIndex;
								result = re.exec(text);
								if (lastIndex === re.lastIndex) {
									return null;
								}
								if (result) {
									if (result.index + offset < start) {
										match = {start: result.index + offset, end: re.lastIndex + offset};
									} else {
										if (!wrap || match) {
											break;
										}
										start = text.length + offset;
										match = {start: result.index + offset, end: re.lastIndex + offset};
									}
								} else {
									break;
								}
							}
							if (match) { start = match.start; }
							return match;
						};
					} else {
						if (!isRange) {
							re.lastIndex = start;
						}
						skip = function() {
							while (true) {
								lastIndex = re.lastIndex;
								result = re.exec(text);
								if (lastIndex === re.lastIndex) {
									return null;
								}
								if (result) {
									return {start: result.index + offset, end: re.lastIndex + offset};
								}
								if (lastIndex !== 0) {
									if (wrap) {
										continue;
									}
								}
								break;
							}
							return null;
						};
					}
					current = skip();
				}
				return {
					next: function() {
						var result = current;
						if (result) { current = skip(); }
						return result;					
					},
					hasNext: function() {
						return current !== null;
					}
				};
			},
			/**
			 * Returns the number of characters in the model.
			 *
			 * @returns {Number} the number of characters in the model.
			 */
			getCharCount: function() {
				var count = 0;
				for (var i = 0; i<this._text.length; i++) {
					count += this._text[i].length;
				}
				return count;
			},
			/**
			 * Returns the text of the line at the given index.
			 * <p>
			 * The valid indices are 0 to line count exclusive.  Returns <code>null</code> 
			 * if the index is out of range. 
			 * </p>
			 *
			 * @param {Number} lineIndex the zero based index of the line.
			 * @param {Boolean} [includeDelimiter=false] whether or not to include the line delimiter. 
			 * @returns {String} the line text or <code>null</code> if out of range.
			 *
			 * @see orion.editor.TextModel#getLineAtOffset
			 */
			getLine: function(lineIndex, includeDelimiter) {
				var lineCount = this.getLineCount();
				if (!(0 <= lineIndex && lineIndex < lineCount)) {
					return null;
				}
				var start = this._lineOffsets[lineIndex];
				if (lineIndex + 1 < lineCount) {
					var text = this.getText(start, this._lineOffsets[lineIndex + 1]);
					if (includeDelimiter) {
						return text;
					}
					var end = text.length, c;
					while (((c = text.charCodeAt(end - 1)) === 10) || (c === 13)) {
						end--;
					}
					return text.substring(0, end);
				} else {
					return this.getText(start); 
				}
			},
			/**
			 * Returns the line index at the given character offset.
			 * <p>
			 * The valid offsets are 0 to char count inclusive. The line index for
			 * char count is <code>line count - 1</code>. Returns <code>-1</code> if
			 * the offset is out of range.
			 * </p>
			 *
			 * @param {Number} offset a character offset.
			 * @returns {Number} the zero based line index or <code>-1</code> if out of range.
			 */
			getLineAtOffset: function(offset) {
				var charCount = this.getCharCount();
				if (!(0 <= offset && offset <= charCount)) {
					return -1;
				}
				var lineCount = this.getLineCount();
				if (offset === charCount) {
					return lineCount - 1; 
				}
				var lineStart, lineEnd;
				var index = this._lastLineIndex;
				if (0 <= index && index < lineCount) {
					lineStart = this._lineOffsets[index];
					lineEnd = index + 1 < lineCount ? this._lineOffsets[index + 1] : charCount;
					if (lineStart <= offset && offset < lineEnd) {
						return index;
					}
				}
				var high = lineCount;
				var low = -1;
				while (high - low > 1) {
					index = Math.floor((high + low) / 2);
					lineStart = this._lineOffsets[index];
					lineEnd = index + 1 < lineCount ? this._lineOffsets[index + 1] : charCount;
					if (offset <= lineStart) {
						high = index;
					} else if (offset < lineEnd) {
						high = index;
						break;
					} else {
						low = index;
					}
				}
				this._lastLineIndex = high;
				return high;
			},
			/**
			 * Returns the number of lines in the model.
			 * <p>
			 * The model always has at least one line.
			 * </p>
			 *
			 * @returns {Number} the number of lines.
			 */
			getLineCount: function() {
				return this._lineOffsets.length;
			},
			/**
			 * Returns the line delimiter that is used by the view
			 * when inserting new lines. New lines entered using key strokes 
			 * and paste operations use this line delimiter.
			 *
			 * @return {String} the line delimiter that is used by the view when inserting new lines.
			 */
			getLineDelimiter: function() {
				return this._lineDelimiter;
			},
			/**
			 * Returns the end character offset for the given line. 
			 * <p>
			 * The end offset is not inclusive. This means that when the line delimiter is included, the 
			 * offset is either the start offset of the next line or char count. When the line delimiter is
			 * not included, the offset is the offset of the line delimiter.
			 * </p>
			 * <p>
			 * The valid indices are 0 to line count exclusive.  Returns <code>-1</code> 
			 * if the index is out of range. 
			 * </p>
			 *
			 * @param {Number} lineIndex the zero based index of the line.
			 * @param {Boolean} [includeDelimiter=false] whether or not to include the line delimiter. 
			 * @return {Number} the line end offset or <code>-1</code> if out of range.
			 *
			 * @see orion.editor.TextModel#getLineStart
			 */
			getLineEnd: function(lineIndex, includeDelimiter) {
				var lineCount = this.getLineCount();
				if (!(0 <= lineIndex && lineIndex < lineCount)) {
					return -1;
				}
				if (lineIndex + 1 < lineCount) {
					var end = this._lineOffsets[lineIndex + 1];
					if (includeDelimiter) {
						return end;
					}
					var text = this.getText(Math.max(this._lineOffsets[lineIndex], end - 2), end);
					var i = text.length, c;
					while (((c = text.charCodeAt(i - 1)) === 10) || (c === 13)) {
						i--;
					}
					return end - (text.length - i);
				} else {
					return this.getCharCount();
				}
			},
			/**
			 * Returns the start character offset for the given line.
			 * <p>
			 * The valid indices are 0 to line count exclusive.  Returns <code>-1</code> 
			 * if the index is out of range. 
			 * </p>
			 *
			 * @param {Number} lineIndex the zero based index of the line.
			 * @return {Number} the line start offset or <code>-1</code> if out of range.
			 *
			 * @see orion.editor.TextModel#getLineEnd
			 */
			getLineStart: function(lineIndex) {
				if (!(0 <= lineIndex && lineIndex < this.getLineCount())) {
					return -1;
				}
				return this._lineOffsets[lineIndex];
			},
			/**
			 * Returns the text for the given range.
			 * <p>
			 * The end offset is not inclusive. This means that character at the end offset
			 * is not included in the returned text.
			 * </p>
			 *
			 * @param {Number} [start=0] the zero based start offset of text range.
			 * @param {Number} [end=char count] the zero based end offset of text range.
			 *
			 * @see orion.editor.TextModel#setText
			 */
			getText: function(start, end) {
				if (start === undefined) { start = 0; }
				if (end === undefined) { end = this.getCharCount(); }
				if (start === end) { return ""; }
				var offset = 0, chunk = 0, length;
				while (chunk<this._text.length) {
					length = this._text[chunk].length; 
					if (start <= offset + length) { break; }
					offset += length;
					chunk++;
				}
				var firstOffset = offset;
				var firstChunk = chunk;
				while (chunk<this._text.length) {
					length = this._text[chunk].length; 
					if (end <= offset + length) { break; }
					offset += length;
					chunk++;
				}
				var lastOffset = offset;
				var lastChunk = chunk;
	
				// error check for invalid chunks of text
				if (firstChunk >= this._text.length || lastChunk >= this._text.length || firstChunk > lastChunk) {
					return "";
				}
				
				if (firstChunk === lastChunk) {
					return this._text[firstChunk].substring(start - firstOffset, end - lastOffset);
				}
				var beforeText = this._text[firstChunk].substring(start - firstOffset);
				var afterText = this._text[lastChunk].substring(0, end - lastOffset);
				return beforeText + this._text.slice(firstChunk+1, lastChunk).join("") + afterText; 
			},
			/**
			 * Notifies all listeners that the text is about to change.
			 * <p>
			 * This notification is intended to be used only by the view. Application clients should
			 * use {@link orion.editor.TextView#event:onModelChanging}.
			 * </p>
			 * <p>
			 * NOTE: This method is not meant to called directly by application code. It is called internally by the TextModel
			 * as part of the implementation of {@link #setText}. This method is included in the public API for documentation
			 * purposes and to allow integration with other toolkit frameworks.
			 * </p>
			 *
			 * @param {orion.editor.ModelChangingEvent} modelChangingEvent the changing event
			 */
			onChanging: function(modelChangingEvent) {
				return this.dispatchEvent(modelChangingEvent);
			},
			/**
			 * Notifies all listeners that the text has changed.
			 * <p>
			 * This notification is intended to be used only by the view. Application clients should
			 * use {@link orion.editor.TextView#event:onModelChanged}.
			 * </p>
			 * <p>
			 * NOTE: This method is not meant to called directly by application code. It is called internally by the TextModel
			 * as part of the implementation of {@link #setText}. This method is included in the public API for documentation
			 * purposes and to allow integration with other toolkit frameworks.
			 * </p>
			 *
			 * @param {orion.editor.ModelChangedEvent} modelChangedEvent the changed event
			 */
			onChanged: function(modelChangedEvent) {
				return this.dispatchEvent(modelChangedEvent);
			},
			/**
			 * Sets the line delimiter that is used by the view
			 * when new lines are inserted in the model due to key
			 * strokes and paste operations. The line delimiter of
			 * existing lines are unchanged unless the to <code>all</code>
			 * argument is <code>true</code>.
			 * <p>
			 * If lineDelimiter is "auto", the delimiter is computed to be
			 * the first delimiter found in the current text. If lineDelimiter
			 * is undefined or if there are no delimiters in the current text, the
			 * platform delimiter is used.
			 * </p>
			 *
			 * @param {String} lineDelimiter the line delimiter that is used by the view when inserting new lines.
			 * @param {Boolean} [all=false] whether or not the delimiter of existing lines are changed.
			 */
			setLineDelimiter: function(lineDelimiter, all) {
				if (lineDelimiter === "auto") { //$NON-NLS-0$
					lineDelimiter = undefined;
					if (this.getLineCount() > 1) {
						lineDelimiter = this.getText(this.getLineEnd(0), this.getLineEnd(0, true));
					}
				}
				var isWindows = /^win/.test(process.platform);
				var platformDelimiter = isWindows ? "\r\n" : "\n";
				this._lineDelimiter = lineDelimiter ? lineDelimiter : platformDelimiter;
				if (all) {
					var lineCount = this.getLineCount();
					if (lineCount > 1) {
						var lines = new Array(lineCount);
						for (var i=0; i<lineCount; i++) {
							lines[i] = this.getLine(i);
						}
						this.setText(lines.join(this._lineDelimiter));
					}
				}
			},
			/**
			 * Replaces the text in the given range with the given text.
			 * <p>
			 * The end offset is not inclusive. This means that the character at the 
			 * end offset is not replaced.
			 * </p>
			 * <p>
			 * The text model must notify the listeners before and after the
			 * the text is changed by calling {@link #onChanging} and {@link #onChanged}
			 * respectively. 
			 * </p>
			 *
			 * @param {String} [text=""] the new text.
			 * @param {Number} [start=0] the zero based start offset of text range.
			 * @param {Number} [end=char count] the zero based end offset of text range.
			 *
			 * @see orion.editor.TextModel#getText
			 */
			setText: function(text, start, end) {
				if (text === undefined) { text = ""; }
				if (start === undefined) { start = 0; }
				if (end === undefined) { end = this.getCharCount(); }
				if (start === end && text === "") { return; }
				var startLine = this.getLineAtOffset(start);
				var endLine = this.getLineAtOffset(end);
				var eventStart = start;
				var removedCharCount = end - start;
				var removedLineCount = endLine - startLine;
				var addedCharCount = text.length;
				var addedLineCount = 0;
				var lineCount = this.getLineCount();
				
				var cr = 0, lf = 0, index = 0;
				var newLineOffsets = [];
				while (true) {
					if (cr !== -1 && cr <= index) { cr = text.indexOf("\r", index); } //$NON-NLS-0$
					if (lf !== -1 && lf <= index) { lf = text.indexOf("\n", index); } //$NON-NLS-0$
					if (lf === -1 && cr === -1) { break; }
					if (cr !== -1 && lf !== -1) {
						if (cr + 1 === lf) {
							index = lf + 1;
						} else {
							index = (cr < lf ? cr : lf) + 1;
						}
					} else if (cr !== -1) {
						index = cr + 1;
					} else {
						index = lf + 1;
					}
					newLineOffsets.push(start + index);
					addedLineCount++;
				}
			
				var modelChangingEvent = {
					type: "Changing", //$NON-NLS-0$
					text: text,
					start: eventStart,
					removedCharCount: removedCharCount,
					addedCharCount: addedCharCount,
					removedLineCount: removedLineCount,
					addedLineCount: addedLineCount
				};
				this.onChanging(modelChangingEvent);
				
				//TODO this should be done the loops below to avoid getText()
				if (newLineOffsets.length === 0) {
					var startLineOffset = this.getLineStart(startLine), endLineOffset;
					if (endLine + 1 < lineCount) {
						endLineOffset = this.getLineStart(endLine + 1);
					} else {
						endLineOffset = this.getCharCount();
					}
					if (start !== startLineOffset) {
						text = this.getText(startLineOffset, start) + text;
						start = startLineOffset;
					}
					if (end !== endLineOffset) {
						text = text + this.getText(end, endLineOffset);
						end = endLineOffset;
					}
				}
				
				var changeCount = addedCharCount - removedCharCount;
				for (var j = startLine + removedLineCount + 1; j < lineCount; j++) {
					this._lineOffsets[j] += changeCount;
				}
				
				/*
				* Feature in Chrome.  Chrome exceeds the maximum call stack when calling splice
				* around 62k arguments. The limit seems to be higher on IE (250K) and Firefox (450k).
				* The fix is to break the splice in junks of 50k.
				*/
				var SPLICE_LIMIT = 50000;
				var limit = SPLICE_LIMIT, args;
				if (newLineOffsets.length < limit) {
					args = [startLine + 1, removedLineCount].concat(newLineOffsets);
					Array.prototype.splice.apply(this._lineOffsets, args);
				} else {
					index = startLine + 1;
					this._lineOffsets.splice(index, removedLineCount);
					for (var k = 0; k < newLineOffsets.length; k += limit) {
						args = [index, 0].concat(newLineOffsets.slice(k, Math.min(newLineOffsets.length, k + limit)));
						Array.prototype.splice.apply(this._lineOffsets, args);
						index += limit;
					}
				}
				
				var offset = 0, chunk = 0, length;
				while (chunk<this._text.length) {
					length = this._text[chunk].length; 
					if (start <= offset + length) { break; }
					offset += length;
					chunk++;
				}
				var firstOffset = offset;
				var firstChunk = chunk;
				while (chunk<this._text.length) {
					length = this._text[chunk].length; 
					if (end <= offset + length) { break; }
					offset += length;
					chunk++;
				}
				var lastOffset = offset;
				var lastChunk = chunk;
				var firstText = this._text[firstChunk];
				var lastText = this._text[lastChunk];
				var beforeText = firstText.substring(0, start - firstOffset);
				var afterText = lastText.substring(end - lastOffset);
				var params = [firstChunk, lastChunk - firstChunk + 1];
				if (beforeText) { params.push(beforeText); }
				if (text) { params.push(text); }
				if (afterText) { params.push(afterText); }
				Array.prototype.splice.apply(this._text, params);
				if (this._text.length === 0) { this._text = [""]; }
				
				var modelChangedEvent = {
					type: "Changed", //$NON-NLS-0$
					start: eventStart,
					removedCharCount: removedCharCount,
					addedCharCount: addedCharCount,
					removedLineCount: removedLineCount,
					addedLineCount: addedLineCount
				};
				this.onChanged(modelChangedEvent);
			}
		};
		mEventTarget.EventTarget.addMixin(TextModel.prototype);
		
		return {TextModel: TextModel};
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 92 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*******************************************************************************
	 * Copyright (c) 2010, 2012 IBM Corporation and others.
	 * All rights reserved. This program and the accompanying materials are made 
	 * available under the terms of the Eclipse Public License v1.0 
	 * (http://www.eclipse.org/legal/epl-v10.html), and the Eclipse Distribution 
	 * License v1.0 (http://www.eclipse.org/org/documents/edl-v10.html). 
	 * 
	 * Contributors: 
	 *		Felipe Heidrich (IBM Corporation) - initial API and implementation
	 *		Silenio Quarti (IBM Corporation) - initial API and implementation
	 ******************************************************************************/
	 
	/*eslint-env browser, amd*/
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() { //$NON-NLS-0$
		/** 
		 * Constructs a new EventTarget object.
		 * 
		 * @class 
		 * @name orion.editor.EventTarget
		 */
		function EventTarget() {
		}
		/**
		 * Adds in the event target interface into the specified object.
		 *
		 * @param {Object} object The object to add in the event target interface.
		 */
		EventTarget.addMixin = function(object) {
			var proto = EventTarget.prototype;
			for (var p in proto) {
				if (proto.hasOwnProperty(p)) {
					object[p] = proto[p];
				}
			}
		};
		EventTarget.prototype = /** @lends orion.editor.EventTarget.prototype */ {
			/**
			 * Adds an event listener to this event target.
			 * 
			 * @param {String} type The event type.
			 * @param {Function|EventListener} listener The function or the EventListener that will be executed when the event happens. 
			 * @param {Boolean} [useCapture=false] <code>true</code> if the listener should be trigged in the capture phase.
			 * 
			 * @see orion.editor.EventTarget#removeEventListener
			 */
			addEventListener: function(type, listener, useCapture) {
				if (!this._eventTypes) { this._eventTypes = {}; }
				var state = this._eventTypes[type];
				if (!state) {
					state = this._eventTypes[type] = {level: 0, listeners: []};
				}
				var listeners = state.listeners;
				listeners.push({listener: listener, useCapture: useCapture});
			},
			/**
			 * Dispatches the given event to the listeners added to this event target.
			 * @param {Event} evt The event to dispatch.
			 */
			dispatchEvent: function(evt) {
				var type = evt.type;
				this._dispatchEvent("pre" + type, evt); //$NON-NLS-0$
				this._dispatchEvent(type, evt);
				this._dispatchEvent("post" + type, evt); //$NON-NLS-0$
			},
			_dispatchEvent: function(type, evt) {
				var state = this._eventTypes ? this._eventTypes[type] : null;
				if (state) {
					var listeners = state.listeners;
					try {
						state.level++;
						if (listeners) {
							for (var i=0, len=listeners.length; i < len; i++) {
								if (listeners[i]) {
									var l = listeners[i].listener;
									if (typeof l === "function") { //$NON-NLS-0$
										l.call(this, evt);
									} else if (l.handleEvent && typeof l.handleEvent === "function") { //$NON-NLS-0$
										l.handleEvent(evt);
									}
								}
							}
						}
					} finally {
						state.level--;
						if (state.compact && state.level === 0) {
							for (var j=listeners.length - 1; j >= 0; j--) {
								if (!listeners[j]) {
									listeners.splice(j, 1);
								}
							}
							if (listeners.length === 0) {
								delete this._eventTypes[type];
							}
							state.compact = false;
						}
					}
				}
			},
			/**
			 * Returns whether there is a listener for the specified event type.
			 * 
			 * @param {String} type The event type
			 * 
			 * @see orion.editor.EventTarget#addEventListener
			 * @see orion.editor.EventTarget#removeEventListener
			 */
			isListening: function(type) {
				if (!this._eventTypes) { return false; }
				return this._eventTypes[type] !== undefined;
			},		
			/**
			 * Removes an event listener from the event target.
			 * <p>
			 * All the parameters must be the same ones used to add the listener.
			 * </p>
			 * 
			 * @param {String} type The event type
			 * @param {Function|EventListener} listener The function or the EventListener that will be executed when the event happens. 
			 * @param {Boolean} [useCapture=false] <code>true</code> if the listener should be trigged in the capture phase.
			 * 
			 * @see orion.editor.EventTarget#addEventListener
			 */
			removeEventListener: function(type, listener, useCapture){
				if (!this._eventTypes) { return; }
				var state = this._eventTypes[type];
				if (state) {
					var listeners = state.listeners;
					for (var i=0, len=listeners.length; i < len; i++) {
						var l = listeners[i];
						if (l && l.listener === listener && l.useCapture === useCapture) {
							if (state.level !== 0) {
								listeners[i] = null;
								state.compact = true;
							} else {
								listeners.splice(i, 1);
							}
							break;
						}
					}
					if (listeners.length === 0) {
						delete this._eventTypes[type];
					}
				}
			}
		};
		return {EventTarget: EventTarget};
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 93 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*******************************************************************************
	 * @license
	 * Copyright (c) 2011, 2013 IBM Corporation and others.
	 * All rights reserved. This program and the accompanying materials are made 
	 * available under the terms of the Eclipse Public License v1.0 
	 * (http://www.eclipse.org/legal/epl-v10.html), and the Eclipse Distribution 
	 * License v1.0 (http://www.eclipse.org/org/documents/edl-v10.html). 
	 *
	 * Contributors:
	 *     IBM Corporation - initial API and implementation
	 *******************************************************************************/
	/*eslint-env browser, amd*/
	/**
	 * @name orion.regex
	 * @class Utilities for dealing with regular expressions.
	 * @description Utilities for dealing with regular expressions.
	 */
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() { //$NON-NLS-0$
		/**
		 * @memberOf orion.regex
		 * @function
		 * @static
		 * @description Escapes regex special characters in the input string.
		 * @param {String} str The string to escape.
		 * @returns {String} A copy of <code>str</code> with regex special characters escaped.
		 */
		function escape(str) {
			return str.replace(/([\\$\^*\/+?\.\(\)|{}\[\]])/g, "\\$&"); //$NON-NLS-0$
		}
	
		/**
		 * @memberOf orion.regex
		 * @function
		 * @static
		 * @description Parses a pattern and flags out of a regex literal string.
		 * @param {String} str The string to parse. Should look something like <code>"/ab+c/"</code> or <code>"/ab+c/i"</code>.
		 * @returns {Object} If <code>str</code> looks like a regex literal, returns an object with properties
		 * <code><dl>
		 * <dt>pattern</dt><dd>{String}</dd>
		 * <dt>flags</dt><dd>{String}</dd>
		 * </dl></code> otherwise returns <code>null</code>.
		 */
		function parse(str) {
			var regexp = /^\s*\/(.+)\/([gim]{0,3})\s*$/.exec(str);
			if (regexp) {
				return {
					pattern : regexp[1],
					flags : regexp[2]
				};
			}
			return null;
		}
	
		return {
			escape: escape,
			parse: parse
		};
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 94 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*******************************************************************************
	 * @license
	 * Copyright (c) 2012 IBM Corporation and others.
	 * All rights reserved. This program and the accompanying materials are made 
	 * available under the terms of the Eclipse Public License v1.0 
	 * (http://www.eclipse.org/legal/epl-v10.html), and the Eclipse Distribution 
	 * License v1.0 (http://www.eclipse.org/org/documents/edl-v10.html). 
	 *
	 * Contributors: IBM Corporation - initial API and implementation
	 *******************************************************************************/
	
	/*eslint-env browser, amd, navigator*/
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
	
		var userAgent = navigator.userAgent;
		var isIE = (userAgent.indexOf("MSIE") !== -1 || userAgent.indexOf("Trident") !== -1) ? document.documentMode : undefined; //$NON-NLS-1$ //$NON-NLS-0$
		var isFirefox = parseFloat(userAgent.split("Firefox/")[1] || userAgent.split("Minefield/")[1]) || undefined; //$NON-NLS-1$ //$NON-NLS-0$
		var isOpera = userAgent.indexOf("Opera") !== -1 ? parseFloat(userAgent.split("Version/")[1]) : undefined; //$NON-NLS-0$
		var isChrome = parseFloat(userAgent.split("Chrome/")[1]) || undefined; //$NON-NLS-0$
		var isSafari = userAgent.indexOf("Safari") !== -1 && !isChrome; //$NON-NLS-0$
		var isWebkit = parseFloat(userAgent.split("WebKit/")[1]) || undefined; //$NON-NLS-0$
		var isAndroid = userAgent.indexOf("Android") !== -1; //$NON-NLS-0$
		var isIPad = userAgent.indexOf("iPad") !== -1; //$NON-NLS-0$
		var isIPhone = userAgent.indexOf("iPhone") !== -1; //$NON-NLS-0$
		var isIOS = isIPad || isIPhone;
		var isMac = navigator.platform.indexOf("Mac") !== -1; //$NON-NLS-0$
		var isWindows = navigator.platform.indexOf("Win") !== -1; //$NON-NLS-0$
		var isLinux = navigator.platform.indexOf("Linux") !== -1; //$NON-NLS-0$
		var isTouch = typeof document !== "undefined" && "ontouchstart" in document.createElement("input"); //$NON-NLS-1$ //$NON-NLS-0$
		
		var platformDelimiter = isWindows ? "\r\n" : "\n"; //$NON-NLS-1$ //$NON-NLS-0$
	
		function formatMessage(msg) {
			var args = arguments;
			return msg.replace(/\$\{([^\}]+)\}/g, function(str, index) { return args[(index << 0) + 1]; });
		}
		
		var XHTML = "http://www.w3.org/1999/xhtml"; //$NON-NLS-0$
		function createElement(document, tagName) {
			if (document.createElementNS) {
				return document.createElementNS(XHTML, tagName);
			}
			return document.createElement(tagName);
		}
	
		return {
			formatMessage: formatMessage,
			
			createElement: createElement,
			
			/** Browsers */
			isIE: isIE,
			isFirefox: isFirefox,
			isOpera: isOpera,
			isChrome: isChrome,
			isSafari: isSafari,
			isWebkit: isWebkit,
			isAndroid: isAndroid,
			isIPad: isIPad,
			isIPhone: isIPhone,
			isIOS: isIOS,
			
			/** OSs */
			isMac: isMac,
			isWindows: isWindows,
			isLinux: isLinux,
	
			/** Capabilities */
			isTouch: isTouch,
	
			platformDelimiter: platformDelimiter
		};
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }
/******/ ])
});
;
//# sourceMappingURL=orionJavaScript.js.map